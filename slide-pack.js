(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var $, api, executeHooks, hl, processor;

hl = require('highlightjs');

$ = require('zeptojs');

$(function() {
  if ($.os.phone || $.os.tablet) {
    return $('body').addClass('mobile');
  }
});

processor = require('./slide-pack-processor');

api = require('./slide-pack-api');

require('./slide-pack-navigation');

require('./slide-pack-ui');

executeHooks = function() {
  var f;
  if (f = window._slide_pack_process_slides) {
    return f($('section'));
  }
};

$('[data-slide-pack]').each(function() {
  var $article, $slide, $slidePack, i, len, slide, slides;
  $slidePack = $(this);
  slides = processor.process($slidePack.text());
  $article = $('<article></article>');
  for (i = 0, len = slides.length; i < len; i++) {
    slide = slides[i];
    $slide = $('<section></section>').addClass(slide.cssClass);
    $slide.html(slide.html);
    $article.append($slide);
  }
  $('body').append($article);
  $slidePack.attr('data-slide-pack-processed', '');
  $slidePack.removeAttr('data-slide-pack');
  return executeHooks();
});

api.init({
  slidePack: $('article')
});

hl.initHighlightingOnLoad();



},{"./slide-pack-api":11,"./slide-pack-navigation":12,"./slide-pack-processor":13,"./slide-pack-ui":14,"highlightjs":2,"zeptojs":3}],2:[function(require,module,exports){
(function (global){
; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
!function(e){"undefined"!=typeof exports?e(exports):(window.hljs=e({}),"function"==typeof define&&define.amd&&define([],function(){return window.hljs}))}(function(e){function n(e){return e.replace(/&/gm,"&amp;").replace(/</gm,"&lt;").replace(/>/gm,"&gt;")}function t(e){return e.nodeName.toLowerCase()}function r(e,n){var t=e&&e.exec(n);return t&&0==t.index}function a(e){var n=(e.className+" "+(e.parentNode?e.parentNode.className:"")).split(/\s+/);return n=n.map(function(e){return e.replace(/^lang(uage)?-/,"")}),n.filter(function(e){return N(e)||/no(-?)highlight/.test(e)})[0]}function o(e,n){var t={};for(var r in e)t[r]=e[r];if(n)for(var r in n)t[r]=n[r];return t}function i(e){var n=[];return function r(e,a){for(var o=e.firstChild;o;o=o.nextSibling)3==o.nodeType?a+=o.nodeValue.length:1==o.nodeType&&(n.push({event:"start",offset:a,node:o}),a=r(o,a),t(o).match(/br|hr|img|input/)||n.push({event:"stop",offset:a,node:o}));return a}(e,0),n}function c(e,r,a){function o(){return e.length&&r.length?e[0].offset!=r[0].offset?e[0].offset<r[0].offset?e:r:"start"==r[0].event?e:r:e.length?e:r}function i(e){function r(e){return" "+e.nodeName+'="'+n(e.value)+'"'}l+="<"+t(e)+Array.prototype.map.call(e.attributes,r).join("")+">"}function c(e){l+="</"+t(e)+">"}function u(e){("start"==e.event?i:c)(e.node)}for(var s=0,l="",f=[];e.length||r.length;){var g=o();if(l+=n(a.substr(s,g[0].offset-s)),s=g[0].offset,g==e){f.reverse().forEach(c);do u(g.splice(0,1)[0]),g=o();while(g==e&&g.length&&g[0].offset==s);f.reverse().forEach(i)}else"start"==g[0].event?f.push(g[0].node):f.pop(),u(g.splice(0,1)[0])}return l+n(a.substr(s))}function u(e){function n(e){return e&&e.source||e}function t(t,r){return RegExp(n(t),"m"+(e.cI?"i":"")+(r?"g":""))}function r(a,i){if(!a.compiled){if(a.compiled=!0,a.k=a.k||a.bK,a.k){var c={},u=function(n,t){e.cI&&(t=t.toLowerCase()),t.split(" ").forEach(function(e){var t=e.split("|");c[t[0]]=[n,t[1]?Number(t[1]):1]})};"string"==typeof a.k?u("keyword",a.k):Object.keys(a.k).forEach(function(e){u(e,a.k[e])}),a.k=c}a.lR=t(a.l||/\b[A-Za-z0-9_]+\b/,!0),i&&(a.bK&&(a.b="\\b("+a.bK.split(" ").join("|")+")\\b"),a.b||(a.b=/\B|\b/),a.bR=t(a.b),a.e||a.eW||(a.e=/\B|\b/),a.e&&(a.eR=t(a.e)),a.tE=n(a.e)||"",a.eW&&i.tE&&(a.tE+=(a.e?"|":"")+i.tE)),a.i&&(a.iR=t(a.i)),void 0===a.r&&(a.r=1),a.c||(a.c=[]);var s=[];a.c.forEach(function(e){e.v?e.v.forEach(function(n){s.push(o(e,n))}):s.push("self"==e?a:e)}),a.c=s,a.c.forEach(function(e){r(e,a)}),a.starts&&r(a.starts,i);var l=a.c.map(function(e){return e.bK?"\\.?("+e.b+")\\.?":e.b}).concat([a.tE,a.i]).map(n).filter(Boolean);a.t=l.length?t(l.join("|"),!0):{exec:function(){return null}}}}r(e)}function s(e,t,a,o){function i(e,n){for(var t=0;t<n.c.length;t++)if(r(n.c[t].bR,e))return n.c[t]}function c(e,n){return r(e.eR,n)?e:e.eW?c(e.parent,n):void 0}function f(e,n){return!a&&r(n.iR,e)}function g(e,n){var t=x.cI?n[0].toLowerCase():n[0];return e.k.hasOwnProperty(t)&&e.k[t]}function p(e,n,t,r){var a=r?"":E.classPrefix,o='<span class="'+a,i=t?"":"</span>";return o+=e+'">',o+n+i}function d(){if(!w.k)return n(y);var e="",t=0;w.lR.lastIndex=0;for(var r=w.lR.exec(y);r;){e+=n(y.substr(t,r.index-t));var a=g(w,r);a?(B+=a[1],e+=p(a[0],n(r[0]))):e+=n(r[0]),t=w.lR.lastIndex,r=w.lR.exec(y)}return e+n(y.substr(t))}function h(){if(w.sL&&!R[w.sL])return n(y);var e=w.sL?s(w.sL,y,!0,L[w.sL]):l(y);return w.r>0&&(B+=e.r),"continuous"==w.subLanguageMode&&(L[w.sL]=e.top),p(e.language,e.value,!1,!0)}function v(){return void 0!==w.sL?h():d()}function b(e,t){var r=e.cN?p(e.cN,"",!0):"";e.rB?(M+=r,y=""):e.eB?(M+=n(t)+r,y=""):(M+=r,y=t),w=Object.create(e,{parent:{value:w}})}function m(e,t){if(y+=e,void 0===t)return M+=v(),0;var r=i(t,w);if(r)return M+=v(),b(r,t),r.rB?0:t.length;var a=c(w,t);if(a){var o=w;o.rE||o.eE||(y+=t),M+=v();do w.cN&&(M+="</span>"),B+=w.r,w=w.parent;while(w!=a.parent);return o.eE&&(M+=n(t)),y="",a.starts&&b(a.starts,""),o.rE?0:t.length}if(f(t,w))throw new Error('Illegal lexeme "'+t+'" for mode "'+(w.cN||"<unnamed>")+'"');return y+=t,t.length||1}var x=N(e);if(!x)throw new Error('Unknown language: "'+e+'"');u(x);for(var w=o||x,L={},M="",k=w;k!=x;k=k.parent)k.cN&&(M=p(k.cN,"",!0)+M);var y="",B=0;try{for(var C,j,I=0;;){if(w.t.lastIndex=I,C=w.t.exec(t),!C)break;j=m(t.substr(I,C.index-I),C[0]),I=C.index+j}m(t.substr(I));for(var k=w;k.parent;k=k.parent)k.cN&&(M+="</span>");return{r:B,value:M,language:e,top:w}}catch(A){if(-1!=A.message.indexOf("Illegal"))return{r:0,value:n(t)};throw A}}function l(e,t){t=t||E.languages||Object.keys(R);var r={r:0,value:n(e)},a=r;return t.forEach(function(n){if(N(n)){var t=s(n,e,!1);t.language=n,t.r>a.r&&(a=t),t.r>r.r&&(a=r,r=t)}}),a.language&&(r.second_best=a),r}function f(e){return E.tabReplace&&(e=e.replace(/^((<[^>]+>|\t)+)/gm,function(e,n){return n.replace(/\t/g,E.tabReplace)})),E.useBR&&(e=e.replace(/\n/g,"<br>")),e}function g(e,n,t){var r=n?x[n]:t,a=[e.trim()];return e.match(/(\s|^)hljs(\s|$)/)||a.push("hljs"),r&&a.push(r),a.join(" ").trim()}function p(e){var n=a(e);if(!/no(-?)highlight/.test(n)){var t;E.useBR?(t=document.createElementNS("http://www.w3.org/1999/xhtml","div"),t.innerHTML=e.innerHTML.replace(/\n/g,"").replace(/<br[ \/]*>/g,"\n")):t=e;var r=t.textContent,o=n?s(n,r,!0):l(r),u=i(t);if(u.length){var p=document.createElementNS("http://www.w3.org/1999/xhtml","div");p.innerHTML=o.value,o.value=c(u,i(p),r)}o.value=f(o.value),e.innerHTML=o.value,e.className=g(e.className,n,o.language),e.result={language:o.language,re:o.r},o.second_best&&(e.second_best={language:o.second_best.language,re:o.second_best.r})}}function d(e){E=o(E,e)}function h(){if(!h.called){h.called=!0;var e=document.querySelectorAll("pre code");Array.prototype.forEach.call(e,p)}}function v(){addEventListener("DOMContentLoaded",h,!1),addEventListener("load",h,!1)}function b(n,t){var r=R[n]=t(e);r.aliases&&r.aliases.forEach(function(e){x[e]=n})}function m(){return Object.keys(R)}function N(e){return R[e]||R[x[e]]}var E={classPrefix:"hljs-",tabReplace:null,useBR:!1,languages:void 0},R={},x={};return e.highlight=s,e.highlightAuto=l,e.fixMarkup=f,e.highlightBlock=p,e.configure=d,e.initHighlighting=h,e.initHighlightingOnLoad=v,e.registerLanguage=b,e.listLanguages=m,e.getLanguage=N,e.inherit=o,e.IR="[a-zA-Z][a-zA-Z0-9_]*",e.UIR="[a-zA-Z_][a-zA-Z0-9_]*",e.NR="\\b\\d+(\\.\\d+)?",e.CNR="(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",e.BNR="\\b(0b[01]+)",e.RSR="!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",e.BE={b:"\\\\[\\s\\S]",r:0},e.ASM={cN:"string",b:"'",e:"'",i:"\\n",c:[e.BE]},e.QSM={cN:"string",b:'"',e:'"',i:"\\n",c:[e.BE]},e.PWM={b:/\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such)\b/},e.CLCM={cN:"comment",b:"//",e:"$",c:[e.PWM]},e.CBCM={cN:"comment",b:"/\\*",e:"\\*/",c:[e.PWM]},e.HCM={cN:"comment",b:"#",e:"$",c:[e.PWM]},e.NM={cN:"number",b:e.NR,r:0},e.CNM={cN:"number",b:e.CNR,r:0},e.BNM={cN:"number",b:e.BNR,r:0},e.CSSNM={cN:"number",b:e.NR+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",r:0},e.RM={cN:"regexp",b:/\//,e:/\/[gimuy]*/,i:/\n/,c:[e.BE,{b:/\[/,e:/\]/,r:0,c:[e.BE]}]},e.TM={cN:"title",b:e.IR,r:0},e.UTM={cN:"title",b:e.UIR,r:0},e});hljs.registerLanguage("xml",function(){var t="[A-Za-z0-9\\._:-]+",e={b:/<\?(php)?(?!\w)/,e:/\?>/,sL:"php",subLanguageMode:"continuous"},c={eW:!0,i:/</,r:0,c:[e,{cN:"attribute",b:t,r:0},{b:"=",r:0,c:[{cN:"value",c:[e],v:[{b:/"/,e:/"/},{b:/'/,e:/'/},{b:/[^\s\/>]+/}]}]}]};return{aliases:["html","xhtml","rss","atom","xsl","plist"],cI:!0,c:[{cN:"doctype",b:"<!DOCTYPE",e:">",r:10,c:[{b:"\\[",e:"\\]"}]},{cN:"comment",b:"<!--",e:"-->",r:10},{cN:"cdata",b:"<\\!\\[CDATA\\[",e:"\\]\\]>",r:10},{cN:"tag",b:"<style(?=\\s|>|$)",e:">",k:{title:"style"},c:[c],starts:{e:"</style>",rE:!0,sL:"css"}},{cN:"tag",b:"<script(?=\\s|>|$)",e:">",k:{title:"script"},c:[c],starts:{e:"</script>",rE:!0,sL:"javascript"}},e,{cN:"pi",b:/<\?\w+/,e:/\?>/,r:10},{cN:"tag",b:"</?",e:"/?>",c:[{cN:"title",b:/[^ \/><\n\t]+/,r:0},c]}]}});hljs.registerLanguage("clojure-repl",function(){return{c:[{cN:"prompt",b:/^([\w.-]+|\s*#_)=>/,starts:{e:/$/,sL:"clojure",subLanguageMode:"continuous"}}]}});hljs.registerLanguage("cpp",function(t){var i={keyword:"false int float while private char catch export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const struct for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using true class asm case typeid short reinterpret_cast|10 default double register explicit signed typename try this switch continue wchar_t inline delete alignof char16_t char32_t constexpr decltype noexcept nullptr static_assert thread_local restrict _Bool complex _Complex _Imaginaryintmax_t uintmax_t int8_t uint8_t int16_t uint16_t int32_t uint32_t  int64_t uint64_tint_least8_t uint_least8_t int_least16_t uint_least16_t int_least32_t uint_least32_tint_least64_t uint_least64_t int_fast8_t uint_fast8_t int_fast16_t uint_fast16_t int_fast32_tuint_fast32_t int_fast64_t uint_fast64_t intptr_t uintptr_t atomic_bool atomic_char atomic_scharatomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llongatomic_ullong atomic_wchar_t atomic_char16_t atomic_char32_t atomic_intmax_t atomic_uintmax_tatomic_intptr_t atomic_uintptr_t atomic_size_t atomic_ptrdiff_t atomic_int_least8_t atomic_int_least16_tatomic_int_least32_t atomic_int_least64_t atomic_uint_least8_t atomic_uint_least16_t atomic_uint_least32_tatomic_uint_least64_t atomic_int_fast8_t atomic_int_fast16_t atomic_int_fast32_t atomic_int_fast64_tatomic_uint_fast8_t atomic_uint_fast16_t atomic_uint_fast32_t atomic_uint_fast64_t",built_in:"std string cin cout cerr clog stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf"};return{aliases:["c","h","c++","h++"],k:i,i:"</",c:[t.CLCM,t.CBCM,t.QSM,{cN:"string",b:"'\\\\?.",e:"'",i:"."},{cN:"number",b:"\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)"},t.CNM,{cN:"preprocessor",b:"#",e:"$",k:"if else elif endif define undef warning error line pragma",c:[{b:'include\\s*[<"]',e:'[>"]',k:"include",i:"\\n"},t.CLCM]},{cN:"stl_container",b:"\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",e:">",k:i,c:["self"]},{b:t.IR+"::"},{bK:"new throw return",r:0},{cN:"function",b:"("+t.IR+"\\s+)+"+t.IR+"\\s*\\(",rB:!0,e:/[{;=]/,eE:!0,k:i,c:[{b:t.IR+"\\s*\\(",rB:!0,c:[t.TM],r:0},{cN:"params",b:/\(/,e:/\)/,k:i,r:0,c:[t.CBCM]},t.CLCM,t.CBCM]}]}});hljs.registerLanguage("haskell",function(e){var i={cN:"comment",v:[{b:"--",e:"$"},{b:"{-",e:"-}",c:["self"]}]},c={cN:"pragma",b:"{-#",e:"#-}"},a={cN:"preprocessor",b:"^#",e:"$"},n={cN:"type",b:"\\b[A-Z][\\w']*",r:0},l={cN:"container",b:"\\(",e:"\\)",i:'"',c:[c,i,a,{cN:"type",b:"\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"},e.inherit(e.TM,{b:"[_a-z][\\w']*"})]},t={cN:"container",b:"{",e:"}",c:l.c};return{aliases:["hs"],k:"let in if then else case of where do module import hiding qualified type data newtype deriving class instance as default infix infixl infixr foreign export ccall stdcall cplusplus jvm dotnet safe unsafe family forall mdo proc rec",c:[{cN:"module",b:"\\bmodule\\b",e:"where",k:"module where",c:[l,i],i:"\\W\\.|;"},{cN:"import",b:"\\bimport\\b",e:"$",k:"import|0 qualified as hiding",c:[l,i],i:"\\W\\.|;"},{cN:"class",b:"^(\\s*)?(class|instance)\\b",e:"where",k:"class family instance where",c:[n,l,i]},{cN:"typedef",b:"\\b(data|(new)?type)\\b",e:"$",k:"data family type newtype deriving",c:[c,i,n,l,t]},{cN:"default",bK:"default",e:"$",c:[n,l,i]},{cN:"infix",bK:"infix infixl infixr",e:"$",c:[e.CNM,i]},{cN:"foreign",b:"\\bforeign\\b",e:"$",k:"foreign import export ccall stdcall cplusplus jvm dotnet safe unsafe",c:[n,e.QSM,i]},{cN:"shebang",b:"#!\\/usr\\/bin\\/env runhaskell",e:"$"},c,i,a,e.QSM,e.CNM,n,e.inherit(e.TM,{b:"^[_a-z][\\w']*"}),{b:"->|<-"}]}});hljs.registerLanguage("haml",function(){return{cI:!0,c:[{cN:"doctype",b:"^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$",r:10},{cN:"comment",b:"^\\s*(!=#|=#|-#|/).*$",r:0},{b:"^\\s*(-|=|!=)(?!#)",starts:{e:"\\n",sL:"ruby"}},{cN:"tag",b:"^\\s*%",c:[{cN:"title",b:"\\w+"},{cN:"value",b:"[#\\.]\\w+"},{b:"{\\s*",e:"\\s*}",eE:!0,c:[{b:":\\w+\\s*=>",e:",\\s+",rB:!0,eW:!0,c:[{cN:"symbol",b:":\\w+"},{cN:"string",b:'"',e:'"'},{cN:"string",b:"'",e:"'"},{b:"\\w+",r:0}]}]},{b:"\\(\\s*",e:"\\s*\\)",eE:!0,c:[{b:"\\w+\\s*=",e:"\\s+",rB:!0,eW:!0,c:[{cN:"attribute",b:"\\w+",r:0},{cN:"string",b:'"',e:'"'},{cN:"string",b:"'",e:"'"},{b:"\\w+",r:0}]}]}]},{cN:"bullet",b:"^\\s*[=~]\\s*",r:0},{b:"#{",starts:{e:"}",sL:"ruby"}}]}});hljs.registerLanguage("processing",function(e){return{k:{keyword:"BufferedReader PVector PFont PImage PGraphics HashMap boolean byte char color double float int long String Array FloatDict FloatList IntDict IntList JSONArray JSONObject Object StringDict StringList Table TableRow XML false synchronized int abstract float private char boolean static null if const for true while long throw strictfp finally protected import native final return void enum else break transient new catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private",constant:"P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI",variable:"displayHeight displayWidth mouseY mouseX mousePressed pmouseX pmouseY key keyCode pixels focused frameCount frameRate height width",title:"setup draw",built_in:"size createGraphics beginDraw createShape loadShape PShape arc ellipse line point quad rect triangle bezier bezierDetail bezierPoint bezierTangent curve curveDetail curvePoint curveTangent curveTightness shape shapeMode beginContour beginShape bezierVertex curveVertex endContour endShape quadraticVertex vertex ellipseMode noSmooth rectMode smooth strokeCap strokeJoin strokeWeight mouseClicked mouseDragged mouseMoved mousePressed mouseReleased mouseWheel keyPressed keyPressedkeyReleased keyTyped print println save saveFrame day hour millis minute month second year background clear colorMode fill noFill noStroke stroke alpha blue brightness color green hue lerpColor red saturation modelX modelY modelZ screenX screenY screenZ ambient emissive shininess specular add createImage beginCamera camera endCamera frustum ortho perspective printCamera printProjection cursor frameRate noCursor exit loop noLoop popStyle pushStyle redraw binary boolean byte char float hex int str unbinary unhex join match matchAll nf nfc nfp nfs split splitTokens trim append arrayCopy concat expand reverse shorten sort splice subset box sphere sphereDetail createInput createReader loadBytes loadJSONArray loadJSONObject loadStrings loadTable loadXML open parseXML saveTable selectFolder selectInput beginRaw beginRecord createOutput createWriter endRaw endRecord PrintWritersaveBytes saveJSONArray saveJSONObject saveStream saveStrings saveXML selectOutput popMatrix printMatrix pushMatrix resetMatrix rotate rotateX rotateY rotateZ scale shearX shearY translate ambientLight directionalLight lightFalloff lights lightSpecular noLights normal pointLight spotLight image imageMode loadImage noTint requestImage tint texture textureMode textureWrap blend copy filter get loadPixels set updatePixels blendMode loadShader PShaderresetShader shader createFont loadFont text textFont textAlign textLeading textMode textSize textWidth textAscent textDescent abs ceil constrain dist exp floor lerp log mag map max min norm pow round sq sqrt acos asin atan atan2 cos degrees radians sin tan noise noiseDetail noiseSeed random randomGaussian randomSeed"},c:[e.CLCM,e.CBCM,e.ASM,e.QSM,e.CNM]}});hljs.registerLanguage("bash",function(e){var t={cN:"variable",v:[{b:/\$[\w\d#@][\w\d_]*/},{b:/\$\{(.*?)\}/}]},s={cN:"string",b:/"/,e:/"/,c:[e.BE,t,{cN:"variable",b:/\$\(/,e:/\)/,c:[e.BE]}]},a={cN:"string",b:/'/,e:/'/};return{aliases:["sh","zsh"],l:/-?[a-z\.]+/,k:{keyword:"if then else elif fi for while in do done case esac function",literal:"true false",built_in:"break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp",operator:"-ne -eq -lt -gt -f -d -e -s -l -a"},c:[{cN:"shebang",b:/^#![^\n]+sh\s*$/,r:10},{cN:"function",b:/\w[\w\d_]*\s*\(\s*\)\s*\{/,rB:!0,c:[e.inherit(e.TM,{b:/\w[\w\d_]*/})],r:0},e.HCM,e.NM,s,a,t]}});hljs.registerLanguage("erlang-repl",function(e){return{k:{special_functions:"spawn spawn_link self",reserved:"after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if let not of or orelse|10 query receive rem try when xor"},c:[{cN:"prompt",b:"^[0-9]+> ",r:10},{cN:"comment",b:"%",e:"$"},{cN:"number",b:"\\b(\\d+#[a-fA-F0-9]+|\\d+(\\.\\d+)?([eE][-+]?\\d+)?)",r:0},e.ASM,e.QSM,{cN:"constant",b:"\\?(::)?([A-Z]\\w*(::)?)+"},{cN:"arrow",b:"->"},{cN:"ok",b:"ok"},{cN:"exclamation_mark",b:"!"},{cN:"function_or_atom",b:"(\\b[a-z'][a-zA-Z0-9_']*:[a-z'][a-zA-Z0-9_']*)|(\\b[a-z'][a-zA-Z0-9_']*)",r:0},{cN:"variable",b:"[A-Z][a-zA-Z0-9_']*",r:0}]}});hljs.registerLanguage("stylus",function(t){var e={cN:"variable",b:"\\$"+t.IR},o={cN:"hexcolor",b:"#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})",r:10},i=["charset","css","debug","extend","font-face","for","import","include","media","mixin","page","warn","while"],r=["after","before","first-letter","first-line","active","first-child","focus","hover","lang","link","visited"],n=["a","abbr","address","article","aside","audio","b","blockquote","body","button","canvas","caption","cite","code","dd","del","details","dfn","div","dl","dt","em","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","html","i","iframe","img","input","ins","kbd","label","legend","li","mark","menu","nav","object","ol","p","q","quote","samp","section","span","strong","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","ul","var","video"],a="[\\.\\s\\n\\[\\:,]",l=["align-content","align-items","align-self","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","auto","backface-visibility","background","background-attachment","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","border","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","clear","clip","clip-path","color","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","content","counter-increment","counter-reset","cursor","direction","display","empty-cells","filter","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","font","font-family","font-feature-settings","font-kerning","font-language-override","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-variant-ligatures","font-weight","height","hyphens","icon","image-orientation","image-rendering","image-resolution","ime-mode","inherit","initial","justify-content","left","letter-spacing","line-height","list-style","list-style-image","list-style-position","list-style-type","margin","margin-bottom","margin-left","margin-right","margin-top","marks","mask","max-height","max-width","min-height","min-width","nav-down","nav-index","nav-left","nav-right","nav-up","none","normal","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-wrap","overflow-x","overflow-y","padding","padding-bottom","padding-left","padding-right","padding-top","page-break-after","page-break-before","page-break-inside","perspective","perspective-origin","pointer-events","position","quotes","resize","right","tab-size","table-layout","text-align","text-align-last","text-decoration","text-decoration-color","text-decoration-line","text-decoration-style","text-indent","text-overflow","text-rendering","text-shadow","text-transform","text-underline-position","top","transform","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","vertical-align","visibility","white-space","widows","width","word-break","word-spacing","word-wrap","z-index"],d=["\\{","\\}","\\?","(\\bReturn\\b)","(\\bEnd\\b)","(\\bend\\b)",";","#\\s","\\*\\s","===\\s","\\|"];return{aliases:["styl"],cI:!1,i:"("+d.join("|")+")",k:"if else for in",c:[t.QSM,t.ASM,t.CLCM,t.CBCM,o,{b:"\\.[a-zA-Z][a-zA-Z0-9_-]*"+a,rB:!0,c:[{cN:"class",b:"\\.[a-zA-Z][a-zA-Z0-9_-]*"}]},{b:"\\#[a-zA-Z][a-zA-Z0-9_-]*"+a,rB:!0,c:[{cN:"id",b:"\\#[a-zA-Z][a-zA-Z0-9_-]*"}]},{b:"\\b("+n.join("|")+")"+a,rB:!0,c:[{cN:"tag",b:"\\b[a-zA-Z][a-zA-Z0-9_-]*"}]},{cN:"pseudo",b:"&?:?:\\b("+r.join("|")+")"+a},{cN:"at_rule",b:"@("+i.join("|")+")\\b"},e,t.CSSNM,t.NM,{cN:"function",b:"\\b[a-zA-Z][a-zA-Z0-9_-]*\\(.*\\)",i:"[\\n]",rB:!0,c:[{cN:"title",b:"\\b[a-zA-Z][a-zA-Z0-9_-]*"},{cN:"params",b:/\(/,e:/\)/,c:[o,e,t.ASM,t.CSSNM,t.NM,t.QSM]}]},{cN:"attribute",b:"\\b("+l.reverse().join("|")+")\\b"}]}});hljs.registerLanguage("less",function(e){var r="[\\w-]+",t="("+r+"|@{"+r+"})+",a=[],c=[],n=function(e){return{cN:"string",b:"~?"+e+".*?"+e}},i=function(e,r,t){return{cN:e,b:r,r:t}},s=function(r,t,a){return e.inherit({cN:r,b:t+"\\(",e:"\\(",rB:!0,eE:!0,r:0},a)},b={b:"\\(",e:"\\)",c:c,r:0};c.push(e.CLCM,e.CBCM,n("'"),n('"'),e.CSSNM,i("hexcolor","#[0-9A-Fa-f]+\\b"),s("function","(url|data-uri)",{starts:{cN:"string",e:"[\\)\\n]",eE:!0}}),s("function",r),b,i("variable","@@?"+r,10),i("variable","@{"+r+"}"),i("built_in","~?`[^`]*?`"),{cN:"attribute",b:r+"\\s*:",e:":",rB:!0,eE:!0});var o=c.concat({b:"{",e:"}",c:a}),u={bK:"when",eW:!0,c:[{bK:"and not"}].concat(c)},C={cN:"attribute",b:t,e:":",eE:!0,c:[e.CLCM,e.CBCM],i:/\S/,starts:{e:"[;}]",rE:!0,c:c,i:"[<=$]"}},l={cN:"at_rule",b:"@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b",starts:{e:"[;{}]",rE:!0,c:c,r:0}},d={cN:"variable",v:[{b:"@"+r+"\\s*:",r:15},{b:"@"+r}],starts:{e:"[;}]",rE:!0,c:o}},p={v:[{b:"[\\.#:&\\[]",e:"[;{}]"},{b:t+"[^;]*{",e:"{"}],rB:!0,rE:!0,i:"[<='$\"]",c:[e.CLCM,e.CBCM,u,i("keyword","all\\b"),i("variable","@{"+r+"}"),i("tag",t+"%?",0),i("id","#"+t),i("class","\\."+t,0),i("keyword","&",0),s("pseudo",":not"),s("keyword",":extend"),i("pseudo","::?"+t),{cN:"attr_selector",b:"\\[",e:"\\]"},{b:"\\(",e:"\\)",c:o},{b:"!important"}]};return a.push(e.CLCM,e.CBCM,l,d,p,C),{cI:!0,i:"[=>'/<($\"]",c:a}});hljs.registerLanguage("scala",function(e){var t={cN:"annotation",b:"@[A-Za-z]+"},a={cN:"string",b:'u?r?"""',e:'"""',r:10},r={cN:"symbol",b:"'\\w[\\w\\d_]*(?!')"},c={cN:"type",b:"\\b[A-Z][A-Za-z0-9_]*",r:0},i={cN:"title",b:/[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,r:0},l={cN:"class",bK:"class object trait type",e:/[:={\[(\n;]/,c:[{cN:"keyword",bK:"extends with",r:10},i]},n={cN:"function",bK:"def val",e:/[:={\[(\n;]/,c:[i]};return{k:{literal:"true false null",keyword:"type yield lazy override def with val var sealed abstract private trait object if forSome for while throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit"},c:[e.CLCM,e.CBCM,a,e.QSM,r,c,n,l,e.CNM,t]}});hljs.registerLanguage("java",function(e){var a=e.UIR+"(<"+e.UIR+">)?",t="false synchronized int abstract float private char boolean static null if const for true while long strictfp finally protected import native final void enum else break transient catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private",c="(\\b(0b[01_]+)|\\b0[xX][a-fA-F0-9_]+|(\\b[\\d_]+(\\.[\\d_]*)?|\\.[\\d_]+)([eE][-+]?\\d+)?)[lLfF]?",r={cN:"number",b:c,r:0};return{aliases:["jsp"],k:t,i:/<\//,c:[{cN:"javadoc",b:"/\\*\\*",e:"\\*/",r:0,c:[{cN:"javadoctag",b:"(^|\\s)@[A-Za-z]+"}]},e.CLCM,e.CBCM,e.ASM,e.QSM,{cN:"class",bK:"class interface",e:/[{;=]/,eE:!0,k:"class interface",i:/[:"\[\]]/,c:[{bK:"extends implements"},e.UTM]},{bK:"new throw return",r:0},{cN:"function",b:"("+a+"\\s+)+"+e.UIR+"\\s*\\(",rB:!0,e:/[{;=]/,eE:!0,k:t,c:[{b:e.UIR+"\\s*\\(",rB:!0,r:0,c:[e.UTM]},{cN:"params",b:/\(/,e:/\)/,k:t,r:0,c:[e.ASM,e.QSM,e.CNM,e.CBCM]},e.CLCM,e.CBCM]},r,{cN:"annotation",b:"@[A-Za-z]+"}]}});hljs.registerLanguage("objectivec",function(e){var t={keyword:"int float while char export sizeof typedef const struct for union unsigned long volatile static bool mutable if do return goto void enum else break extern asm case short default double register explicit signed typename this switch continue wchar_t inline readonly assign readwrite self @synchronized id typeof nonatomic super unichar IBOutlet IBAction strong weak copy in out inout bycopy byref oneway __strong __weak __block __autoreleasing @private @protected @public @try @property @end @throw @catch @finally @autoreleasepool @synthesize @dynamic @selector @optional @required",literal:"false true FALSE TRUE nil YES NO NULL",built_in:"NSString NSData NSDictionary CGRect CGPoint UIButton UILabel UITextView UIWebView MKMapView NSView NSViewController NSWindow NSWindowController NSSet NSUUID NSIndexSet UISegmentedControl NSObject UITableViewDelegate UITableViewDataSource NSThread UIActivityIndicator UITabbar UIToolBar UIBarButtonItem UIImageView NSAutoreleasePool UITableView BOOL NSInteger CGFloat NSException NSLog NSMutableString NSMutableArray NSMutableDictionary NSURL NSIndexPath CGSize UITableViewCell UIView UIViewController UINavigationBar UINavigationController UITabBarController UIPopoverController UIPopoverControllerDelegate UIImage NSNumber UISearchBar NSFetchedResultsController NSFetchedResultsChangeType UIScrollView UIScrollViewDelegate UIEdgeInsets UIColor UIFont UIApplication NSNotFound NSNotificationCenter NSNotification UILocalNotification NSBundle NSFileManager NSTimeInterval NSDate NSCalendar NSUserDefaults UIWindow NSRange NSArray NSError NSURLRequest NSURLConnection NSURLSession NSURLSessionDataTask NSURLSessionDownloadTask NSURLSessionUploadTask NSURLResponseUIInterfaceOrientation MPMoviePlayerController dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once"},o=/[a-zA-Z@][a-zA-Z0-9_]*/,a="@interface @class @protocol @implementation";return{aliases:["m","mm","objc","obj-c"],k:t,l:o,i:"</",c:[e.CLCM,e.CBCM,e.CNM,e.QSM,{cN:"string",v:[{b:'@"',e:'"',i:"\\n",c:[e.BE]},{b:"'",e:"[^\\\\]'",i:"[^\\\\][^']"}]},{cN:"preprocessor",b:"#",e:"$",c:[{cN:"title",v:[{b:'"',e:'"'},{b:"<",e:">"}]}]},{cN:"class",b:"("+a.split(" ").join("|")+")\\b",e:"({|$)",eE:!0,k:a,l:o,c:[e.UTM]},{cN:"variable",b:"\\."+e.UIR,r:0}]}});hljs.registerLanguage("handlebars",function(){var e="each in with if else unless bindattr action collection debugger log outlet template unbound view yield";return{aliases:["hbs","html.hbs","html.handlebars"],cI:!0,sL:"xml",subLanguageMode:"continuous",c:[{cN:"expression",b:"{{",e:"}}",c:[{cN:"begin-block",b:"#[a-zA-Z- .]+",k:e},{cN:"string",b:'"',e:'"'},{cN:"end-block",b:"\\/[a-zA-Z- .]+",k:e},{cN:"variable",b:"[a-zA-Z-.]+",k:e}]}]}});hljs.registerLanguage("php",function(e){var c={cN:"variable",b:"\\$+[a-zA-Z_-ÿ][a-zA-Z0-9_-ÿ]*"},i={cN:"preprocessor",b:/<\?(php)?|\?>/},a={cN:"string",c:[e.BE,i],v:[{b:'b"',e:'"'},{b:"b'",e:"'"},e.inherit(e.ASM,{i:null}),e.inherit(e.QSM,{i:null})]},n={v:[e.BNM,e.CNM]};return{aliases:["php3","php4","php5","php6"],cI:!0,k:"and include_once list abstract global private echo interface as static endswitch array null if endwhile or const for endforeach self var while isset public protected exit foreach throw elseif include __FILE__ empty require_once do xor return parent clone use __CLASS__ __LINE__ else break print eval new catch __METHOD__ case exception default die require __FUNCTION__ enddeclare final try switch continue endfor endif declare unset true false trait goto instanceof insteadof __DIR__ __NAMESPACE__ yield finally",c:[e.CLCM,e.HCM,{cN:"comment",b:"/\\*",e:"\\*/",c:[{cN:"phpdoc",b:"\\s@[A-Za-z]+"},i]},{cN:"comment",b:"__halt_compiler.+?;",eW:!0,k:"__halt_compiler",l:e.UIR},{cN:"string",b:"<<<['\"]?\\w+['\"]?$",e:"^\\w+;",c:[e.BE]},i,c,{b:/->+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/},{cN:"function",bK:"function",e:/[;{]/,eE:!0,i:"\\$|\\[|%",c:[e.UTM,{cN:"params",b:"\\(",e:"\\)",c:["self",c,e.CBCM,a,n]}]},{cN:"class",bK:"class interface",e:"{",eE:!0,i:/[:\(\$"]/,c:[{bK:"extends implements"},e.UTM]},{bK:"namespace",e:";",i:/[\.']/,c:[e.UTM]},{bK:"use",e:";",c:[e.UTM]},{b:"=>"},a,n]}});hljs.registerLanguage("matlab",function(e){var a=[e.CNM,{cN:"string",b:"'",e:"'",c:[e.BE,{b:"''"}]}],s={r:0,c:[{cN:"operator",b:/'['\.]*/}]};return{k:{keyword:"break case catch classdef continue else elseif end enumerated events for function global if methods otherwise parfor persistent properties return spmd switch try while",built_in:"sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i inf nan isnan isinf isfinite j why compan gallery hadamard hankel hilb invhilb magic pascal rosser toeplitz vander wilkinson"},i:'(//|"|#|/\\*|\\s+/\\w+)',c:[{cN:"function",bK:"function",e:"$",c:[e.UTM,{cN:"params",b:"\\(",e:"\\)"},{cN:"params",b:"\\[",e:"\\]"}]},{b:/[a-zA-Z_][a-zA-Z_0-9]*'['\.]*/,rB:!0,r:0,c:[{b:/[a-zA-Z_][a-zA-Z_0-9]*/,r:0},s.c[0]]},{cN:"matrix",b:"\\[",e:"\\]",c:a,r:0,starts:s},{cN:"cell",b:"\\{",e:/\}/,c:a,r:0,i:/:/,starts:s},{b:/\)/,r:0,starts:s},{cN:"comment",b:"\\%",e:"$"}].concat(a)}});hljs.registerLanguage("coffeescript",function(e){var c={keyword:"in if for while finally new do return else break catch instanceof throw try this switch continue typeof delete debugger super then unless until loop of by when and or is isnt not",literal:"true false null undefined yes no on off",reserved:"case default function var void with const let enum export import native __hasProp __extends __slice __bind __indexOf",built_in:"npm require console print module global window document"},n="[A-Za-z$_][0-9A-Za-z$_]*",t={cN:"subst",b:/#\{/,e:/}/,k:c},r=[e.BNM,e.inherit(e.CNM,{starts:{e:"(\\s*/)?",r:0}}),{cN:"string",v:[{b:/'''/,e:/'''/,c:[e.BE]},{b:/'/,e:/'/,c:[e.BE]},{b:/"""/,e:/"""/,c:[e.BE,t]},{b:/"/,e:/"/,c:[e.BE,t]}]},{cN:"regexp",v:[{b:"///",e:"///",c:[t,e.HCM]},{b:"//[gim]*",r:0},{b:/\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/}]},{cN:"property",b:"@"+n},{b:"`",e:"`",eB:!0,eE:!0,sL:"javascript"}];t.c=r;var i=e.inherit(e.TM,{b:n}),s="(\\(.*\\))?\\s*\\B[-=]>",o={cN:"params",b:"\\([^\\(]",rB:!0,c:[{b:/\(/,e:/\)/,k:c,c:["self"].concat(r)}]};return{aliases:["coffee","cson","iced"],k:c,i:/\/\*/,c:r.concat([{cN:"comment",b:"###",e:"###",c:[e.PWM]},e.HCM,{cN:"function",b:"^\\s*"+n+"\\s*=\\s*"+s,e:"[-=]>",rB:!0,c:[i,o]},{b:/[:\(,=]\s*/,r:0,c:[{cN:"function",b:s,e:"[-=]>",rB:!0,c:[o]}]},{cN:"class",bK:"class",e:"$",i:/[:="\[\]]/,c:[{bK:"extends",eW:!0,i:/[:="\[\]]/,c:[i]},i]},{cN:"attribute",b:n+":",e:":",rB:!0,rE:!0,r:0}])}});hljs.registerLanguage("ini",function(e){return{cI:!0,i:/\S/,c:[{cN:"comment",b:";",e:"$"},{cN:"title",b:"^\\[",e:"\\]"},{cN:"setting",b:"^[a-z0-9\\[\\]_-]+[ \\t]*=[ \\t]*",e:"$",c:[{cN:"value",eW:!0,k:"on off true false yes no",c:[e.QSM,e.NM],r:0}]}]}});hljs.registerLanguage("groovy",function(e){return{k:{typename:"byte short char int long boolean float double void",literal:"true false null",keyword:"def as in assert trait super this abstract static volatile transient public private protected synchronized final class interface enum if else for while switch case break default continue throw throws try catch finally implements extends new import package return instanceof"},c:[e.CLCM,{cN:"javadoc",b:"/\\*\\*",e:"\\*//*",r:0,c:[{cN:"javadoctag",b:"(^|\\s)@[A-Za-z]+"}]},e.CBCM,{cN:"string",b:'"""',e:'"""'},{cN:"string",b:"'''",e:"'''"},{cN:"string",b:"\\$/",e:"/\\$",r:10},e.ASM,{cN:"regexp",b:/~?\/[^\/\n]+\//,c:[e.BE]},e.QSM,{cN:"shebang",b:"^#!/usr/bin/env",e:"$",i:"\n"},e.BNM,{cN:"class",bK:"class interface trait enum",e:"{",i:":",c:[{bK:"extends implements"},e.UTM]},e.CNM,{cN:"annotation",b:"@[A-Za-z]+"},{cN:"string",b:/[^\?]{0}[A-Za-z0-9_$]+ *:/},{b:/\?/,e:/\:/},{cN:"label",b:"^\\s*[A-Za-z0-9_$]+:",r:0}]}});hljs.registerLanguage("r",function(e){var r="([a-zA-Z]|\\.[a-zA-Z.])[a-zA-Z0-9._]*";return{c:[e.HCM,{b:r,l:r,k:{keyword:"function if in break next repeat else for return switch while try tryCatch|10 stop warning require library attach detach source setMethod setGeneric setGroupGeneric setClass ...|10",literal:"NULL NA TRUE FALSE T F Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10"},r:0},{cN:"number",b:"0[xX][0-9a-fA-F]+[Li]?\\b",r:0},{cN:"number",b:"\\d+(?:[eE][+\\-]?\\d*)?L\\b",r:0},{cN:"number",b:"\\d+\\.(?!\\d)(?:i\\b)?",r:0},{cN:"number",b:"\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",r:0},{cN:"number",b:"\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b",r:0},{b:"`",e:"`",r:0},{cN:"string",c:[e.BE],v:[{b:'"',e:'"'},{b:"'",e:"'"}]}]}});hljs.registerLanguage("elixir",function(e){var r="[a-zA-Z_][a-zA-Z0-9_]*(\\!|\\?)?",b="[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?",n="and false then defined module in return redo retry end for true self when next until do begin unless nil break not case cond alias while ensure or include use alias fn quote",c={cN:"subst",b:"#\\{",e:"}",l:r,k:n},a={cN:"string",c:[e.BE,c],v:[{b:/'/,e:/'/},{b:/"/,e:/"/}]},s={eW:!0,rE:!0,l:r,k:n,r:0},i={cN:"function",bK:"def defmacro",e:/\bdo\b/,c:[e.inherit(e.TM,{b:b,starts:s})]},l=e.inherit(i,{cN:"class",bK:"defmodule defrecord",e:/\bdo\b|$|;/}),t=[a,e.HCM,l,i,{cN:"constant",b:"(\\b[A-Z_]\\w*(.)?)+",r:0},{cN:"symbol",b:":",c:[a,{b:b}],r:0},{cN:"symbol",b:r+":",r:0},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},{cN:"variable",b:"(\\$\\W)|((\\$|\\@\\@?)(\\w+))"},{b:"->"},{b:"("+e.RSR+")\\s*",c:[e.HCM,{cN:"regexp",i:"\\n",c:[e.BE,c],v:[{b:"/",e:"/[a-z]*"},{b:"%r\\[",e:"\\][a-z]*"}]}],r:0}];return c.c=t,s.c=t,{l:r,k:n,c:t}});hljs.registerLanguage("go",function(e){var t={keyword:"break default func interface select case map struct chan else goto package switch const fallthrough if range type continue for import return var go defer",constant:"true false iota nil",typename:"bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 uint16 uint32 uint64 int uint uintptr rune",built_in:"append cap close complex copy imag len make new panic print println real recover delete"};return{aliases:["golang"],k:t,i:"</",c:[e.CLCM,e.CBCM,e.QSM,{cN:"string",b:"'",e:"[^\\\\]'"},{cN:"string",b:"`",e:"`"},{cN:"number",b:e.CNR+"[dflsi]?",r:0},e.CNM]}});hljs.registerLanguage("sql",function(e){var t={cN:"comment",b:"--",e:"$"};return{cI:!0,i:/[<>]/,c:[{cN:"operator",bK:"begin end start commit rollback savepoint lock alter create drop rename call delete do handler insert load replace select truncate update set show pragma grant merge describe use explain help declare prepare execute deallocate savepoint release unlock purge reset change stop analyze cache flush optimize repair kill install uninstall checksum restore check backup",e:/;/,eW:!0,k:{keyword:"abs absolute acos action add adddate addtime aes_decrypt aes_encrypt after aggregate all allocate alter analyze and any are as asc ascii asin assertion at atan atan2 atn2 authorization authors avg backup before begin benchmark between bin binlog bit_and bit_count bit_length bit_or bit_xor both by cache call cascade cascaded case cast catalog ceil ceiling chain change changed char_length character_length charindex charset check checksum checksum_agg choose close coalesce coercibility collate collation collationproperty column columns columns_updated commit compress concat concat_ws concurrent connect connection connection_id consistent constraint constraints continue contributors conv convert convert_tz corresponding cos cot count count_big crc32 create cross cume_dist curdate current current_date current_time current_timestamp current_user cursor curtime data database databases datalength date_add date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts datetimeoffsetfromparts day dayname dayofmonth dayofweek dayofyear deallocate declare decode default deferrable deferred degrees delayed delete des_decrypt des_encrypt des_key_file desc describe descriptor diagnostics difference disconnect distinct distinctrow div do domain double drop dumpfile each else elt enclosed encode encrypt end end-exec engine engines eomonth errors escape escaped event eventdata events except exception exec execute exists exp explain export_set extended external extract fast fetch field fields find_in_set first first_value floor flush for force foreign format found found_rows from from_base64 from_days from_unixtime full function get get_format get_lock getdate getutcdate global go goto grant grants greatest group group_concat grouping grouping_id gtid_subset gtid_subtract handler having help hex high_priority hosts hour ident_current ident_incr ident_seed identified identity if ifnull ignore iif ilike immediate in index indicator inet6_aton inet6_ntoa inet_aton inet_ntoa infile initially inner innodb input insert install instr intersect into is is_free_lock is_ipv4 is_ipv4_compat is_ipv4_mapped is_not is_not_null is_used_lock isdate isnull isolation join key kill language last last_day last_insert_id last_value lcase lead leading least leaves left len lenght level like limit lines ln load load_file local localtime localtimestamp locate lock log log10 log2 logfile logs low_priority lower lpad ltrim make_set makedate maketime master master_pos_wait match matched max md5 medium merge microsecond mid min minute mod mode module month monthname mutex name_const names national natural nchar next no no_write_to_binlog not now nullif nvarchar oct octet_length of old_password on only open optimize option optionally or ord order outer outfile output pad parse partial partition password patindex percent_rank percentile_cont percentile_disc period_add period_diff pi plugin position pow power pragma precision prepare preserve primary prior privileges procedure procedure_analyze processlist profile profiles public publishingservername purge quarter query quick quote quotename radians rand read references regexp relative relaylog release release_lock rename repair repeat replace replicate reset restore restrict return returns reverse revoke right rlike rollback rollup round row row_count rows rpad rtrim savepoint schema scroll sec_to_time second section select serializable server session session_user set sha sha1 sha2 share show sign sin size slave sleep smalldatetimefromparts snapshot some soname soundex sounds_like space sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sql_variant_property sqlstate sqrt square start starting status std stddev stddev_pop stddev_samp stdev stdevp stop str str_to_date straight_join strcmp string stuff subdate substr substring subtime subtring_index sum switchoffset sysdate sysdatetime sysdatetimeoffset system_user sysutcdatetime table tables tablespace tan temporary terminated tertiary_weights then time time_format time_to_sec timediff timefromparts timestamp timestampadd timestampdiff timezone_hour timezone_minute to to_base64 to_days to_seconds todatetimeoffset trailing transaction translation trigger trigger_nestlevel triggers trim truncate try_cast try_convert try_parse ucase uncompress uncompressed_length unhex unicode uninstall union unique unix_timestamp unknown unlock update upgrade upped upper usage use user user_resources using utc_date utc_time utc_timestamp uuid uuid_short validate_password_strength value values var var_pop var_samp variables variance varp version view warnings week weekday weekofyear weight_string when whenever where with work write xml xor year yearweek zon",literal:"true false null",built_in:"array bigint binary bit blob boolean char character date dec decimal float int integer interval number numeric real serial smallint varchar varying int8 serial8 text"},c:[{cN:"string",b:"'",e:"'",c:[e.BE,{b:"''"}]},{cN:"string",b:'"',e:'"',c:[e.BE,{b:'""'}]},{cN:"string",b:"`",e:"`",c:[e.BE]},e.CNM,e.CBCM,t]},e.CBCM,t]}});hljs.registerLanguage("tex",function(){var c={cN:"command",b:"\\\\[a-zA-Zа-яА-я]+[\\*]?"},e={cN:"command",b:"\\\\[^a-zA-Zа-яА-я0-9]"},m={cN:"special",b:"[{}\\[\\]\\&#~]",r:0};return{c:[{b:"\\\\[a-zA-Zа-яА-я]+[\\*]? *= *-?\\d*\\.?\\d+(pt|pc|mm|cm|in|dd|cc|ex|em)?",rB:!0,c:[c,e,{cN:"number",b:" *=",e:"-?\\d*\\.?\\d+(pt|pc|mm|cm|in|dd|cc|ex|em)?",eB:!0}],r:10},c,e,m,{cN:"formula",b:"\\$\\$",e:"\\$\\$",c:[c,e,m],r:0},{cN:"formula",b:"\\$",e:"\\$",c:[c,e,m],r:0},{cN:"comment",b:"%",e:"$",r:0}]}});hljs.registerLanguage("http",function(){return{i:"\\S",c:[{cN:"status",b:"^HTTP/[0-9\\.]+",e:"$",c:[{cN:"number",b:"\\b\\d{3}\\b"}]},{cN:"request",b:"^[A-Z]+ (.*?) HTTP/[0-9\\.]+$",rB:!0,e:"$",c:[{cN:"string",b:" ",e:" ",eB:!0,eE:!0}]},{cN:"attribute",b:"^\\w",e:": ",eE:!0,i:"\\n|\\s|=",starts:{cN:"string",e:"$"}},{b:"\\n\\n",starts:{sL:"",eW:!0}}]}});hljs.registerLanguage("lisp",function(e){var b="[a-zA-Z_\\-\\+\\*\\/\\<\\=\\>\\&\\#][a-zA-Z0-9_\\-\\+\\*\\/\\<\\=\\>\\&\\#!]*",c="\\|[^]*?\\|",r="(\\-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s)(\\+|\\-)?\\d+)?",t={cN:"shebang",b:"^#!",e:"$"},a={cN:"literal",b:"\\b(t{1}|nil)\\b"},i={cN:"number",v:[{b:r,r:0},{b:"#b[0-1]+(/[0-1]+)?"},{b:"#o[0-7]+(/[0-7]+)?"},{b:"#x[0-9a-f]+(/[0-9a-f]+)?"},{b:"#c\\("+r+" +"+r,e:"\\)"}]},l=e.inherit(e.QSM,{i:null}),n={cN:"comment",b:";",e:"$",r:0},N={cN:"variable",b:"\\*",e:"\\*"},d={cN:"keyword",b:"[:&]"+b},o={b:c},u={b:"\\(",e:"\\)",c:["self",a,l,i]},s={cN:"quoted",c:[i,l,N,d,u],v:[{b:"['`]\\(",e:"\\)"},{b:"\\(quote ",e:"\\)",k:"quote"},{b:"'"+c}]},f={cN:"quoted",b:"'"+b},v={cN:"list",b:"\\(",e:"\\)"},g={eW:!0,r:0};return v.c=[{cN:"keyword",v:[{b:b},{b:c}]},g],g.c=[s,f,v,a,i,l,n,N,d,o],{i:/\S/,c:[i,t,a,l,n,s,f,v]}});hljs.registerLanguage("erlang",function(e){var r="[a-z'][a-zA-Z0-9_']*",c="("+r+":"+r+"|"+r+")",a={keyword:"after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if let not of orelse|10 query receive rem try when xor",literal:"false true"},n={cN:"comment",b:"%",e:"$"},b={cN:"number",b:"\\b(\\d+#[a-fA-F0-9]+|\\d+(\\.\\d+)?([eE][-+]?\\d+)?)",r:0},i={b:"fun\\s+"+r+"/\\d+"},o={b:c+"\\(",e:"\\)",rB:!0,r:0,c:[{cN:"function_name",b:c,r:0},{b:"\\(",e:"\\)",eW:!0,rE:!0,r:0}]},d={cN:"tuple",b:"{",e:"}",r:0},t={cN:"variable",b:"\\b_([A-Z][A-Za-z0-9_]*)?",r:0},l={cN:"variable",b:"[A-Z][a-zA-Z0-9_]*",r:0},f={b:"#"+e.UIR,r:0,rB:!0,c:[{cN:"record_name",b:"#"+e.UIR,r:0},{b:"{",e:"}",r:0}]},s={bK:"fun receive if try case",e:"end",k:a};s.c=[n,i,e.inherit(e.ASM,{cN:""}),s,o,e.QSM,b,d,t,l,f];var u=[n,i,s,o,e.QSM,b,d,t,l,f];o.c[1].c=u,d.c=u,f.c[1].c=u;var v={cN:"params",b:"\\(",e:"\\)",c:u};return{aliases:["erl"],k:a,i:"(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))",c:[{cN:"function",b:"^"+r+"\\s*\\(",e:"->",rB:!0,i:"\\(|#|//|/\\*|\\\\|:|;",c:[v,e.inherit(e.TM,{b:r})],starts:{e:";|\\.",k:a,c:u}},n,{cN:"pp",b:"^-",e:"\\.",r:0,eE:!0,rB:!0,l:"-"+e.IR,k:"-module -record -undef -export -ifdef -ifndef -author -copyright -doc -vsn -import -include -include_lib -compile -define -else -endif -file -behaviour -behavior -spec",c:[v]},b,e.QSM,f,t,l,d,{b:/\.$/}]}});hljs.registerLanguage("makefile",function(e){var a={cN:"variable",b:/\$\(/,e:/\)/,c:[e.BE]};return{aliases:["mk","mak"],c:[e.HCM,{b:/^\w+\s*\W*=/,rB:!0,r:0,starts:{cN:"constant",e:/\s*\W*=/,eE:!0,starts:{e:/$/,r:0,c:[a]}}},{cN:"title",b:/^[\w]+:\s*$/},{cN:"phony",b:/^\.PHONY:/,e:/$/,k:".PHONY",l:/[\.\w]+/},{b:/^\t+/,e:/$/,r:0,c:[e.QSM,a]}]}});hljs.registerLanguage("perl",function(e){var t="getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qqfileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent shutdown dump chomp connect getsockname die socketpair close flock exists index shmgetsub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedirioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when",r={cN:"subst",b:"[$@]\\{",e:"\\}",k:t},s={b:"->{",e:"}"},n={cN:"variable",v:[{b:/\$\d/},{b:/[\$\%\@](\^\w\b|#\w+(\:\:\w+)*|{\w+}|\w+(\:\:\w*)*)/},{b:/[\$\%\@][^\s\w{]/,r:0}]},o={cN:"comment",b:"^(__END__|__DATA__)",e:"\\n$",r:5},i=[e.BE,r,n],c=[n,e.HCM,o,{cN:"comment",b:"^\\=\\w",e:"\\=cut",eW:!0},s,{cN:"string",c:i,v:[{b:"q[qwxr]?\\s*\\(",e:"\\)",r:5},{b:"q[qwxr]?\\s*\\[",e:"\\]",r:5},{b:"q[qwxr]?\\s*\\{",e:"\\}",r:5},{b:"q[qwxr]?\\s*\\|",e:"\\|",r:5},{b:"q[qwxr]?\\s*\\<",e:"\\>",r:5},{b:"qw\\s+q",e:"q",r:5},{b:"'",e:"'",c:[e.BE]},{b:'"',e:'"'},{b:"`",e:"`",c:[e.BE]},{b:"{\\w+}",c:[],r:0},{b:"-?\\w+\\s*\\=\\>",c:[],r:0}]},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},{b:"(\\/\\/|"+e.RSR+"|\\b(split|return|print|reverse|grep)\\b)\\s*",k:"split return print reverse grep",r:0,c:[e.HCM,o,{cN:"regexp",b:"(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*",r:10},{cN:"regexp",b:"(m|qr)?/",e:"/[a-z]*",c:[e.BE],r:0}]},{cN:"sub",bK:"sub",e:"(\\s*\\(.*?\\))?[;{]",r:5},{cN:"operator",b:"-\\w\\b",r:0}];return r.c=c,s.c=c,{aliases:["pl"],k:t,c:c}});hljs.registerLanguage("ruby",function(e){var b="[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?",r="and false then defined module in return redo if BEGIN retry end for true self when next until do begin unless END rescue nil else break undef not super class case require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor",c={cN:"yardoctag",b:"@[A-Za-z]+"},a={cN:"value",b:"#<",e:">"},s={cN:"comment",v:[{b:"#",e:"$",c:[c]},{b:"^\\=begin",e:"^\\=end",c:[c],r:10},{b:"^__END__",e:"\\n$"}]},n={cN:"subst",b:"#\\{",e:"}",k:r},t={cN:"string",c:[e.BE,n],v:[{b:/'/,e:/'/},{b:/"/,e:/"/},{b:/`/,e:/`/},{b:"%[qQwWx]?\\(",e:"\\)"},{b:"%[qQwWx]?\\[",e:"\\]"},{b:"%[qQwWx]?{",e:"}"},{b:"%[qQwWx]?<",e:">"},{b:"%[qQwWx]?/",e:"/"},{b:"%[qQwWx]?%",e:"%"},{b:"%[qQwWx]?-",e:"-"},{b:"%[qQwWx]?\\|",e:"\\|"},{b:/\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/}]},i={cN:"params",b:"\\(",e:"\\)",k:r},d=[t,a,s,{cN:"class",bK:"class module",e:"$|;",i:/=/,c:[e.inherit(e.TM,{b:"[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?"}),{cN:"inheritance",b:"<\\s*",c:[{cN:"parent",b:"("+e.IR+"::)?"+e.IR}]},s]},{cN:"function",bK:"def",e:" |$|;",r:0,c:[e.inherit(e.TM,{b:b}),i,s]},{cN:"constant",b:"(::)?(\\b[A-Z]\\w*(::)?)+",r:0},{cN:"symbol",b:e.UIR+"(\\!|\\?)?:",r:0},{cN:"symbol",b:":",c:[t,{b:b}],r:0},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},{cN:"variable",b:"(\\$\\W)|((\\$|\\@\\@?)(\\w+))"},{b:"("+e.RSR+")\\s*",c:[a,s,{cN:"regexp",c:[e.BE,n],i:/\n/,v:[{b:"/",e:"/[a-z]*"},{b:"%r{",e:"}[a-z]*"},{b:"%r\\(",e:"\\)[a-z]*"},{b:"%r!",e:"![a-z]*"},{b:"%r\\[",e:"\\][a-z]*"}]}],r:0}];n.c=d,i.c=d;var l="[>?]>",u="[\\w#]+\\(\\w+\\):\\d+:\\d+>",N="(\\w+-)?\\d+\\.\\d+\\.\\d(p\\d+)?[^>]+>",o=[{b:/^\s*=>/,cN:"status",starts:{e:"$",c:d}},{cN:"prompt",b:"^("+l+"|"+u+"|"+N+")",starts:{e:"$",c:d}}];return{aliases:["rb","gemspec","podspec","thor","irb"],k:r,c:[s].concat(o).concat(d)}});hljs.registerLanguage("erb",function(){return{sL:"xml",subLanguageMode:"continuous",c:[{cN:"comment",b:"<%#",e:"%>"},{b:"<%[%=-]?",e:"[%-]?%>",sL:"ruby",eB:!0,eE:!0}]}});hljs.registerLanguage("apache",function(e){var r={cN:"number",b:"[\\$%]\\d+"};return{aliases:["apacheconf"],cI:!0,c:[e.HCM,{cN:"tag",b:"</?",e:">"},{cN:"keyword",b:/\w+/,r:0,k:{common:"order deny allow setenv rewriterule rewriteengine rewritecond documentroot sethandler errordocument loadmodule options header listen serverroot servername"},starts:{e:/$/,r:0,k:{literal:"on off all"},c:[{cN:"sqbracket",b:"\\s\\[",e:"\\]$"},{cN:"cbracket",b:"[\\$%]\\{",e:"\\}",c:["self",r]},r,e.QSM]}}],i:/\S/}});hljs.registerLanguage("json",function(e){var t={literal:"true false null"},i=[e.QSM,e.CNM],l={cN:"value",e:",",eW:!0,eE:!0,c:i,k:t},c={b:"{",e:"}",c:[{cN:"attribute",b:'\\s*"',e:'"\\s*:\\s*',eB:!0,eE:!0,c:[e.BE],i:"\\n",starts:l}],i:"\\S"},n={b:"\\[",e:"\\]",c:[e.inherit(l,{cN:null})],i:"\\S"};return i.splice(i.length,0,c,n),{c:i,k:t,i:"\\S"}});hljs.registerLanguage("clojure",function(e){var t={built_in:"def cond apply if-not if-let if not not= = < > <= >= == + / * - rem quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last drop-while while intern condp case reduced cycle split-at split-with repeat replicate iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter monitor-exit defmacro defn defn- macroexpand macroexpand-1 for dosync and or when when-not when-let comp juxt partial sequence memoize constantly complement identity assert peek pop doto proxy defstruct first rest cons defprotocol cast coll deftype defrecord last butlast sigs reify second ffirst fnext nfirst nnext defmulti defmethod meta with-meta ns in-ns create-ns import refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize"},r="a-zA-Z_\\-!.?+*=<>&#'",n="["+r+"]["+r+"0-9/;:]*",a="[-+]?\\d+(\\.\\d+)?",o={b:n,r:0},s={cN:"number",b:a,r:0},c=e.inherit(e.QSM,{i:null}),i={cN:"comment",b:";",e:"$",r:0},d={cN:"literal",b:/\b(true|false|nil)\b/},l={cN:"collection",b:"[\\[\\{]",e:"[\\]\\}]"},m={cN:"comment",b:"\\^"+n},p={cN:"comment",b:"\\^\\{",e:"\\}"},u={cN:"attribute",b:"[:]"+n},f={cN:"list",b:"\\(",e:"\\)"},h={eW:!0,r:0},y={k:t,l:n,cN:"keyword",b:n,starts:h},b=[f,c,m,p,i,u,l,s,d,o];return f.c=[{cN:"comment",b:"comment"},y,h],h.c=b,l.c=b,{aliases:["clj"],i:/\S/,c:[f,c,m,p,i,u,l,s,d]}});hljs.registerLanguage("css",function(e){var c="[a-zA-Z-][a-zA-Z0-9_-]*",a={cN:"function",b:c+"\\(",rB:!0,eE:!0,e:"\\("};return{cI:!0,i:"[=/|']",c:[e.CBCM,{cN:"id",b:"\\#[A-Za-z0-9_-]+"},{cN:"class",b:"\\.[A-Za-z0-9_-]+",r:0},{cN:"attr_selector",b:"\\[",e:"\\]",i:"$"},{cN:"pseudo",b:":(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\\\"\\']+"},{cN:"at_rule",b:"@(font-face|page)",l:"[a-z-]+",k:"font-face page"},{cN:"at_rule",b:"@",e:"[{;]",c:[{cN:"keyword",b:/\S+/},{b:/\s/,eW:!0,eE:!0,r:0,c:[a,e.ASM,e.QSM,e.CSSNM]}]},{cN:"tag",b:c,r:0},{cN:"rules",b:"{",e:"}",i:"[^\\s]",r:0,c:[e.CBCM,{cN:"rule",b:"[^\\s]",rB:!0,e:";",eW:!0,c:[{cN:"attribute",b:"[A-Z\\_\\.\\-]+",e:":",eE:!0,i:"[^\\s]",starts:{cN:"value",eW:!0,eE:!0,c:[a,e.CSSNM,e.QSM,e.ASM,e.CBCM,{cN:"hexcolor",b:"#[0-9A-Fa-f]+"},{cN:"important",b:"!important"}]}}]}]}]}});hljs.registerLanguage("rust",function(e){var t=e.inherit(e.CBCM);return t.c.push("self"),{aliases:["rs"],k:{keyword:"alignof as be box break const continue crate do else enum extern false fn for if impl in let loop match mod mut offsetof once priv proc pub pure ref return self sizeof static struct super trait true type typeof unsafe unsized use virtual while yield int i8 i16 i32 i64 uint u8 u32 u64 float f32 f64 str char bool",built_in:"assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! debug_assert! debug_assert_eq! env! panic! file! format! format_args! include_bin! include_str! line! local_data_key! module_path! option_env! print! println! select! stringify! try! unimplemented! unreachable! vec! write! writeln!"},l:e.IR+"!?",i:"</",c:[e.CLCM,t,e.inherit(e.QSM,{i:null}),{cN:"string",b:/r(#*)".*?"\1(?!#)/},{cN:"string",b:/'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/},{b:/'[a-zA-Z_][a-zA-Z0-9_]*/},{cN:"number",b:/\b(0[xb][A-Za-z0-9_]+|[0-9_]+(\.[0-9_]+)?([eE][+-]?[0-9_]+)?)([uif](8|16|32|64)?)?/,r:0},{cN:"function",bK:"fn",e:"(\\(|<)",eE:!0,c:[e.UTM]},{cN:"preprocessor",b:"#\\[",e:"\\]"},{bK:"type",e:"(=|<)",c:[e.UTM],i:"\\S"},{bK:"trait enum",e:"({|<)",c:[e.UTM],i:"\\S"},{b:e.IR+"::"},{b:"->"}]}});hljs.registerLanguage("swift",function(e){var t={keyword:"class deinit enum extension func import init let protocol static struct subscript typealias var break case continue default do else fallthrough if in for return switch where while as dynamicType is new super self Self Type __COLUMN__ __FILE__ __FUNCTION__ __LINE__ associativity didSet get infix inout left mutating none nonmutating operator override postfix precedence prefix right set unowned unowned safe unsafe weak willSet",literal:"true false nil",built_in:"abs advance alignof alignofValue assert bridgeFromObjectiveC bridgeFromObjectiveCUnconditional bridgeToObjectiveC bridgeToObjectiveCUnconditional c contains count countElements countLeadingZeros debugPrint debugPrintln distance dropFirst dropLast dump encodeBitsAsWords enumerate equal false filter find getBridgedObjectiveCType getVaList indices insertionSort isBridgedToObjectiveC isBridgedVerbatimToObjectiveC isUniquelyReferenced join lexicographicalCompare map max maxElement min minElement nil numericCast partition posix print println quickSort reduce reflect reinterpretCast reverse roundUpToAlignment sizeof sizeofValue sort split startsWith strideof strideofValue swap swift toString transcode true underestimateCount unsafeReflect withExtendedLifetime withObjectAtPlusZero withUnsafePointer withUnsafePointerToObject withUnsafePointers withVaList"},i={cN:"type",b:"\\b[A-Z][\\w']*",r:0},n={cN:"comment",b:"/\\*",e:"\\*/",c:[e.PWM,"self"]},r={cN:"subst",b:/\\\(/,e:"\\)",k:t,c:[]},s={cN:"number",b:"\\b([\\d_]+(\\.[\\deE_]+)?|0x[a-fA-F0-9_]+(\\.[a-fA-F0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b",r:0},o=e.inherit(e.QSM,{c:[r,e.BE]});return r.c=[s],{k:t,c:[o,e.CLCM,n,i,s,{cN:"func",bK:"func",e:"{",eE:!0,c:[e.inherit(e.TM,{b:/[A-Za-z$_][0-9A-Za-z$_]*/,i:/\(/}),{cN:"generics",b:/\</,e:/\>/,i:/\>/},{cN:"params",b:/\(/,e:/\)/,k:t,c:["self",s,o,e.CBCM,{b:":"}],i:/["']/}],i:/\[|%/},{cN:"class",k:"struct protocol class extension enum",b:"(struct|protocol|class(?! (func|var))|extension|enum)",e:"\\{",eE:!0,c:[e.inherit(e.TM,{b:/[A-Za-z$_][0-9A-Za-z$_]*/})]},{cN:"preprocessor",b:"(@assignment|@class_protocol|@exported|@final|@lazy|@noreturn|@NSCopying|@NSManaged|@objc|@optional|@required|@auto_closure|@noreturn|@IBAction|@IBDesignable|@IBInspectable|@IBOutlet|@infix|@prefix|@postfix)"}]}});hljs.registerLanguage("nginx",function(e){var r={cN:"variable",v:[{b:/\$\d+/},{b:/\$\{/,e:/}/},{b:"[\\$\\@]"+e.UIR}]},b={eW:!0,l:"[a-z/_]+",k:{built_in:"on off yes no true false none blocked debug info notice warn error crit select break last permanent redirect kqueue rtsig epoll poll /dev/poll"},r:0,i:"=>",c:[e.HCM,{cN:"string",c:[e.BE,r],v:[{b:/"/,e:/"/},{b:/'/,e:/'/}]},{cN:"url",b:"([a-z]+):/",e:"\\s",eW:!0,eE:!0,c:[r]},{cN:"regexp",c:[e.BE,r],v:[{b:"\\s\\^",e:"\\s|{|;",rE:!0},{b:"~\\*?\\s+",e:"\\s|{|;",rE:!0},{b:"\\*(\\.[a-z\\-]+)+"},{b:"([a-z\\-]+\\.)+\\*"}]},{cN:"number",b:"\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"},{cN:"number",b:"\\b\\d+[kKmMgGdshdwy]*\\b",r:0},r]};return{aliases:["nginxconf"],c:[e.HCM,{b:e.UIR+"\\s",e:";|{",rB:!0,c:[{cN:"title",b:e.UIR,starts:b}],r:0}],i:"[^\\s\\}]"}});hljs.registerLanguage("cs",function(e){var r="abstract as base bool break byte case catch char checked const continue decimal default delegate do double else enum event explicit extern false finally fixed float for foreach goto if implicit in int interface internal is lock long null object operator out override params private protected public readonly ref sbyte sealed short sizeof stackalloc static string struct switch this true try typeof uint ulong unchecked unsafe ushort using virtual volatile void while async protected public private internal ascending descending from get group into join let orderby partial select set value var where yield",t=e.IR+"(<"+e.IR+">)?";return{aliases:["csharp"],k:r,i:/::/,c:[{cN:"comment",b:"///",e:"$",rB:!0,c:[{cN:"xmlDocTag",v:[{b:"///",r:0},{b:"<!--|-->"},{b:"</?",e:">"}]}]},e.CLCM,e.CBCM,{cN:"preprocessor",b:"#",e:"$",k:"if else elif endif define undef warning error line region endregion pragma checksum"},{cN:"string",b:'@"',e:'"',c:[{b:'""'}]},e.ASM,e.QSM,e.CNM,{bK:"class namespace interface",e:/[{;=]/,i:/[^\s:]/,c:[e.TM,e.CLCM,e.CBCM]},{bK:"new return throw await",r:0},{cN:"function",b:"("+t+"\\s+)+"+e.IR+"\\s*\\(",rB:!0,e:/[{;=]/,eE:!0,k:r,c:[{b:e.IR+"\\s*\\(",rB:!0,c:[e.TM],r:0},{cN:"params",b:/\(/,e:/\)/,k:r,r:0,c:[e.ASM,e.QSM,e.CNM,e.CBCM]},e.CLCM,e.CBCM]}]}});hljs.registerLanguage("markdown",function(){return{aliases:["md","mkdown","mkd"],c:[{cN:"header",v:[{b:"^#{1,6}",e:"$"},{b:"^.+?\\n[=-]{2,}$"}]},{b:"<",e:">",sL:"xml",r:0},{cN:"bullet",b:"^([*+-]|(\\d+\\.))\\s+"},{cN:"strong",b:"[*_]{2}.+?[*_]{2}"},{cN:"emphasis",v:[{b:"\\*.+?\\*"},{b:"_.+?_",r:0}]},{cN:"blockquote",b:"^>\\s+",e:"$"},{cN:"code",v:[{b:"`.+?`"},{b:"^( {4}|	)",e:"$",r:0}]},{cN:"horizontal_rule",b:"^[-\\*]{3,}",e:"$"},{b:"\\[.+?\\][\\(\\[].*?[\\)\\]]",rB:!0,c:[{cN:"link_label",b:"\\[",e:"\\]",eB:!0,rE:!0,r:0},{cN:"link_url",b:"\\]\\(",e:"\\)",eB:!0,eE:!0},{cN:"link_reference",b:"\\]\\[",e:"\\]",eB:!0,eE:!0}],r:10},{b:"^\\[.+\\]:",rB:!0,c:[{cN:"link_reference",b:"\\[",e:"\\]:",eB:!0,eE:!0,starts:{cN:"link_url",e:"$"}}]}]}});hljs.registerLanguage("diff",function(){return{aliases:["patch"],c:[{cN:"chunk",r:10,v:[{b:/^\@\@ +\-\d+,\d+ +\+\d+,\d+ +\@\@$/},{b:/^\*\*\* +\d+,\d+ +\*\*\*\*$/},{b:/^\-\-\- +\d+,\d+ +\-\-\-\-$/}]},{cN:"header",v:[{b:/Index: /,e:/$/},{b:/=====/,e:/=====$/},{b:/^\-\-\-/,e:/$/},{b:/^\*{3} /,e:/$/},{b:/^\+\+\+/,e:/$/},{b:/\*{5}/,e:/\*{5}$/}]},{cN:"addition",b:"^\\+",e:"$"},{cN:"deletion",b:"^\\-",e:"$"},{cN:"change",b:"^\\!",e:"$"}]}});hljs.registerLanguage("vim",function(e){return{l:/[!#@\w]+/,k:{keyword:"N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope cp cpf cq cr cs cst cu cuna cunme cw d|0 delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu g|0 go gr grepa gu gv ha h|0 helpf helpg helpt hi hid his i|0 ia iabc if ij il im imapc ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs n|0 new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf q|0 quita qa r|0 rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv s|0 sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync t|0 tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up v|0 ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank",built_in:"abs acos add and append argc argidx argv asin atan atan2 browse browsedir bufexists buflisted bufloaded bufname bufnr bufwinnr byte2line byteidx call ceil changenr char2nr cindent clearmatches col complete complete_add complete_check confirm copy cos cosh count cscope_connection cursor deepcopy delete did_filetype diff_filler diff_hlID empty escape eval eventhandler executable exists exp expand extend feedkeys filereadable filewritable filter finddir findfile float2nr floor fmod fnameescape fnamemodify foldclosed foldclosedend foldlevel foldtext foldtextresult foreground function garbagecollect get getbufline getbufvar getchar getcharmod getcmdline getcmdpos getcmdtype getcwd getfontname getfperm getfsize getftime getftype getline getloclist getmatches getpid getpos getqflist getreg getregtype gettabvar gettabwinvar getwinposx getwinposy getwinvar glob globpath has has_key haslocaldir hasmapto histadd histdel histget histnr hlexists hlID hostname iconv indent index input inputdialog inputlist inputrestore inputsave inputsecret insert invert isdirectory islocked items join keys len libcall libcallnr line line2byte lispindent localtime log log10 luaeval map maparg mapcheck match matchadd matcharg matchdelete matchend matchlist matchstr max min mkdir mode mzeval nextnonblank nr2char or pathshorten pow prevnonblank printf pumvisible py3eval pyeval range readfile reltime reltimestr remote_expr remote_foreground remote_peek remote_read remote_send remove rename repeat resolve reverse round screenattr screenchar screencol screenrow search searchdecl searchpair searchpairpos searchpos server2client serverlist setbufvar setcmdpos setline setloclist setmatches setpos setqflist setreg settabvar settabwinvar setwinvar sha256 shellescape shiftwidth simplify sin sinh sort soundfold spellbadword spellsuggest split sqrt str2float str2nr strchars strdisplaywidth strftime stridx string strlen strpart strridx strtrans strwidth submatch substitute synconcealed synID synIDattr synIDtrans synstack system tabpagebuflist tabpagenr tabpagewinnr tagfiles taglist tan tanh tempname tolower toupper tr trunc type undofile undotree values virtcol visualmode wildmenumode winbufnr wincol winheight winline winnr winrestcmd winrestview winsaveview winwidth writefile xor"},i:/[{:]/,c:[e.NM,e.ASM,{cN:"string",b:/"((\\")|[^"\n])*("|\n)/},{cN:"variable",b:/[bwtglsav]:[\w\d_]*/},{cN:"function",bK:"function function!",e:"$",r:0,c:[e.TM,{cN:"params",b:"\\(",e:"\\)"}]}]}});hljs.registerLanguage("typescript",function(e){return{aliases:["ts"],k:{keyword:"in if for while finally var new function|0 do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const class public private get set super interface extendsstatic constructor implements enum export import declare",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document any number boolean string void"},c:[{cN:"pi",b:/^\s*('|")use strict('|")/,r:0},e.ASM,e.QSM,e.CLCM,e.CBCM,e.CNM,{b:"("+e.RSR+"|\\b(case|return|throw)\\b)\\s*",k:"return throw case",c:[e.CLCM,e.CBCM,e.RM,{b:/</,e:/>;/,r:0,sL:"xml"}],r:0},{cN:"function",bK:"function",e:/\{/,eE:!0,c:[e.inherit(e.TM,{b:/[A-Za-z$_][0-9A-Za-z$_]*/}),{cN:"params",b:/\(/,e:/\)/,c:[e.CLCM,e.CBCM],i:/["'\(]/}],i:/\[|%/,r:0},{cN:"constructor",bK:"constructor",e:/\{/,eE:!0,r:10},{cN:"module",bK:"module",e:/\{/,eE:!0},{cN:"interface",bK:"interface",e:/\{/,eE:!0},{b:/\$[(.]/},{b:"\\."+e.IR,r:0}]}});hljs.registerLanguage("javascript",function(r){return{aliases:["js"],k:{keyword:"in if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const class",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document"},c:[{cN:"pi",r:10,v:[{b:/^\s*('|")use strict('|")/},{b:/^\s*('|")use asm('|")/}]},r.ASM,r.QSM,r.CLCM,r.CBCM,r.CNM,{b:"("+r.RSR+"|\\b(case|return|throw)\\b)\\s*",k:"return throw case",c:[r.CLCM,r.CBCM,r.RM,{b:/</,e:/>;/,r:0,sL:"xml"}],r:0},{cN:"function",bK:"function",e:/\{/,eE:!0,c:[r.inherit(r.TM,{b:/[A-Za-z$_][0-9A-Za-z$_]*/}),{cN:"params",b:/\(/,e:/\)/,c:[r.CLCM,r.CBCM],i:/["'\(]/}],i:/\[|%/},{b:/\$[(.]/},{b:"\\."+r.IR,r:0}]}});hljs.registerLanguage("lua",function(e){var t="\\[=*\\[",a="\\]=*\\]",r={b:t,e:a,c:["self"]},n=[{cN:"comment",b:"--(?!"+t+")",e:"$"},{cN:"comment",b:"--"+t,e:a,c:[r],r:10}];return{l:e.UIR,k:{keyword:"and break do else elseif end false for if in local nil not or repeat return then true until while",built_in:"_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug io math os package string table"},c:n.concat([{cN:"function",bK:"function",e:"\\)",c:[e.inherit(e.TM,{b:"([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*"}),{cN:"params",b:"\\(",eW:!0,c:n}].concat(n)},e.CNM,e.ASM,e.QSM,{cN:"string",b:t,e:a,c:[r],r:5}])}});hljs.registerLanguage("django",function(){var e={cN:"filter",b:/\|[A-Za-z]+\:?/,k:"truncatewords removetags linebreaksbr yesno get_digit timesince random striptags filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort dictsortreversed default_if_none pluralize lower join center default truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize localtime utc timezone",c:[{cN:"argument",b:/"/,e:/"/},{cN:"argument",b:/'/,e:/'/}]};return{aliases:["jinja"],cI:!0,sL:"xml",subLanguageMode:"continuous",c:[{cN:"comment",b:/\{%\s*comment\s*%}/,e:/\{%\s*endcomment\s*%}/},{cN:"comment",b:/\{#/,e:/#}/},{cN:"template_tag",b:/\{%/,e:/%}/,k:"comment endcomment load templatetag ifchanged endifchanged if endif firstof for endfor in ifnotequal endifnotequal widthratio extends include spaceless endspaceless regroup by as ifequal endifequal ssi now with cycle url filter endfilter debug block endblock else autoescape endautoescape csrf_token empty elif endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix plural get_current_language language get_available_languages get_current_language_bidi get_language_info get_language_info_list localize endlocalize localtime endlocaltime timezone endtimezone get_current_timezone verbatim",c:[e]},{cN:"variable",b:/\{\{/,e:/}}/,c:[e]}]}});hljs.registerLanguage("scheme",function(e){var t="[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+",r="(\\-|\\+)?\\d+([./]\\d+)?",i=r+"[+\\-]"+r+"i",a={built_in:"case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules ' * + , ,@ - ... / ; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"},n={cN:"shebang",b:"^#!",e:"$"},c={cN:"literal",b:"(#t|#f|#\\\\"+t+"|#\\\\.)"},l={cN:"number",v:[{b:r,r:0},{b:i,r:0},{b:"#b[0-1]+(/[0-1]+)?"},{b:"#o[0-7]+(/[0-7]+)?"},{b:"#x[0-9a-f]+(/[0-9a-f]+)?"}]},s=e.QSM,o={cN:"comment",v:[{b:";",e:"$",r:0},{b:"#\\|",e:"\\|#"}]},u={b:t,r:0},p={cN:"variable",b:"'"+t},d={eW:!0,r:0},g={cN:"list",v:[{b:"\\(",e:"\\)"},{b:"\\[",e:"\\]"}],c:[{cN:"keyword",b:t,l:t,k:a},d]};return d.c=[c,l,s,o,u,p,g],{i:/\S/,c:[n,l,s,o,p,g]}});hljs.registerLanguage("ocaml",function(e){return{aliases:["ml"],k:{keyword:"and as assert asr begin class constraint do done downto else end exception external for fun function functor if in include inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method mod module mutable new object of open! open or private rec sig struct then to try type val! val virtual when while with parser value",built_in:"array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit in_channel out_channel ref",literal:"true false"},i:/\/\/|>>/,l:"[a-z_]\\w*!?",c:[{cN:"literal",b:"\\[(\\|\\|)?\\]|\\(\\)"},{cN:"comment",b:"\\(\\*",e:"\\*\\)",c:["self"]},{cN:"symbol",b:"'[A-Za-z_](?!')[\\w']*"},{cN:"tag",b:"`[A-Z][\\w']*"},{cN:"type",b:"\\b[A-Z][\\w']*",r:0},{b:"[a-z_]\\w*'[\\w']*"},e.inherit(e.ASM,{cN:"char",r:0}),e.inherit(e.QSM,{i:null}),{cN:"number",b:"\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",r:0},{b:/[-=]>/}]}});hljs.registerLanguage("python",function(e){var r={cN:"prompt",b:/^(>>>|\.\.\.) /},b={cN:"string",c:[e.BE],v:[{b:/(u|b)?r?'''/,e:/'''/,c:[r],r:10},{b:/(u|b)?r?"""/,e:/"""/,c:[r],r:10},{b:/(u|r|ur)'/,e:/'/,r:10},{b:/(u|r|ur)"/,e:/"/,r:10},{b:/(b|br)'/,e:/'/},{b:/(b|br)"/,e:/"/},e.ASM,e.QSM]},l={cN:"number",r:0,v:[{b:e.BNR+"[lLjJ]?"},{b:"\\b(0o[0-7]+)[lLjJ]?"},{b:e.CNR+"[lLjJ]?"}]},c={cN:"params",b:/\(/,e:/\)/,c:["self",r,l,b]};return{aliases:["py","gyp"],k:{keyword:"and elif is global as in if from raise for except finally print import pass return exec else break not with class assert yield try while continue del or def lambda nonlocal|10 None True False",built_in:"Ellipsis NotImplemented"},i:/(<\/|->|\?)/,c:[r,l,b,e.HCM,{v:[{cN:"function",bK:"def",r:10},{cN:"class",bK:"class"}],e:/:/,i:/[${=;\n]/,c:[e.UTM,c]},{cN:"decorator",b:/@/,e:/$/},{b:/\b(print|exec)\(/}]}});hljs.registerLanguage("applescript",function(e){var t=e.inherit(e.QSM,{i:""}),r={cN:"params",b:"\\(",e:"\\)",c:["self",e.CNM,t]},o=[{cN:"comment",b:"--",e:"$"},{cN:"comment",b:"\\(\\*",e:"\\*\\)",c:["self",{b:"--",e:"$"}]},e.HCM];return{aliases:["osascript"],k:{keyword:"about above after against and around as at back before beginning behind below beneath beside between but by considering contain contains continue copy div does eighth else end equal equals error every exit fifth first for fourth from front get given global if ignoring in into is it its last local me middle mod my ninth not of on onto or over prop property put ref reference repeat returning script second set seventh since sixth some tell tenth that the|0 then third through thru timeout times to transaction try until where while whose with without",constant:"AppleScript false linefeed return pi quote result space tab true",type:"alias application boolean class constant date file integer list number real record string text",command:"activate beep count delay launch log offset read round run say summarize write",property:"character characters contents day frontmost id item length month name paragraph paragraphs rest reverse running time version weekday word words year"},c:[t,e.CNM,{cN:"type",b:"\\bPOSIX file\\b"},{cN:"command",b:"\\b(clipboard info|the clipboard|info for|list (disks|folder)|mount volume|path to|(close|open for) access|(get|set) eof|current date|do shell script|get volume settings|random number|set volume|system attribute|system info|time to GMT|(load|run|store) script|scripting components|ASCII (character|number)|localized string|choose (application|color|file|file name|folder|from list|remote application|URL)|display (alert|dialog))\\b|^\\s*return\\b"},{cN:"constant",b:"\\b(text item delimiters|current application|missing value)\\b"},{cN:"keyword",b:"\\b(apart from|aside from|instead of|out of|greater than|isn't|(doesn't|does not) (equal|come before|come after|contain)|(greater|less) than( or equal)?|(starts?|ends|begins?) with|contained by|comes (before|after)|a (ref|reference))\\b"},{cN:"property",b:"\\b(POSIX path|(date|time) string|quoted form)\\b"},{cN:"function_start",bK:"on",i:"[${=;\\n]",c:[e.UTM,r]}].concat(o),i:"//|->|=>"}});
; browserify_shim__define__module__export__(typeof hljs != "undefined" ? hljs : window.hljs);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{}],3:[function(require,module,exports){
(function (global){
; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
//     Zepto.js
//     (c) 2010-2014 Thomas Fuchs
//     Zepto.js may be freely distributed under the MIT license.

var Zepto = (function() {
  var undefined, key, $, classList, emptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter, slice = emptyArray.slice,
    document = window.document,
    elementDisplay = {}, classCache = {},
    cssNumber = { 'column-count': 1, 'columns': 1, 'font-weight': 1, 'line-height': 1,'opacity': 1, 'z-index': 1, 'zoom': 1 },
    fragmentRE = /^\s*<(\w+|!)[^>]*>/,
    singleTagRE = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
    tagExpanderRE = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
    rootNodeRE = /^(?:body|html)$/i,
    capitalRE = /([A-Z])/g,

    // special attributes that should be get/set via method calls
    methodAttributes = ['val', 'css', 'html', 'text', 'data', 'width', 'height', 'offset'],

    adjacencyOperators = [ 'after', 'prepend', 'before', 'append' ],
    table = document.createElement('table'),
    tableRow = document.createElement('tr'),
    containers = {
      'tr': document.createElement('tbody'),
      'tbody': table, 'thead': table, 'tfoot': table,
      'td': tableRow, 'th': tableRow,
      '*': document.createElement('div')
    },
    readyRE = /complete|loaded|interactive/,
    simpleSelectorRE = /^[\w-]*$/,
    class2type = {},
    toString = class2type.toString,
    zepto = {},
    camelize, uniq,
    tempParent = document.createElement('div'),
    propMap = {
      'tabindex': 'tabIndex',
      'readonly': 'readOnly',
      'for': 'htmlFor',
      'class': 'className',
      'maxlength': 'maxLength',
      'cellspacing': 'cellSpacing',
      'cellpadding': 'cellPadding',
      'rowspan': 'rowSpan',
      'colspan': 'colSpan',
      'usemap': 'useMap',
      'frameborder': 'frameBorder',
      'contenteditable': 'contentEditable'
    },
    isArray = Array.isArray ||
      function(object){ return object instanceof Array }

  zepto.matches = function(element, selector) {
    if (!selector || !element || element.nodeType !== 1) return false
    var matchesSelector = element.webkitMatchesSelector || element.mozMatchesSelector ||
                          element.oMatchesSelector || element.matchesSelector
    if (matchesSelector) return matchesSelector.call(element, selector)
    // fall back to performing a selector:
    var match, parent = element.parentNode, temp = !parent
    if (temp) (parent = tempParent).appendChild(element)
    match = ~zepto.qsa(parent, selector).indexOf(element)
    temp && tempParent.removeChild(element)
    return match
  }

  function type(obj) {
    return obj == null ? String(obj) :
      class2type[toString.call(obj)] || "object"
  }

  function isFunction(value) { return type(value) == "function" }
  function isWindow(obj)     { return obj != null && obj == obj.window }
  function isDocument(obj)   { return obj != null && obj.nodeType == obj.DOCUMENT_NODE }
  function isObject(obj)     { return type(obj) == "object" }
  function isPlainObject(obj) {
    return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype
  }
  function likeArray(obj) { return typeof obj.length == 'number' }

  function compact(array) { return filter.call(array, function(item){ return item != null }) }
  function flatten(array) { return array.length > 0 ? $.fn.concat.apply([], array) : array }
  camelize = function(str){ return str.replace(/-+(.)?/g, function(match, chr){ return chr ? chr.toUpperCase() : '' }) }
  function dasherize(str) {
    return str.replace(/::/g, '/')
           .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')
           .replace(/([a-z\d])([A-Z])/g, '$1_$2')
           .replace(/_/g, '-')
           .toLowerCase()
  }
  uniq = function(array){ return filter.call(array, function(item, idx){ return array.indexOf(item) == idx }) }

  function classRE(name) {
    return name in classCache ?
      classCache[name] : (classCache[name] = new RegExp('(^|\\s)' + name + '(\\s|$)'))
  }

  function maybeAddPx(name, value) {
    return (typeof value == "number" && !cssNumber[dasherize(name)]) ? value + "px" : value
  }

  function defaultDisplay(nodeName) {
    var element, display
    if (!elementDisplay[nodeName]) {
      element = document.createElement(nodeName)
      document.body.appendChild(element)
      display = getComputedStyle(element, '').getPropertyValue("display")
      element.parentNode.removeChild(element)
      display == "none" && (display = "block")
      elementDisplay[nodeName] = display
    }
    return elementDisplay[nodeName]
  }

  function children(element) {
    return 'children' in element ?
      slice.call(element.children) :
      $.map(element.childNodes, function(node){ if (node.nodeType == 1) return node })
  }

  function Z(dom, selector) {
    var i, len = dom ? dom.length : 0
    for (i = 0; i < len; i++) this[i] = dom[i]
    this.length = len
    this.selector = selector || ''
  }

  // `$.zepto.fragment` takes a html string and an optional tag name
  // to generate DOM nodes nodes from the given html string.
  // The generated DOM nodes are returned as an array.
  // This function can be overriden in plugins for example to make
  // it compatible with browsers that don't support the DOM fully.
  zepto.fragment = function(html, name, properties) {
    var dom, nodes, container

    // A special case optimization for a single tag
    if (singleTagRE.test(html)) dom = $(document.createElement(RegExp.$1))

    if (!dom) {
      if (html.replace) html = html.replace(tagExpanderRE, "<$1></$2>")
      if (name === undefined) name = fragmentRE.test(html) && RegExp.$1
      if (!(name in containers)) name = '*'

      container = containers[name]
      container.innerHTML = '' + html
      dom = $.each(slice.call(container.childNodes), function(){
        container.removeChild(this)
      })
    }

    if (isPlainObject(properties)) {
      nodes = $(dom)
      $.each(properties, function(key, value) {
        if (methodAttributes.indexOf(key) > -1) nodes[key](value)
        else nodes.attr(key, value)
      })
    }

    return dom
  }

  // `$.zepto.Z` swaps out the prototype of the given `dom` array
  // of nodes with `$.fn` and thus supplying all the Zepto functions
  // to the array. This method can be overriden in plugins.
  zepto.Z = function(dom, selector) {
    return new Z(dom, selector)
  }

  // `$.zepto.isZ` should return `true` if the given object is a Zepto
  // collection. This method can be overriden in plugins.
  zepto.isZ = function(object) {
    return object instanceof zepto.Z
  }

  // `$.zepto.init` is Zepto's counterpart to jQuery's `$.fn.init` and
  // takes a CSS selector and an optional context (and handles various
  // special cases).
  // This method can be overriden in plugins.
  zepto.init = function(selector, context) {
    var dom
    // If nothing given, return an empty Zepto collection
    if (!selector) return zepto.Z()
    // Optimize for string selectors
    else if (typeof selector == 'string') {
      selector = selector.trim()
      // If it's a html fragment, create nodes from it
      // Note: In both Chrome 21 and Firefox 15, DOM error 12
      // is thrown if the fragment doesn't begin with <
      if (selector[0] == '<' && fragmentRE.test(selector))
        dom = zepto.fragment(selector, RegExp.$1, context), selector = null
      // If there's a context, create a collection on that context first, and select
      // nodes from there
      else if (context !== undefined) return $(context).find(selector)
      // If it's a CSS selector, use it to select nodes.
      else dom = zepto.qsa(document, selector)
    }
    // If a function is given, call it when the DOM is ready
    else if (isFunction(selector)) return $(document).ready(selector)
    // If a Zepto collection is given, just return it
    else if (zepto.isZ(selector)) return selector
    else {
      // normalize array if an array of nodes is given
      if (isArray(selector)) dom = compact(selector)
      // Wrap DOM nodes.
      else if (isObject(selector))
        dom = [selector], selector = null
      // If it's a html fragment, create nodes from it
      else if (fragmentRE.test(selector))
        dom = zepto.fragment(selector.trim(), RegExp.$1, context), selector = null
      // If there's a context, create a collection on that context first, and select
      // nodes from there
      else if (context !== undefined) return $(context).find(selector)
      // And last but no least, if it's a CSS selector, use it to select nodes.
      else dom = zepto.qsa(document, selector)
    }
    // create a new Zepto collection from the nodes found
    return zepto.Z(dom, selector)
  }

  // `$` will be the base `Zepto` object. When calling this
  // function just call `$.zepto.init, which makes the implementation
  // details of selecting nodes and creating Zepto collections
  // patchable in plugins.
  $ = function(selector, context){
    return zepto.init(selector, context)
  }

  function extend(target, source, deep) {
    for (key in source)
      if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {
        if (isPlainObject(source[key]) && !isPlainObject(target[key]))
          target[key] = {}
        if (isArray(source[key]) && !isArray(target[key]))
          target[key] = []
        extend(target[key], source[key], deep)
      }
      else if (source[key] !== undefined) target[key] = source[key]
  }

  // Copy all but undefined properties from one or more
  // objects to the `target` object.
  $.extend = function(target){
    var deep, args = slice.call(arguments, 1)
    if (typeof target == 'boolean') {
      deep = target
      target = args.shift()
    }
    args.forEach(function(arg){ extend(target, arg, deep) })
    return target
  }

  // `$.zepto.qsa` is Zepto's CSS selector implementation which
  // uses `document.querySelectorAll` and optimizes for some special cases, like `#id`.
  // This method can be overriden in plugins.
  zepto.qsa = function(element, selector){
    var found,
        maybeID = selector[0] == '#',
        maybeClass = !maybeID && selector[0] == '.',
        nameOnly = maybeID || maybeClass ? selector.slice(1) : selector, // Ensure that a 1 char tag name still gets checked
        isSimple = simpleSelectorRE.test(nameOnly)
    return (element.getElementById && isSimple && maybeID) ? // Safari DocumentFragment doesn't have getElementById
      ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :
      (element.nodeType !== 1 && element.nodeType !== 9 && element.nodeType !== 11) ? [] :
      slice.call(
        isSimple && !maybeID && element.getElementsByClassName ? // DocumentFragment doesn't have getElementsByClassName/TagName
          maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class
          element.getElementsByTagName(selector) : // Or a tag
          element.querySelectorAll(selector) // Or it's not simple, and we need to query all
      )
  }

  function filtered(nodes, selector) {
    return selector == null ? $(nodes) : $(nodes).filter(selector)
  }

  $.contains = document.documentElement.contains ?
    function(parent, node) {
      return parent !== node && parent.contains(node)
    } :
    function(parent, node) {
      while (node && (node = node.parentNode))
        if (node === parent) return true
      return false
    }

  function funcArg(context, arg, idx, payload) {
    return isFunction(arg) ? arg.call(context, idx, payload) : arg
  }

  function setAttribute(node, name, value) {
    value == null ? node.removeAttribute(name) : node.setAttribute(name, value)
  }

  // access className property while respecting SVGAnimatedString
  function className(node, value){
    var klass = node.className || '',
        svg   = klass && klass.baseVal !== undefined

    if (value === undefined) return svg ? klass.baseVal : klass
    svg ? (klass.baseVal = value) : (node.className = value)
  }

  // "true"  => true
  // "false" => false
  // "null"  => null
  // "42"    => 42
  // "42.5"  => 42.5
  // "08"    => "08"
  // JSON    => parse if valid
  // String  => self
  function deserializeValue(value) {
    try {
      return value ?
        value == "true" ||
        ( value == "false" ? false :
          value == "null" ? null :
          +value + "" == value ? +value :
          /^[\[\{]/.test(value) ? $.parseJSON(value) :
          value )
        : value
    } catch(e) {
      return value
    }
  }

  $.type = type
  $.isFunction = isFunction
  $.isWindow = isWindow
  $.isArray = isArray
  $.isPlainObject = isPlainObject

  $.isEmptyObject = function(obj) {
    var name
    for (name in obj) return false
    return true
  }

  $.inArray = function(elem, array, i){
    return emptyArray.indexOf.call(array, elem, i)
  }

  $.camelCase = camelize
  $.trim = function(str) {
    return str == null ? "" : String.prototype.trim.call(str)
  }

  // plugin compatibility
  $.uuid = 0
  $.support = { }
  $.expr = { }
  $.noop = function() {}

  $.map = function(elements, callback){
    var value, values = [], i, key
    if (likeArray(elements))
      for (i = 0; i < elements.length; i++) {
        value = callback(elements[i], i)
        if (value != null) values.push(value)
      }
    else
      for (key in elements) {
        value = callback(elements[key], key)
        if (value != null) values.push(value)
      }
    return flatten(values)
  }

  $.each = function(elements, callback){
    var i, key
    if (likeArray(elements)) {
      for (i = 0; i < elements.length; i++)
        if (callback.call(elements[i], i, elements[i]) === false) return elements
    } else {
      for (key in elements)
        if (callback.call(elements[key], key, elements[key]) === false) return elements
    }

    return elements
  }

  $.grep = function(elements, callback){
    return filter.call(elements, callback)
  }

  if (window.JSON) $.parseJSON = JSON.parse

  // Populate the class2type map
  $.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
    class2type[ "[object " + name + "]" ] = name.toLowerCase()
  })

  // Define methods that will be available on all
  // Zepto collections
  $.fn = {
    constructor: zepto.Z,
    length: 0,

    // Because a collection acts like an array
    // copy over these useful array functions.
    forEach: emptyArray.forEach,
    reduce: emptyArray.reduce,
    push: emptyArray.push,
    sort: emptyArray.sort,
    splice: emptyArray.splice,
    indexOf: emptyArray.indexOf,
    concat: function(){
      var i, value, args = []
      for (i = 0; i < arguments.length; i++) {
        value = arguments[i]
        args[i] = zepto.isZ(value) ? value.toArray() : value
      }
      return concat.apply(zepto.isZ(this) ? this.toArray() : this, args)
    },

    // `map` and `slice` in the jQuery API work differently
    // from their array counterparts
    map: function(fn){
      return $($.map(this, function(el, i){ return fn.call(el, i, el) }))
    },
    slice: function(){
      return $(slice.apply(this, arguments))
    },

    ready: function(callback){
      // need to check if document.body exists for IE as that browser reports
      // document ready when it hasn't yet created the body element
      if (readyRE.test(document.readyState) && document.body) callback($)
      else document.addEventListener('DOMContentLoaded', function(){ callback($) }, false)
      return this
    },
    get: function(idx){
      return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length]
    },
    toArray: function(){ return this.get() },
    size: function(){
      return this.length
    },
    remove: function(){
      return this.each(function(){
        if (this.parentNode != null)
          this.parentNode.removeChild(this)
      })
    },
    each: function(callback){
      emptyArray.every.call(this, function(el, idx){
        return callback.call(el, idx, el) !== false
      })
      return this
    },
    filter: function(selector){
      if (isFunction(selector)) return this.not(this.not(selector))
      return $(filter.call(this, function(element){
        return zepto.matches(element, selector)
      }))
    },
    add: function(selector,context){
      return $(uniq(this.concat($(selector,context))))
    },
    is: function(selector){
      return this.length > 0 && zepto.matches(this[0], selector)
    },
    not: function(selector){
      var nodes=[]
      if (isFunction(selector) && selector.call !== undefined)
        this.each(function(idx){
          if (!selector.call(this,idx)) nodes.push(this)
        })
      else {
        var excludes = typeof selector == 'string' ? this.filter(selector) :
          (likeArray(selector) && isFunction(selector.item)) ? slice.call(selector) : $(selector)
        this.forEach(function(el){
          if (excludes.indexOf(el) < 0) nodes.push(el)
        })
      }
      return $(nodes)
    },
    has: function(selector){
      return this.filter(function(){
        return isObject(selector) ?
          $.contains(this, selector) :
          $(this).find(selector).size()
      })
    },
    eq: function(idx){
      return idx === -1 ? this.slice(idx) : this.slice(idx, + idx + 1)
    },
    first: function(){
      var el = this[0]
      return el && !isObject(el) ? el : $(el)
    },
    last: function(){
      var el = this[this.length - 1]
      return el && !isObject(el) ? el : $(el)
    },
    find: function(selector){
      var result, $this = this
      if (!selector) result = $()
      else if (typeof selector == 'object')
        result = $(selector).filter(function(){
          var node = this
          return emptyArray.some.call($this, function(parent){
            return $.contains(parent, node)
          })
        })
      else if (this.length == 1) result = $(zepto.qsa(this[0], selector))
      else result = this.map(function(){ return zepto.qsa(this, selector) })
      return result
    },
    closest: function(selector, context){
      var node = this[0], collection = false
      if (typeof selector == 'object') collection = $(selector)
      while (node && !(collection ? collection.indexOf(node) >= 0 : zepto.matches(node, selector)))
        node = node !== context && !isDocument(node) && node.parentNode
      return $(node)
    },
    parents: function(selector){
      var ancestors = [], nodes = this
      while (nodes.length > 0)
        nodes = $.map(nodes, function(node){
          if ((node = node.parentNode) && !isDocument(node) && ancestors.indexOf(node) < 0) {
            ancestors.push(node)
            return node
          }
        })
      return filtered(ancestors, selector)
    },
    parent: function(selector){
      return filtered(uniq(this.pluck('parentNode')), selector)
    },
    children: function(selector){
      return filtered(this.map(function(){ return children(this) }), selector)
    },
    contents: function() {
      return this.map(function() { return this.contentDocument || slice.call(this.childNodes) })
    },
    siblings: function(selector){
      return filtered(this.map(function(i, el){
        return filter.call(children(el.parentNode), function(child){ return child!==el })
      }), selector)
    },
    empty: function(){
      return this.each(function(){ this.innerHTML = '' })
    },
    // `pluck` is borrowed from Prototype.js
    pluck: function(property){
      return $.map(this, function(el){ return el[property] })
    },
    show: function(){
      return this.each(function(){
        this.style.display == "none" && (this.style.display = '')
        if (getComputedStyle(this, '').getPropertyValue("display") == "none")
          this.style.display = defaultDisplay(this.nodeName)
      })
    },
    replaceWith: function(newContent){
      return this.before(newContent).remove()
    },
    wrap: function(structure){
      var func = isFunction(structure)
      if (this[0] && !func)
        var dom   = $(structure).get(0),
            clone = dom.parentNode || this.length > 1

      return this.each(function(index){
        $(this).wrapAll(
          func ? structure.call(this, index) :
            clone ? dom.cloneNode(true) : dom
        )
      })
    },
    wrapAll: function(structure){
      if (this[0]) {
        $(this[0]).before(structure = $(structure))
        var children
        // drill down to the inmost element
        while ((children = structure.children()).length) structure = children.first()
        $(structure).append(this)
      }
      return this
    },
    wrapInner: function(structure){
      var func = isFunction(structure)
      return this.each(function(index){
        var self = $(this), contents = self.contents(),
            dom  = func ? structure.call(this, index) : structure
        contents.length ? contents.wrapAll(dom) : self.append(dom)
      })
    },
    unwrap: function(){
      this.parent().each(function(){
        $(this).replaceWith($(this).children())
      })
      return this
    },
    clone: function(){
      return this.map(function(){ return this.cloneNode(true) })
    },
    hide: function(){
      return this.css("display", "none")
    },
    toggle: function(setting){
      return this.each(function(){
        var el = $(this)
        ;(setting === undefined ? el.css("display") == "none" : setting) ? el.show() : el.hide()
      })
    },
    prev: function(selector){ return $(this.pluck('previousElementSibling')).filter(selector || '*') },
    next: function(selector){ return $(this.pluck('nextElementSibling')).filter(selector || '*') },
    html: function(html){
      return 0 in arguments ?
        this.each(function(idx){
          var originHtml = this.innerHTML
          $(this).empty().append( funcArg(this, html, idx, originHtml) )
        }) :
        (0 in this ? this[0].innerHTML : null)
    },
    text: function(text){
      return 0 in arguments ?
        this.each(function(idx){
          var newText = funcArg(this, text, idx, this.textContent)
          this.textContent = newText == null ? '' : ''+newText
        }) :
        (0 in this ? this[0].textContent : null)
    },
    attr: function(name, value){
      var result
      return (typeof name == 'string' && !(1 in arguments)) ?
        (!this.length || this[0].nodeType !== 1 ? undefined :
          (!(result = this[0].getAttribute(name)) && name in this[0]) ? this[0][name] : result
        ) :
        this.each(function(idx){
          if (this.nodeType !== 1) return
          if (isObject(name)) for (key in name) setAttribute(this, key, name[key])
          else setAttribute(this, name, funcArg(this, value, idx, this.getAttribute(name)))
        })
    },
    removeAttr: function(name){
      return this.each(function(){ this.nodeType === 1 && name.split(' ').forEach(function(attribute){
        setAttribute(this, attribute)
      }, this)})
    },
    prop: function(name, value){
      name = propMap[name] || name
      return (1 in arguments) ?
        this.each(function(idx){
          this[name] = funcArg(this, value, idx, this[name])
        }) :
        (this[0] && this[0][name])
    },
    data: function(name, value){
      var attrName = 'data-' + name.replace(capitalRE, '-$1').toLowerCase()

      var data = (1 in arguments) ?
        this.attr(attrName, value) :
        this.attr(attrName)

      return data !== null ? deserializeValue(data) : undefined
    },
    val: function(value){
      return 0 in arguments ?
        this.each(function(idx){
          this.value = funcArg(this, value, idx, this.value)
        }) :
        (this[0] && (this[0].multiple ?
           $(this[0]).find('option').filter(function(){ return this.selected }).pluck('value') :
           this[0].value)
        )
    },
    offset: function(coordinates){
      if (coordinates) return this.each(function(index){
        var $this = $(this),
            coords = funcArg(this, coordinates, index, $this.offset()),
            parentOffset = $this.offsetParent().offset(),
            props = {
              top:  coords.top  - parentOffset.top,
              left: coords.left - parentOffset.left
            }

        if ($this.css('position') == 'static') props['position'] = 'relative'
        $this.css(props)
      })
      if (!this.length) return null
      var obj = this[0].getBoundingClientRect()
      return {
        left: obj.left + window.pageXOffset,
        top: obj.top + window.pageYOffset,
        width: Math.round(obj.width),
        height: Math.round(obj.height)
      }
    },
    css: function(property, value){
      if (arguments.length < 2) {
        var computedStyle, element = this[0]
        if(!element) return
        computedStyle = getComputedStyle(element, '')
        if (typeof property == 'string')
          return element.style[camelize(property)] || computedStyle.getPropertyValue(property)
        else if (isArray(property)) {
          var props = {}
          $.each(property, function(_, prop){
            props[prop] = (element.style[camelize(prop)] || computedStyle.getPropertyValue(prop))
          })
          return props
        }
      }

      var css = ''
      if (type(property) == 'string') {
        if (!value && value !== 0)
          this.each(function(){ this.style.removeProperty(dasherize(property)) })
        else
          css = dasherize(property) + ":" + maybeAddPx(property, value)
      } else {
        for (key in property)
          if (!property[key] && property[key] !== 0)
            this.each(function(){ this.style.removeProperty(dasherize(key)) })
          else
            css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'
      }

      return this.each(function(){ this.style.cssText += ';' + css })
    },
    index: function(element){
      return element ? this.indexOf($(element)[0]) : this.parent().children().indexOf(this[0])
    },
    hasClass: function(name){
      if (!name) return false
      return emptyArray.some.call(this, function(el){
        return this.test(className(el))
      }, classRE(name))
    },
    addClass: function(name){
      if (!name) return this
      return this.each(function(idx){
        if (!('className' in this)) return
        classList = []
        var cls = className(this), newName = funcArg(this, name, idx, cls)
        newName.split(/\s+/g).forEach(function(klass){
          if (!$(this).hasClass(klass)) classList.push(klass)
        }, this)
        classList.length && className(this, cls + (cls ? " " : "") + classList.join(" "))
      })
    },
    removeClass: function(name){
      return this.each(function(idx){
        if (!('className' in this)) return
        if (name === undefined) return className(this, '')
        classList = className(this)
        funcArg(this, name, idx, classList).split(/\s+/g).forEach(function(klass){
          classList = classList.replace(classRE(klass), " ")
        })
        className(this, classList.trim())
      })
    },
    toggleClass: function(name, when){
      if (!name) return this
      return this.each(function(idx){
        var $this = $(this), names = funcArg(this, name, idx, className(this))
        names.split(/\s+/g).forEach(function(klass){
          (when === undefined ? !$this.hasClass(klass) : when) ?
            $this.addClass(klass) : $this.removeClass(klass)
        })
      })
    },
    scrollTop: function(value){
      if (!this.length) return
      var hasScrollTop = 'scrollTop' in this[0]
      if (value === undefined) return hasScrollTop ? this[0].scrollTop : this[0].pageYOffset
      return this.each(hasScrollTop ?
        function(){ this.scrollTop = value } :
        function(){ this.scrollTo(this.scrollX, value) })
    },
    scrollLeft: function(value){
      if (!this.length) return
      var hasScrollLeft = 'scrollLeft' in this[0]
      if (value === undefined) return hasScrollLeft ? this[0].scrollLeft : this[0].pageXOffset
      return this.each(hasScrollLeft ?
        function(){ this.scrollLeft = value } :
        function(){ this.scrollTo(value, this.scrollY) })
    },
    position: function() {
      if (!this.length) return

      var elem = this[0],
        // Get *real* offsetParent
        offsetParent = this.offsetParent(),
        // Get correct offsets
        offset       = this.offset(),
        parentOffset = rootNodeRE.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset()

      // Subtract element margins
      // note: when an element has margin: auto the offsetLeft and marginLeft
      // are the same in Safari causing offset.left to incorrectly be 0
      offset.top  -= parseFloat( $(elem).css('margin-top') ) || 0
      offset.left -= parseFloat( $(elem).css('margin-left') ) || 0

      // Add offsetParent borders
      parentOffset.top  += parseFloat( $(offsetParent[0]).css('border-top-width') ) || 0
      parentOffset.left += parseFloat( $(offsetParent[0]).css('border-left-width') ) || 0

      // Subtract the two offsets
      return {
        top:  offset.top  - parentOffset.top,
        left: offset.left - parentOffset.left
      }
    },
    offsetParent: function() {
      return this.map(function(){
        var parent = this.offsetParent || document.body
        while (parent && !rootNodeRE.test(parent.nodeName) && $(parent).css("position") == "static")
          parent = parent.offsetParent
        return parent
      })
    }
  }

  // for now
  $.fn.detach = $.fn.remove

  // Generate the `width` and `height` functions
  ;['width', 'height'].forEach(function(dimension){
    var dimensionProperty =
      dimension.replace(/./, function(m){ return m[0].toUpperCase() })

    $.fn[dimension] = function(value){
      var offset, el = this[0]
      if (value === undefined) return isWindow(el) ? el['inner' + dimensionProperty] :
        isDocument(el) ? el.documentElement['scroll' + dimensionProperty] :
        (offset = this.offset()) && offset[dimension]
      else return this.each(function(idx){
        el = $(this)
        el.css(dimension, funcArg(this, value, idx, el[dimension]()))
      })
    }
  })

  function traverseNode(node, fun) {
    fun(node)
    for (var i = 0, len = node.childNodes.length; i < len; i++)
      traverseNode(node.childNodes[i], fun)
  }

  // Generate the `after`, `prepend`, `before`, `append`,
  // `insertAfter`, `insertBefore`, `appendTo`, and `prependTo` methods.
  adjacencyOperators.forEach(function(operator, operatorIndex) {
    var inside = operatorIndex % 2 //=> prepend, append

    $.fn[operator] = function(){
      // arguments can be nodes, arrays of nodes, Zepto objects and HTML strings
      var argType, nodes = $.map(arguments, function(arg) {
            argType = type(arg)
            return argType == "object" || argType == "array" || arg == null ?
              arg : zepto.fragment(arg)
          }),
          parent, copyByClone = this.length > 1
      if (nodes.length < 1) return this

      return this.each(function(_, target){
        parent = inside ? target : target.parentNode

        // convert all methods to a "before" operation
        target = operatorIndex == 0 ? target.nextSibling :
                 operatorIndex == 1 ? target.firstChild :
                 operatorIndex == 2 ? target :
                 null

        var parentInDocument = $.contains(document.documentElement, parent)

        nodes.forEach(function(node){
          if (copyByClone) node = node.cloneNode(true)
          else if (!parent) return $(node).remove()

          parent.insertBefore(node, target)
          if (parentInDocument) traverseNode(node, function(el){
            if (el.nodeName != null && el.nodeName.toUpperCase() === 'SCRIPT' &&
               (!el.type || el.type === 'text/javascript') && !el.src)
              window['eval'].call(window, el.innerHTML)
          })
        })
      })
    }

    // after    => insertAfter
    // prepend  => prependTo
    // before   => insertBefore
    // append   => appendTo
    $.fn[inside ? operator+'To' : 'insert'+(operatorIndex ? 'Before' : 'After')] = function(html){
      $(html)[operator](this)
      return this
    }
  })

  zepto.Z.prototype = Z.prototype = $.fn

  // Export internal API functions in the `$.zepto` namespace
  zepto.uniq = uniq
  zepto.deserializeValue = deserializeValue
  $.zepto = zepto

  return $
})()

// If `$` is not yet defined, point it to `Zepto`
window.Zepto = Zepto
window.$ === undefined && (window.$ = Zepto)

//     Zepto.js
//     (c) 2010-2014 Thomas Fuchs
//     Zepto.js may be freely distributed under the MIT license.

;(function($){
  function detect(ua, platform){
    var os = this.os = {}, browser = this.browser = {},
      webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/),
      android = ua.match(/(Android);?[\s\/]+([\d.]+)?/),
      osx = !!ua.match(/\(Macintosh\; Intel /),
      ipad = ua.match(/(iPad).*OS\s([\d_]+)/),
      ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/),
      iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/),
      webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/),
      win = /Win\d{2}|Windows/.test(platform),
      wp = ua.match(/Windows Phone ([\d.]+)/),
      touchpad = webos && ua.match(/TouchPad/),
      kindle = ua.match(/Kindle\/([\d.]+)/),
      silk = ua.match(/Silk\/([\d._]+)/),
      blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/),
      bb10 = ua.match(/(BB10).*Version\/([\d.]+)/),
      rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/),
      playbook = ua.match(/PlayBook/),
      chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/),
      firefox = ua.match(/Firefox\/([\d.]+)/),
      firefoxos = ua.match(/\((?:Mobile|Tablet); rv:([\d.]+)\).*Firefox\/[\d.]+/),
      ie = ua.match(/MSIE\s([\d.]+)/) || ua.match(/Trident\/[\d](?=[^\?]+).*rv:([0-9.].)/),
      webview = !chrome && ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/),
      safari = webview || ua.match(/Version\/([\d.]+)([^S](Safari)|[^M]*(Mobile)[^S]*(Safari))/)

    // Todo: clean this up with a better OS/browser seperation:
    // - discern (more) between multiple browsers on android
    // - decide if kindle fire in silk mode is android or not
    // - Firefox on Android doesn't specify the Android version
    // - possibly devide in os, device and browser hashes

    if (browser.webkit = !!webkit) browser.version = webkit[1]

    if (android) os.android = true, os.version = android[2]
    if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.')
    if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.')
    if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null
    if (wp) os.wp = true, os.version = wp[1]
    if (webos) os.webos = true, os.version = webos[2]
    if (touchpad) os.touchpad = true
    if (blackberry) os.blackberry = true, os.version = blackberry[2]
    if (bb10) os.bb10 = true, os.version = bb10[2]
    if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2]
    if (playbook) browser.playbook = true
    if (kindle) os.kindle = true, os.version = kindle[1]
    if (silk) browser.silk = true, browser.version = silk[1]
    if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true
    if (chrome) browser.chrome = true, browser.version = chrome[1]
    if (firefox) browser.firefox = true, browser.version = firefox[1]
    if (firefoxos) os.firefoxos = true, os.version = firefoxos[1]
    if (ie) browser.ie = true, browser.version = ie[1]
    if (safari && (osx || os.ios || win)) {
      browser.safari = true
      if (!os.ios) browser.version = safari[1]
    }
    if (webview) browser.webview = true

    os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||
      (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)))
    os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos || blackberry || bb10 ||
      (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) ||
      (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))))
  }

  detect.call($, navigator.userAgent, navigator.platform)
  // make available to unit tests
  $.__detect = detect

})(Zepto)

//     Zepto.js
//     (c) 2010-2014 Thomas Fuchs
//     Zepto.js may be freely distributed under the MIT license.

;(function($){
  var _zid = 1, undefined,
      slice = Array.prototype.slice,
      isFunction = $.isFunction,
      isString = function(obj){ return typeof obj == 'string' },
      handlers = {},
      specialEvents={},
      focusinSupported = 'onfocusin' in window,
      focus = { focus: 'focusin', blur: 'focusout' },
      hover = { mouseenter: 'mouseover', mouseleave: 'mouseout' }

  specialEvents.click = specialEvents.mousedown = specialEvents.mouseup = specialEvents.mousemove = 'MouseEvents'

  function zid(element) {
    return element._zid || (element._zid = _zid++)
  }
  function findHandlers(element, event, fn, selector) {
    event = parse(event)
    if (event.ns) var matcher = matcherFor(event.ns)
    return (handlers[zid(element)] || []).filter(function(handler) {
      return handler
        && (!event.e  || handler.e == event.e)
        && (!event.ns || matcher.test(handler.ns))
        && (!fn       || zid(handler.fn) === zid(fn))
        && (!selector || handler.sel == selector)
    })
  }
  function parse(event) {
    var parts = ('' + event).split('.')
    return {e: parts[0], ns: parts.slice(1).sort().join(' ')}
  }
  function matcherFor(ns) {
    return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)')
  }

  function eventCapture(handler, captureSetting) {
    return handler.del &&
      (!focusinSupported && (handler.e in focus)) ||
      !!captureSetting
  }

  function realEvent(type) {
    return hover[type] || (focusinSupported && focus[type]) || type
  }

  function add(element, events, fn, data, selector, delegator, capture){
    var id = zid(element), set = (handlers[id] || (handlers[id] = []))
    events.split(/\s/).forEach(function(event){
      if (event == 'ready') return $(document).ready(fn)
      var handler   = parse(event)
      handler.fn    = fn
      handler.sel   = selector
      // emulate mouseenter, mouseleave
      if (handler.e in hover) fn = function(e){
        var related = e.relatedTarget
        if (!related || (related !== this && !$.contains(this, related)))
          return handler.fn.apply(this, arguments)
      }
      handler.del   = delegator
      var callback  = delegator || fn
      handler.proxy = function(e){
        e = compatible(e)
        if (e.isImmediatePropagationStopped()) return
        e.data = data
        var result = callback.apply(element, e._args == undefined ? [e] : [e].concat(e._args))
        if (result === false) e.preventDefault(), e.stopPropagation()
        return result
      }
      handler.i = set.length
      set.push(handler)
      if ('addEventListener' in element)
        element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))
    })
  }
  function remove(element, events, fn, selector, capture){
    var id = zid(element)
    ;(events || '').split(/\s/).forEach(function(event){
      findHandlers(element, event, fn, selector).forEach(function(handler){
        delete handlers[id][handler.i]
      if ('removeEventListener' in element)
        element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))
      })
    })
  }

  $.event = { add: add, remove: remove }

  $.proxy = function(fn, context) {
    var args = (2 in arguments) && slice.call(arguments, 2)
    if (isFunction(fn)) {
      var proxyFn = function(){ return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments) }
      proxyFn._zid = zid(fn)
      return proxyFn
    } else if (isString(context)) {
      if (args) {
        args.unshift(fn[context], fn)
        return $.proxy.apply(null, args)
      } else {
        return $.proxy(fn[context], fn)
      }
    } else {
      throw new TypeError("expected function")
    }
  }

  $.fn.bind = function(event, data, callback){
    return this.on(event, data, callback)
  }
  $.fn.unbind = function(event, callback){
    return this.off(event, callback)
  }
  $.fn.one = function(event, selector, data, callback){
    return this.on(event, selector, data, callback, 1)
  }

  var returnTrue = function(){return true},
      returnFalse = function(){return false},
      ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$)/,
      eventMethods = {
        preventDefault: 'isDefaultPrevented',
        stopImmediatePropagation: 'isImmediatePropagationStopped',
        stopPropagation: 'isPropagationStopped'
      }

  function compatible(event, source) {
    if (source || !event.isDefaultPrevented) {
      source || (source = event)

      $.each(eventMethods, function(name, predicate) {
        var sourceMethod = source[name]
        event[name] = function(){
          this[predicate] = returnTrue
          return sourceMethod && sourceMethod.apply(source, arguments)
        }
        event[predicate] = returnFalse
      })

      if (source.defaultPrevented !== undefined ? source.defaultPrevented :
          'returnValue' in source ? source.returnValue === false :
          source.getPreventDefault && source.getPreventDefault())
        event.isDefaultPrevented = returnTrue
    }
    return event
  }

  function createProxy(event) {
    var key, proxy = { originalEvent: event }
    for (key in event)
      if (!ignoreProperties.test(key) && event[key] !== undefined) proxy[key] = event[key]

    return compatible(proxy, event)
  }

  $.fn.delegate = function(selector, event, callback){
    return this.on(event, selector, callback)
  }
  $.fn.undelegate = function(selector, event, callback){
    return this.off(event, selector, callback)
  }

  $.fn.live = function(event, callback){
    $(document.body).delegate(this.selector, event, callback)
    return this
  }
  $.fn.die = function(event, callback){
    $(document.body).undelegate(this.selector, event, callback)
    return this
  }

  $.fn.on = function(event, selector, data, callback, one){
    var autoRemove, delegator, $this = this
    if (event && !isString(event)) {
      $.each(event, function(type, fn){
        $this.on(type, selector, data, fn, one)
      })
      return $this
    }

    if (!isString(selector) && !isFunction(callback) && callback !== false)
      callback = data, data = selector, selector = undefined
    if (isFunction(data) || data === false)
      callback = data, data = undefined

    if (callback === false) callback = returnFalse

    return $this.each(function(_, element){
      if (one) autoRemove = function(e){
        remove(element, e.type, callback)
        return callback.apply(this, arguments)
      }

      if (selector) delegator = function(e){
        var evt, match = $(e.target).closest(selector, element).get(0)
        if (match && match !== element) {
          evt = $.extend(createProxy(e), {currentTarget: match, liveFired: element})
          return (autoRemove || callback).apply(match, [evt].concat(slice.call(arguments, 1)))
        }
      }

      add(element, event, callback, data, selector, delegator || autoRemove)
    })
  }
  $.fn.off = function(event, selector, callback){
    var $this = this
    if (event && !isString(event)) {
      $.each(event, function(type, fn){
        $this.off(type, selector, fn)
      })
      return $this
    }

    if (!isString(selector) && !isFunction(callback) && callback !== false)
      callback = selector, selector = undefined

    if (callback === false) callback = returnFalse

    return $this.each(function(){
      remove(this, event, callback, selector)
    })
  }

  $.fn.trigger = function(event, args){
    event = (isString(event) || $.isPlainObject(event)) ? $.Event(event) : compatible(event)
    event._args = args
    return this.each(function(){
      // handle focus(), blur() by calling them directly
      if (event.type in focus && typeof this[event.type] == "function") this[event.type]()
      // items in the collection might not be DOM elements
      else if ('dispatchEvent' in this) this.dispatchEvent(event)
      else $(this).triggerHandler(event, args)
    })
  }

  // triggers event handlers on current element just as if an event occurred,
  // doesn't trigger an actual event, doesn't bubble
  $.fn.triggerHandler = function(event, args){
    var e, result
    this.each(function(i, element){
      e = createProxy(isString(event) ? $.Event(event) : event)
      e._args = args
      e.target = element
      $.each(findHandlers(element, event.type || event), function(i, handler){
        result = handler.proxy(e)
        if (e.isImmediatePropagationStopped()) return false
      })
    })
    return result
  }

  // shortcut methods for `.bind(event, fn)` for each event type
  ;('focusin focusout focus blur load resize scroll unload click dblclick '+
  'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave '+
  'change select keydown keypress keyup error').split(' ').forEach(function(event) {
    $.fn[event] = function(callback) {
      return (0 in arguments) ?
        this.bind(event, callback) :
        this.trigger(event)
    }
  })

  $.Event = function(type, props) {
    if (!isString(type)) props = type, type = props.type
    var event = document.createEvent(specialEvents[type] || 'Events'), bubbles = true
    if (props) for (var name in props) (name == 'bubbles') ? (bubbles = !!props[name]) : (event[name] = props[name])
    event.initEvent(type, bubbles, true)
    return compatible(event)
  }

})(Zepto)

//     Zepto.js
//     (c) 2010-2014 Thomas Fuchs
//     Zepto.js may be freely distributed under the MIT license.

;(function($, undefined){
  var prefix = '', eventPrefix, endEventName, endAnimationName,
    vendors = { Webkit: 'webkit', Moz: '', O: 'o' },
    document = window.document, testEl = document.createElement('div'),
    supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i,
    transform,
    transitionProperty, transitionDuration, transitionTiming, transitionDelay,
    animationName, animationDuration, animationTiming, animationDelay,
    cssReset = {}

  function dasherize(str) { return str.replace(/([a-z])([A-Z])/, '$1-$2').toLowerCase() }
  function normalizeEvent(name) { return eventPrefix ? eventPrefix + name : name.toLowerCase() }

  $.each(vendors, function(vendor, event){
    if (testEl.style[vendor + 'TransitionProperty'] !== undefined) {
      prefix = '-' + vendor.toLowerCase() + '-'
      eventPrefix = event
      return false
    }
  })

  transform = prefix + 'transform'
  cssReset[transitionProperty = prefix + 'transition-property'] =
  cssReset[transitionDuration = prefix + 'transition-duration'] =
  cssReset[transitionDelay    = prefix + 'transition-delay'] =
  cssReset[transitionTiming   = prefix + 'transition-timing-function'] =
  cssReset[animationName      = prefix + 'animation-name'] =
  cssReset[animationDuration  = prefix + 'animation-duration'] =
  cssReset[animationDelay     = prefix + 'animation-delay'] =
  cssReset[animationTiming    = prefix + 'animation-timing-function'] = ''

  $.fx = {
    off: (eventPrefix === undefined && testEl.style.transitionProperty === undefined),
    speeds: { _default: 400, fast: 200, slow: 600 },
    cssPrefix: prefix,
    transitionEnd: normalizeEvent('TransitionEnd'),
    animationEnd: normalizeEvent('AnimationEnd')
  }

  $.fn.animate = function(properties, duration, ease, callback, delay){
    if ($.isFunction(duration))
      callback = duration, ease = undefined, duration = undefined
    if ($.isFunction(ease))
      callback = ease, ease = undefined
    if ($.isPlainObject(duration))
      ease = duration.easing, callback = duration.complete, delay = duration.delay, duration = duration.duration
    if (duration) duration = (typeof duration == 'number' ? duration :
                    ($.fx.speeds[duration] || $.fx.speeds._default)) / 1000
    if (delay) delay = parseFloat(delay) / 1000
    return this.anim(properties, duration, ease, callback, delay)
  }

  $.fn.anim = function(properties, duration, ease, callback, delay){
    var key, cssValues = {}, cssProperties, transforms = '',
        that = this, wrappedCallback, endEvent = $.fx.transitionEnd,
        fired = false

    if (duration === undefined) duration = $.fx.speeds._default / 1000
    if (delay === undefined) delay = 0
    if ($.fx.off) duration = 0

    if (typeof properties == 'string') {
      // keyframe animation
      cssValues[animationName] = properties
      cssValues[animationDuration] = duration + 's'
      cssValues[animationDelay] = delay + 's'
      cssValues[animationTiming] = (ease || 'linear')
      endEvent = $.fx.animationEnd
    } else {
      cssProperties = []
      // CSS transitions
      for (key in properties)
        if (supportedTransforms.test(key)) transforms += key + '(' + properties[key] + ') '
        else cssValues[key] = properties[key], cssProperties.push(dasherize(key))

      if (transforms) cssValues[transform] = transforms, cssProperties.push(transform)
      if (duration > 0 && typeof properties === 'object') {
        cssValues[transitionProperty] = cssProperties.join(', ')
        cssValues[transitionDuration] = duration + 's'
        cssValues[transitionDelay] = delay + 's'
        cssValues[transitionTiming] = (ease || 'linear')
      }
    }

    wrappedCallback = function(event){
      if (typeof event !== 'undefined') {
        if (event.target !== event.currentTarget) return // makes sure the event didn't bubble from "below"
        $(event.target).unbind(endEvent, wrappedCallback)
      } else
        $(this).unbind(endEvent, wrappedCallback) // triggered by setTimeout

      fired = true
      $(this).css(cssReset)
      callback && callback.call(this)
    }
    if (duration > 0){
      this.bind(endEvent, wrappedCallback)
      // transitionEnd is not always firing on older Android phones
      // so make sure it gets fired
      setTimeout(function(){
        if (fired) return
        wrappedCallback.call(that)
      }, ((duration + delay) * 1000) + 25)
    }

    // trigger page reflow so new elements can animate
    this.size() && this.get(0).clientLeft

    this.css(cssValues)

    if (duration <= 0) setTimeout(function() {
      that.each(function(){ wrappedCallback.call(this) })
    }, 0)

    return this
  }

  testEl = null
})(Zepto)

//     Zepto.js
//     (c) 2010-2014 Thomas Fuchs
//     Zepto.js may be freely distributed under the MIT license.

;(function(){
  // getComputedStyle shouldn't freak out when called
  // without a valid element as argument
  try {
    getComputedStyle(undefined)
  } catch(e) {
    var nativeGetComputedStyle = getComputedStyle;
    window.getComputedStyle = function(element){
      try {
        return nativeGetComputedStyle(element)
      } catch(e) {
        return null
      }
    }
  }
})()

//     Zepto.js
//     (c) 2010-2014 Thomas Fuchs
//     Zepto.js may be freely distributed under the MIT license.

;(function($){
  var touch = {},
    touchTimeout, tapTimeout, swipeTimeout, longTapTimeout,
    longTapDelay = 750,
    gesture

  function swipeDirection(x1, x2, y1, y2) {
    return Math.abs(x1 - x2) >=
      Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down')
  }

  function longTap() {
    longTapTimeout = null
    if (touch.last) {
      touch.el.trigger('longTap')
      touch = {}
    }
  }

  function cancelLongTap() {
    if (longTapTimeout) clearTimeout(longTapTimeout)
    longTapTimeout = null
  }

  function cancelAll() {
    if (touchTimeout) clearTimeout(touchTimeout)
    if (tapTimeout) clearTimeout(tapTimeout)
    if (swipeTimeout) clearTimeout(swipeTimeout)
    if (longTapTimeout) clearTimeout(longTapTimeout)
    touchTimeout = tapTimeout = swipeTimeout = longTapTimeout = null
    touch = {}
  }

  function isPrimaryTouch(event){
    return (event.pointerType == 'touch' ||
      event.pointerType == event.MSPOINTER_TYPE_TOUCH)
      && event.isPrimary
  }

  function isPointerEventType(e, type){
    return (e.type == 'pointer'+type ||
      e.type.toLowerCase() == 'mspointer'+type)
  }

  $(document).ready(function(){
    var now, delta, deltaX = 0, deltaY = 0, firstTouch, _isPointerType

    if ('MSGesture' in window) {
      gesture = new MSGesture()
      gesture.target = document.body
    }

    $(document)
      .bind('MSGestureEnd', function(e){
        var swipeDirectionFromVelocity =
          e.velocityX > 1 ? 'Right' : e.velocityX < -1 ? 'Left' : e.velocityY > 1 ? 'Down' : e.velocityY < -1 ? 'Up' : null;
        if (swipeDirectionFromVelocity) {
          touch.el.trigger('swipe')
          touch.el.trigger('swipe'+ swipeDirectionFromVelocity)
        }
      })
      .on('touchstart MSPointerDown pointerdown', function(e){
        if((_isPointerType = isPointerEventType(e, 'down')) &&
          !isPrimaryTouch(e)) return
        firstTouch = _isPointerType ? e : e.touches[0]
        if (e.touches && e.touches.length === 1 && touch.x2) {
          // Clear out touch movement data if we have it sticking around
          // This can occur if touchcancel doesn't fire due to preventDefault, etc.
          touch.x2 = undefined
          touch.y2 = undefined
        }
        now = Date.now()
        delta = now - (touch.last || now)
        touch.el = $('tagName' in firstTouch.target ?
          firstTouch.target : firstTouch.target.parentNode)
        touchTimeout && clearTimeout(touchTimeout)
        touch.x1 = firstTouch.pageX
        touch.y1 = firstTouch.pageY
        if (delta > 0 && delta <= 250) touch.isDoubleTap = true
        touch.last = now
        longTapTimeout = setTimeout(longTap, longTapDelay)
        // adds the current touch contact for IE gesture recognition
        if (gesture && _isPointerType) gesture.addPointer(e.pointerId);
      })
      .on('touchmove MSPointerMove pointermove', function(e){
        if((_isPointerType = isPointerEventType(e, 'move')) &&
          !isPrimaryTouch(e)) return
        firstTouch = _isPointerType ? e : e.touches[0]
        cancelLongTap()
        touch.x2 = firstTouch.pageX
        touch.y2 = firstTouch.pageY

        deltaX += Math.abs(touch.x1 - touch.x2)
        deltaY += Math.abs(touch.y1 - touch.y2)
      })
      .on('touchend MSPointerUp pointerup', function(e){
        if((_isPointerType = isPointerEventType(e, 'up')) &&
          !isPrimaryTouch(e)) return
        cancelLongTap()

        // swipe
        if ((touch.x2 && Math.abs(touch.x1 - touch.x2) > 30) ||
            (touch.y2 && Math.abs(touch.y1 - touch.y2) > 30))

          swipeTimeout = setTimeout(function() {
            touch.el.trigger('swipe')
            touch.el.trigger('swipe' + (swipeDirection(touch.x1, touch.x2, touch.y1, touch.y2)))
            touch = {}
          }, 0)

        // normal tap
        else if ('last' in touch)
          // don't fire tap when delta position changed by more than 30 pixels,
          // for instance when moving to a point and back to origin
          if (deltaX < 30 && deltaY < 30) {
            // delay by one tick so we can cancel the 'tap' event if 'scroll' fires
            // ('tap' fires before 'scroll')
            tapTimeout = setTimeout(function() {

              // trigger universal 'tap' with the option to cancelTouch()
              // (cancelTouch cancels processing of single vs double taps for faster 'tap' response)
              var event = $.Event('tap')
              event.cancelTouch = cancelAll
              touch.el.trigger(event)

              // trigger double tap immediately
              if (touch.isDoubleTap) {
                if (touch.el) touch.el.trigger('doubleTap')
                touch = {}
              }

              // trigger single tap after 250ms of inactivity
              else {
                touchTimeout = setTimeout(function(){
                  touchTimeout = null
                  if (touch.el) touch.el.trigger('singleTap')
                  touch = {}
                }, 250)
              }
            }, 0)
          } else {
            touch = {}
          }
          deltaX = deltaY = 0

      })
      // when the browser window loses focus,
      // for example when a modal dialog is shown,
      // cancel all ongoing events
      .on('touchcancel MSPointerCancel pointercancel', cancelAll)

    // scrolling the window indicates intention of the user
    // to scroll, not tap or swipe, so cancel all ongoing events
    $(window).on('scroll', cancelAll)
  })

  ;['swipe', 'swipeLeft', 'swipeRight', 'swipeUp', 'swipeDown',
    'doubleTap', 'tap', 'singleTap', 'longTap'].forEach(function(eventName){
    $.fn[eventName] = function(callback){ return this.on(eventName, callback) }
  })
})(Zepto)

; browserify_shim__define__module__export__(typeof $ != "undefined" ? $ : window.$);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{}],4:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],5:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],6:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canMutationObserver = typeof window !== 'undefined'
    && window.MutationObserver;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    var queue = [];

    if (canMutationObserver) {
        var hiddenDiv = document.createElement("div");
        var observer = new MutationObserver(function () {
            var queueList = queue.slice();
            queue.length = 0;
            queueList.forEach(function (fn) {
                fn();
            });
        });

        observer.observe(hiddenDiv, { attributes: true });

        return function nextTick(fn) {
            if (!queue.length) {
                hiddenDiv.setAttribute('yes', 'no');
            }
            queue.push(fn);
        };
    }

    if (canPost) {
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],7:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],8:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./support/isBuffer":7,"_process":6,"inherits":5}],9:[function(require,module,exports){
(function (global){
/**
 * marked - a markdown parser
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/chjj/marked
 */

;(function() {

/**
 * Block-Level Grammar
 */

var block = {
  newline: /^\n+/,
  code: /^( {4}[^\n]+\n*)+/,
  fences: noop,
  hr: /^( *[-*_]){3,} *(?:\n+|$)/,
  heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
  nptable: noop,
  lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
  blockquote: /^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,
  list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
  html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
  table: noop,
  paragraph: /^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,
  text: /^[^\n]+/
};

block.bullet = /(?:[*+-]|\d+\.)/;
block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
block.item = replace(block.item, 'gm')
  (/bull/g, block.bullet)
  ();

block.list = replace(block.list)
  (/bull/g, block.bullet)
  ('hr', '\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))')
  ('def', '\\n+(?=' + block.def.source + ')')
  ();

block.blockquote = replace(block.blockquote)
  ('def', block.def)
  ();

block._tag = '(?!(?:'
  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'
  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'
  + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b';

block.html = replace(block.html)
  ('comment', /<!--[\s\S]*?-->/)
  ('closed', /<(tag)[\s\S]+?<\/\1>/)
  ('closing', /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)
  (/tag/g, block._tag)
  ();

block.paragraph = replace(block.paragraph)
  ('hr', block.hr)
  ('heading', block.heading)
  ('lheading', block.lheading)
  ('blockquote', block.blockquote)
  ('tag', '<' + block._tag)
  ('def', block.def)
  ();

/**
 * Normal Block Grammar
 */

block.normal = merge({}, block);

/**
 * GFM Block Grammar
 */

block.gfm = merge({}, block.normal, {
  fences: /^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,
  paragraph: /^/,
  heading: /^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/
});

block.gfm.paragraph = replace(block.paragraph)
  ('(?!', '(?!'
    + block.gfm.fences.source.replace('\\1', '\\2') + '|'
    + block.list.source.replace('\\1', '\\3') + '|')
  ();

/**
 * GFM + Tables Block Grammar
 */

block.tables = merge({}, block.gfm, {
  nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,
  table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/
});

/**
 * Block Lexer
 */

function Lexer(options) {
  this.tokens = [];
  this.tokens.links = {};
  this.options = options || marked.defaults;
  this.rules = block.normal;

  if (this.options.gfm) {
    if (this.options.tables) {
      this.rules = block.tables;
    } else {
      this.rules = block.gfm;
    }
  }
}

/**
 * Expose Block Rules
 */

Lexer.rules = block;

/**
 * Static Lex Method
 */

Lexer.lex = function(src, options) {
  var lexer = new Lexer(options);
  return lexer.lex(src);
};

/**
 * Preprocessing
 */

Lexer.prototype.lex = function(src) {
  src = src
    .replace(/\r\n|\r/g, '\n')
    .replace(/\t/g, '    ')
    .replace(/\u00a0/g, ' ')
    .replace(/\u2424/g, '\n');

  return this.token(src, true);
};

/**
 * Lexing
 */

Lexer.prototype.token = function(src, top, bq) {
  var src = src.replace(/^ +$/gm, '')
    , next
    , loose
    , cap
    , bull
    , b
    , item
    , space
    , i
    , l;

  while (src) {
    // newline
    if (cap = this.rules.newline.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[0].length > 1) {
        this.tokens.push({
          type: 'space'
        });
      }
    }

    // code
    if (cap = this.rules.code.exec(src)) {
      src = src.substring(cap[0].length);
      cap = cap[0].replace(/^ {4}/gm, '');
      this.tokens.push({
        type: 'code',
        text: !this.options.pedantic
          ? cap.replace(/\n+$/, '')
          : cap
      });
      continue;
    }

    // fences (gfm)
    if (cap = this.rules.fences.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'code',
        lang: cap[2],
        text: cap[3] || ''
      });
      continue;
    }

    // heading
    if (cap = this.rules.heading.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'heading',
        depth: cap[1].length,
        text: cap[2]
      });
      continue;
    }

    // table no leading pipe (gfm)
    if (top && (cap = this.rules.nptable.exec(src))) {
      src = src.substring(cap[0].length);

      item = {
        type: 'table',
        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
        cells: cap[3].replace(/\n$/, '').split('\n')
      };

      for (i = 0; i < item.align.length; i++) {
        if (/^ *-+: *$/.test(item.align[i])) {
          item.align[i] = 'right';
        } else if (/^ *:-+: *$/.test(item.align[i])) {
          item.align[i] = 'center';
        } else if (/^ *:-+ *$/.test(item.align[i])) {
          item.align[i] = 'left';
        } else {
          item.align[i] = null;
        }
      }

      for (i = 0; i < item.cells.length; i++) {
        item.cells[i] = item.cells[i].split(/ *\| */);
      }

      this.tokens.push(item);

      continue;
    }

    // lheading
    if (cap = this.rules.lheading.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'heading',
        depth: cap[2] === '=' ? 1 : 2,
        text: cap[1]
      });
      continue;
    }

    // hr
    if (cap = this.rules.hr.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'hr'
      });
      continue;
    }

    // blockquote
    if (cap = this.rules.blockquote.exec(src)) {
      src = src.substring(cap[0].length);

      this.tokens.push({
        type: 'blockquote_start'
      });

      cap = cap[0].replace(/^ *> ?/gm, '');

      // Pass `top` to keep the current
      // "toplevel" state. This is exactly
      // how markdown.pl works.
      this.token(cap, top, true);

      this.tokens.push({
        type: 'blockquote_end'
      });

      continue;
    }

    // list
    if (cap = this.rules.list.exec(src)) {
      src = src.substring(cap[0].length);
      bull = cap[2];

      this.tokens.push({
        type: 'list_start',
        ordered: bull.length > 1
      });

      // Get each top-level item.
      cap = cap[0].match(this.rules.item);

      next = false;
      l = cap.length;
      i = 0;

      for (; i < l; i++) {
        item = cap[i];

        // Remove the list item's bullet
        // so it is seen as the next token.
        space = item.length;
        item = item.replace(/^ *([*+-]|\d+\.) +/, '');

        // Outdent whatever the
        // list item contains. Hacky.
        if (~item.indexOf('\n ')) {
          space -= item.length;
          item = !this.options.pedantic
            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
            : item.replace(/^ {1,4}/gm, '');
        }

        // Determine whether the next list item belongs here.
        // Backpedal if it does not belong in this list.
        if (this.options.smartLists && i !== l - 1) {
          b = block.bullet.exec(cap[i + 1])[0];
          if (bull !== b && !(bull.length > 1 && b.length > 1)) {
            src = cap.slice(i + 1).join('\n') + src;
            i = l - 1;
          }
        }

        // Determine whether item is loose or not.
        // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
        // for discount behavior.
        loose = next || /\n\n(?!\s*$)/.test(item);
        if (i !== l - 1) {
          next = item.charAt(item.length - 1) === '\n';
          if (!loose) loose = next;
        }

        this.tokens.push({
          type: loose
            ? 'loose_item_start'
            : 'list_item_start'
        });

        // Recurse.
        this.token(item, false, bq);

        this.tokens.push({
          type: 'list_item_end'
        });
      }

      this.tokens.push({
        type: 'list_end'
      });

      continue;
    }

    // html
    if (cap = this.rules.html.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: this.options.sanitize
          ? 'paragraph'
          : 'html',
        pre: !this.options.sanitizer
          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
        text: cap[0]
      });
      continue;
    }

    // def
    if ((!bq && top) && (cap = this.rules.def.exec(src))) {
      src = src.substring(cap[0].length);
      this.tokens.links[cap[1].toLowerCase()] = {
        href: cap[2],
        title: cap[3]
      };
      continue;
    }

    // table (gfm)
    if (top && (cap = this.rules.table.exec(src))) {
      src = src.substring(cap[0].length);

      item = {
        type: 'table',
        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
        cells: cap[3].replace(/(?: *\| *)?\n$/, '').split('\n')
      };

      for (i = 0; i < item.align.length; i++) {
        if (/^ *-+: *$/.test(item.align[i])) {
          item.align[i] = 'right';
        } else if (/^ *:-+: *$/.test(item.align[i])) {
          item.align[i] = 'center';
        } else if (/^ *:-+ *$/.test(item.align[i])) {
          item.align[i] = 'left';
        } else {
          item.align[i] = null;
        }
      }

      for (i = 0; i < item.cells.length; i++) {
        item.cells[i] = item.cells[i]
          .replace(/^ *\| *| *\| *$/g, '')
          .split(/ *\| */);
      }

      this.tokens.push(item);

      continue;
    }

    // top-level paragraph
    if (top && (cap = this.rules.paragraph.exec(src))) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'paragraph',
        text: cap[1].charAt(cap[1].length - 1) === '\n'
          ? cap[1].slice(0, -1)
          : cap[1]
      });
      continue;
    }

    // text
    if (cap = this.rules.text.exec(src)) {
      // Top-level should never reach here.
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'text',
        text: cap[0]
      });
      continue;
    }

    if (src) {
      throw new
        Error('Infinite loop on byte: ' + src.charCodeAt(0));
    }
  }

  return this.tokens;
};

/**
 * Inline-Level Grammar
 */

var inline = {
  escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
  autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
  url: noop,
  tag: /^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,
  link: /^!?\[(inside)\]\(href\)/,
  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
  nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
  strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
  em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
  code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,
  br: /^ {2,}\n(?!\s*$)/,
  del: noop,
  text: /^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/
};

inline._inside = /(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;
inline._href = /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;

inline.link = replace(inline.link)
  ('inside', inline._inside)
  ('href', inline._href)
  ();

inline.reflink = replace(inline.reflink)
  ('inside', inline._inside)
  ();

/**
 * Normal Inline Grammar
 */

inline.normal = merge({}, inline);

/**
 * Pedantic Inline Grammar
 */

inline.pedantic = merge({}, inline.normal, {
  strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
  em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/
});

/**
 * GFM Inline Grammar
 */

inline.gfm = merge({}, inline.normal, {
  escape: replace(inline.escape)('])', '~|])')(),
  url: /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,
  del: /^~~(?=\S)([\s\S]*?\S)~~/,
  text: replace(inline.text)
    (']|', '~]|')
    ('|', '|https?://|')
    ()
});

/**
 * GFM + Line Breaks Inline Grammar
 */

inline.breaks = merge({}, inline.gfm, {
  br: replace(inline.br)('{2,}', '*')(),
  text: replace(inline.gfm.text)('{2,}', '*')()
});

/**
 * Inline Lexer & Compiler
 */

function InlineLexer(links, options) {
  this.options = options || marked.defaults;
  this.links = links;
  this.rules = inline.normal;
  this.renderer = this.options.renderer || new Renderer;
  this.renderer.options = this.options;

  if (!this.links) {
    throw new
      Error('Tokens array requires a `links` property.');
  }

  if (this.options.gfm) {
    if (this.options.breaks) {
      this.rules = inline.breaks;
    } else {
      this.rules = inline.gfm;
    }
  } else if (this.options.pedantic) {
    this.rules = inline.pedantic;
  }
}

/**
 * Expose Inline Rules
 */

InlineLexer.rules = inline;

/**
 * Static Lexing/Compiling Method
 */

InlineLexer.output = function(src, links, options) {
  var inline = new InlineLexer(links, options);
  return inline.output(src);
};

/**
 * Lexing/Compiling
 */

InlineLexer.prototype.output = function(src) {
  var out = ''
    , link
    , text
    , href
    , cap;

  while (src) {
    // escape
    if (cap = this.rules.escape.exec(src)) {
      src = src.substring(cap[0].length);
      out += cap[1];
      continue;
    }

    // autolink
    if (cap = this.rules.autolink.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[2] === '@') {
        text = cap[1].charAt(6) === ':'
          ? this.mangle(cap[1].substring(7))
          : this.mangle(cap[1]);
        href = this.mangle('mailto:') + text;
      } else {
        text = escape(cap[1]);
        href = text;
      }
      out += this.renderer.link(href, null, text);
      continue;
    }

    // url (gfm)
    if (!this.inLink && (cap = this.rules.url.exec(src))) {
      src = src.substring(cap[0].length);
      text = escape(cap[1]);
      href = text;
      out += this.renderer.link(href, null, text);
      continue;
    }

    // tag
    if (cap = this.rules.tag.exec(src)) {
      if (!this.inLink && /^<a /i.test(cap[0])) {
        this.inLink = true;
      } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
        this.inLink = false;
      }
      src = src.substring(cap[0].length);
      out += this.options.sanitize
        ? this.options.sanitizer
          ? this.options.sanitizer(cap[0])
          : escape(cap[0])
        : cap[0]
      continue;
    }

    // link
    if (cap = this.rules.link.exec(src)) {
      src = src.substring(cap[0].length);
      this.inLink = true;
      out += this.outputLink(cap, {
        href: cap[2],
        title: cap[3]
      });
      this.inLink = false;
      continue;
    }

    // reflink, nolink
    if ((cap = this.rules.reflink.exec(src))
        || (cap = this.rules.nolink.exec(src))) {
      src = src.substring(cap[0].length);
      link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
      link = this.links[link.toLowerCase()];
      if (!link || !link.href) {
        out += cap[0].charAt(0);
        src = cap[0].substring(1) + src;
        continue;
      }
      this.inLink = true;
      out += this.outputLink(cap, link);
      this.inLink = false;
      continue;
    }

    // strong
    if (cap = this.rules.strong.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.strong(this.output(cap[2] || cap[1]));
      continue;
    }

    // em
    if (cap = this.rules.em.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.em(this.output(cap[2] || cap[1]));
      continue;
    }

    // code
    if (cap = this.rules.code.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.codespan(escape(cap[2], true));
      continue;
    }

    // br
    if (cap = this.rules.br.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.br();
      continue;
    }

    // del (gfm)
    if (cap = this.rules.del.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.del(this.output(cap[1]));
      continue;
    }

    // text
    if (cap = this.rules.text.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.text(escape(this.smartypants(cap[0])));
      continue;
    }

    if (src) {
      throw new
        Error('Infinite loop on byte: ' + src.charCodeAt(0));
    }
  }

  return out;
};

/**
 * Compile Link
 */

InlineLexer.prototype.outputLink = function(cap, link) {
  var href = escape(link.href)
    , title = link.title ? escape(link.title) : null;

  return cap[0].charAt(0) !== '!'
    ? this.renderer.link(href, title, this.output(cap[1]))
    : this.renderer.image(href, title, escape(cap[1]));
};

/**
 * Smartypants Transformations
 */

InlineLexer.prototype.smartypants = function(text) {
  if (!this.options.smartypants) return text;
  return text
    // em-dashes
    .replace(/---/g, '\u2014')
    // en-dashes
    .replace(/--/g, '\u2013')
    // opening singles
    .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018')
    // closing singles & apostrophes
    .replace(/'/g, '\u2019')
    // opening doubles
    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c')
    // closing doubles
    .replace(/"/g, '\u201d')
    // ellipses
    .replace(/\.{3}/g, '\u2026');
};

/**
 * Mangle Links
 */

InlineLexer.prototype.mangle = function(text) {
  if (!this.options.mangle) return text;
  var out = ''
    , l = text.length
    , i = 0
    , ch;

  for (; i < l; i++) {
    ch = text.charCodeAt(i);
    if (Math.random() > 0.5) {
      ch = 'x' + ch.toString(16);
    }
    out += '&#' + ch + ';';
  }

  return out;
};

/**
 * Renderer
 */

function Renderer(options) {
  this.options = options || {};
}

Renderer.prototype.code = function(code, lang, escaped) {
  if (this.options.highlight) {
    var out = this.options.highlight(code, lang);
    if (out != null && out !== code) {
      escaped = true;
      code = out;
    }
  }

  if (!lang) {
    return '<pre><code>'
      + (escaped ? code : escape(code, true))
      + '\n</code></pre>';
  }

  return '<pre><code class="'
    + this.options.langPrefix
    + escape(lang, true)
    + '">'
    + (escaped ? code : escape(code, true))
    + '\n</code></pre>\n';
};

Renderer.prototype.blockquote = function(quote) {
  return '<blockquote>\n' + quote + '</blockquote>\n';
};

Renderer.prototype.html = function(html) {
  return html;
};

Renderer.prototype.heading = function(text, level, raw) {
  return '<h'
    + level
    + ' id="'
    + this.options.headerPrefix
    + raw.toLowerCase().replace(/[^\w]+/g, '-')
    + '">'
    + text
    + '</h'
    + level
    + '>\n';
};

Renderer.prototype.hr = function() {
  return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
};

Renderer.prototype.list = function(body, ordered) {
  var type = ordered ? 'ol' : 'ul';
  return '<' + type + '>\n' + body + '</' + type + '>\n';
};

Renderer.prototype.listitem = function(text) {
  return '<li>' + text + '</li>\n';
};

Renderer.prototype.paragraph = function(text) {
  return '<p>' + text + '</p>\n';
};

Renderer.prototype.table = function(header, body) {
  return '<table>\n'
    + '<thead>\n'
    + header
    + '</thead>\n'
    + '<tbody>\n'
    + body
    + '</tbody>\n'
    + '</table>\n';
};

Renderer.prototype.tablerow = function(content) {
  return '<tr>\n' + content + '</tr>\n';
};

Renderer.prototype.tablecell = function(content, flags) {
  var type = flags.header ? 'th' : 'td';
  var tag = flags.align
    ? '<' + type + ' style="text-align:' + flags.align + '">'
    : '<' + type + '>';
  return tag + content + '</' + type + '>\n';
};

// span level renderer
Renderer.prototype.strong = function(text) {
  return '<strong>' + text + '</strong>';
};

Renderer.prototype.em = function(text) {
  return '<em>' + text + '</em>';
};

Renderer.prototype.codespan = function(text) {
  return '<code>' + text + '</code>';
};

Renderer.prototype.br = function() {
  return this.options.xhtml ? '<br/>' : '<br>';
};

Renderer.prototype.del = function(text) {
  return '<del>' + text + '</del>';
};

Renderer.prototype.link = function(href, title, text) {
  if (this.options.sanitize) {
    try {
      var prot = decodeURIComponent(unescape(href))
        .replace(/[^\w:]/g, '')
        .toLowerCase();
    } catch (e) {
      return '';
    }
    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {
      return '';
    }
  }
  var out = '<a href="' + href + '"';
  if (title) {
    out += ' title="' + title + '"';
  }
  out += '>' + text + '</a>';
  return out;
};

Renderer.prototype.image = function(href, title, text) {
  var out = '<img src="' + href + '" alt="' + text + '"';
  if (title) {
    out += ' title="' + title + '"';
  }
  out += this.options.xhtml ? '/>' : '>';
  return out;
};

Renderer.prototype.text = function(text) {
  return text;
};

/**
 * Parsing & Compiling
 */

function Parser(options) {
  this.tokens = [];
  this.token = null;
  this.options = options || marked.defaults;
  this.options.renderer = this.options.renderer || new Renderer;
  this.renderer = this.options.renderer;
  this.renderer.options = this.options;
}

/**
 * Static Parse Method
 */

Parser.parse = function(src, options, renderer) {
  var parser = new Parser(options, renderer);
  return parser.parse(src);
};

/**
 * Parse Loop
 */

Parser.prototype.parse = function(src) {
  this.inline = new InlineLexer(src.links, this.options, this.renderer);
  this.tokens = src.reverse();

  var out = '';
  while (this.next()) {
    out += this.tok();
  }

  return out;
};

/**
 * Next Token
 */

Parser.prototype.next = function() {
  return this.token = this.tokens.pop();
};

/**
 * Preview Next Token
 */

Parser.prototype.peek = function() {
  return this.tokens[this.tokens.length - 1] || 0;
};

/**
 * Parse Text Tokens
 */

Parser.prototype.parseText = function() {
  var body = this.token.text;

  while (this.peek().type === 'text') {
    body += '\n' + this.next().text;
  }

  return this.inline.output(body);
};

/**
 * Parse Current Token
 */

Parser.prototype.tok = function() {
  switch (this.token.type) {
    case 'space': {
      return '';
    }
    case 'hr': {
      return this.renderer.hr();
    }
    case 'heading': {
      return this.renderer.heading(
        this.inline.output(this.token.text),
        this.token.depth,
        this.token.text);
    }
    case 'code': {
      return this.renderer.code(this.token.text,
        this.token.lang,
        this.token.escaped);
    }
    case 'table': {
      var header = ''
        , body = ''
        , i
        , row
        , cell
        , flags
        , j;

      // header
      cell = '';
      for (i = 0; i < this.token.header.length; i++) {
        flags = { header: true, align: this.token.align[i] };
        cell += this.renderer.tablecell(
          this.inline.output(this.token.header[i]),
          { header: true, align: this.token.align[i] }
        );
      }
      header += this.renderer.tablerow(cell);

      for (i = 0; i < this.token.cells.length; i++) {
        row = this.token.cells[i];

        cell = '';
        for (j = 0; j < row.length; j++) {
          cell += this.renderer.tablecell(
            this.inline.output(row[j]),
            { header: false, align: this.token.align[j] }
          );
        }

        body += this.renderer.tablerow(cell);
      }
      return this.renderer.table(header, body);
    }
    case 'blockquote_start': {
      var body = '';

      while (this.next().type !== 'blockquote_end') {
        body += this.tok();
      }

      return this.renderer.blockquote(body);
    }
    case 'list_start': {
      var body = ''
        , ordered = this.token.ordered;

      while (this.next().type !== 'list_end') {
        body += this.tok();
      }

      return this.renderer.list(body, ordered);
    }
    case 'list_item_start': {
      var body = '';

      while (this.next().type !== 'list_item_end') {
        body += this.token.type === 'text'
          ? this.parseText()
          : this.tok();
      }

      return this.renderer.listitem(body);
    }
    case 'loose_item_start': {
      var body = '';

      while (this.next().type !== 'list_item_end') {
        body += this.tok();
      }

      return this.renderer.listitem(body);
    }
    case 'html': {
      var html = !this.token.pre && !this.options.pedantic
        ? this.inline.output(this.token.text)
        : this.token.text;
      return this.renderer.html(html);
    }
    case 'paragraph': {
      return this.renderer.paragraph(this.inline.output(this.token.text));
    }
    case 'text': {
      return this.renderer.paragraph(this.parseText());
    }
  }
};

/**
 * Helpers
 */

function escape(html, encode) {
  return html
    .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

function unescape(html) {
  return html.replace(/&([#\w]+);/g, function(_, n) {
    n = n.toLowerCase();
    if (n === 'colon') return ':';
    if (n.charAt(0) === '#') {
      return n.charAt(1) === 'x'
        ? String.fromCharCode(parseInt(n.substring(2), 16))
        : String.fromCharCode(+n.substring(1));
    }
    return '';
  });
}

function replace(regex, opt) {
  regex = regex.source;
  opt = opt || '';
  return function self(name, val) {
    if (!name) return new RegExp(regex, opt);
    val = val.source || val;
    val = val.replace(/(^|[^\[])\^/g, '$1');
    regex = regex.replace(name, val);
    return self;
  };
}

function noop() {}
noop.exec = noop;

function merge(obj) {
  var i = 1
    , target
    , key;

  for (; i < arguments.length; i++) {
    target = arguments[i];
    for (key in target) {
      if (Object.prototype.hasOwnProperty.call(target, key)) {
        obj[key] = target[key];
      }
    }
  }

  return obj;
}


/**
 * Marked
 */

function marked(src, opt, callback) {
  if (callback || typeof opt === 'function') {
    if (!callback) {
      callback = opt;
      opt = null;
    }

    opt = merge({}, marked.defaults, opt || {});

    var highlight = opt.highlight
      , tokens
      , pending
      , i = 0;

    try {
      tokens = Lexer.lex(src, opt)
    } catch (e) {
      return callback(e);
    }

    pending = tokens.length;

    var done = function(err) {
      if (err) {
        opt.highlight = highlight;
        return callback(err);
      }

      var out;

      try {
        out = Parser.parse(tokens, opt);
      } catch (e) {
        err = e;
      }

      opt.highlight = highlight;

      return err
        ? callback(err)
        : callback(null, out);
    };

    if (!highlight || highlight.length < 3) {
      return done();
    }

    delete opt.highlight;

    if (!pending) return done();

    for (; i < tokens.length; i++) {
      (function(token) {
        if (token.type !== 'code') {
          return --pending || done();
        }
        return highlight(token.text, token.lang, function(err, code) {
          if (err) return done(err);
          if (code == null || code === token.text) {
            return --pending || done();
          }
          token.text = code;
          token.escaped = true;
          --pending || done();
        });
      })(tokens[i]);
    }

    return;
  }
  try {
    if (opt) opt = merge({}, marked.defaults, opt);
    return Parser.parse(Lexer.lex(src, opt), opt);
  } catch (e) {
    e.message += '\nPlease report this to https://github.com/chjj/marked.';
    if ((opt || marked.defaults).silent) {
      return '<p>An error occured:</p><pre>'
        + escape(e.message + '', true)
        + '</pre>';
    }
    throw e;
  }
}

/**
 * Options
 */

marked.options =
marked.setOptions = function(opt) {
  merge(marked.defaults, opt);
  return marked;
};

marked.defaults = {
  gfm: true,
  tables: true,
  breaks: false,
  pedantic: false,
  sanitize: false,
  sanitizer: null,
  mangle: true,
  smartLists: false,
  silent: false,
  highlight: null,
  langPrefix: 'lang-',
  smartypants: false,
  headerPrefix: '',
  renderer: new Renderer,
  xhtml: false
};

/**
 * Expose
 */

marked.Parser = Parser;
marked.parser = Parser.parse;

marked.Renderer = Renderer;

marked.Lexer = Lexer;
marked.lexer = Lexer.lex;

marked.InlineLexer = InlineLexer;
marked.inlineLexer = InlineLexer.output;

marked.parse = marked;

if (typeof module !== 'undefined' && typeof exports === 'object') {
  module.exports = marked;
} else if (typeof define === 'function' && define.amd) {
  define(function() { return marked; });
} else {
  this.marked = marked;
}

}).call(function() {
  return this || (typeof window !== 'undefined' ? window : global);
}());

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{}],10:[function(require,module,exports){
/**
 * Copyright 2012 Craig Campbell
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Mousetrap is a simple keyboard shortcut library for Javascript with
 * no external dependencies
 *
 * @version 1.1.2
 * @url craig.is/killing/mice
 */

  /**
   * mapping of special keycodes to their corresponding keys
   *
   * everything in this dictionary cannot use keypress events
   * so it has to be here to map to the correct keycodes for
   * keyup/keydown events
   *
   * @type {Object}
   */
  var _MAP = {
          8: 'backspace',
          9: 'tab',
          13: 'enter',
          16: 'shift',
          17: 'ctrl',
          18: 'alt',
          20: 'capslock',
          27: 'esc',
          32: 'space',
          33: 'pageup',
          34: 'pagedown',
          35: 'end',
          36: 'home',
          37: 'left',
          38: 'up',
          39: 'right',
          40: 'down',
          45: 'ins',
          46: 'del',
          91: 'meta',
          93: 'meta',
          224: 'meta'
      },

      /**
       * mapping for special characters so they can support
       *
       * this dictionary is only used incase you want to bind a
       * keyup or keydown event to one of these keys
       *
       * @type {Object}
       */
      _KEYCODE_MAP = {
          106: '*',
          107: '+',
          109: '-',
          110: '.',
          111 : '/',
          186: ';',
          187: '=',
          188: ',',
          189: '-',
          190: '.',
          191: '/',
          192: '`',
          219: '[',
          220: '\\',
          221: ']',
          222: '\''
      },

      /**
       * this is a mapping of keys that require shift on a US keypad
       * back to the non shift equivelents
       *
       * this is so you can use keyup events with these keys
       *
       * note that this will only work reliably on US keyboards
       *
       * @type {Object}
       */
      _SHIFT_MAP = {
          '~': '`',
          '!': '1',
          '@': '2',
          '#': '3',
          '$': '4',
          '%': '5',
          '^': '6',
          '&': '7',
          '*': '8',
          '(': '9',
          ')': '0',
          '_': '-',
          '+': '=',
          ':': ';',
          '\"': '\'',
          '<': ',',
          '>': '.',
          '?': '/',
          '|': '\\'
      },

      /**
       * this is a list of special strings you can use to map
       * to modifier keys when you specify your keyboard shortcuts
       *
       * @type {Object}
       */
      _SPECIAL_ALIASES = {
          'option': 'alt',
          'command': 'meta',
          'return': 'enter',
          'escape': 'esc'
      },

      /**
       * variable to store the flipped version of _MAP from above
       * needed to check if we should use keypress or not when no action
       * is specified
       *
       * @type {Object|undefined}
       */
      _REVERSE_MAP,

      /**
       * a list of all the callbacks setup via Mousetrap.bind()
       *
       * @type {Object}
       */
      _callbacks = {},

      /**
       * direct map of string combinations to callbacks used for trigger()
       *
       * @type {Object}
       */
      _direct_map = {},

      /**
       * keeps track of what level each sequence is at since multiple
       * sequences can start out with the same sequence
       *
       * @type {Object}
       */
      _sequence_levels = {},

      /**
       * variable to store the setTimeout call
       *
       * @type {null|number}
       */
      _reset_timer,

      /**
       * temporary state where we will ignore the next keyup
       *
       * @type {boolean|string}
       */
      _ignore_next_keyup = false,

      /**
       * are we currently inside of a sequence?
       * type of action ("keyup" or "keydown" or "keypress") or false
       *
       * @type {boolean|string}
       */
      _inside_sequence = false;

  /**
   * loop through the f keys, f1 to f19 and add them to the map
   * programatically
   */
  for (var i = 1; i < 20; ++i) {
      _MAP[111 + i] = 'f' + i;
  }

  /**
   * loop through to map numbers on the numeric keypad
   */
  for (i = 0; i <= 9; ++i) {
      _MAP[i + 96] = i;
  }

  /**
   * cross browser add event method
   *
   * @param {Element|HTMLDocument} object
   * @param {string} type
   * @param {Function} callback
   * @returns void
   */
  function _addEvent(object, type, callback) {
      if (object.addEventListener) {
          return object.addEventListener(type, callback, false);
      }

      object.attachEvent('on' + type, callback);
  }

  /**
   * takes the event and returns the key character
   *
   * @param {Event} e
   * @return {string}
   */
  function _characterFromEvent(e) {

      // for keypress events we should return the character as is
      if (e.type == 'keypress') {
          return String.fromCharCode(e.which);
      }

      // for non keypress events the special maps are needed
      if (_MAP[e.which]) {
          return _MAP[e.which];
      }

      if (_KEYCODE_MAP[e.which]) {
          return _KEYCODE_MAP[e.which];
      }

      // if it is not in the special map
      return String.fromCharCode(e.which).toLowerCase();
  }

  /**
   * should we stop this event before firing off callbacks
   *
   * @param {Event} e
   * @return {boolean}
   */
  function _stop(e) {
      var element = e.target || e.srcElement,
          tag_name = element.tagName;

      // if the element has the class "mousetrap" then no need to stop
      if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
          return false;
      }

      // stop for input, select, and textarea
      return tag_name == 'INPUT' || tag_name == 'SELECT' || tag_name == 'TEXTAREA' || (element.contentEditable && element.contentEditable == 'true');
  }

  /**
   * checks if two arrays are equal
   *
   * @param {Array} modifiers1
   * @param {Array} modifiers2
   * @returns {boolean}
   */
  function _modifiersMatch(modifiers1, modifiers2) {
      return modifiers1.sort().join(',') === modifiers2.sort().join(',');
  }

  /**
   * resets all sequence counters except for the ones passed in
   *
   * @param {Object} do_not_reset
   * @returns void
   */
  function _resetSequences(do_not_reset) {
      do_not_reset = do_not_reset || {};

      var active_sequences = false,
          key;

      for (key in _sequence_levels) {
          if (do_not_reset[key]) {
              active_sequences = true;
              continue;
          }
          _sequence_levels[key] = 0;
      }

      if (!active_sequences) {
          _inside_sequence = false;
      }
  }

  /**
   * finds all callbacks that match based on the keycode, modifiers,
   * and action
   *
   * @param {string} character
   * @param {Array} modifiers
   * @param {string} action
   * @param {boolean=} remove - should we remove any matches
   * @param {string=} combination
   * @returns {Array}
   */
  function _getMatches(character, modifiers, action, remove, combination) {
      var i,
          callback,
          matches = [];

      // if there are no events related to this keycode
      if (!_callbacks[character]) {
          return [];
      }

      // if a modifier key is coming up on its own we should allow it
      if (action == 'keyup' && _isModifier(character)) {
          modifiers = [character];
      }

      // loop through all callbacks for the key that was pressed
      // and see if any of them match
      for (i = 0; i < _callbacks[character].length; ++i) {
          callback = _callbacks[character][i];

          // if this is a sequence but it is not at the right level
          // then move onto the next match
          if (callback.seq && _sequence_levels[callback.seq] != callback.level) {
              continue;
          }

          // if the action we are looking for doesn't match the action we got
          // then we should keep going
          if (action != callback.action) {
              continue;
          }

          // if this is a keypress event that means that we need to only
          // look at the character, otherwise check the modifiers as
          // well
          if (action == 'keypress' || _modifiersMatch(modifiers, callback.modifiers)) {

              // remove is used so if you change your mind and call bind a
              // second time with a new function the first one is overwritten
              if (remove && callback.combo == combination) {
                  _callbacks[character].splice(i, 1);
              }

              matches.push(callback);
          }
      }

      return matches;
  }

  /**
   * takes a key event and figures out what the modifiers are
   *
   * @param {Event} e
   * @returns {Array}
   */
  function _eventModifiers(e) {
      var modifiers = [];

      if (e.shiftKey) {
          modifiers.push('shift');
      }

      if (e.altKey) {
          modifiers.push('alt');
      }

      if (e.ctrlKey) {
          modifiers.push('ctrl');
      }

      if (e.metaKey) {
          modifiers.push('meta');
      }

      return modifiers;
  }

  /**
   * actually calls the callback function
   *
   * if your callback function returns false this will use the jquery
   * convention - prevent default and stop propogation on the event
   *
   * @param {Function} callback
   * @param {Event} e
   * @returns void
   */
  function _fireCallback(callback, e) {
      if (callback(e) === false) {
          if (e.preventDefault) {
              e.preventDefault();
          }

          if (e.stopPropagation) {
              e.stopPropagation();
          }

          e.returnValue = false;
          e.cancelBubble = true;
      }
  }

  /**
   * handles a character key event
   *
   * @param {string} character
   * @param {Event} e
   * @returns void
   */
  function _handleCharacter(character, e) {

      // if this event should not happen stop here
      if (_stop(e)) {
          return;
      }

      var callbacks = _getMatches(character, _eventModifiers(e), e.type),
          i,
          do_not_reset = {},
          processed_sequence_callback = false;

      // loop through matching callbacks for this key event
      for (i = 0; i < callbacks.length; ++i) {

          // fire for all sequence callbacks
          // this is because if for example you have multiple sequences
          // bound such as "g i" and "g t" they both need to fire the
          // callback for matching g cause otherwise you can only ever
          // match the first one
          if (callbacks[i].seq) {
              processed_sequence_callback = true;

              // keep a list of which sequences were matches for later
              do_not_reset[callbacks[i].seq] = 1;
              _fireCallback(callbacks[i].callback, e);
              continue;
          }

          // if there were no sequence matches but we are still here
          // that means this is a regular match so we should fire that
          if (!processed_sequence_callback && !_inside_sequence) {
              _fireCallback(callbacks[i].callback, e);
          }
      }

      // if you are inside of a sequence and the key you are pressing
      // is not a modifier key then we should reset all sequences
      // that were not matched by this key event
      if (e.type == _inside_sequence && !_isModifier(character)) {
          _resetSequences(do_not_reset);
      }
  }

  /**
   * handles a keydown event
   *
   * @param {Event} e
   * @returns void
   */
  function _handleKey(e) {

      // normalize e.which for key events
      // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion
      e.which = typeof e.which == "number" ? e.which : e.keyCode;

      var character = _characterFromEvent(e);

      // no character found then stop
      if (!character) {
          return;
      }

      if (e.type == 'keyup' && _ignore_next_keyup == character) {
          _ignore_next_keyup = false;
          return;
      }

      _handleCharacter(character, e);
  }

  /**
   * determines if the keycode specified is a modifier key or not
   *
   * @param {string} key
   * @returns {boolean}
   */
  function _isModifier(key) {
      return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';
  }

  /**
   * called to set a 1 second timeout on the specified sequence
   *
   * this is so after each key press in the sequence you have 1 second
   * to press the next key before you have to start over
   *
   * @returns void
   */
  function _resetSequenceTimer() {
      clearTimeout(_reset_timer);
      _reset_timer = setTimeout(_resetSequences, 1000);
  }

  /**
   * reverses the map lookup so that we can look for specific keys
   * to see what can and can't use keypress
   *
   * @return {Object}
   */
  function _getReverseMap() {
      if (!_REVERSE_MAP) {
          _REVERSE_MAP = {};
          for (var key in _MAP) {

              // pull out the numeric keypad from here cause keypress should
              // be able to detect the keys from the character
              if (key > 95 && key < 112) {
                  continue;
              }

              if (_MAP.hasOwnProperty(key)) {
                  _REVERSE_MAP[_MAP[key]] = key;
              }
          }
      }
      return _REVERSE_MAP;
  }

  /**
   * picks the best action based on the key combination
   *
   * @param {string} key - character for key
   * @param {Array} modifiers
   * @param {string=} action passed in
   */
  function _pickBestAction(key, modifiers, action) {

      // if no action was picked in we should try to pick the one
      // that we think would work best for this key
      if (!action) {
          action = _getReverseMap()[key] ? 'keydown' : 'keypress';
      }

      // modifier keys don't work as expected with keypress,
      // switch to keydown
      if (action == 'keypress' && modifiers.length) {
          action = 'keydown';
      }

      return action;
  }

  /**
   * binds a key sequence to an event
   *
   * @param {string} combo - combo specified in bind call
   * @param {Array} keys
   * @param {Function} callback
   * @param {string=} action
   * @returns void
   */
  function _bindSequence(combo, keys, callback, action) {

      // start off by adding a sequence level record for this combination
      // and setting the level to 0
      _sequence_levels[combo] = 0;

      // if there is no action pick the best one for the first key
      // in the sequence
      if (!action) {
          action = _pickBestAction(keys[0], []);
      }

      /**
       * callback to increase the sequence level for this sequence and reset
       * all other sequences that were active
       *
       * @param {Event} e
       * @returns void
       */
      var _increaseSequence = function(e) {
              _inside_sequence = action;
              ++_sequence_levels[combo];
              _resetSequenceTimer();
          },

          /**
           * wraps the specified callback inside of another function in order
           * to reset all sequence counters as soon as this sequence is done
           *
           * @param {Event} e
           * @returns void
           */
          _callbackAndReset = function(e) {
              _fireCallback(callback, e);

              // we should ignore the next key up if the action is key down
              // or keypress.  this is so if you finish a sequence and
              // release the key the final key will not trigger a keyup
              if (action !== 'keyup') {
                  _ignore_next_keyup = _characterFromEvent(e);
              }

              // weird race condition if a sequence ends with the key
              // another sequence begins with
              setTimeout(_resetSequences, 10);
          },
          i;

      // loop through keys one at a time and bind the appropriate callback
      // function.  for any key leading up to the final one it should
      // increase the sequence. after the final, it should reset all sequences
      for (i = 0; i < keys.length; ++i) {
          _bindSingle(keys[i], i < keys.length - 1 ? _increaseSequence : _callbackAndReset, action, combo, i);
      }
  }

  /**
   * binds a single keyboard combination
   *
   * @param {string} combination
   * @param {Function} callback
   * @param {string=} action
   * @param {string=} sequence_name - name of sequence if part of sequence
   * @param {number=} level - what part of the sequence the command is
   * @returns void
   */
  function _bindSingle(combination, callback, action, sequence_name, level) {

      // make sure multiple spaces in a row become a single space
      combination = combination.replace(/\s+/g, ' ');

      var sequence = combination.split(' '),
          i,
          key,
          keys,
          modifiers = [];

      // if this pattern is a sequence of keys then run through this method
      // to reprocess each pattern one key at a time
      if (sequence.length > 1) {
          return _bindSequence(combination, sequence, callback, action);
      }

      // take the keys from this pattern and figure out what the actual
      // pattern is all about
      keys = combination === '+' ? ['+'] : combination.split('+');

      for (i = 0; i < keys.length; ++i) {
          key = keys[i];

          // normalize key names
          if (_SPECIAL_ALIASES[key]) {
              key = _SPECIAL_ALIASES[key];
          }

          // if this is not a keypress event then we should
          // be smart about using shift keys
          // this will only work for US keyboards however
          if (action && action != 'keypress' && _SHIFT_MAP[key]) {
              key = _SHIFT_MAP[key];
              modifiers.push('shift');
          }

          // if this key is a modifier then add it to the list of modifiers
          if (_isModifier(key)) {
              modifiers.push(key);
          }
      }

      // depending on what the key combination is
      // we will try to pick the best event for it
      action = _pickBestAction(key, modifiers, action);

      // make sure to initialize array if this is the first time
      // a callback is added for this key
      if (!_callbacks[key]) {
          _callbacks[key] = [];
      }

      // remove an existing match if there is one
      _getMatches(key, modifiers, action, !sequence_name, combination);

      // add this call back to the array
      // if it is a sequence put it at the beginning
      // if not put it at the end
      //
      // this is important because the way these are processed expects
      // the sequence ones to come first
      _callbacks[key][sequence_name ? 'unshift' : 'push']({
          callback: callback,
          modifiers: modifiers,
          action: action,
          seq: sequence_name,
          level: level,
          combo: combination
      });
  }

  /**
   * binds multiple combinations to the same callback
   *
   * @param {Array} combinations
   * @param {Function} callback
   * @param {string|undefined} action
   * @returns void
   */
  function _bindMultiple(combinations, callback, action) {
      for (var i = 0; i < combinations.length; ++i) {
          _bindSingle(combinations[i], callback, action);
      }
  }

  // start!
  _addEvent(document, 'keypress', _handleKey);
  _addEvent(document, 'keydown', _handleKey);
  _addEvent(document, 'keyup', _handleKey);

  var mousetrap = {

      /**
       * binds an event to mousetrap
       *
       * can be a single key, a combination of keys separated with +,
       * a comma separated list of keys, an array of keys, or
       * a sequence of keys separated by spaces
       *
       * be sure to list the modifier keys first to make sure that the
       * correct key ends up getting bound (the last key in the pattern)
       *
       * @param {string|Array} keys
       * @param {Function} callback
       * @param {string=} action - 'keypress', 'keydown', or 'keyup'
       * @returns void
       */
      bind: function(keys, callback, action) {
          _bindMultiple(keys instanceof Array ? keys : [keys], callback, action);
          _direct_map[keys + ':' + action] = callback;
          return this;
      },

      /**
       * unbinds an event to mousetrap
       *
       * the unbinding sets the callback function of the specified key combo
       * to an empty function and deletes the corresponding key in the
       * _direct_map dict.
       *
       * the keycombo+action has to be exactly the same as
       * it was defined in the bind method
       *
       * TODO: actually remove this from the _callbacks dictionary instead
       * of binding an empty function
       *
       * @param {string|Array} keys
       * @param {string} action
       * @returns void
       */
      unbind: function(keys, action) {
          if (_direct_map[keys + ':' + action]) {
              delete _direct_map[keys + ':' + action];
              this.bind(keys, function() {}, action);
          }
          return this;
      },

      /**
       * triggers an event that has already been bound
       *
       * @param {string} keys
       * @param {string=} action
       * @returns void
       */
      trigger: function(keys, action) {
          _direct_map[keys + ':' + action]();
          return this;
      },

      /**
       * resets the library back to its initial state.  this is useful
       * if you want to clear out the current keyboard shortcuts and bind
       * new ones - for example if you switch to another page
       *
       * @returns void
       */
      reset: function() {
          _callbacks = {};
          _direct_map = {};
          return this;
      }
  };

module.exports = mousetrap;


},{}],11:[function(require,module,exports){
var EventEmitter, api, hist, slide_prefix, util,
  slice = [].slice;

hist = window.history;

slide_prefix = '#slide-';

EventEmitter = require('events').EventEmitter;

util = require('util');

api = (function() {
  var $slidePack, current, emitter, handleNavigation, init, installNavigationHandler, max, navigate, next, onEvent, prev, setupPager, show, status;
  emitter = new EventEmitter;
  onEvent = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return emitter.on.apply(emitter, args);
  };
  current = 1;
  max = 1;
  $slidePack = {};
  init = function(options) {
    $slidePack = options.slidePack;
    max = $slidePack.find('section').length;
    setupPager();
    installNavigationHandler();
    return show(current);
  };
  setupPager = function() {
    var state;
    if (state = hist.state) {
      return current = state.current;
    }
  };
  prev = function() {
    current -= 1;
    if (current < 1) {
      current = max;
    }
    return navigate();
  };
  next = function() {
    current += 1;
    if (current > max) {
      current = 1;
    }
    return navigate();
  };
  show = function(to) {
    $slidePack.find('section.active').removeClass('active');
    return $slidePack.find('section').eq(to - 1).addClass('active');
  };
  navigate = function() {
    show(current);
    emitter.emit('navigate');
    return hist.pushState({
      current: current
    }, "Slide " + current + " / " + max, "" + slide_prefix + current);
  };
  handleNavigation = function(event) {
    if (event.state) {
      return show(event.state.current);
    } else {
      current = Number(window.location.hash.replace(slide_prefix, ''));
      if (current) {
        return show(current);
      }
    }
  };
  installNavigationHandler = function() {
    return window.onpopstate = handleNavigation;
  };
  status = function() {
    return {
      total: max,
      current: current
    };
  };
  return {
    status: status,
    init: init,
    prev: prev,
    next: next,
    on: onEvent
  };
})();

module.exports = api;



},{"events":4,"util":8}],12:[function(require,module,exports){
var $, api, mousetrap, nav;

api = require('./slide-pack-api');

mousetrap = require('mousetrap');

$ = require('zeptojs');

mousetrap.bind(['left', 'up', 'k', 'h', 'pageup'], api.prev);

mousetrap.bind(['right', 'down', 'j', 'l', 'pagedown'], api.next);

nav = $('<nav><a>←</a><a>→</a></nav>');

$('body').append(nav);

$(document).on('click', 'nav a:first-child', function(e) {
  return api.prev();
});

$(document).on('click', 'nav a:last-child', function(e) {
  return api.next();
});

$(document).on('swipeLeft', function() {
  return api.next();
});

$(document).on('swipeRight', function() {
  return api.prev();
});



},{"./slide-pack-api":11,"mousetrap":10,"zeptojs":3}],13:[function(require,module,exports){
var chop, doChop, generateSlide, getSlideClass, isNewSlideMark, markdown, slidePackProcessor, slider;

markdown = require('marked');

isNewSlideMark = function(node) {
  return node && node.type === "paragraph" && node.text.indexOf('--') === 0;
};

getSlideClass = function(node) {
  return node.text.substr(3);
};

doChop = function(slides, tokens) {
  var node, slide;
  if (tokens.length === 0) {
    return slides;
  }
  slide = [];
  slide.links = {};
  node = tokens.shift();
  if (isNewSlideMark(node)) {
    slide.slideClass = getSlideClass(node);
  }
  while (node = tokens.shift()) {
    if (isNewSlideMark(node)) {
      tokens.unshift(node);
      break;
    } else {
      slide.push(node);
    }
  }
  slides.push(slide);
  return doChop(slides, tokens);
};

chop = function(tokens) {
  return doChop([], tokens);
};

slider = function(md) {
  var tokens;
  tokens = markdown.lexer(md);
  return chop(tokens);
};

generateSlide = function(slide) {
  return {
    cssClass: slide.slideClass,
    html: markdown.parser(slide)
  };
};

slidePackProcessor = (function() {
  var process;
  process = function(md) {
    var i, len, results, slide, slides;
    slides = slider(md);
    results = [];
    for (i = 0, len = slides.length; i < len; i++) {
      slide = slides[i];
      results.push(generateSlide(slide));
    }
    return results;
  };
  return {
    process: process
  };
})();

module.exports = slidePackProcessor;



},{"marked":9}],14:[function(require,module,exports){
var $, api;

api = require('./slide-pack-api');

$ = require('zeptojs');

$(function() {
  var progress, updateProgress;
  progress = $('<progress></progress>');
  updateProgress = function() {
    var status;
    status = api.status();
    return progress.attr({
      max: status.total,
      value: status.current
    });
  };
  updateProgress();
  api.on('navigate', updateProgress);
  return $('body').append(progress);
});



},{"./slide-pack-api":11,"zeptojs":3}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvYXNpcy9jb2RlL3dvcmsvc2xpZGUtcGFjay1naC1wYWdlcy9zcmMvaW5kZXguY29mZmVlIiwibGliL2hpZ2hsaWdodGpzL2hpZ2hsaWdodC5wYWNrLmpzIiwibGliL3plcHRvanMvemVwdG8uanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3V0aWwvdXRpbC5qcyIsIm5vZGVfbW9kdWxlcy9tYXJrZWQvbGliL21hcmtlZC5qcyIsIm5vZGVfbW9kdWxlcy9tb3VzZXRyYXAvbW91c2V0cmFwLmpzIiwiL1VzZXJzL2FzaXMvY29kZS93b3JrL3NsaWRlLXBhY2stZ2gtcGFnZXMvc3JjL3NsaWRlLXBhY2stYXBpLmNvZmZlZSIsIi9Vc2Vycy9hc2lzL2NvZGUvd29yay9zbGlkZS1wYWNrLWdoLXBhZ2VzL3NyYy9zbGlkZS1wYWNrLW5hdmlnYXRpb24uY29mZmVlIiwiL1VzZXJzL2FzaXMvY29kZS93b3JrL3NsaWRlLXBhY2stZ2gtcGFnZXMvc3JjL3NsaWRlLXBhY2stcHJvY2Vzc29yLmNvZmZlZSIsIi9Vc2Vycy9hc2lzL2NvZGUvd29yay9zbGlkZS1wYWNrLWdoLXBhZ2VzL3NyYy9zbGlkZS1wYWNrLXVpLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLElBQUE7O0FBQUEsRUFBQSxHQUFLLE9BQUEsQ0FBUSxhQUFSOztBQUNMLENBQUEsR0FBSSxPQUFBLENBQVEsU0FBUjs7QUFFSixDQUFBLENBQUUsU0FBQTtFQUNBLElBQWdDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBTCxJQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBbkQ7V0FBQSxDQUFBLENBQUUsTUFBRixDQUFTLENBQUMsUUFBVixDQUFtQixRQUFuQixFQUFBOztBQURBLENBQUY7O0FBR0EsU0FBQSxHQUFZLE9BQUEsQ0FBUSx3QkFBUjs7QUFDWixHQUFBLEdBQU0sT0FBQSxDQUFRLGtCQUFSOztBQUNOLE9BQUEsQ0FBUSx5QkFBUjs7QUFDQSxPQUFBLENBQVEsaUJBQVI7O0FBRUEsWUFBQSxHQUFlLFNBQUE7QUFDYixNQUFBO0VBQUEsSUFBRyxDQUFBLEdBQUksTUFBTSxDQUFDLDBCQUFkO1dBQ0UsQ0FBQSxDQUFFLENBQUEsQ0FBRSxTQUFGLENBQUYsRUFERjs7QUFEYTs7QUFLZixDQUFBLENBQUUsbUJBQUYsQ0FBc0IsQ0FBQyxJQUF2QixDQUE0QixTQUFBO0FBQzFCLE1BQUE7RUFBQSxVQUFBLEdBQWEsQ0FBQSxDQUFFLElBQUY7RUFDYixNQUFBLEdBQVMsU0FBUyxDQUFDLE9BQVYsQ0FBa0IsVUFBVSxDQUFDLElBQVgsQ0FBQSxDQUFsQjtFQUVULFFBQUEsR0FBVyxDQUFBLENBQUUscUJBQUY7QUFDWCxPQUFBLHdDQUFBOztJQUNFLE1BQUEsR0FBUyxDQUFBLENBQUUscUJBQUYsQ0FDUCxDQUFDLFFBRE0sQ0FDRyxLQUFLLENBQUMsUUFEVDtJQUdULE1BQU0sQ0FBQyxJQUFQLENBQVksS0FBSyxDQUFDLElBQWxCO0lBRUEsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsTUFBaEI7QUFORjtFQVFBLENBQUEsQ0FBRSxNQUFGLENBQVMsQ0FBQyxNQUFWLENBQWlCLFFBQWpCO0VBSUEsVUFBVSxDQUFDLElBQVgsQ0FBZ0IsMkJBQWhCLEVBQTZDLEVBQTdDO0VBQ0EsVUFBVSxDQUFDLFVBQVgsQ0FBc0IsaUJBQXRCO1NBRUEsWUFBQSxDQUFBO0FBcEIwQixDQUE1Qjs7QUFzQkEsR0FBRyxDQUFDLElBQUosQ0FBUztFQUFBLFNBQUEsRUFBWSxDQUFBLENBQUUsU0FBRixDQUFaO0NBQVQ7O0FBRUEsRUFBRSxDQUFDLHNCQUFILENBQUE7Ozs7O0FDeENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbmlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN2tCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3h3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMveEJBLElBQUEsMkNBQUE7RUFBQTs7QUFBQSxJQUFBLEdBQWUsTUFBTSxDQUFDOztBQUN0QixZQUFBLEdBQWU7O0FBQ2YsWUFBQSxHQUFlLE9BQUEsQ0FBUSxRQUFSLENBQWlCLENBQUM7O0FBQ2pDLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUjs7QUFFUCxHQUFBLEdBQVMsQ0FBQSxTQUFBO0FBRVAsTUFBQTtFQUFBLE9BQUEsR0FBVSxJQUFJO0VBR2QsT0FBQSxHQUFVLFNBQUE7QUFBYSxRQUFBO0lBQVo7V0FBWSxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQVgsQ0FBaUIsT0FBakIsRUFBMEIsSUFBMUI7RUFBYjtFQUVWLE9BQUEsR0FBVztFQUNYLEdBQUEsR0FBVztFQUNYLFVBQUEsR0FBYTtFQUViLElBQUEsR0FBTyxTQUFDLE9BQUQ7SUFFTCxVQUFBLEdBQWEsT0FBTyxDQUFDO0lBRXJCLEdBQUEsR0FBTSxVQUFVLENBQUMsSUFBWCxDQUFnQixTQUFoQixDQUEwQixDQUFDO0lBRWpDLFVBQUEsQ0FBQTtJQUNBLHdCQUFBLENBQUE7V0FFQSxJQUFBLENBQUssT0FBTDtFQVRLO0VBV1AsVUFBQSxHQUFhLFNBQUE7QUFDWCxRQUFBO0lBQUEsSUFBRyxLQUFBLEdBQVEsSUFBSSxDQUFDLEtBQWhCO2FBQ0UsT0FBQSxHQUFVLEtBQUssQ0FBQyxRQURsQjs7RUFEVztFQUliLElBQUEsR0FBTyxTQUFBO0lBQ0wsT0FBQSxJQUFXO0lBQ1gsSUFBaUIsT0FBQSxHQUFVLENBQTNCO01BQUEsT0FBQSxHQUFVLElBQVY7O1dBQ0EsUUFBQSxDQUFBO0VBSEs7RUFLUCxJQUFBLEdBQU8sU0FBQTtJQUNMLE9BQUEsSUFBVztJQUNYLElBQWUsT0FBQSxHQUFVLEdBQXpCO01BQUEsT0FBQSxHQUFVLEVBQVY7O1dBQ0EsUUFBQSxDQUFBO0VBSEs7RUFLUCxJQUFBLEdBQU8sU0FBQyxFQUFEO0lBQ0wsVUFBVSxDQUFDLElBQVgsQ0FBZ0IsZ0JBQWhCLENBQWlDLENBQUMsV0FBbEMsQ0FBOEMsUUFBOUM7V0FDQSxVQUFVLENBQUMsSUFBWCxDQUFnQixTQUFoQixDQUEwQixDQUFDLEVBQTNCLENBQThCLEVBQUEsR0FBSyxDQUFuQyxDQUFxQyxDQUFDLFFBQXRDLENBQStDLFFBQS9DO0VBRks7RUFJUCxRQUFBLEdBQVcsU0FBQTtJQUNULElBQUEsQ0FBSyxPQUFMO0lBQ0EsT0FBTyxDQUFDLElBQVIsQ0FBYSxVQUFiO1dBQ0EsSUFBSSxDQUFDLFNBQUwsQ0FBZTtNQUFBLE9BQUEsRUFBVSxPQUFWO0tBQWYsRUFBa0MsUUFBQSxHQUFTLE9BQVQsR0FBaUIsS0FBakIsR0FBc0IsR0FBeEQsRUFBK0QsRUFBQSxHQUFHLFlBQUgsR0FBa0IsT0FBakY7RUFIUztFQUtYLGdCQUFBLEdBQW1CLFNBQUMsS0FBRDtJQUNqQixJQUFHLEtBQUssQ0FBQyxLQUFUO2FBRUUsSUFBQSxDQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBakIsRUFGRjtLQUFBLE1BQUE7TUFLRSxPQUFBLEdBQVcsTUFBRCxDQUFTLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQXJCLENBQTZCLFlBQTdCLEVBQTBDLEVBQTFDLENBQVQ7TUFDVixJQUFpQixPQUFqQjtlQUFBLElBQUEsQ0FBSyxPQUFMLEVBQUE7T0FORjs7RUFEaUI7RUFTbkIsd0JBQUEsR0FBMkIsU0FBQTtXQUN6QixNQUFNLENBQUMsVUFBUCxHQUFvQjtFQURLO0VBRzNCLE1BQUEsR0FBUyxTQUFBO1dBQ1A7TUFBQSxLQUFBLEVBQVEsR0FBUjtNQUNBLE9BQUEsRUFBVSxPQURWOztFQURPO1NBSVQ7SUFBQSxNQUFBLEVBQVMsTUFBVDtJQUNBLElBQUEsRUFBTyxJQURQO0lBRUEsSUFBQSxFQUFPLElBRlA7SUFHQSxJQUFBLEVBQU8sSUFIUDtJQUlBLEVBQUEsRUFBSyxPQUpMOztBQTdETyxDQUFBLENBQUgsQ0FBQTs7QUFtRU4sTUFBTSxDQUFDLE9BQVAsR0FBaUI7Ozs7O0FDeEVqQixJQUFBOztBQUFBLEdBQUEsR0FBTSxPQUFBLENBQVEsa0JBQVI7O0FBQ04sU0FBQSxHQUFZLE9BQUEsQ0FBUSxXQUFSOztBQUNaLENBQUEsR0FBSSxPQUFBLENBQVEsU0FBUjs7QUFJSixTQUFTLENBQUMsSUFBVixDQUFlLENBQUMsTUFBRCxFQUFTLElBQVQsRUFBZSxHQUFmLEVBQW9CLEdBQXBCLEVBQXlCLFFBQXpCLENBQWYsRUFBbUQsR0FBRyxDQUFDLElBQXZEOztBQUNBLFNBQVMsQ0FBQyxJQUFWLENBQWUsQ0FBQyxPQUFELEVBQVUsTUFBVixFQUFrQixHQUFsQixFQUF1QixHQUF2QixFQUE0QixVQUE1QixDQUFmLEVBQXdELEdBQUcsQ0FBQyxJQUE1RDs7QUFHQSxHQUFBLEdBQU0sQ0FBQSxDQUFFLDZCQUFGOztBQUNOLENBQUEsQ0FBRSxNQUFGLENBQVMsQ0FBQyxNQUFWLENBQWlCLEdBQWpCOztBQUVBLENBQUEsQ0FBRSxRQUFGLENBQVcsQ0FBQyxFQUFaLENBQWUsT0FBZixFQUF3QixtQkFBeEIsRUFBNkMsU0FBQyxDQUFEO1NBQzNDLEdBQUcsQ0FBQyxJQUFKLENBQUE7QUFEMkMsQ0FBN0M7O0FBR0EsQ0FBQSxDQUFFLFFBQUYsQ0FBVyxDQUFDLEVBQVosQ0FBZSxPQUFmLEVBQXdCLGtCQUF4QixFQUE0QyxTQUFDLENBQUQ7U0FDMUMsR0FBRyxDQUFDLElBQUosQ0FBQTtBQUQwQyxDQUE1Qzs7QUFHQSxDQUFBLENBQUUsUUFBRixDQUFXLENBQUMsRUFBWixDQUFlLFdBQWYsRUFBNEIsU0FBQTtTQUMxQixHQUFHLENBQUMsSUFBSixDQUFBO0FBRDBCLENBQTVCOztBQUdBLENBQUEsQ0FBRSxRQUFGLENBQVcsQ0FBQyxFQUFaLENBQWUsWUFBZixFQUE2QixTQUFBO1NBQzNCLEdBQUcsQ0FBQyxJQUFKLENBQUE7QUFEMkIsQ0FBN0I7Ozs7O0FDdEJBLElBQUE7O0FBQUEsUUFBQSxHQUFXLE9BQUEsQ0FBUSxRQUFSOztBQUVYLGNBQUEsR0FBaUIsU0FBQyxJQUFEO1NBQ2YsSUFBQSxJQUFRLElBQUksQ0FBQyxJQUFMLEtBQWEsV0FBckIsSUFBb0MsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFWLENBQWtCLElBQWxCLENBQUEsS0FBMkI7QUFEaEQ7O0FBR2pCLGFBQUEsR0FBZ0IsU0FBQyxJQUFEO1NBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFWLENBQWlCLENBQWpCO0FBRGM7O0FBR2hCLE1BQUEsR0FBUyxTQUFDLE1BQUQsRUFBUyxNQUFUO0FBQ1AsTUFBQTtFQUFBLElBQWlCLE1BQU0sQ0FBQyxNQUFQLEtBQWlCLENBQWxDO0FBQUEsV0FBTyxPQUFQOztFQUVBLEtBQUEsR0FBUTtFQUNSLEtBQUssQ0FBQyxLQUFOLEdBQWM7RUFFZCxJQUFBLEdBQU8sTUFBTSxDQUFDLEtBQVAsQ0FBQTtFQUNQLElBQUcsY0FBQSxDQUFlLElBQWYsQ0FBSDtJQUNFLEtBQUssQ0FBQyxVQUFOLEdBQW1CLGFBQUEsQ0FBYyxJQUFkLEVBRHJCOztBQUdBLFNBQU0sSUFBQSxHQUFPLE1BQU0sQ0FBQyxLQUFQLENBQUEsQ0FBYjtJQUNFLElBQUcsY0FBQSxDQUFlLElBQWYsQ0FBSDtNQUNFLE1BQU0sQ0FBQyxPQUFQLENBQWUsSUFBZjtBQUNBLFlBRkY7S0FBQSxNQUFBO01BSUUsS0FBSyxDQUFDLElBQU4sQ0FBVyxJQUFYLEVBSkY7O0VBREY7RUFPQSxNQUFNLENBQUMsSUFBUCxDQUFZLEtBQVo7U0FDQSxNQUFBLENBQU8sTUFBUCxFQUFlLE1BQWY7QUFsQk87O0FBb0JULElBQUEsR0FBTyxTQUFDLE1BQUQ7U0FDTCxNQUFBLENBQU8sRUFBUCxFQUFXLE1BQVg7QUFESzs7QUFHUCxNQUFBLEdBQVMsU0FBQyxFQUFEO0FBQ1AsTUFBQTtFQUFBLE1BQUEsR0FBUyxRQUFRLENBQUMsS0FBVCxDQUFlLEVBQWY7U0FDVCxJQUFBLENBQUssTUFBTDtBQUZPOztBQUlULGFBQUEsR0FBZ0IsU0FBQyxLQUFEO1NBQ2Q7SUFBQSxRQUFBLEVBQVcsS0FBSyxDQUFDLFVBQWpCO0lBQ0EsSUFBQSxFQUFPLFFBQVEsQ0FBQyxNQUFULENBQWdCLEtBQWhCLENBRFA7O0FBRGM7O0FBSWhCLGtCQUFBLEdBQXdCLENBQUEsU0FBQTtBQUV0QixNQUFBO0VBQUEsT0FBQSxHQUFVLFNBQUMsRUFBRDtBQUNSLFFBQUE7SUFBQSxNQUFBLEdBQVMsTUFBQSxDQUFPLEVBQVA7QUFFUjtTQUFBLHdDQUFBOzttQkFBQSxhQUFBLENBQWMsS0FBZDtBQUFBOztFQUhPO1NBTVY7SUFBQSxPQUFBLEVBQVUsT0FBVjs7QUFSc0IsQ0FBQSxDQUFILENBQUE7O0FBVXJCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCOzs7OztBQ2pEakIsSUFBQTs7QUFBQSxHQUFBLEdBQU0sT0FBQSxDQUFRLGtCQUFSOztBQUNOLENBQUEsR0FBSSxPQUFBLENBQVEsU0FBUjs7QUFFSixDQUFBLENBQUUsU0FBQTtBQUVBLE1BQUE7RUFBQSxRQUFBLEdBQVcsQ0FBQSxDQUFFLHVCQUFGO0VBRVgsY0FBQSxHQUFpQixTQUFBO0FBQ2YsUUFBQTtJQUFBLE1BQUEsR0FBUyxHQUFHLENBQUMsTUFBSixDQUFBO1dBQ1QsUUFBUSxDQUFDLElBQVQsQ0FDRTtNQUFBLEdBQUEsRUFBTSxNQUFNLENBQUMsS0FBYjtNQUNBLEtBQUEsRUFBUSxNQUFNLENBQUMsT0FEZjtLQURGO0VBRmU7RUFNakIsY0FBQSxDQUFBO0VBRUEsR0FBRyxDQUFDLEVBQUosQ0FBTyxVQUFQLEVBQW1CLGNBQW5CO1NBRUEsQ0FBQSxDQUFFLE1BQUYsQ0FBUyxDQUFDLE1BQVYsQ0FBaUIsUUFBakI7QUFkQSxDQUFGIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImhsID0gcmVxdWlyZSAnaGlnaGxpZ2h0anMnXG4kID0gcmVxdWlyZSAnemVwdG9qcydcblxuJCAtPlxuICAkKCdib2R5JykuYWRkQ2xhc3MoJ21vYmlsZScpIGlmICQub3MucGhvbmUgfHwgJC5vcy50YWJsZXRcblxucHJvY2Vzc29yID0gcmVxdWlyZSAnLi9zbGlkZS1wYWNrLXByb2Nlc3NvcidcbmFwaSA9IHJlcXVpcmUgJy4vc2xpZGUtcGFjay1hcGknXG5yZXF1aXJlICcuL3NsaWRlLXBhY2stbmF2aWdhdGlvbidcbnJlcXVpcmUgJy4vc2xpZGUtcGFjay11aSdcblxuZXhlY3V0ZUhvb2tzID0gLT5cbiAgaWYgZiA9IHdpbmRvdy5fc2xpZGVfcGFja19wcm9jZXNzX3NsaWRlc1xuICAgIGYgJCgnc2VjdGlvbicpXG5cblxuJCgnW2RhdGEtc2xpZGUtcGFja10nKS5lYWNoIC0+XG4gICRzbGlkZVBhY2sgPSAkKEApXG4gIHNsaWRlcyA9IHByb2Nlc3Nvci5wcm9jZXNzICRzbGlkZVBhY2sudGV4dCgpXG5cbiAgJGFydGljbGUgPSAkKCc8YXJ0aWNsZT48L2FydGljbGU+JylcbiAgZm9yIHNsaWRlIGluIHNsaWRlc1xuICAgICRzbGlkZSA9ICQoJzxzZWN0aW9uPjwvc2VjdGlvbj4nKVxuICAgICAgLmFkZENsYXNzKHNsaWRlLmNzc0NsYXNzKVxuXG4gICAgJHNsaWRlLmh0bWwoc2xpZGUuaHRtbClcblxuICAgICRhcnRpY2xlLmFwcGVuZCAkc2xpZGVcblxuICAkKCdib2R5JykuYXBwZW5kICRhcnRpY2xlXG5cbiAgIyBQcmV2ZW50IHByb2JsZW1zIHdoZW4gc2F2aW5nIHRoZSBzbGlkZXMgYXMgYSBjb21wbGV0ZVxuICAjIEhUTUwgcGFnZSBeX15cbiAgJHNsaWRlUGFjay5hdHRyKCdkYXRhLXNsaWRlLXBhY2stcHJvY2Vzc2VkJywgJycpXG4gICRzbGlkZVBhY2sucmVtb3ZlQXR0cignZGF0YS1zbGlkZS1wYWNrJylcblxuICBleGVjdXRlSG9va3MoKVxuXG5hcGkuaW5pdCBzbGlkZVBhY2sgOiAkKCdhcnRpY2xlJylcblxuaGwuaW5pdEhpZ2hsaWdodGluZ09uTG9hZCgpXG4iLCIoZnVuY3Rpb24gKGdsb2JhbCl7XG47IHZhciBfX2Jyb3dzZXJpZnlfc2hpbV9yZXF1aXJlX189cmVxdWlyZTsoZnVuY3Rpb24gYnJvd3NlcmlmeVNoaW0obW9kdWxlLCBleHBvcnRzLCByZXF1aXJlLCBkZWZpbmUsIGJyb3dzZXJpZnlfc2hpbV9fZGVmaW5lX19tb2R1bGVfX2V4cG9ydF9fKSB7XG4hZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGV4cG9ydHM/ZShleHBvcnRzKTood2luZG93LmhsanM9ZSh7fSksXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUoW10sZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93LmhsanN9KSl9KGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUucmVwbGFjZSgvJi9nbSxcIiZhbXA7XCIpLnJlcGxhY2UoLzwvZ20sXCImbHQ7XCIpLnJlcGxhY2UoLz4vZ20sXCImZ3Q7XCIpfWZ1bmN0aW9uIHQoZSl7cmV0dXJuIGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKX1mdW5jdGlvbiByKGUsbil7dmFyIHQ9ZSYmZS5leGVjKG4pO3JldHVybiB0JiYwPT10LmluZGV4fWZ1bmN0aW9uIGEoZSl7dmFyIG49KGUuY2xhc3NOYW1lK1wiIFwiKyhlLnBhcmVudE5vZGU/ZS5wYXJlbnROb2RlLmNsYXNzTmFtZTpcIlwiKSkuc3BsaXQoL1xccysvKTtyZXR1cm4gbj1uLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9ebGFuZyh1YWdlKT8tLyxcIlwiKX0pLG4uZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBOKGUpfHwvbm8oLT8paGlnaGxpZ2h0Ly50ZXN0KGUpfSlbMF19ZnVuY3Rpb24gbyhlLG4pe3ZhciB0PXt9O2Zvcih2YXIgciBpbiBlKXRbcl09ZVtyXTtpZihuKWZvcih2YXIgciBpbiBuKXRbcl09bltyXTtyZXR1cm4gdH1mdW5jdGlvbiBpKGUpe3ZhciBuPVtdO3JldHVybiBmdW5jdGlvbiByKGUsYSl7Zm9yKHZhciBvPWUuZmlyc3RDaGlsZDtvO289by5uZXh0U2libGluZykzPT1vLm5vZGVUeXBlP2ErPW8ubm9kZVZhbHVlLmxlbmd0aDoxPT1vLm5vZGVUeXBlJiYobi5wdXNoKHtldmVudDpcInN0YXJ0XCIsb2Zmc2V0OmEsbm9kZTpvfSksYT1yKG8sYSksdChvKS5tYXRjaCgvYnJ8aHJ8aW1nfGlucHV0Lyl8fG4ucHVzaCh7ZXZlbnQ6XCJzdG9wXCIsb2Zmc2V0OmEsbm9kZTpvfSkpO3JldHVybiBhfShlLDApLG59ZnVuY3Rpb24gYyhlLHIsYSl7ZnVuY3Rpb24gbygpe3JldHVybiBlLmxlbmd0aCYmci5sZW5ndGg/ZVswXS5vZmZzZXQhPXJbMF0ub2Zmc2V0P2VbMF0ub2Zmc2V0PHJbMF0ub2Zmc2V0P2U6cjpcInN0YXJ0XCI9PXJbMF0uZXZlbnQ/ZTpyOmUubGVuZ3RoP2U6cn1mdW5jdGlvbiBpKGUpe2Z1bmN0aW9uIHIoZSl7cmV0dXJuXCIgXCIrZS5ub2RlTmFtZSsnPVwiJytuKGUudmFsdWUpKydcIid9bCs9XCI8XCIrdChlKStBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoZS5hdHRyaWJ1dGVzLHIpLmpvaW4oXCJcIikrXCI+XCJ9ZnVuY3Rpb24gYyhlKXtsKz1cIjwvXCIrdChlKStcIj5cIn1mdW5jdGlvbiB1KGUpeyhcInN0YXJ0XCI9PWUuZXZlbnQ/aTpjKShlLm5vZGUpfWZvcih2YXIgcz0wLGw9XCJcIixmPVtdO2UubGVuZ3RofHxyLmxlbmd0aDspe3ZhciBnPW8oKTtpZihsKz1uKGEuc3Vic3RyKHMsZ1swXS5vZmZzZXQtcykpLHM9Z1swXS5vZmZzZXQsZz09ZSl7Zi5yZXZlcnNlKCkuZm9yRWFjaChjKTtkbyB1KGcuc3BsaWNlKDAsMSlbMF0pLGc9bygpO3doaWxlKGc9PWUmJmcubGVuZ3RoJiZnWzBdLm9mZnNldD09cyk7Zi5yZXZlcnNlKCkuZm9yRWFjaChpKX1lbHNlXCJzdGFydFwiPT1nWzBdLmV2ZW50P2YucHVzaChnWzBdLm5vZGUpOmYucG9wKCksdShnLnNwbGljZSgwLDEpWzBdKX1yZXR1cm4gbCtuKGEuc3Vic3RyKHMpKX1mdW5jdGlvbiB1KGUpe2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuc291cmNlfHxlfWZ1bmN0aW9uIHQodCxyKXtyZXR1cm4gUmVnRXhwKG4odCksXCJtXCIrKGUuY0k/XCJpXCI6XCJcIikrKHI/XCJnXCI6XCJcIikpfWZ1bmN0aW9uIHIoYSxpKXtpZighYS5jb21waWxlZCl7aWYoYS5jb21waWxlZD0hMCxhLms9YS5rfHxhLmJLLGEuayl7dmFyIGM9e30sdT1mdW5jdGlvbihuLHQpe2UuY0kmJih0PXQudG9Mb3dlckNhc2UoKSksdC5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lLnNwbGl0KFwifFwiKTtjW3RbMF1dPVtuLHRbMV0/TnVtYmVyKHRbMV0pOjFdfSl9O1wic3RyaW5nXCI9PXR5cGVvZiBhLms/dShcImtleXdvcmRcIixhLmspOk9iamVjdC5rZXlzKGEuaykuZm9yRWFjaChmdW5jdGlvbihlKXt1KGUsYS5rW2VdKX0pLGEuaz1jfWEubFI9dChhLmx8fC9cXGJbQS1aYS16MC05X10rXFxiLywhMCksaSYmKGEuYksmJihhLmI9XCJcXFxcYihcIithLmJLLnNwbGl0KFwiIFwiKS5qb2luKFwifFwiKStcIilcXFxcYlwiKSxhLmJ8fChhLmI9L1xcQnxcXGIvKSxhLmJSPXQoYS5iKSxhLmV8fGEuZVd8fChhLmU9L1xcQnxcXGIvKSxhLmUmJihhLmVSPXQoYS5lKSksYS50RT1uKGEuZSl8fFwiXCIsYS5lVyYmaS50RSYmKGEudEUrPShhLmU/XCJ8XCI6XCJcIikraS50RSkpLGEuaSYmKGEuaVI9dChhLmkpKSx2b2lkIDA9PT1hLnImJihhLnI9MSksYS5jfHwoYS5jPVtdKTt2YXIgcz1bXTthLmMuZm9yRWFjaChmdW5jdGlvbihlKXtlLnY/ZS52LmZvckVhY2goZnVuY3Rpb24obil7cy5wdXNoKG8oZSxuKSl9KTpzLnB1c2goXCJzZWxmXCI9PWU/YTplKX0pLGEuYz1zLGEuYy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3IoZSxhKX0pLGEuc3RhcnRzJiZyKGEuc3RhcnRzLGkpO3ZhciBsPWEuYy5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUuYks/XCJcXFxcLj8oXCIrZS5iK1wiKVxcXFwuP1wiOmUuYn0pLmNvbmNhdChbYS50RSxhLmldKS5tYXAobikuZmlsdGVyKEJvb2xlYW4pO2EudD1sLmxlbmd0aD90KGwuam9pbihcInxcIiksITApOntleGVjOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9fX19cihlKX1mdW5jdGlvbiBzKGUsdCxhLG8pe2Z1bmN0aW9uIGkoZSxuKXtmb3IodmFyIHQ9MDt0PG4uYy5sZW5ndGg7dCsrKWlmKHIobi5jW3RdLmJSLGUpKXJldHVybiBuLmNbdF19ZnVuY3Rpb24gYyhlLG4pe3JldHVybiByKGUuZVIsbik/ZTplLmVXP2MoZS5wYXJlbnQsbik6dm9pZCAwfWZ1bmN0aW9uIGYoZSxuKXtyZXR1cm4hYSYmcihuLmlSLGUpfWZ1bmN0aW9uIGcoZSxuKXt2YXIgdD14LmNJP25bMF0udG9Mb3dlckNhc2UoKTpuWzBdO3JldHVybiBlLmsuaGFzT3duUHJvcGVydHkodCkmJmUua1t0XX1mdW5jdGlvbiBwKGUsbix0LHIpe3ZhciBhPXI/XCJcIjpFLmNsYXNzUHJlZml4LG89JzxzcGFuIGNsYXNzPVwiJythLGk9dD9cIlwiOlwiPC9zcGFuPlwiO3JldHVybiBvKz1lKydcIj4nLG8rbitpfWZ1bmN0aW9uIGQoKXtpZighdy5rKXJldHVybiBuKHkpO3ZhciBlPVwiXCIsdD0wO3cubFIubGFzdEluZGV4PTA7Zm9yKHZhciByPXcubFIuZXhlYyh5KTtyOyl7ZSs9bih5LnN1YnN0cih0LHIuaW5kZXgtdCkpO3ZhciBhPWcodyxyKTthPyhCKz1hWzFdLGUrPXAoYVswXSxuKHJbMF0pKSk6ZSs9bihyWzBdKSx0PXcubFIubGFzdEluZGV4LHI9dy5sUi5leGVjKHkpfXJldHVybiBlK24oeS5zdWJzdHIodCkpfWZ1bmN0aW9uIGgoKXtpZih3LnNMJiYhUlt3LnNMXSlyZXR1cm4gbih5KTt2YXIgZT13LnNMP3Mody5zTCx5LCEwLExbdy5zTF0pOmwoeSk7cmV0dXJuIHcucj4wJiYoQis9ZS5yKSxcImNvbnRpbnVvdXNcIj09dy5zdWJMYW5ndWFnZU1vZGUmJihMW3cuc0xdPWUudG9wKSxwKGUubGFuZ3VhZ2UsZS52YWx1ZSwhMSwhMCl9ZnVuY3Rpb24gdigpe3JldHVybiB2b2lkIDAhPT13LnNMP2goKTpkKCl9ZnVuY3Rpb24gYihlLHQpe3ZhciByPWUuY04/cChlLmNOLFwiXCIsITApOlwiXCI7ZS5yQj8oTSs9cix5PVwiXCIpOmUuZUI/KE0rPW4odCkrcix5PVwiXCIpOihNKz1yLHk9dCksdz1PYmplY3QuY3JlYXRlKGUse3BhcmVudDp7dmFsdWU6d319KX1mdW5jdGlvbiBtKGUsdCl7aWYoeSs9ZSx2b2lkIDA9PT10KXJldHVybiBNKz12KCksMDt2YXIgcj1pKHQsdyk7aWYocilyZXR1cm4gTSs9digpLGIocix0KSxyLnJCPzA6dC5sZW5ndGg7dmFyIGE9Yyh3LHQpO2lmKGEpe3ZhciBvPXc7by5yRXx8by5lRXx8KHkrPXQpLE0rPXYoKTtkbyB3LmNOJiYoTSs9XCI8L3NwYW4+XCIpLEIrPXcucix3PXcucGFyZW50O3doaWxlKHchPWEucGFyZW50KTtyZXR1cm4gby5lRSYmKE0rPW4odCkpLHk9XCJcIixhLnN0YXJ0cyYmYihhLnN0YXJ0cyxcIlwiKSxvLnJFPzA6dC5sZW5ndGh9aWYoZih0LHcpKXRocm93IG5ldyBFcnJvcignSWxsZWdhbCBsZXhlbWUgXCInK3QrJ1wiIGZvciBtb2RlIFwiJysody5jTnx8XCI8dW5uYW1lZD5cIikrJ1wiJyk7cmV0dXJuIHkrPXQsdC5sZW5ndGh8fDF9dmFyIHg9TihlKTtpZigheCl0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbGFuZ3VhZ2U6IFwiJytlKydcIicpO3UoeCk7Zm9yKHZhciB3PW98fHgsTD17fSxNPVwiXCIsaz13O2shPXg7az1rLnBhcmVudClrLmNOJiYoTT1wKGsuY04sXCJcIiwhMCkrTSk7dmFyIHk9XCJcIixCPTA7dHJ5e2Zvcih2YXIgQyxqLEk9MDs7KXtpZih3LnQubGFzdEluZGV4PUksQz13LnQuZXhlYyh0KSwhQylicmVhaztqPW0odC5zdWJzdHIoSSxDLmluZGV4LUkpLENbMF0pLEk9Qy5pbmRleCtqfW0odC5zdWJzdHIoSSkpO2Zvcih2YXIgaz13O2sucGFyZW50O2s9ay5wYXJlbnQpay5jTiYmKE0rPVwiPC9zcGFuPlwiKTtyZXR1cm57cjpCLHZhbHVlOk0sbGFuZ3VhZ2U6ZSx0b3A6d319Y2F0Y2goQSl7aWYoLTEhPUEubWVzc2FnZS5pbmRleE9mKFwiSWxsZWdhbFwiKSlyZXR1cm57cjowLHZhbHVlOm4odCl9O3Rocm93IEF9fWZ1bmN0aW9uIGwoZSx0KXt0PXR8fEUubGFuZ3VhZ2VzfHxPYmplY3Qua2V5cyhSKTt2YXIgcj17cjowLHZhbHVlOm4oZSl9LGE9cjtyZXR1cm4gdC5mb3JFYWNoKGZ1bmN0aW9uKG4pe2lmKE4obikpe3ZhciB0PXMobixlLCExKTt0Lmxhbmd1YWdlPW4sdC5yPmEuciYmKGE9dCksdC5yPnIuciYmKGE9cixyPXQpfX0pLGEubGFuZ3VhZ2UmJihyLnNlY29uZF9iZXN0PWEpLHJ9ZnVuY3Rpb24gZihlKXtyZXR1cm4gRS50YWJSZXBsYWNlJiYoZT1lLnJlcGxhY2UoL14oKDxbXj5dKz58XFx0KSspL2dtLGZ1bmN0aW9uKGUsbil7cmV0dXJuIG4ucmVwbGFjZSgvXFx0L2csRS50YWJSZXBsYWNlKX0pKSxFLnVzZUJSJiYoZT1lLnJlcGxhY2UoL1xcbi9nLFwiPGJyPlwiKSksZX1mdW5jdGlvbiBnKGUsbix0KXt2YXIgcj1uP3hbbl06dCxhPVtlLnRyaW0oKV07cmV0dXJuIGUubWF0Y2goLyhcXHN8XilobGpzKFxcc3wkKS8pfHxhLnB1c2goXCJobGpzXCIpLHImJmEucHVzaChyKSxhLmpvaW4oXCIgXCIpLnRyaW0oKX1mdW5jdGlvbiBwKGUpe3ZhciBuPWEoZSk7aWYoIS9ubygtPyloaWdobGlnaHQvLnRlc3Qobikpe3ZhciB0O0UudXNlQlI/KHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLFwiZGl2XCIpLHQuaW5uZXJIVE1MPWUuaW5uZXJIVE1MLnJlcGxhY2UoL1xcbi9nLFwiXCIpLnJlcGxhY2UoLzxiclsgXFwvXSo+L2csXCJcXG5cIikpOnQ9ZTt2YXIgcj10LnRleHRDb250ZW50LG89bj9zKG4sciwhMCk6bChyKSx1PWkodCk7aWYodS5sZW5ndGgpe3ZhciBwPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixcImRpdlwiKTtwLmlubmVySFRNTD1vLnZhbHVlLG8udmFsdWU9Yyh1LGkocCkscil9by52YWx1ZT1mKG8udmFsdWUpLGUuaW5uZXJIVE1MPW8udmFsdWUsZS5jbGFzc05hbWU9ZyhlLmNsYXNzTmFtZSxuLG8ubGFuZ3VhZ2UpLGUucmVzdWx0PXtsYW5ndWFnZTpvLmxhbmd1YWdlLHJlOm8ucn0sby5zZWNvbmRfYmVzdCYmKGUuc2Vjb25kX2Jlc3Q9e2xhbmd1YWdlOm8uc2Vjb25kX2Jlc3QubGFuZ3VhZ2UscmU6by5zZWNvbmRfYmVzdC5yfSl9fWZ1bmN0aW9uIGQoZSl7RT1vKEUsZSl9ZnVuY3Rpb24gaCgpe2lmKCFoLmNhbGxlZCl7aC5jYWxsZWQ9ITA7dmFyIGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInByZSBjb2RlXCIpO0FycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZSxwKX19ZnVuY3Rpb24gdigpe2FkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsaCwhMSksYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixoLCExKX1mdW5jdGlvbiBiKG4sdCl7dmFyIHI9UltuXT10KGUpO3IuYWxpYXNlcyYmci5hbGlhc2VzLmZvckVhY2goZnVuY3Rpb24oZSl7eFtlXT1ufSl9ZnVuY3Rpb24gbSgpe3JldHVybiBPYmplY3Qua2V5cyhSKX1mdW5jdGlvbiBOKGUpe3JldHVybiBSW2VdfHxSW3hbZV1dfXZhciBFPXtjbGFzc1ByZWZpeDpcImhsanMtXCIsdGFiUmVwbGFjZTpudWxsLHVzZUJSOiExLGxhbmd1YWdlczp2b2lkIDB9LFI9e30seD17fTtyZXR1cm4gZS5oaWdobGlnaHQ9cyxlLmhpZ2hsaWdodEF1dG89bCxlLmZpeE1hcmt1cD1mLGUuaGlnaGxpZ2h0QmxvY2s9cCxlLmNvbmZpZ3VyZT1kLGUuaW5pdEhpZ2hsaWdodGluZz1oLGUuaW5pdEhpZ2hsaWdodGluZ09uTG9hZD12LGUucmVnaXN0ZXJMYW5ndWFnZT1iLGUubGlzdExhbmd1YWdlcz1tLGUuZ2V0TGFuZ3VhZ2U9TixlLmluaGVyaXQ9byxlLklSPVwiW2EtekEtWl1bYS16QS1aMC05X10qXCIsZS5VSVI9XCJbYS16QS1aX11bYS16QS1aMC05X10qXCIsZS5OUj1cIlxcXFxiXFxcXGQrKFxcXFwuXFxcXGQrKT9cIixlLkNOUj1cIihcXFxcYjBbeFhdW2EtZkEtRjAtOV0rfChcXFxcYlxcXFxkKyhcXFxcLlxcXFxkKik/fFxcXFwuXFxcXGQrKShbZUVdWy0rXT9cXFxcZCspPylcIixlLkJOUj1cIlxcXFxiKDBiWzAxXSspXCIsZS5SU1I9XCIhfCE9fCE9PXwlfCU9fCZ8JiZ8Jj18XFxcXCp8XFxcXCo9fFxcXFwrfFxcXFwrPXwsfC18LT18Lz18L3w6fDt8PDx8PDw9fDw9fDx8PT09fD09fD18Pj4+PXw+Pj18Pj18Pj4+fD4+fD58XFxcXD98XFxcXFt8XFxcXHt8XFxcXCh8XFxcXF58XFxcXF49fFxcXFx8fFxcXFx8PXxcXFxcfFxcXFx8fH5cIixlLkJFPXtiOlwiXFxcXFxcXFxbXFxcXHNcXFxcU11cIixyOjB9LGUuQVNNPXtjTjpcInN0cmluZ1wiLGI6XCInXCIsZTpcIidcIixpOlwiXFxcXG5cIixjOltlLkJFXX0sZS5RU009e2NOOlwic3RyaW5nXCIsYjonXCInLGU6J1wiJyxpOlwiXFxcXG5cIixjOltlLkJFXX0sZS5QV009e2I6L1xcYihhfGFufHRoZXxhcmV8SXxJJ218aXNuJ3R8ZG9uJ3R8ZG9lc24ndHx3b24ndHxidXR8anVzdHxzaG91bGR8cHJldHR5fHNpbXBseXxlbm91Z2h8Z29ubmF8Z29pbmd8d3RmfHNvfHN1Y2gpXFxiL30sZS5DTENNPXtjTjpcImNvbW1lbnRcIixiOlwiLy9cIixlOlwiJFwiLGM6W2UuUFdNXX0sZS5DQkNNPXtjTjpcImNvbW1lbnRcIixiOlwiL1xcXFwqXCIsZTpcIlxcXFwqL1wiLGM6W2UuUFdNXX0sZS5IQ009e2NOOlwiY29tbWVudFwiLGI6XCIjXCIsZTpcIiRcIixjOltlLlBXTV19LGUuTk09e2NOOlwibnVtYmVyXCIsYjplLk5SLHI6MH0sZS5DTk09e2NOOlwibnVtYmVyXCIsYjplLkNOUixyOjB9LGUuQk5NPXtjTjpcIm51bWJlclwiLGI6ZS5CTlIscjowfSxlLkNTU05NPXtjTjpcIm51bWJlclwiLGI6ZS5OUitcIiglfGVtfGV4fGNofHJlbXx2d3x2aHx2bWlufHZtYXh8Y218bW18aW58cHR8cGN8cHh8ZGVnfGdyYWR8cmFkfHR1cm58c3xtc3xIenxrSHp8ZHBpfGRwY218ZHBweCk/XCIscjowfSxlLlJNPXtjTjpcInJlZ2V4cFwiLGI6L1xcLy8sZTovXFwvW2dpbXV5XSovLGk6L1xcbi8sYzpbZS5CRSx7YjovXFxbLyxlOi9cXF0vLHI6MCxjOltlLkJFXX1dfSxlLlRNPXtjTjpcInRpdGxlXCIsYjplLklSLHI6MH0sZS5VVE09e2NOOlwidGl0bGVcIixiOmUuVUlSLHI6MH0sZX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcInhtbFwiLGZ1bmN0aW9uKCl7dmFyIHQ9XCJbQS1aYS16MC05XFxcXC5fOi1dK1wiLGU9e2I6LzxcXD8ocGhwKT8oPyFcXHcpLyxlOi9cXD8+LyxzTDpcInBocFwiLHN1Ykxhbmd1YWdlTW9kZTpcImNvbnRpbnVvdXNcIn0sYz17ZVc6ITAsaTovPC8scjowLGM6W2Use2NOOlwiYXR0cmlidXRlXCIsYjp0LHI6MH0se2I6XCI9XCIscjowLGM6W3tjTjpcInZhbHVlXCIsYzpbZV0sdjpbe2I6L1wiLyxlOi9cIi99LHtiOi8nLyxlOi8nL30se2I6L1teXFxzXFwvPl0rL31dfV19XX07cmV0dXJue2FsaWFzZXM6W1wiaHRtbFwiLFwieGh0bWxcIixcInJzc1wiLFwiYXRvbVwiLFwieHNsXCIsXCJwbGlzdFwiXSxjSTohMCxjOlt7Y046XCJkb2N0eXBlXCIsYjpcIjwhRE9DVFlQRVwiLGU6XCI+XCIscjoxMCxjOlt7YjpcIlxcXFxbXCIsZTpcIlxcXFxdXCJ9XX0se2NOOlwiY29tbWVudFwiLGI6XCI8IS0tXCIsZTpcIi0tPlwiLHI6MTB9LHtjTjpcImNkYXRhXCIsYjpcIjxcXFxcIVxcXFxbQ0RBVEFcXFxcW1wiLGU6XCJcXFxcXVxcXFxdPlwiLHI6MTB9LHtjTjpcInRhZ1wiLGI6XCI8c3R5bGUoPz1cXFxcc3w+fCQpXCIsZTpcIj5cIixrOnt0aXRsZTpcInN0eWxlXCJ9LGM6W2NdLHN0YXJ0czp7ZTpcIjwvc3R5bGU+XCIsckU6ITAsc0w6XCJjc3NcIn19LHtjTjpcInRhZ1wiLGI6XCI8c2NyaXB0KD89XFxcXHN8PnwkKVwiLGU6XCI+XCIsazp7dGl0bGU6XCJzY3JpcHRcIn0sYzpbY10sc3RhcnRzOntlOlwiPC9zY3JpcHQ+XCIsckU6ITAsc0w6XCJqYXZhc2NyaXB0XCJ9fSxlLHtjTjpcInBpXCIsYjovPFxcP1xcdysvLGU6L1xcPz4vLHI6MTB9LHtjTjpcInRhZ1wiLGI6XCI8Lz9cIixlOlwiLz8+XCIsYzpbe2NOOlwidGl0bGVcIixiOi9bXiBcXC8+PFxcblxcdF0rLyxyOjB9LGNdfV19fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwiY2xvanVyZS1yZXBsXCIsZnVuY3Rpb24oKXtyZXR1cm57Yzpbe2NOOlwicHJvbXB0XCIsYjovXihbXFx3Li1dK3xcXHMqI18pPT4vLHN0YXJ0czp7ZTovJC8sc0w6XCJjbG9qdXJlXCIsc3ViTGFuZ3VhZ2VNb2RlOlwiY29udGludW91c1wifX1dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcImNwcFwiLGZ1bmN0aW9uKHQpe3ZhciBpPXtrZXl3b3JkOlwiZmFsc2UgaW50IGZsb2F0IHdoaWxlIHByaXZhdGUgY2hhciBjYXRjaCBleHBvcnQgdmlydHVhbCBvcGVyYXRvciBzaXplb2YgZHluYW1pY19jYXN0fDEwIHR5cGVkZWYgY29uc3RfY2FzdHwxMCBjb25zdCBzdHJ1Y3QgZm9yIHN0YXRpY19jYXN0fDEwIHVuaW9uIG5hbWVzcGFjZSB1bnNpZ25lZCBsb25nIHZvbGF0aWxlIHN0YXRpYyBwcm90ZWN0ZWQgYm9vbCB0ZW1wbGF0ZSBtdXRhYmxlIGlmIHB1YmxpYyBmcmllbmQgZG8gZ290byBhdXRvIHZvaWQgZW51bSBlbHNlIGJyZWFrIGV4dGVybiB1c2luZyB0cnVlIGNsYXNzIGFzbSBjYXNlIHR5cGVpZCBzaG9ydCByZWludGVycHJldF9jYXN0fDEwIGRlZmF1bHQgZG91YmxlIHJlZ2lzdGVyIGV4cGxpY2l0IHNpZ25lZCB0eXBlbmFtZSB0cnkgdGhpcyBzd2l0Y2ggY29udGludWUgd2NoYXJfdCBpbmxpbmUgZGVsZXRlIGFsaWdub2YgY2hhcjE2X3QgY2hhcjMyX3QgY29uc3RleHByIGRlY2x0eXBlIG5vZXhjZXB0IG51bGxwdHIgc3RhdGljX2Fzc2VydCB0aHJlYWRfbG9jYWwgcmVzdHJpY3QgX0Jvb2wgY29tcGxleCBfQ29tcGxleCBfSW1hZ2luYXJ5aW50bWF4X3QgdWludG1heF90IGludDhfdCB1aW50OF90IGludDE2X3QgdWludDE2X3QgaW50MzJfdCB1aW50MzJfdCAgaW50NjRfdCB1aW50NjRfdGludF9sZWFzdDhfdCB1aW50X2xlYXN0OF90IGludF9sZWFzdDE2X3QgdWludF9sZWFzdDE2X3QgaW50X2xlYXN0MzJfdCB1aW50X2xlYXN0MzJfdGludF9sZWFzdDY0X3QgdWludF9sZWFzdDY0X3QgaW50X2Zhc3Q4X3QgdWludF9mYXN0OF90IGludF9mYXN0MTZfdCB1aW50X2Zhc3QxNl90IGludF9mYXN0MzJfdHVpbnRfZmFzdDMyX3QgaW50X2Zhc3Q2NF90IHVpbnRfZmFzdDY0X3QgaW50cHRyX3QgdWludHB0cl90IGF0b21pY19ib29sIGF0b21pY19jaGFyIGF0b21pY19zY2hhcmF0b21pY191Y2hhciBhdG9taWNfc2hvcnQgYXRvbWljX3VzaG9ydCBhdG9taWNfaW50IGF0b21pY191aW50IGF0b21pY19sb25nIGF0b21pY191bG9uZyBhdG9taWNfbGxvbmdhdG9taWNfdWxsb25nIGF0b21pY193Y2hhcl90IGF0b21pY19jaGFyMTZfdCBhdG9taWNfY2hhcjMyX3QgYXRvbWljX2ludG1heF90IGF0b21pY191aW50bWF4X3RhdG9taWNfaW50cHRyX3QgYXRvbWljX3VpbnRwdHJfdCBhdG9taWNfc2l6ZV90IGF0b21pY19wdHJkaWZmX3QgYXRvbWljX2ludF9sZWFzdDhfdCBhdG9taWNfaW50X2xlYXN0MTZfdGF0b21pY19pbnRfbGVhc3QzMl90IGF0b21pY19pbnRfbGVhc3Q2NF90IGF0b21pY191aW50X2xlYXN0OF90IGF0b21pY191aW50X2xlYXN0MTZfdCBhdG9taWNfdWludF9sZWFzdDMyX3RhdG9taWNfdWludF9sZWFzdDY0X3QgYXRvbWljX2ludF9mYXN0OF90IGF0b21pY19pbnRfZmFzdDE2X3QgYXRvbWljX2ludF9mYXN0MzJfdCBhdG9taWNfaW50X2Zhc3Q2NF90YXRvbWljX3VpbnRfZmFzdDhfdCBhdG9taWNfdWludF9mYXN0MTZfdCBhdG9taWNfdWludF9mYXN0MzJfdCBhdG9taWNfdWludF9mYXN0NjRfdFwiLGJ1aWx0X2luOlwic3RkIHN0cmluZyBjaW4gY291dCBjZXJyIGNsb2cgc3RyaW5nc3RyZWFtIGlzdHJpbmdzdHJlYW0gb3N0cmluZ3N0cmVhbSBhdXRvX3B0ciBkZXF1ZSBsaXN0IHF1ZXVlIHN0YWNrIHZlY3RvciBtYXAgc2V0IGJpdHNldCBtdWx0aXNldCBtdWx0aW1hcCB1bm9yZGVyZWRfc2V0IHVub3JkZXJlZF9tYXAgdW5vcmRlcmVkX211bHRpc2V0IHVub3JkZXJlZF9tdWx0aW1hcCBhcnJheSBzaGFyZWRfcHRyIGFib3J0IGFicyBhY29zIGFzaW4gYXRhbjIgYXRhbiBjYWxsb2MgY2VpbCBjb3NoIGNvcyBleGl0IGV4cCBmYWJzIGZsb29yIGZtb2QgZnByaW50ZiBmcHV0cyBmcmVlIGZyZXhwIGZzY2FuZiBpc2FsbnVtIGlzYWxwaGEgaXNjbnRybCBpc2RpZ2l0IGlzZ3JhcGggaXNsb3dlciBpc3ByaW50IGlzcHVuY3QgaXNzcGFjZSBpc3VwcGVyIGlzeGRpZ2l0IHRvbG93ZXIgdG91cHBlciBsYWJzIGxkZXhwIGxvZzEwIGxvZyBtYWxsb2MgbWVtY2hyIG1lbWNtcCBtZW1jcHkgbWVtc2V0IG1vZGYgcG93IHByaW50ZiBwdXRjaGFyIHB1dHMgc2NhbmYgc2luaCBzaW4gc25wcmludGYgc3ByaW50ZiBzcXJ0IHNzY2FuZiBzdHJjYXQgc3RyY2hyIHN0cmNtcCBzdHJjcHkgc3RyY3NwbiBzdHJsZW4gc3RybmNhdCBzdHJuY21wIHN0cm5jcHkgc3RycGJyayBzdHJyY2hyIHN0cnNwbiBzdHJzdHIgdGFuaCB0YW4gdmZwcmludGYgdnByaW50ZiB2c3ByaW50ZlwifTtyZXR1cm57YWxpYXNlczpbXCJjXCIsXCJoXCIsXCJjKytcIixcImgrK1wiXSxrOmksaTpcIjwvXCIsYzpbdC5DTENNLHQuQ0JDTSx0LlFTTSx7Y046XCJzdHJpbmdcIixiOlwiJ1xcXFxcXFxcPy5cIixlOlwiJ1wiLGk6XCIuXCJ9LHtjTjpcIm51bWJlclwiLGI6XCJcXFxcYihcXFxcZCsoXFxcXC5cXFxcZCopP3xcXFxcLlxcXFxkKykodXxVfGx8THx1bHxVTHxmfEYpXCJ9LHQuQ05NLHtjTjpcInByZXByb2Nlc3NvclwiLGI6XCIjXCIsZTpcIiRcIixrOlwiaWYgZWxzZSBlbGlmIGVuZGlmIGRlZmluZSB1bmRlZiB3YXJuaW5nIGVycm9yIGxpbmUgcHJhZ21hXCIsYzpbe2I6J2luY2x1ZGVcXFxccypbPFwiXScsZTonWz5cIl0nLGs6XCJpbmNsdWRlXCIsaTpcIlxcXFxuXCJ9LHQuQ0xDTV19LHtjTjpcInN0bF9jb250YWluZXJcIixiOlwiXFxcXGIoZGVxdWV8bGlzdHxxdWV1ZXxzdGFja3x2ZWN0b3J8bWFwfHNldHxiaXRzZXR8bXVsdGlzZXR8bXVsdGltYXB8dW5vcmRlcmVkX21hcHx1bm9yZGVyZWRfc2V0fHVub3JkZXJlZF9tdWx0aXNldHx1bm9yZGVyZWRfbXVsdGltYXB8YXJyYXkpXFxcXHMqPFwiLGU6XCI+XCIsazppLGM6W1wic2VsZlwiXX0se2I6dC5JUitcIjo6XCJ9LHtiSzpcIm5ldyB0aHJvdyByZXR1cm5cIixyOjB9LHtjTjpcImZ1bmN0aW9uXCIsYjpcIihcIit0LklSK1wiXFxcXHMrKStcIit0LklSK1wiXFxcXHMqXFxcXChcIixyQjohMCxlOi9bezs9XS8sZUU6ITAsazppLGM6W3tiOnQuSVIrXCJcXFxccypcXFxcKFwiLHJCOiEwLGM6W3QuVE1dLHI6MH0se2NOOlwicGFyYW1zXCIsYjovXFwoLyxlOi9cXCkvLGs6aSxyOjAsYzpbdC5DQkNNXX0sdC5DTENNLHQuQ0JDTV19XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJoYXNrZWxsXCIsZnVuY3Rpb24oZSl7dmFyIGk9e2NOOlwiY29tbWVudFwiLHY6W3tiOlwiLS1cIixlOlwiJFwifSx7YjpcInstXCIsZTpcIi19XCIsYzpbXCJzZWxmXCJdfV19LGM9e2NOOlwicHJhZ21hXCIsYjpcInstI1wiLGU6XCIjLX1cIn0sYT17Y046XCJwcmVwcm9jZXNzb3JcIixiOlwiXiNcIixlOlwiJFwifSxuPXtjTjpcInR5cGVcIixiOlwiXFxcXGJbQS1aXVtcXFxcdyddKlwiLHI6MH0sbD17Y046XCJjb250YWluZXJcIixiOlwiXFxcXChcIixlOlwiXFxcXClcIixpOidcIicsYzpbYyxpLGEse2NOOlwidHlwZVwiLGI6XCJcXFxcYltBLVpdW1xcXFx3XSooXFxcXCgoXFxcXC5cXFxcLnwsfFxcXFx3KylcXFxcKSk/XCJ9LGUuaW5oZXJpdChlLlRNLHtiOlwiW19hLXpdW1xcXFx3J10qXCJ9KV19LHQ9e2NOOlwiY29udGFpbmVyXCIsYjpcIntcIixlOlwifVwiLGM6bC5jfTtyZXR1cm57YWxpYXNlczpbXCJoc1wiXSxrOlwibGV0IGluIGlmIHRoZW4gZWxzZSBjYXNlIG9mIHdoZXJlIGRvIG1vZHVsZSBpbXBvcnQgaGlkaW5nIHF1YWxpZmllZCB0eXBlIGRhdGEgbmV3dHlwZSBkZXJpdmluZyBjbGFzcyBpbnN0YW5jZSBhcyBkZWZhdWx0IGluZml4IGluZml4bCBpbmZpeHIgZm9yZWlnbiBleHBvcnQgY2NhbGwgc3RkY2FsbCBjcGx1c3BsdXMganZtIGRvdG5ldCBzYWZlIHVuc2FmZSBmYW1pbHkgZm9yYWxsIG1kbyBwcm9jIHJlY1wiLGM6W3tjTjpcIm1vZHVsZVwiLGI6XCJcXFxcYm1vZHVsZVxcXFxiXCIsZTpcIndoZXJlXCIsazpcIm1vZHVsZSB3aGVyZVwiLGM6W2wsaV0saTpcIlxcXFxXXFxcXC58O1wifSx7Y046XCJpbXBvcnRcIixiOlwiXFxcXGJpbXBvcnRcXFxcYlwiLGU6XCIkXCIsazpcImltcG9ydHwwIHF1YWxpZmllZCBhcyBoaWRpbmdcIixjOltsLGldLGk6XCJcXFxcV1xcXFwufDtcIn0se2NOOlwiY2xhc3NcIixiOlwiXihcXFxccyopPyhjbGFzc3xpbnN0YW5jZSlcXFxcYlwiLGU6XCJ3aGVyZVwiLGs6XCJjbGFzcyBmYW1pbHkgaW5zdGFuY2Ugd2hlcmVcIixjOltuLGwsaV19LHtjTjpcInR5cGVkZWZcIixiOlwiXFxcXGIoZGF0YXwobmV3KT90eXBlKVxcXFxiXCIsZTpcIiRcIixrOlwiZGF0YSBmYW1pbHkgdHlwZSBuZXd0eXBlIGRlcml2aW5nXCIsYzpbYyxpLG4sbCx0XX0se2NOOlwiZGVmYXVsdFwiLGJLOlwiZGVmYXVsdFwiLGU6XCIkXCIsYzpbbixsLGldfSx7Y046XCJpbmZpeFwiLGJLOlwiaW5maXggaW5maXhsIGluZml4clwiLGU6XCIkXCIsYzpbZS5DTk0saV19LHtjTjpcImZvcmVpZ25cIixiOlwiXFxcXGJmb3JlaWduXFxcXGJcIixlOlwiJFwiLGs6XCJmb3JlaWduIGltcG9ydCBleHBvcnQgY2NhbGwgc3RkY2FsbCBjcGx1c3BsdXMganZtIGRvdG5ldCBzYWZlIHVuc2FmZVwiLGM6W24sZS5RU00saV19LHtjTjpcInNoZWJhbmdcIixiOlwiIyFcXFxcL3VzclxcXFwvYmluXFxcXC9lbnYgcnVuaGFza2VsbFwiLGU6XCIkXCJ9LGMsaSxhLGUuUVNNLGUuQ05NLG4sZS5pbmhlcml0KGUuVE0se2I6XCJeW19hLXpdW1xcXFx3J10qXCJ9KSx7YjpcIi0+fDwtXCJ9XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJoYW1sXCIsZnVuY3Rpb24oKXtyZXR1cm57Y0k6ITAsYzpbe2NOOlwiZG9jdHlwZVwiLGI6XCJeISEhKCAoNXwxXFxcXC4xfFN0cmljdHxGcmFtZXNldHxCYXNpY3xNb2JpbGV8UkRGYXxYTUxcXFxcYi4qKSk/JFwiLHI6MTB9LHtjTjpcImNvbW1lbnRcIixiOlwiXlxcXFxzKighPSN8PSN8LSN8LykuKiRcIixyOjB9LHtiOlwiXlxcXFxzKigtfD18IT0pKD8hIylcIixzdGFydHM6e2U6XCJcXFxcblwiLHNMOlwicnVieVwifX0se2NOOlwidGFnXCIsYjpcIl5cXFxccyolXCIsYzpbe2NOOlwidGl0bGVcIixiOlwiXFxcXHcrXCJ9LHtjTjpcInZhbHVlXCIsYjpcIlsjXFxcXC5dXFxcXHcrXCJ9LHtiOlwie1xcXFxzKlwiLGU6XCJcXFxccyp9XCIsZUU6ITAsYzpbe2I6XCI6XFxcXHcrXFxcXHMqPT5cIixlOlwiLFxcXFxzK1wiLHJCOiEwLGVXOiEwLGM6W3tjTjpcInN5bWJvbFwiLGI6XCI6XFxcXHcrXCJ9LHtjTjpcInN0cmluZ1wiLGI6J1wiJyxlOidcIid9LHtjTjpcInN0cmluZ1wiLGI6XCInXCIsZTpcIidcIn0se2I6XCJcXFxcdytcIixyOjB9XX1dfSx7YjpcIlxcXFwoXFxcXHMqXCIsZTpcIlxcXFxzKlxcXFwpXCIsZUU6ITAsYzpbe2I6XCJcXFxcdytcXFxccyo9XCIsZTpcIlxcXFxzK1wiLHJCOiEwLGVXOiEwLGM6W3tjTjpcImF0dHJpYnV0ZVwiLGI6XCJcXFxcdytcIixyOjB9LHtjTjpcInN0cmluZ1wiLGI6J1wiJyxlOidcIid9LHtjTjpcInN0cmluZ1wiLGI6XCInXCIsZTpcIidcIn0se2I6XCJcXFxcdytcIixyOjB9XX1dfV19LHtjTjpcImJ1bGxldFwiLGI6XCJeXFxcXHMqWz1+XVxcXFxzKlwiLHI6MH0se2I6XCIje1wiLHN0YXJ0czp7ZTpcIn1cIixzTDpcInJ1YnlcIn19XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJwcm9jZXNzaW5nXCIsZnVuY3Rpb24oZSl7cmV0dXJue2s6e2tleXdvcmQ6XCJCdWZmZXJlZFJlYWRlciBQVmVjdG9yIFBGb250IFBJbWFnZSBQR3JhcGhpY3MgSGFzaE1hcCBib29sZWFuIGJ5dGUgY2hhciBjb2xvciBkb3VibGUgZmxvYXQgaW50IGxvbmcgU3RyaW5nIEFycmF5IEZsb2F0RGljdCBGbG9hdExpc3QgSW50RGljdCBJbnRMaXN0IEpTT05BcnJheSBKU09OT2JqZWN0IE9iamVjdCBTdHJpbmdEaWN0IFN0cmluZ0xpc3QgVGFibGUgVGFibGVSb3cgWE1MIGZhbHNlIHN5bmNocm9uaXplZCBpbnQgYWJzdHJhY3QgZmxvYXQgcHJpdmF0ZSBjaGFyIGJvb2xlYW4gc3RhdGljIG51bGwgaWYgY29uc3QgZm9yIHRydWUgd2hpbGUgbG9uZyB0aHJvdyBzdHJpY3RmcCBmaW5hbGx5IHByb3RlY3RlZCBpbXBvcnQgbmF0aXZlIGZpbmFsIHJldHVybiB2b2lkIGVudW0gZWxzZSBicmVhayB0cmFuc2llbnQgbmV3IGNhdGNoIGluc3RhbmNlb2YgYnl0ZSBzdXBlciB2b2xhdGlsZSBjYXNlIGFzc2VydCBzaG9ydCBwYWNrYWdlIGRlZmF1bHQgZG91YmxlIHB1YmxpYyB0cnkgdGhpcyBzd2l0Y2ggY29udGludWUgdGhyb3dzIHByb3RlY3RlZCBwdWJsaWMgcHJpdmF0ZVwiLGNvbnN0YW50OlwiUDJEIFAzRCBIQUxGX1BJIFBJIFFVQVJURVJfUEkgVEFVIFRXT19QSVwiLHZhcmlhYmxlOlwiZGlzcGxheUhlaWdodCBkaXNwbGF5V2lkdGggbW91c2VZIG1vdXNlWCBtb3VzZVByZXNzZWQgcG1vdXNlWCBwbW91c2VZIGtleSBrZXlDb2RlIHBpeGVscyBmb2N1c2VkIGZyYW1lQ291bnQgZnJhbWVSYXRlIGhlaWdodCB3aWR0aFwiLHRpdGxlOlwic2V0dXAgZHJhd1wiLGJ1aWx0X2luOlwic2l6ZSBjcmVhdGVHcmFwaGljcyBiZWdpbkRyYXcgY3JlYXRlU2hhcGUgbG9hZFNoYXBlIFBTaGFwZSBhcmMgZWxsaXBzZSBsaW5lIHBvaW50IHF1YWQgcmVjdCB0cmlhbmdsZSBiZXppZXIgYmV6aWVyRGV0YWlsIGJlemllclBvaW50IGJlemllclRhbmdlbnQgY3VydmUgY3VydmVEZXRhaWwgY3VydmVQb2ludCBjdXJ2ZVRhbmdlbnQgY3VydmVUaWdodG5lc3Mgc2hhcGUgc2hhcGVNb2RlIGJlZ2luQ29udG91ciBiZWdpblNoYXBlIGJlemllclZlcnRleCBjdXJ2ZVZlcnRleCBlbmRDb250b3VyIGVuZFNoYXBlIHF1YWRyYXRpY1ZlcnRleCB2ZXJ0ZXggZWxsaXBzZU1vZGUgbm9TbW9vdGggcmVjdE1vZGUgc21vb3RoIHN0cm9rZUNhcCBzdHJva2VKb2luIHN0cm9rZVdlaWdodCBtb3VzZUNsaWNrZWQgbW91c2VEcmFnZ2VkIG1vdXNlTW92ZWQgbW91c2VQcmVzc2VkIG1vdXNlUmVsZWFzZWQgbW91c2VXaGVlbCBrZXlQcmVzc2VkIGtleVByZXNzZWRrZXlSZWxlYXNlZCBrZXlUeXBlZCBwcmludCBwcmludGxuIHNhdmUgc2F2ZUZyYW1lIGRheSBob3VyIG1pbGxpcyBtaW51dGUgbW9udGggc2Vjb25kIHllYXIgYmFja2dyb3VuZCBjbGVhciBjb2xvck1vZGUgZmlsbCBub0ZpbGwgbm9TdHJva2Ugc3Ryb2tlIGFscGhhIGJsdWUgYnJpZ2h0bmVzcyBjb2xvciBncmVlbiBodWUgbGVycENvbG9yIHJlZCBzYXR1cmF0aW9uIG1vZGVsWCBtb2RlbFkgbW9kZWxaIHNjcmVlblggc2NyZWVuWSBzY3JlZW5aIGFtYmllbnQgZW1pc3NpdmUgc2hpbmluZXNzIHNwZWN1bGFyIGFkZCBjcmVhdGVJbWFnZSBiZWdpbkNhbWVyYSBjYW1lcmEgZW5kQ2FtZXJhIGZydXN0dW0gb3J0aG8gcGVyc3BlY3RpdmUgcHJpbnRDYW1lcmEgcHJpbnRQcm9qZWN0aW9uIGN1cnNvciBmcmFtZVJhdGUgbm9DdXJzb3IgZXhpdCBsb29wIG5vTG9vcCBwb3BTdHlsZSBwdXNoU3R5bGUgcmVkcmF3IGJpbmFyeSBib29sZWFuIGJ5dGUgY2hhciBmbG9hdCBoZXggaW50IHN0ciB1bmJpbmFyeSB1bmhleCBqb2luIG1hdGNoIG1hdGNoQWxsIG5mIG5mYyBuZnAgbmZzIHNwbGl0IHNwbGl0VG9rZW5zIHRyaW0gYXBwZW5kIGFycmF5Q29weSBjb25jYXQgZXhwYW5kIHJldmVyc2Ugc2hvcnRlbiBzb3J0IHNwbGljZSBzdWJzZXQgYm94IHNwaGVyZSBzcGhlcmVEZXRhaWwgY3JlYXRlSW5wdXQgY3JlYXRlUmVhZGVyIGxvYWRCeXRlcyBsb2FkSlNPTkFycmF5IGxvYWRKU09OT2JqZWN0IGxvYWRTdHJpbmdzIGxvYWRUYWJsZSBsb2FkWE1MIG9wZW4gcGFyc2VYTUwgc2F2ZVRhYmxlIHNlbGVjdEZvbGRlciBzZWxlY3RJbnB1dCBiZWdpblJhdyBiZWdpblJlY29yZCBjcmVhdGVPdXRwdXQgY3JlYXRlV3JpdGVyIGVuZFJhdyBlbmRSZWNvcmQgUHJpbnRXcml0ZXJzYXZlQnl0ZXMgc2F2ZUpTT05BcnJheSBzYXZlSlNPTk9iamVjdCBzYXZlU3RyZWFtIHNhdmVTdHJpbmdzIHNhdmVYTUwgc2VsZWN0T3V0cHV0IHBvcE1hdHJpeCBwcmludE1hdHJpeCBwdXNoTWF0cml4IHJlc2V0TWF0cml4IHJvdGF0ZSByb3RhdGVYIHJvdGF0ZVkgcm90YXRlWiBzY2FsZSBzaGVhclggc2hlYXJZIHRyYW5zbGF0ZSBhbWJpZW50TGlnaHQgZGlyZWN0aW9uYWxMaWdodCBsaWdodEZhbGxvZmYgbGlnaHRzIGxpZ2h0U3BlY3VsYXIgbm9MaWdodHMgbm9ybWFsIHBvaW50TGlnaHQgc3BvdExpZ2h0IGltYWdlIGltYWdlTW9kZSBsb2FkSW1hZ2Ugbm9UaW50IHJlcXVlc3RJbWFnZSB0aW50IHRleHR1cmUgdGV4dHVyZU1vZGUgdGV4dHVyZVdyYXAgYmxlbmQgY29weSBmaWx0ZXIgZ2V0IGxvYWRQaXhlbHMgc2V0IHVwZGF0ZVBpeGVscyBibGVuZE1vZGUgbG9hZFNoYWRlciBQU2hhZGVycmVzZXRTaGFkZXIgc2hhZGVyIGNyZWF0ZUZvbnQgbG9hZEZvbnQgdGV4dCB0ZXh0Rm9udCB0ZXh0QWxpZ24gdGV4dExlYWRpbmcgdGV4dE1vZGUgdGV4dFNpemUgdGV4dFdpZHRoIHRleHRBc2NlbnQgdGV4dERlc2NlbnQgYWJzIGNlaWwgY29uc3RyYWluIGRpc3QgZXhwIGZsb29yIGxlcnAgbG9nIG1hZyBtYXAgbWF4IG1pbiBub3JtIHBvdyByb3VuZCBzcSBzcXJ0IGFjb3MgYXNpbiBhdGFuIGF0YW4yIGNvcyBkZWdyZWVzIHJhZGlhbnMgc2luIHRhbiBub2lzZSBub2lzZURldGFpbCBub2lzZVNlZWQgcmFuZG9tIHJhbmRvbUdhdXNzaWFuIHJhbmRvbVNlZWRcIn0sYzpbZS5DTENNLGUuQ0JDTSxlLkFTTSxlLlFTTSxlLkNOTV19fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwiYmFzaFwiLGZ1bmN0aW9uKGUpe3ZhciB0PXtjTjpcInZhcmlhYmxlXCIsdjpbe2I6L1xcJFtcXHdcXGQjQF1bXFx3XFxkX10qL30se2I6L1xcJFxceyguKj8pXFx9L31dfSxzPXtjTjpcInN0cmluZ1wiLGI6L1wiLyxlOi9cIi8sYzpbZS5CRSx0LHtjTjpcInZhcmlhYmxlXCIsYjovXFwkXFwoLyxlOi9cXCkvLGM6W2UuQkVdfV19LGE9e2NOOlwic3RyaW5nXCIsYjovJy8sZTovJy99O3JldHVybnthbGlhc2VzOltcInNoXCIsXCJ6c2hcIl0sbDovLT9bYS16XFwuXSsvLGs6e2tleXdvcmQ6XCJpZiB0aGVuIGVsc2UgZWxpZiBmaSBmb3Igd2hpbGUgaW4gZG8gZG9uZSBjYXNlIGVzYWMgZnVuY3Rpb25cIixsaXRlcmFsOlwidHJ1ZSBmYWxzZVwiLGJ1aWx0X2luOlwiYnJlYWsgY2QgY29udGludWUgZXZhbCBleGVjIGV4aXQgZXhwb3J0IGdldG9wdHMgaGFzaCBwd2QgcmVhZG9ubHkgcmV0dXJuIHNoaWZ0IHRlc3QgdGltZXMgdHJhcCB1bWFzayB1bnNldCBhbGlhcyBiaW5kIGJ1aWx0aW4gY2FsbGVyIGNvbW1hbmQgZGVjbGFyZSBlY2hvIGVuYWJsZSBoZWxwIGxldCBsb2NhbCBsb2dvdXQgbWFwZmlsZSBwcmludGYgcmVhZCByZWFkYXJyYXkgc291cmNlIHR5cGUgdHlwZXNldCB1bGltaXQgdW5hbGlhcyBzZXQgc2hvcHQgYXV0b2xvYWQgYmcgYmluZGtleSBieWUgY2FwIGNoZGlyIGNsb25lIGNvbXBhcmd1bWVudHMgY29tcGNhbGwgY29tcGN0bCBjb21wZGVzY3JpYmUgY29tcGZpbGVzIGNvbXBncm91cHMgY29tcHF1b3RlIGNvbXB0YWdzIGNvbXB0cnkgY29tcHZhbHVlcyBkaXJzIGRpc2FibGUgZGlzb3duIGVjaG90YyBlY2hvdGkgZW11bGF0ZSBmYyBmZyBmbG9hdCBmdW5jdGlvbnMgZ2V0Y2FwIGdldGxuIGhpc3RvcnkgaW50ZWdlciBqb2JzIGtpbGwgbGltaXQgbG9nIG5vZ2xvYiBwb3BkIHByaW50IHB1c2hkIHB1c2hsbiByZWhhc2ggc2NoZWQgc2V0Y2FwIHNldG9wdCBzdGF0IHN1c3BlbmQgdHR5Y3RsIHVuZnVuY3Rpb24gdW5oYXNoIHVubGltaXQgdW5zZXRvcHQgdmFyZWQgd2FpdCB3aGVuY2Ugd2hlcmUgd2hpY2ggemNvbXBpbGUgemZvcm1hdCB6ZnRwIHpsZSB6bW9kbG9hZCB6cGFyc2VvcHRzIHpwcm9mIHpwdHkgenJlZ2V4cGFyc2UgenNvY2tldCB6c3R5bGUgenRjcFwiLG9wZXJhdG9yOlwiLW5lIC1lcSAtbHQgLWd0IC1mIC1kIC1lIC1zIC1sIC1hXCJ9LGM6W3tjTjpcInNoZWJhbmdcIixiOi9eIyFbXlxcbl0rc2hcXHMqJC8scjoxMH0se2NOOlwiZnVuY3Rpb25cIixiOi9cXHdbXFx3XFxkX10qXFxzKlxcKFxccypcXClcXHMqXFx7LyxyQjohMCxjOltlLmluaGVyaXQoZS5UTSx7YjovXFx3W1xcd1xcZF9dKi99KV0scjowfSxlLkhDTSxlLk5NLHMsYSx0XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJlcmxhbmctcmVwbFwiLGZ1bmN0aW9uKGUpe3JldHVybntrOntzcGVjaWFsX2Z1bmN0aW9uczpcInNwYXduIHNwYXduX2xpbmsgc2VsZlwiLHJlc2VydmVkOlwiYWZ0ZXIgYW5kIGFuZGFsc298MTAgYmFuZCBiZWdpbiBibm90IGJvciBic2wgYnNyIGJ4b3IgY2FzZSBjYXRjaCBjb25kIGRpdiBlbmQgZnVuIGlmIGxldCBub3Qgb2Ygb3Igb3JlbHNlfDEwIHF1ZXJ5IHJlY2VpdmUgcmVtIHRyeSB3aGVuIHhvclwifSxjOlt7Y046XCJwcm9tcHRcIixiOlwiXlswLTldKz4gXCIscjoxMH0se2NOOlwiY29tbWVudFwiLGI6XCIlXCIsZTpcIiRcIn0se2NOOlwibnVtYmVyXCIsYjpcIlxcXFxiKFxcXFxkKyNbYS1mQS1GMC05XSt8XFxcXGQrKFxcXFwuXFxcXGQrKT8oW2VFXVstK10/XFxcXGQrKT8pXCIscjowfSxlLkFTTSxlLlFTTSx7Y046XCJjb25zdGFudFwiLGI6XCJcXFxcPyg6Oik/KFtBLVpdXFxcXHcqKDo6KT8pK1wifSx7Y046XCJhcnJvd1wiLGI6XCItPlwifSx7Y046XCJva1wiLGI6XCJva1wifSx7Y046XCJleGNsYW1hdGlvbl9tYXJrXCIsYjpcIiFcIn0se2NOOlwiZnVuY3Rpb25fb3JfYXRvbVwiLGI6XCIoXFxcXGJbYS16J11bYS16QS1aMC05XyddKjpbYS16J11bYS16QS1aMC05XyddKil8KFxcXFxiW2EteiddW2EtekEtWjAtOV8nXSopXCIscjowfSx7Y046XCJ2YXJpYWJsZVwiLGI6XCJbQS1aXVthLXpBLVowLTlfJ10qXCIscjowfV19fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwic3R5bHVzXCIsZnVuY3Rpb24odCl7dmFyIGU9e2NOOlwidmFyaWFibGVcIixiOlwiXFxcXCRcIit0LklSfSxvPXtjTjpcImhleGNvbG9yXCIsYjpcIiMoW2EtZkEtRjAtOV17Nn18W2EtZkEtRjAtOV17M30pXCIscjoxMH0saT1bXCJjaGFyc2V0XCIsXCJjc3NcIixcImRlYnVnXCIsXCJleHRlbmRcIixcImZvbnQtZmFjZVwiLFwiZm9yXCIsXCJpbXBvcnRcIixcImluY2x1ZGVcIixcIm1lZGlhXCIsXCJtaXhpblwiLFwicGFnZVwiLFwid2FyblwiLFwid2hpbGVcIl0scj1bXCJhZnRlclwiLFwiYmVmb3JlXCIsXCJmaXJzdC1sZXR0ZXJcIixcImZpcnN0LWxpbmVcIixcImFjdGl2ZVwiLFwiZmlyc3QtY2hpbGRcIixcImZvY3VzXCIsXCJob3ZlclwiLFwibGFuZ1wiLFwibGlua1wiLFwidmlzaXRlZFwiXSxuPVtcImFcIixcImFiYnJcIixcImFkZHJlc3NcIixcImFydGljbGVcIixcImFzaWRlXCIsXCJhdWRpb1wiLFwiYlwiLFwiYmxvY2txdW90ZVwiLFwiYm9keVwiLFwiYnV0dG9uXCIsXCJjYW52YXNcIixcImNhcHRpb25cIixcImNpdGVcIixcImNvZGVcIixcImRkXCIsXCJkZWxcIixcImRldGFpbHNcIixcImRmblwiLFwiZGl2XCIsXCJkbFwiLFwiZHRcIixcImVtXCIsXCJmaWVsZHNldFwiLFwiZmlnY2FwdGlvblwiLFwiZmlndXJlXCIsXCJmb290ZXJcIixcImZvcm1cIixcImgxXCIsXCJoMlwiLFwiaDNcIixcImg0XCIsXCJoNVwiLFwiaDZcIixcImhlYWRlclwiLFwiaGdyb3VwXCIsXCJodG1sXCIsXCJpXCIsXCJpZnJhbWVcIixcImltZ1wiLFwiaW5wdXRcIixcImluc1wiLFwia2JkXCIsXCJsYWJlbFwiLFwibGVnZW5kXCIsXCJsaVwiLFwibWFya1wiLFwibWVudVwiLFwibmF2XCIsXCJvYmplY3RcIixcIm9sXCIsXCJwXCIsXCJxXCIsXCJxdW90ZVwiLFwic2FtcFwiLFwic2VjdGlvblwiLFwic3BhblwiLFwic3Ryb25nXCIsXCJzdW1tYXJ5XCIsXCJzdXBcIixcInRhYmxlXCIsXCJ0Ym9keVwiLFwidGRcIixcInRleHRhcmVhXCIsXCJ0Zm9vdFwiLFwidGhcIixcInRoZWFkXCIsXCJ0aW1lXCIsXCJ0clwiLFwidWxcIixcInZhclwiLFwidmlkZW9cIl0sYT1cIltcXFxcLlxcXFxzXFxcXG5cXFxcW1xcXFw6LF1cIixsPVtcImFsaWduLWNvbnRlbnRcIixcImFsaWduLWl0ZW1zXCIsXCJhbGlnbi1zZWxmXCIsXCJhbmltYXRpb25cIixcImFuaW1hdGlvbi1kZWxheVwiLFwiYW5pbWF0aW9uLWRpcmVjdGlvblwiLFwiYW5pbWF0aW9uLWR1cmF0aW9uXCIsXCJhbmltYXRpb24tZmlsbC1tb2RlXCIsXCJhbmltYXRpb24taXRlcmF0aW9uLWNvdW50XCIsXCJhbmltYXRpb24tbmFtZVwiLFwiYW5pbWF0aW9uLXBsYXktc3RhdGVcIixcImFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb25cIixcImF1dG9cIixcImJhY2tmYWNlLXZpc2liaWxpdHlcIixcImJhY2tncm91bmRcIixcImJhY2tncm91bmQtYXR0YWNobWVudFwiLFwiYmFja2dyb3VuZC1jbGlwXCIsXCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJiYWNrZ3JvdW5kLWltYWdlXCIsXCJiYWNrZ3JvdW5kLW9yaWdpblwiLFwiYmFja2dyb3VuZC1wb3NpdGlvblwiLFwiYmFja2dyb3VuZC1yZXBlYXRcIixcImJhY2tncm91bmQtc2l6ZVwiLFwiYm9yZGVyXCIsXCJib3JkZXItYm90dG9tXCIsXCJib3JkZXItYm90dG9tLWNvbG9yXCIsXCJib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzXCIsXCJib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1c1wiLFwiYm9yZGVyLWJvdHRvbS1zdHlsZVwiLFwiYm9yZGVyLWJvdHRvbS13aWR0aFwiLFwiYm9yZGVyLWNvbGxhcHNlXCIsXCJib3JkZXItY29sb3JcIixcImJvcmRlci1pbWFnZVwiLFwiYm9yZGVyLWltYWdlLW91dHNldFwiLFwiYm9yZGVyLWltYWdlLXJlcGVhdFwiLFwiYm9yZGVyLWltYWdlLXNsaWNlXCIsXCJib3JkZXItaW1hZ2Utc291cmNlXCIsXCJib3JkZXItaW1hZ2Utd2lkdGhcIixcImJvcmRlci1sZWZ0XCIsXCJib3JkZXItbGVmdC1jb2xvclwiLFwiYm9yZGVyLWxlZnQtc3R5bGVcIixcImJvcmRlci1sZWZ0LXdpZHRoXCIsXCJib3JkZXItcmFkaXVzXCIsXCJib3JkZXItcmlnaHRcIixcImJvcmRlci1yaWdodC1jb2xvclwiLFwiYm9yZGVyLXJpZ2h0LXN0eWxlXCIsXCJib3JkZXItcmlnaHQtd2lkdGhcIixcImJvcmRlci1zcGFjaW5nXCIsXCJib3JkZXItc3R5bGVcIixcImJvcmRlci10b3BcIixcImJvcmRlci10b3AtY29sb3JcIixcImJvcmRlci10b3AtbGVmdC1yYWRpdXNcIixcImJvcmRlci10b3AtcmlnaHQtcmFkaXVzXCIsXCJib3JkZXItdG9wLXN0eWxlXCIsXCJib3JkZXItdG9wLXdpZHRoXCIsXCJib3JkZXItd2lkdGhcIixcImJvdHRvbVwiLFwiYm94LWRlY29yYXRpb24tYnJlYWtcIixcImJveC1zaGFkb3dcIixcImJveC1zaXppbmdcIixcImJyZWFrLWFmdGVyXCIsXCJicmVhay1iZWZvcmVcIixcImJyZWFrLWluc2lkZVwiLFwiY2FwdGlvbi1zaWRlXCIsXCJjbGVhclwiLFwiY2xpcFwiLFwiY2xpcC1wYXRoXCIsXCJjb2xvclwiLFwiY29sdW1uLWNvdW50XCIsXCJjb2x1bW4tZmlsbFwiLFwiY29sdW1uLWdhcFwiLFwiY29sdW1uLXJ1bGVcIixcImNvbHVtbi1ydWxlLWNvbG9yXCIsXCJjb2x1bW4tcnVsZS1zdHlsZVwiLFwiY29sdW1uLXJ1bGUtd2lkdGhcIixcImNvbHVtbi1zcGFuXCIsXCJjb2x1bW4td2lkdGhcIixcImNvbHVtbnNcIixcImNvbnRlbnRcIixcImNvdW50ZXItaW5jcmVtZW50XCIsXCJjb3VudGVyLXJlc2V0XCIsXCJjdXJzb3JcIixcImRpcmVjdGlvblwiLFwiZGlzcGxheVwiLFwiZW1wdHktY2VsbHNcIixcImZpbHRlclwiLFwiZmxleFwiLFwiZmxleC1iYXNpc1wiLFwiZmxleC1kaXJlY3Rpb25cIixcImZsZXgtZmxvd1wiLFwiZmxleC1ncm93XCIsXCJmbGV4LXNocmlua1wiLFwiZmxleC13cmFwXCIsXCJmbG9hdFwiLFwiZm9udFwiLFwiZm9udC1mYW1pbHlcIixcImZvbnQtZmVhdHVyZS1zZXR0aW5nc1wiLFwiZm9udC1rZXJuaW5nXCIsXCJmb250LWxhbmd1YWdlLW92ZXJyaWRlXCIsXCJmb250LXNpemVcIixcImZvbnQtc2l6ZS1hZGp1c3RcIixcImZvbnQtc3RyZXRjaFwiLFwiZm9udC1zdHlsZVwiLFwiZm9udC12YXJpYW50XCIsXCJmb250LXZhcmlhbnQtbGlnYXR1cmVzXCIsXCJmb250LXdlaWdodFwiLFwiaGVpZ2h0XCIsXCJoeXBoZW5zXCIsXCJpY29uXCIsXCJpbWFnZS1vcmllbnRhdGlvblwiLFwiaW1hZ2UtcmVuZGVyaW5nXCIsXCJpbWFnZS1yZXNvbHV0aW9uXCIsXCJpbWUtbW9kZVwiLFwiaW5oZXJpdFwiLFwiaW5pdGlhbFwiLFwianVzdGlmeS1jb250ZW50XCIsXCJsZWZ0XCIsXCJsZXR0ZXItc3BhY2luZ1wiLFwibGluZS1oZWlnaHRcIixcImxpc3Qtc3R5bGVcIixcImxpc3Qtc3R5bGUtaW1hZ2VcIixcImxpc3Qtc3R5bGUtcG9zaXRpb25cIixcImxpc3Qtc3R5bGUtdHlwZVwiLFwibWFyZ2luXCIsXCJtYXJnaW4tYm90dG9tXCIsXCJtYXJnaW4tbGVmdFwiLFwibWFyZ2luLXJpZ2h0XCIsXCJtYXJnaW4tdG9wXCIsXCJtYXJrc1wiLFwibWFza1wiLFwibWF4LWhlaWdodFwiLFwibWF4LXdpZHRoXCIsXCJtaW4taGVpZ2h0XCIsXCJtaW4td2lkdGhcIixcIm5hdi1kb3duXCIsXCJuYXYtaW5kZXhcIixcIm5hdi1sZWZ0XCIsXCJuYXYtcmlnaHRcIixcIm5hdi11cFwiLFwibm9uZVwiLFwibm9ybWFsXCIsXCJvYmplY3QtZml0XCIsXCJvYmplY3QtcG9zaXRpb25cIixcIm9wYWNpdHlcIixcIm9yZGVyXCIsXCJvcnBoYW5zXCIsXCJvdXRsaW5lXCIsXCJvdXRsaW5lLWNvbG9yXCIsXCJvdXRsaW5lLW9mZnNldFwiLFwib3V0bGluZS1zdHlsZVwiLFwib3V0bGluZS13aWR0aFwiLFwib3ZlcmZsb3dcIixcIm92ZXJmbG93LXdyYXBcIixcIm92ZXJmbG93LXhcIixcIm92ZXJmbG93LXlcIixcInBhZGRpbmdcIixcInBhZGRpbmctYm90dG9tXCIsXCJwYWRkaW5nLWxlZnRcIixcInBhZGRpbmctcmlnaHRcIixcInBhZGRpbmctdG9wXCIsXCJwYWdlLWJyZWFrLWFmdGVyXCIsXCJwYWdlLWJyZWFrLWJlZm9yZVwiLFwicGFnZS1icmVhay1pbnNpZGVcIixcInBlcnNwZWN0aXZlXCIsXCJwZXJzcGVjdGl2ZS1vcmlnaW5cIixcInBvaW50ZXItZXZlbnRzXCIsXCJwb3NpdGlvblwiLFwicXVvdGVzXCIsXCJyZXNpemVcIixcInJpZ2h0XCIsXCJ0YWItc2l6ZVwiLFwidGFibGUtbGF5b3V0XCIsXCJ0ZXh0LWFsaWduXCIsXCJ0ZXh0LWFsaWduLWxhc3RcIixcInRleHQtZGVjb3JhdGlvblwiLFwidGV4dC1kZWNvcmF0aW9uLWNvbG9yXCIsXCJ0ZXh0LWRlY29yYXRpb24tbGluZVwiLFwidGV4dC1kZWNvcmF0aW9uLXN0eWxlXCIsXCJ0ZXh0LWluZGVudFwiLFwidGV4dC1vdmVyZmxvd1wiLFwidGV4dC1yZW5kZXJpbmdcIixcInRleHQtc2hhZG93XCIsXCJ0ZXh0LXRyYW5zZm9ybVwiLFwidGV4dC11bmRlcmxpbmUtcG9zaXRpb25cIixcInRvcFwiLFwidHJhbnNmb3JtXCIsXCJ0cmFuc2Zvcm0tb3JpZ2luXCIsXCJ0cmFuc2Zvcm0tc3R5bGVcIixcInRyYW5zaXRpb25cIixcInRyYW5zaXRpb24tZGVsYXlcIixcInRyYW5zaXRpb24tZHVyYXRpb25cIixcInRyYW5zaXRpb24tcHJvcGVydHlcIixcInRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uXCIsXCJ1bmljb2RlLWJpZGlcIixcInZlcnRpY2FsLWFsaWduXCIsXCJ2aXNpYmlsaXR5XCIsXCJ3aGl0ZS1zcGFjZVwiLFwid2lkb3dzXCIsXCJ3aWR0aFwiLFwid29yZC1icmVha1wiLFwid29yZC1zcGFjaW5nXCIsXCJ3b3JkLXdyYXBcIixcInotaW5kZXhcIl0sZD1bXCJcXFxce1wiLFwiXFxcXH1cIixcIlxcXFw/XCIsXCIoXFxcXGJSZXR1cm5cXFxcYilcIixcIihcXFxcYkVuZFxcXFxiKVwiLFwiKFxcXFxiZW5kXFxcXGIpXCIsXCI7XCIsXCIjXFxcXHNcIixcIlxcXFwqXFxcXHNcIixcIj09PVxcXFxzXCIsXCJcXFxcfFwiXTtyZXR1cm57YWxpYXNlczpbXCJzdHlsXCJdLGNJOiExLGk6XCIoXCIrZC5qb2luKFwifFwiKStcIilcIixrOlwiaWYgZWxzZSBmb3IgaW5cIixjOlt0LlFTTSx0LkFTTSx0LkNMQ00sdC5DQkNNLG8se2I6XCJcXFxcLlthLXpBLVpdW2EtekEtWjAtOV8tXSpcIithLHJCOiEwLGM6W3tjTjpcImNsYXNzXCIsYjpcIlxcXFwuW2EtekEtWl1bYS16QS1aMC05Xy1dKlwifV19LHtiOlwiXFxcXCNbYS16QS1aXVthLXpBLVowLTlfLV0qXCIrYSxyQjohMCxjOlt7Y046XCJpZFwiLGI6XCJcXFxcI1thLXpBLVpdW2EtekEtWjAtOV8tXSpcIn1dfSx7YjpcIlxcXFxiKFwiK24uam9pbihcInxcIikrXCIpXCIrYSxyQjohMCxjOlt7Y046XCJ0YWdcIixiOlwiXFxcXGJbYS16QS1aXVthLXpBLVowLTlfLV0qXCJ9XX0se2NOOlwicHNldWRvXCIsYjpcIiY/Oj86XFxcXGIoXCIrci5qb2luKFwifFwiKStcIilcIithfSx7Y046XCJhdF9ydWxlXCIsYjpcIkAoXCIraS5qb2luKFwifFwiKStcIilcXFxcYlwifSxlLHQuQ1NTTk0sdC5OTSx7Y046XCJmdW5jdGlvblwiLGI6XCJcXFxcYlthLXpBLVpdW2EtekEtWjAtOV8tXSpcXFxcKC4qXFxcXClcIixpOlwiW1xcXFxuXVwiLHJCOiEwLGM6W3tjTjpcInRpdGxlXCIsYjpcIlxcXFxiW2EtekEtWl1bYS16QS1aMC05Xy1dKlwifSx7Y046XCJwYXJhbXNcIixiOi9cXCgvLGU6L1xcKS8sYzpbbyxlLHQuQVNNLHQuQ1NTTk0sdC5OTSx0LlFTTV19XX0se2NOOlwiYXR0cmlidXRlXCIsYjpcIlxcXFxiKFwiK2wucmV2ZXJzZSgpLmpvaW4oXCJ8XCIpK1wiKVxcXFxiXCJ9XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJsZXNzXCIsZnVuY3Rpb24oZSl7dmFyIHI9XCJbXFxcXHctXStcIix0PVwiKFwiK3IrXCJ8QHtcIityK1wifSkrXCIsYT1bXSxjPVtdLG49ZnVuY3Rpb24oZSl7cmV0dXJue2NOOlwic3RyaW5nXCIsYjpcIn4/XCIrZStcIi4qP1wiK2V9fSxpPWZ1bmN0aW9uKGUscix0KXtyZXR1cm57Y046ZSxiOnIscjp0fX0scz1mdW5jdGlvbihyLHQsYSl7cmV0dXJuIGUuaW5oZXJpdCh7Y046cixiOnQrXCJcXFxcKFwiLGU6XCJcXFxcKFwiLHJCOiEwLGVFOiEwLHI6MH0sYSl9LGI9e2I6XCJcXFxcKFwiLGU6XCJcXFxcKVwiLGM6YyxyOjB9O2MucHVzaChlLkNMQ00sZS5DQkNNLG4oXCInXCIpLG4oJ1wiJyksZS5DU1NOTSxpKFwiaGV4Y29sb3JcIixcIiNbMC05QS1GYS1mXStcXFxcYlwiKSxzKFwiZnVuY3Rpb25cIixcIih1cmx8ZGF0YS11cmkpXCIse3N0YXJ0czp7Y046XCJzdHJpbmdcIixlOlwiW1xcXFwpXFxcXG5dXCIsZUU6ITB9fSkscyhcImZ1bmN0aW9uXCIsciksYixpKFwidmFyaWFibGVcIixcIkBAP1wiK3IsMTApLGkoXCJ2YXJpYWJsZVwiLFwiQHtcIityK1wifVwiKSxpKFwiYnVpbHRfaW5cIixcIn4/YFteYF0qP2BcIikse2NOOlwiYXR0cmlidXRlXCIsYjpyK1wiXFxcXHMqOlwiLGU6XCI6XCIsckI6ITAsZUU6ITB9KTt2YXIgbz1jLmNvbmNhdCh7YjpcIntcIixlOlwifVwiLGM6YX0pLHU9e2JLOlwid2hlblwiLGVXOiEwLGM6W3tiSzpcImFuZCBub3RcIn1dLmNvbmNhdChjKX0sQz17Y046XCJhdHRyaWJ1dGVcIixiOnQsZTpcIjpcIixlRTohMCxjOltlLkNMQ00sZS5DQkNNXSxpOi9cXFMvLHN0YXJ0czp7ZTpcIls7fV1cIixyRTohMCxjOmMsaTpcIls8PSRdXCJ9fSxsPXtjTjpcImF0X3J1bGVcIixiOlwiQChpbXBvcnR8bWVkaWF8Y2hhcnNldHxmb250LWZhY2V8KC1bYS16XSstKT9rZXlmcmFtZXN8c3VwcG9ydHN8ZG9jdW1lbnR8bmFtZXNwYWNlfHBhZ2V8dmlld3BvcnR8aG9zdClcXFxcYlwiLHN0YXJ0czp7ZTpcIls7e31dXCIsckU6ITAsYzpjLHI6MH19LGQ9e2NOOlwidmFyaWFibGVcIix2Olt7YjpcIkBcIityK1wiXFxcXHMqOlwiLHI6MTV9LHtiOlwiQFwiK3J9XSxzdGFydHM6e2U6XCJbO31dXCIsckU6ITAsYzpvfX0scD17djpbe2I6XCJbXFxcXC4jOiZcXFxcW11cIixlOlwiWzt7fV1cIn0se2I6dCtcIlteO10qe1wiLGU6XCJ7XCJ9XSxyQjohMCxyRTohMCxpOlwiWzw9JyRcXFwiXVwiLGM6W2UuQ0xDTSxlLkNCQ00sdSxpKFwia2V5d29yZFwiLFwiYWxsXFxcXGJcIiksaShcInZhcmlhYmxlXCIsXCJAe1wiK3IrXCJ9XCIpLGkoXCJ0YWdcIix0K1wiJT9cIiwwKSxpKFwiaWRcIixcIiNcIit0KSxpKFwiY2xhc3NcIixcIlxcXFwuXCIrdCwwKSxpKFwia2V5d29yZFwiLFwiJlwiLDApLHMoXCJwc2V1ZG9cIixcIjpub3RcIikscyhcImtleXdvcmRcIixcIjpleHRlbmRcIiksaShcInBzZXVkb1wiLFwiOjo/XCIrdCkse2NOOlwiYXR0cl9zZWxlY3RvclwiLGI6XCJcXFxcW1wiLGU6XCJcXFxcXVwifSx7YjpcIlxcXFwoXCIsZTpcIlxcXFwpXCIsYzpvfSx7YjpcIiFpbXBvcnRhbnRcIn1dfTtyZXR1cm4gYS5wdXNoKGUuQ0xDTSxlLkNCQ00sbCxkLHAsQykse2NJOiEwLGk6XCJbPT4nLzwoJFxcXCJdXCIsYzphfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcInNjYWxhXCIsZnVuY3Rpb24oZSl7dmFyIHQ9e2NOOlwiYW5ub3RhdGlvblwiLGI6XCJAW0EtWmEtel0rXCJ9LGE9e2NOOlwic3RyaW5nXCIsYjondT9yP1wiXCJcIicsZTonXCJcIlwiJyxyOjEwfSxyPXtjTjpcInN5bWJvbFwiLGI6XCInXFxcXHdbXFxcXHdcXFxcZF9dKig/IScpXCJ9LGM9e2NOOlwidHlwZVwiLGI6XCJcXFxcYltBLVpdW0EtWmEtejAtOV9dKlwiLHI6MH0saT17Y046XCJ0aXRsZVwiLGI6L1teMC05XFxuXFx0IFwiJygpLC5ge31cXFtcXF06O11bXlxcblxcdCBcIicoKSwuYHt9XFxbXFxdOjtdK3xbXjAtOVxcblxcdCBcIicoKSwuYHt9XFxbXFxdOjs9XS8scjowfSxsPXtjTjpcImNsYXNzXCIsYks6XCJjbGFzcyBvYmplY3QgdHJhaXQgdHlwZVwiLGU6L1s6PXtcXFsoXFxuO10vLGM6W3tjTjpcImtleXdvcmRcIixiSzpcImV4dGVuZHMgd2l0aFwiLHI6MTB9LGldfSxuPXtjTjpcImZ1bmN0aW9uXCIsYks6XCJkZWYgdmFsXCIsZTovWzo9e1xcWyhcXG47XS8sYzpbaV19O3JldHVybntrOntsaXRlcmFsOlwidHJ1ZSBmYWxzZSBudWxsXCIsa2V5d29yZDpcInR5cGUgeWllbGQgbGF6eSBvdmVycmlkZSBkZWYgd2l0aCB2YWwgdmFyIHNlYWxlZCBhYnN0cmFjdCBwcml2YXRlIHRyYWl0IG9iamVjdCBpZiBmb3JTb21lIGZvciB3aGlsZSB0aHJvdyBmaW5hbGx5IHByb3RlY3RlZCBleHRlbmRzIGltcG9ydCBmaW5hbCByZXR1cm4gZWxzZSBicmVhayBuZXcgY2F0Y2ggc3VwZXIgY2xhc3MgY2FzZSBwYWNrYWdlIGRlZmF1bHQgdHJ5IHRoaXMgbWF0Y2ggY29udGludWUgdGhyb3dzIGltcGxpY2l0XCJ9LGM6W2UuQ0xDTSxlLkNCQ00sYSxlLlFTTSxyLGMsbixsLGUuQ05NLHRdfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcImphdmFcIixmdW5jdGlvbihlKXt2YXIgYT1lLlVJUitcIig8XCIrZS5VSVIrXCI+KT9cIix0PVwiZmFsc2Ugc3luY2hyb25pemVkIGludCBhYnN0cmFjdCBmbG9hdCBwcml2YXRlIGNoYXIgYm9vbGVhbiBzdGF0aWMgbnVsbCBpZiBjb25zdCBmb3IgdHJ1ZSB3aGlsZSBsb25nIHN0cmljdGZwIGZpbmFsbHkgcHJvdGVjdGVkIGltcG9ydCBuYXRpdmUgZmluYWwgdm9pZCBlbnVtIGVsc2UgYnJlYWsgdHJhbnNpZW50IGNhdGNoIGluc3RhbmNlb2YgYnl0ZSBzdXBlciB2b2xhdGlsZSBjYXNlIGFzc2VydCBzaG9ydCBwYWNrYWdlIGRlZmF1bHQgZG91YmxlIHB1YmxpYyB0cnkgdGhpcyBzd2l0Y2ggY29udGludWUgdGhyb3dzIHByb3RlY3RlZCBwdWJsaWMgcHJpdmF0ZVwiLGM9XCIoXFxcXGIoMGJbMDFfXSspfFxcXFxiMFt4WF1bYS1mQS1GMC05X10rfChcXFxcYltcXFxcZF9dKyhcXFxcLltcXFxcZF9dKik/fFxcXFwuW1xcXFxkX10rKShbZUVdWy0rXT9cXFxcZCspPylbbExmRl0/XCIscj17Y046XCJudW1iZXJcIixiOmMscjowfTtyZXR1cm57YWxpYXNlczpbXCJqc3BcIl0sazp0LGk6LzxcXC8vLGM6W3tjTjpcImphdmFkb2NcIixiOlwiL1xcXFwqXFxcXCpcIixlOlwiXFxcXCovXCIscjowLGM6W3tjTjpcImphdmFkb2N0YWdcIixiOlwiKF58XFxcXHMpQFtBLVphLXpdK1wifV19LGUuQ0xDTSxlLkNCQ00sZS5BU00sZS5RU00se2NOOlwiY2xhc3NcIixiSzpcImNsYXNzIGludGVyZmFjZVwiLGU6L1t7Oz1dLyxlRTohMCxrOlwiY2xhc3MgaW50ZXJmYWNlXCIsaTovWzpcIlxcW1xcXV0vLGM6W3tiSzpcImV4dGVuZHMgaW1wbGVtZW50c1wifSxlLlVUTV19LHtiSzpcIm5ldyB0aHJvdyByZXR1cm5cIixyOjB9LHtjTjpcImZ1bmN0aW9uXCIsYjpcIihcIithK1wiXFxcXHMrKStcIitlLlVJUitcIlxcXFxzKlxcXFwoXCIsckI6ITAsZTovW3s7PV0vLGVFOiEwLGs6dCxjOlt7YjplLlVJUitcIlxcXFxzKlxcXFwoXCIsckI6ITAscjowLGM6W2UuVVRNXX0se2NOOlwicGFyYW1zXCIsYjovXFwoLyxlOi9cXCkvLGs6dCxyOjAsYzpbZS5BU00sZS5RU00sZS5DTk0sZS5DQkNNXX0sZS5DTENNLGUuQ0JDTV19LHIse2NOOlwiYW5ub3RhdGlvblwiLGI6XCJAW0EtWmEtel0rXCJ9XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJvYmplY3RpdmVjXCIsZnVuY3Rpb24oZSl7dmFyIHQ9e2tleXdvcmQ6XCJpbnQgZmxvYXQgd2hpbGUgY2hhciBleHBvcnQgc2l6ZW9mIHR5cGVkZWYgY29uc3Qgc3RydWN0IGZvciB1bmlvbiB1bnNpZ25lZCBsb25nIHZvbGF0aWxlIHN0YXRpYyBib29sIG11dGFibGUgaWYgZG8gcmV0dXJuIGdvdG8gdm9pZCBlbnVtIGVsc2UgYnJlYWsgZXh0ZXJuIGFzbSBjYXNlIHNob3J0IGRlZmF1bHQgZG91YmxlIHJlZ2lzdGVyIGV4cGxpY2l0IHNpZ25lZCB0eXBlbmFtZSB0aGlzIHN3aXRjaCBjb250aW51ZSB3Y2hhcl90IGlubGluZSByZWFkb25seSBhc3NpZ24gcmVhZHdyaXRlIHNlbGYgQHN5bmNocm9uaXplZCBpZCB0eXBlb2Ygbm9uYXRvbWljIHN1cGVyIHVuaWNoYXIgSUJPdXRsZXQgSUJBY3Rpb24gc3Ryb25nIHdlYWsgY29weSBpbiBvdXQgaW5vdXQgYnljb3B5IGJ5cmVmIG9uZXdheSBfX3N0cm9uZyBfX3dlYWsgX19ibG9jayBfX2F1dG9yZWxlYXNpbmcgQHByaXZhdGUgQHByb3RlY3RlZCBAcHVibGljIEB0cnkgQHByb3BlcnR5IEBlbmQgQHRocm93IEBjYXRjaCBAZmluYWxseSBAYXV0b3JlbGVhc2Vwb29sIEBzeW50aGVzaXplIEBkeW5hbWljIEBzZWxlY3RvciBAb3B0aW9uYWwgQHJlcXVpcmVkXCIsbGl0ZXJhbDpcImZhbHNlIHRydWUgRkFMU0UgVFJVRSBuaWwgWUVTIE5PIE5VTExcIixidWlsdF9pbjpcIk5TU3RyaW5nIE5TRGF0YSBOU0RpY3Rpb25hcnkgQ0dSZWN0IENHUG9pbnQgVUlCdXR0b24gVUlMYWJlbCBVSVRleHRWaWV3IFVJV2ViVmlldyBNS01hcFZpZXcgTlNWaWV3IE5TVmlld0NvbnRyb2xsZXIgTlNXaW5kb3cgTlNXaW5kb3dDb250cm9sbGVyIE5TU2V0IE5TVVVJRCBOU0luZGV4U2V0IFVJU2VnbWVudGVkQ29udHJvbCBOU09iamVjdCBVSVRhYmxlVmlld0RlbGVnYXRlIFVJVGFibGVWaWV3RGF0YVNvdXJjZSBOU1RocmVhZCBVSUFjdGl2aXR5SW5kaWNhdG9yIFVJVGFiYmFyIFVJVG9vbEJhciBVSUJhckJ1dHRvbkl0ZW0gVUlJbWFnZVZpZXcgTlNBdXRvcmVsZWFzZVBvb2wgVUlUYWJsZVZpZXcgQk9PTCBOU0ludGVnZXIgQ0dGbG9hdCBOU0V4Y2VwdGlvbiBOU0xvZyBOU011dGFibGVTdHJpbmcgTlNNdXRhYmxlQXJyYXkgTlNNdXRhYmxlRGljdGlvbmFyeSBOU1VSTCBOU0luZGV4UGF0aCBDR1NpemUgVUlUYWJsZVZpZXdDZWxsIFVJVmlldyBVSVZpZXdDb250cm9sbGVyIFVJTmF2aWdhdGlvbkJhciBVSU5hdmlnYXRpb25Db250cm9sbGVyIFVJVGFiQmFyQ29udHJvbGxlciBVSVBvcG92ZXJDb250cm9sbGVyIFVJUG9wb3ZlckNvbnRyb2xsZXJEZWxlZ2F0ZSBVSUltYWdlIE5TTnVtYmVyIFVJU2VhcmNoQmFyIE5TRmV0Y2hlZFJlc3VsdHNDb250cm9sbGVyIE5TRmV0Y2hlZFJlc3VsdHNDaGFuZ2VUeXBlIFVJU2Nyb2xsVmlldyBVSVNjcm9sbFZpZXdEZWxlZ2F0ZSBVSUVkZ2VJbnNldHMgVUlDb2xvciBVSUZvbnQgVUlBcHBsaWNhdGlvbiBOU05vdEZvdW5kIE5TTm90aWZpY2F0aW9uQ2VudGVyIE5TTm90aWZpY2F0aW9uIFVJTG9jYWxOb3RpZmljYXRpb24gTlNCdW5kbGUgTlNGaWxlTWFuYWdlciBOU1RpbWVJbnRlcnZhbCBOU0RhdGUgTlNDYWxlbmRhciBOU1VzZXJEZWZhdWx0cyBVSVdpbmRvdyBOU1JhbmdlIE5TQXJyYXkgTlNFcnJvciBOU1VSTFJlcXVlc3QgTlNVUkxDb25uZWN0aW9uIE5TVVJMU2Vzc2lvbiBOU1VSTFNlc3Npb25EYXRhVGFzayBOU1VSTFNlc3Npb25Eb3dubG9hZFRhc2sgTlNVUkxTZXNzaW9uVXBsb2FkVGFzayBOU1VSTFJlc3BvbnNlVUlJbnRlcmZhY2VPcmllbnRhdGlvbiBNUE1vdmllUGxheWVyQ29udHJvbGxlciBkaXNwYXRjaF9vbmNlX3QgZGlzcGF0Y2hfcXVldWVfdCBkaXNwYXRjaF9zeW5jIGRpc3BhdGNoX2FzeW5jIGRpc3BhdGNoX29uY2VcIn0sbz0vW2EtekEtWkBdW2EtekEtWjAtOV9dKi8sYT1cIkBpbnRlcmZhY2UgQGNsYXNzIEBwcm90b2NvbCBAaW1wbGVtZW50YXRpb25cIjtyZXR1cm57YWxpYXNlczpbXCJtXCIsXCJtbVwiLFwib2JqY1wiLFwib2JqLWNcIl0sazp0LGw6byxpOlwiPC9cIixjOltlLkNMQ00sZS5DQkNNLGUuQ05NLGUuUVNNLHtjTjpcInN0cmluZ1wiLHY6W3tiOidAXCInLGU6J1wiJyxpOlwiXFxcXG5cIixjOltlLkJFXX0se2I6XCInXCIsZTpcIlteXFxcXFxcXFxdJ1wiLGk6XCJbXlxcXFxcXFxcXVteJ11cIn1dfSx7Y046XCJwcmVwcm9jZXNzb3JcIixiOlwiI1wiLGU6XCIkXCIsYzpbe2NOOlwidGl0bGVcIix2Olt7YjonXCInLGU6J1wiJ30se2I6XCI8XCIsZTpcIj5cIn1dfV19LHtjTjpcImNsYXNzXCIsYjpcIihcIithLnNwbGl0KFwiIFwiKS5qb2luKFwifFwiKStcIilcXFxcYlwiLGU6XCIoe3wkKVwiLGVFOiEwLGs6YSxsOm8sYzpbZS5VVE1dfSx7Y046XCJ2YXJpYWJsZVwiLGI6XCJcXFxcLlwiK2UuVUlSLHI6MH1dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcImhhbmRsZWJhcnNcIixmdW5jdGlvbigpe3ZhciBlPVwiZWFjaCBpbiB3aXRoIGlmIGVsc2UgdW5sZXNzIGJpbmRhdHRyIGFjdGlvbiBjb2xsZWN0aW9uIGRlYnVnZ2VyIGxvZyBvdXRsZXQgdGVtcGxhdGUgdW5ib3VuZCB2aWV3IHlpZWxkXCI7cmV0dXJue2FsaWFzZXM6W1wiaGJzXCIsXCJodG1sLmhic1wiLFwiaHRtbC5oYW5kbGViYXJzXCJdLGNJOiEwLHNMOlwieG1sXCIsc3ViTGFuZ3VhZ2VNb2RlOlwiY29udGludW91c1wiLGM6W3tjTjpcImV4cHJlc3Npb25cIixiOlwie3tcIixlOlwifX1cIixjOlt7Y046XCJiZWdpbi1ibG9ja1wiLGI6XCIjW2EtekEtWi0gLl0rXCIsazplfSx7Y046XCJzdHJpbmdcIixiOidcIicsZTonXCInfSx7Y046XCJlbmQtYmxvY2tcIixiOlwiXFxcXC9bYS16QS1aLSAuXStcIixrOmV9LHtjTjpcInZhcmlhYmxlXCIsYjpcIlthLXpBLVotLl0rXCIsazplfV19XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJwaHBcIixmdW5jdGlvbihlKXt2YXIgYz17Y046XCJ2YXJpYWJsZVwiLGI6XCJcXFxcJCtbYS16QS1aX38tw79dW2EtekEtWjAtOV9/LcO/XSpcIn0saT17Y046XCJwcmVwcm9jZXNzb3JcIixiOi88XFw/KHBocCk/fFxcPz4vfSxhPXtjTjpcInN0cmluZ1wiLGM6W2UuQkUsaV0sdjpbe2I6J2JcIicsZTonXCInfSx7YjpcImInXCIsZTpcIidcIn0sZS5pbmhlcml0KGUuQVNNLHtpOm51bGx9KSxlLmluaGVyaXQoZS5RU00se2k6bnVsbH0pXX0sbj17djpbZS5CTk0sZS5DTk1dfTtyZXR1cm57YWxpYXNlczpbXCJwaHAzXCIsXCJwaHA0XCIsXCJwaHA1XCIsXCJwaHA2XCJdLGNJOiEwLGs6XCJhbmQgaW5jbHVkZV9vbmNlIGxpc3QgYWJzdHJhY3QgZ2xvYmFsIHByaXZhdGUgZWNobyBpbnRlcmZhY2UgYXMgc3RhdGljIGVuZHN3aXRjaCBhcnJheSBudWxsIGlmIGVuZHdoaWxlIG9yIGNvbnN0IGZvciBlbmRmb3JlYWNoIHNlbGYgdmFyIHdoaWxlIGlzc2V0IHB1YmxpYyBwcm90ZWN0ZWQgZXhpdCBmb3JlYWNoIHRocm93IGVsc2VpZiBpbmNsdWRlIF9fRklMRV9fIGVtcHR5IHJlcXVpcmVfb25jZSBkbyB4b3IgcmV0dXJuIHBhcmVudCBjbG9uZSB1c2UgX19DTEFTU19fIF9fTElORV9fIGVsc2UgYnJlYWsgcHJpbnQgZXZhbCBuZXcgY2F0Y2ggX19NRVRIT0RfXyBjYXNlIGV4Y2VwdGlvbiBkZWZhdWx0IGRpZSByZXF1aXJlIF9fRlVOQ1RJT05fXyBlbmRkZWNsYXJlIGZpbmFsIHRyeSBzd2l0Y2ggY29udGludWUgZW5kZm9yIGVuZGlmIGRlY2xhcmUgdW5zZXQgdHJ1ZSBmYWxzZSB0cmFpdCBnb3RvIGluc3RhbmNlb2YgaW5zdGVhZG9mIF9fRElSX18gX19OQU1FU1BBQ0VfXyB5aWVsZCBmaW5hbGx5XCIsYzpbZS5DTENNLGUuSENNLHtjTjpcImNvbW1lbnRcIixiOlwiL1xcXFwqXCIsZTpcIlxcXFwqL1wiLGM6W3tjTjpcInBocGRvY1wiLGI6XCJcXFxcc0BbQS1aYS16XStcIn0saV19LHtjTjpcImNvbW1lbnRcIixiOlwiX19oYWx0X2NvbXBpbGVyLis/O1wiLGVXOiEwLGs6XCJfX2hhbHRfY29tcGlsZXJcIixsOmUuVUlSfSx7Y046XCJzdHJpbmdcIixiOlwiPDw8WydcXFwiXT9cXFxcdytbJ1xcXCJdPyRcIixlOlwiXlxcXFx3KztcIixjOltlLkJFXX0saSxjLHtiOi8tPitbYS16QS1aX1xceDdmLVxceGZmXVthLXpBLVowLTlfXFx4N2YtXFx4ZmZdKi99LHtjTjpcImZ1bmN0aW9uXCIsYks6XCJmdW5jdGlvblwiLGU6L1s7e10vLGVFOiEwLGk6XCJcXFxcJHxcXFxcW3wlXCIsYzpbZS5VVE0se2NOOlwicGFyYW1zXCIsYjpcIlxcXFwoXCIsZTpcIlxcXFwpXCIsYzpbXCJzZWxmXCIsYyxlLkNCQ00sYSxuXX1dfSx7Y046XCJjbGFzc1wiLGJLOlwiY2xhc3MgaW50ZXJmYWNlXCIsZTpcIntcIixlRTohMCxpOi9bOlxcKFxcJFwiXS8sYzpbe2JLOlwiZXh0ZW5kcyBpbXBsZW1lbnRzXCJ9LGUuVVRNXX0se2JLOlwibmFtZXNwYWNlXCIsZTpcIjtcIixpOi9bXFwuJ10vLGM6W2UuVVRNXX0se2JLOlwidXNlXCIsZTpcIjtcIixjOltlLlVUTV19LHtiOlwiPT5cIn0sYSxuXX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJtYXRsYWJcIixmdW5jdGlvbihlKXt2YXIgYT1bZS5DTk0se2NOOlwic3RyaW5nXCIsYjpcIidcIixlOlwiJ1wiLGM6W2UuQkUse2I6XCInJ1wifV19XSxzPXtyOjAsYzpbe2NOOlwib3BlcmF0b3JcIixiOi8nWydcXC5dKi99XX07cmV0dXJue2s6e2tleXdvcmQ6XCJicmVhayBjYXNlIGNhdGNoIGNsYXNzZGVmIGNvbnRpbnVlIGVsc2UgZWxzZWlmIGVuZCBlbnVtZXJhdGVkIGV2ZW50cyBmb3IgZnVuY3Rpb24gZ2xvYmFsIGlmIG1ldGhvZHMgb3RoZXJ3aXNlIHBhcmZvciBwZXJzaXN0ZW50IHByb3BlcnRpZXMgcmV0dXJuIHNwbWQgc3dpdGNoIHRyeSB3aGlsZVwiLGJ1aWx0X2luOlwic2luIHNpbmQgc2luaCBhc2luIGFzaW5kIGFzaW5oIGNvcyBjb3NkIGNvc2ggYWNvcyBhY29zZCBhY29zaCB0YW4gdGFuZCB0YW5oIGF0YW4gYXRhbmQgYXRhbjIgYXRhbmggc2VjIHNlY2Qgc2VjaCBhc2VjIGFzZWNkIGFzZWNoIGNzYyBjc2NkIGNzY2ggYWNzYyBhY3NjZCBhY3NjaCBjb3QgY290ZCBjb3RoIGFjb3QgYWNvdGQgYWNvdGggaHlwb3QgZXhwIGV4cG0xIGxvZyBsb2cxcCBsb2cxMCBsb2cyIHBvdzIgcmVhbHBvdyByZWFsbG9nIHJlYWxzcXJ0IHNxcnQgbnRocm9vdCBuZXh0cG93MiBhYnMgYW5nbGUgY29tcGxleCBjb25qIGltYWcgcmVhbCB1bndyYXAgaXNyZWFsIGNwbHhwYWlyIGZpeCBmbG9vciBjZWlsIHJvdW5kIG1vZCByZW0gc2lnbiBhaXJ5IGJlc3NlbGogYmVzc2VseSBiZXNzZWxoIGJlc3NlbGkgYmVzc2VsayBiZXRhIGJldGFpbmMgYmV0YWxuIGVsbGlwaiBlbGxpcGtlIGVyZiBlcmZjIGVyZmN4IGVyZmludiBleHBpbnQgZ2FtbWEgZ2FtbWFpbmMgZ2FtbWFsbiBwc2kgbGVnZW5kcmUgY3Jvc3MgZG90IGZhY3RvciBpc3ByaW1lIHByaW1lcyBnY2QgbGNtIHJhdCByYXRzIHBlcm1zIG5jaG9vc2VrIGZhY3RvcmlhbCBjYXJ0MnNwaCBjYXJ0MnBvbCBwb2wyY2FydCBzcGgyY2FydCBoc3YycmdiIHJnYjJoc3YgemVyb3Mgb25lcyBleWUgcmVwbWF0IHJhbmQgcmFuZG4gbGluc3BhY2UgbG9nc3BhY2UgZnJlcXNwYWNlIG1lc2hncmlkIGFjY3VtYXJyYXkgc2l6ZSBsZW5ndGggbmRpbXMgbnVtZWwgZGlzcCBpc2VtcHR5IGlzZXF1YWwgaXNlcXVhbHdpdGhlcXVhbG5hbnMgY2F0IHJlc2hhcGUgZGlhZyBibGtkaWFnIHRyaWwgdHJpdSBmbGlwbHIgZmxpcHVkIGZsaXBkaW0gcm90OTAgZmluZCBzdWIyaW5kIGluZDJzdWIgYnN4ZnVuIG5kZ3JpZCBwZXJtdXRlIGlwZXJtdXRlIHNoaWZ0ZGltIGNpcmNzaGlmdCBzcXVlZXplIGlzc2NhbGFyIGlzdmVjdG9yIGFucyBlcHMgcmVhbG1heCByZWFsbWluIHBpIGkgaW5mIG5hbiBpc25hbiBpc2luZiBpc2Zpbml0ZSBqIHdoeSBjb21wYW4gZ2FsbGVyeSBoYWRhbWFyZCBoYW5rZWwgaGlsYiBpbnZoaWxiIG1hZ2ljIHBhc2NhbCByb3NzZXIgdG9lcGxpdHogdmFuZGVyIHdpbGtpbnNvblwifSxpOicoLy98XCJ8I3wvXFxcXCp8XFxcXHMrL1xcXFx3KyknLGM6W3tjTjpcImZ1bmN0aW9uXCIsYks6XCJmdW5jdGlvblwiLGU6XCIkXCIsYzpbZS5VVE0se2NOOlwicGFyYW1zXCIsYjpcIlxcXFwoXCIsZTpcIlxcXFwpXCJ9LHtjTjpcInBhcmFtc1wiLGI6XCJcXFxcW1wiLGU6XCJcXFxcXVwifV19LHtiOi9bYS16QS1aX11bYS16QS1aXzAtOV0qJ1snXFwuXSovLHJCOiEwLHI6MCxjOlt7YjovW2EtekEtWl9dW2EtekEtWl8wLTldKi8scjowfSxzLmNbMF1dfSx7Y046XCJtYXRyaXhcIixiOlwiXFxcXFtcIixlOlwiXFxcXF1cIixjOmEscjowLHN0YXJ0czpzfSx7Y046XCJjZWxsXCIsYjpcIlxcXFx7XCIsZTovXFx9LyxjOmEscjowLGk6LzovLHN0YXJ0czpzfSx7YjovXFwpLyxyOjAsc3RhcnRzOnN9LHtjTjpcImNvbW1lbnRcIixiOlwiXFxcXCVcIixlOlwiJFwifV0uY29uY2F0KGEpfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcImNvZmZlZXNjcmlwdFwiLGZ1bmN0aW9uKGUpe3ZhciBjPXtrZXl3b3JkOlwiaW4gaWYgZm9yIHdoaWxlIGZpbmFsbHkgbmV3IGRvIHJldHVybiBlbHNlIGJyZWFrIGNhdGNoIGluc3RhbmNlb2YgdGhyb3cgdHJ5IHRoaXMgc3dpdGNoIGNvbnRpbnVlIHR5cGVvZiBkZWxldGUgZGVidWdnZXIgc3VwZXIgdGhlbiB1bmxlc3MgdW50aWwgbG9vcCBvZiBieSB3aGVuIGFuZCBvciBpcyBpc250IG5vdFwiLGxpdGVyYWw6XCJ0cnVlIGZhbHNlIG51bGwgdW5kZWZpbmVkIHllcyBubyBvbiBvZmZcIixyZXNlcnZlZDpcImNhc2UgZGVmYXVsdCBmdW5jdGlvbiB2YXIgdm9pZCB3aXRoIGNvbnN0IGxldCBlbnVtIGV4cG9ydCBpbXBvcnQgbmF0aXZlIF9faGFzUHJvcCBfX2V4dGVuZHMgX19zbGljZSBfX2JpbmQgX19pbmRleE9mXCIsYnVpbHRfaW46XCJucG0gcmVxdWlyZSBjb25zb2xlIHByaW50IG1vZHVsZSBnbG9iYWwgd2luZG93IGRvY3VtZW50XCJ9LG49XCJbQS1aYS16JF9dWzAtOUEtWmEteiRfXSpcIix0PXtjTjpcInN1YnN0XCIsYjovI1xcey8sZTovfS8sazpjfSxyPVtlLkJOTSxlLmluaGVyaXQoZS5DTk0se3N0YXJ0czp7ZTpcIihcXFxccyovKT9cIixyOjB9fSkse2NOOlwic3RyaW5nXCIsdjpbe2I6LycnJy8sZTovJycnLyxjOltlLkJFXX0se2I6LycvLGU6LycvLGM6W2UuQkVdfSx7YjovXCJcIlwiLyxlOi9cIlwiXCIvLGM6W2UuQkUsdF19LHtiOi9cIi8sZTovXCIvLGM6W2UuQkUsdF19XX0se2NOOlwicmVnZXhwXCIsdjpbe2I6XCIvLy9cIixlOlwiLy8vXCIsYzpbdCxlLkhDTV19LHtiOlwiLy9bZ2ltXSpcIixyOjB9LHtiOi9cXC8oPyFbICpdKShcXFxcXFwvfC4pKj9cXC9bZ2ltXSooPz1cXFd8JCkvfV19LHtjTjpcInByb3BlcnR5XCIsYjpcIkBcIitufSx7YjpcImBcIixlOlwiYFwiLGVCOiEwLGVFOiEwLHNMOlwiamF2YXNjcmlwdFwifV07dC5jPXI7dmFyIGk9ZS5pbmhlcml0KGUuVE0se2I6bn0pLHM9XCIoXFxcXCguKlxcXFwpKT9cXFxccypcXFxcQlstPV0+XCIsbz17Y046XCJwYXJhbXNcIixiOlwiXFxcXChbXlxcXFwoXVwiLHJCOiEwLGM6W3tiOi9cXCgvLGU6L1xcKS8sazpjLGM6W1wic2VsZlwiXS5jb25jYXQocil9XX07cmV0dXJue2FsaWFzZXM6W1wiY29mZmVlXCIsXCJjc29uXCIsXCJpY2VkXCJdLGs6YyxpOi9cXC9cXCovLGM6ci5jb25jYXQoW3tjTjpcImNvbW1lbnRcIixiOlwiIyMjXCIsZTpcIiMjI1wiLGM6W2UuUFdNXX0sZS5IQ00se2NOOlwiZnVuY3Rpb25cIixiOlwiXlxcXFxzKlwiK24rXCJcXFxccyo9XFxcXHMqXCIrcyxlOlwiWy09XT5cIixyQjohMCxjOltpLG9dfSx7YjovWzpcXCgsPV1cXHMqLyxyOjAsYzpbe2NOOlwiZnVuY3Rpb25cIixiOnMsZTpcIlstPV0+XCIsckI6ITAsYzpbb119XX0se2NOOlwiY2xhc3NcIixiSzpcImNsYXNzXCIsZTpcIiRcIixpOi9bOj1cIlxcW1xcXV0vLGM6W3tiSzpcImV4dGVuZHNcIixlVzohMCxpOi9bOj1cIlxcW1xcXV0vLGM6W2ldfSxpXX0se2NOOlwiYXR0cmlidXRlXCIsYjpuK1wiOlwiLGU6XCI6XCIsckI6ITAsckU6ITAscjowfV0pfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcImluaVwiLGZ1bmN0aW9uKGUpe3JldHVybntjSTohMCxpOi9cXFMvLGM6W3tjTjpcImNvbW1lbnRcIixiOlwiO1wiLGU6XCIkXCJ9LHtjTjpcInRpdGxlXCIsYjpcIl5cXFxcW1wiLGU6XCJcXFxcXVwifSx7Y046XCJzZXR0aW5nXCIsYjpcIl5bYS16MC05XFxcXFtcXFxcXV8tXStbIFxcXFx0XSo9WyBcXFxcdF0qXCIsZTpcIiRcIixjOlt7Y046XCJ2YWx1ZVwiLGVXOiEwLGs6XCJvbiBvZmYgdHJ1ZSBmYWxzZSB5ZXMgbm9cIixjOltlLlFTTSxlLk5NXSxyOjB9XX1dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcImdyb292eVwiLGZ1bmN0aW9uKGUpe3JldHVybntrOnt0eXBlbmFtZTpcImJ5dGUgc2hvcnQgY2hhciBpbnQgbG9uZyBib29sZWFuIGZsb2F0IGRvdWJsZSB2b2lkXCIsbGl0ZXJhbDpcInRydWUgZmFsc2UgbnVsbFwiLGtleXdvcmQ6XCJkZWYgYXMgaW4gYXNzZXJ0IHRyYWl0IHN1cGVyIHRoaXMgYWJzdHJhY3Qgc3RhdGljIHZvbGF0aWxlIHRyYW5zaWVudCBwdWJsaWMgcHJpdmF0ZSBwcm90ZWN0ZWQgc3luY2hyb25pemVkIGZpbmFsIGNsYXNzIGludGVyZmFjZSBlbnVtIGlmIGVsc2UgZm9yIHdoaWxlIHN3aXRjaCBjYXNlIGJyZWFrIGRlZmF1bHQgY29udGludWUgdGhyb3cgdGhyb3dzIHRyeSBjYXRjaCBmaW5hbGx5IGltcGxlbWVudHMgZXh0ZW5kcyBuZXcgaW1wb3J0IHBhY2thZ2UgcmV0dXJuIGluc3RhbmNlb2ZcIn0sYzpbZS5DTENNLHtjTjpcImphdmFkb2NcIixiOlwiL1xcXFwqXFxcXCpcIixlOlwiXFxcXCovLypcIixyOjAsYzpbe2NOOlwiamF2YWRvY3RhZ1wiLGI6XCIoXnxcXFxccylAW0EtWmEtel0rXCJ9XX0sZS5DQkNNLHtjTjpcInN0cmluZ1wiLGI6J1wiXCJcIicsZTonXCJcIlwiJ30se2NOOlwic3RyaW5nXCIsYjpcIicnJ1wiLGU6XCInJydcIn0se2NOOlwic3RyaW5nXCIsYjpcIlxcXFwkL1wiLGU6XCIvXFxcXCRcIixyOjEwfSxlLkFTTSx7Y046XCJyZWdleHBcIixiOi9+P1xcL1teXFwvXFxuXStcXC8vLGM6W2UuQkVdfSxlLlFTTSx7Y046XCJzaGViYW5nXCIsYjpcIl4jIS91c3IvYmluL2VudlwiLGU6XCIkXCIsaTpcIlxcblwifSxlLkJOTSx7Y046XCJjbGFzc1wiLGJLOlwiY2xhc3MgaW50ZXJmYWNlIHRyYWl0IGVudW1cIixlOlwie1wiLGk6XCI6XCIsYzpbe2JLOlwiZXh0ZW5kcyBpbXBsZW1lbnRzXCJ9LGUuVVRNXX0sZS5DTk0se2NOOlwiYW5ub3RhdGlvblwiLGI6XCJAW0EtWmEtel0rXCJ9LHtjTjpcInN0cmluZ1wiLGI6L1teXFw/XXswfVtBLVphLXowLTlfJF0rICo6L30se2I6L1xcPy8sZTovXFw6L30se2NOOlwibGFiZWxcIixiOlwiXlxcXFxzKltBLVphLXowLTlfJF0rOlwiLHI6MH1dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcInJcIixmdW5jdGlvbihlKXt2YXIgcj1cIihbYS16QS1aXXxcXFxcLlthLXpBLVouXSlbYS16QS1aMC05Ll9dKlwiO3JldHVybntjOltlLkhDTSx7YjpyLGw6cixrOntrZXl3b3JkOlwiZnVuY3Rpb24gaWYgaW4gYnJlYWsgbmV4dCByZXBlYXQgZWxzZSBmb3IgcmV0dXJuIHN3aXRjaCB3aGlsZSB0cnkgdHJ5Q2F0Y2h8MTAgc3RvcCB3YXJuaW5nIHJlcXVpcmUgbGlicmFyeSBhdHRhY2ggZGV0YWNoIHNvdXJjZSBzZXRNZXRob2Qgc2V0R2VuZXJpYyBzZXRHcm91cEdlbmVyaWMgc2V0Q2xhc3MgLi4ufDEwXCIsbGl0ZXJhbDpcIk5VTEwgTkEgVFJVRSBGQUxTRSBUIEYgSW5mIE5hTiBOQV9pbnRlZ2VyX3wxMCBOQV9yZWFsX3wxMCBOQV9jaGFyYWN0ZXJffDEwIE5BX2NvbXBsZXhffDEwXCJ9LHI6MH0se2NOOlwibnVtYmVyXCIsYjpcIjBbeFhdWzAtOWEtZkEtRl0rW0xpXT9cXFxcYlwiLHI6MH0se2NOOlwibnVtYmVyXCIsYjpcIlxcXFxkKyg/OltlRV1bK1xcXFwtXT9cXFxcZCopP0xcXFxcYlwiLHI6MH0se2NOOlwibnVtYmVyXCIsYjpcIlxcXFxkK1xcXFwuKD8hXFxcXGQpKD86aVxcXFxiKT9cIixyOjB9LHtjTjpcIm51bWJlclwiLGI6XCJcXFxcZCsoPzpcXFxcLlxcXFxkKik/KD86W2VFXVsrXFxcXC1dP1xcXFxkKik/aT9cXFxcYlwiLHI6MH0se2NOOlwibnVtYmVyXCIsYjpcIlxcXFwuXFxcXGQrKD86W2VFXVsrXFxcXC1dP1xcXFxkKik/aT9cXFxcYlwiLHI6MH0se2I6XCJgXCIsZTpcImBcIixyOjB9LHtjTjpcInN0cmluZ1wiLGM6W2UuQkVdLHY6W3tiOidcIicsZTonXCInfSx7YjpcIidcIixlOlwiJ1wifV19XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJlbGl4aXJcIixmdW5jdGlvbihlKXt2YXIgcj1cIlthLXpBLVpfXVthLXpBLVowLTlfXSooXFxcXCF8XFxcXD8pP1wiLGI9XCJbYS16QS1aX11cXFxcdypbIT89XT98Wy0rfl1cXFxcQHw8PHw+Pnw9fnw9PT0/fDw9PnxbPD5dPT98XFxcXCpcXFxcKnxbLS8rJV4mKn5gfF18XFxcXFtcXFxcXT0/XCIsbj1cImFuZCBmYWxzZSB0aGVuIGRlZmluZWQgbW9kdWxlIGluIHJldHVybiByZWRvIHJldHJ5IGVuZCBmb3IgdHJ1ZSBzZWxmIHdoZW4gbmV4dCB1bnRpbCBkbyBiZWdpbiB1bmxlc3MgbmlsIGJyZWFrIG5vdCBjYXNlIGNvbmQgYWxpYXMgd2hpbGUgZW5zdXJlIG9yIGluY2x1ZGUgdXNlIGFsaWFzIGZuIHF1b3RlXCIsYz17Y046XCJzdWJzdFwiLGI6XCIjXFxcXHtcIixlOlwifVwiLGw6cixrOm59LGE9e2NOOlwic3RyaW5nXCIsYzpbZS5CRSxjXSx2Olt7YjovJy8sZTovJy99LHtiOi9cIi8sZTovXCIvfV19LHM9e2VXOiEwLHJFOiEwLGw6cixrOm4scjowfSxpPXtjTjpcImZ1bmN0aW9uXCIsYks6XCJkZWYgZGVmbWFjcm9cIixlOi9cXGJkb1xcYi8sYzpbZS5pbmhlcml0KGUuVE0se2I6YixzdGFydHM6c30pXX0sbD1lLmluaGVyaXQoaSx7Y046XCJjbGFzc1wiLGJLOlwiZGVmbW9kdWxlIGRlZnJlY29yZFwiLGU6L1xcYmRvXFxifCR8Oy99KSx0PVthLGUuSENNLGwsaSx7Y046XCJjb25zdGFudFwiLGI6XCIoXFxcXGJbQS1aX11cXFxcdyooLik/KStcIixyOjB9LHtjTjpcInN5bWJvbFwiLGI6XCI6XCIsYzpbYSx7YjpifV0scjowfSx7Y046XCJzeW1ib2xcIixiOnIrXCI6XCIscjowfSx7Y046XCJudW1iZXJcIixiOlwiKFxcXFxiMFswLTdfXSspfChcXFxcYjB4WzAtOWEtZkEtRl9dKyl8KFxcXFxiWzEtOV1bMC05X10qKFxcXFwuWzAtOV9dKyk/KXxbMF9dXFxcXGJcIixyOjB9LHtjTjpcInZhcmlhYmxlXCIsYjpcIihcXFxcJFxcXFxXKXwoKFxcXFwkfFxcXFxAXFxcXEA/KShcXFxcdyspKVwifSx7YjpcIi0+XCJ9LHtiOlwiKFwiK2UuUlNSK1wiKVxcXFxzKlwiLGM6W2UuSENNLHtjTjpcInJlZ2V4cFwiLGk6XCJcXFxcblwiLGM6W2UuQkUsY10sdjpbe2I6XCIvXCIsZTpcIi9bYS16XSpcIn0se2I6XCIlclxcXFxbXCIsZTpcIlxcXFxdW2Etel0qXCJ9XX1dLHI6MH1dO3JldHVybiBjLmM9dCxzLmM9dCx7bDpyLGs6bixjOnR9fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwiZ29cIixmdW5jdGlvbihlKXt2YXIgdD17a2V5d29yZDpcImJyZWFrIGRlZmF1bHQgZnVuYyBpbnRlcmZhY2Ugc2VsZWN0IGNhc2UgbWFwIHN0cnVjdCBjaGFuIGVsc2UgZ290byBwYWNrYWdlIHN3aXRjaCBjb25zdCBmYWxsdGhyb3VnaCBpZiByYW5nZSB0eXBlIGNvbnRpbnVlIGZvciBpbXBvcnQgcmV0dXJuIHZhciBnbyBkZWZlclwiLGNvbnN0YW50OlwidHJ1ZSBmYWxzZSBpb3RhIG5pbFwiLHR5cGVuYW1lOlwiYm9vbCBieXRlIGNvbXBsZXg2NCBjb21wbGV4MTI4IGZsb2F0MzIgZmxvYXQ2NCBpbnQ4IGludDE2IGludDMyIGludDY0IHN0cmluZyB1aW50OCB1aW50MTYgdWludDMyIHVpbnQ2NCBpbnQgdWludCB1aW50cHRyIHJ1bmVcIixidWlsdF9pbjpcImFwcGVuZCBjYXAgY2xvc2UgY29tcGxleCBjb3B5IGltYWcgbGVuIG1ha2UgbmV3IHBhbmljIHByaW50IHByaW50bG4gcmVhbCByZWNvdmVyIGRlbGV0ZVwifTtyZXR1cm57YWxpYXNlczpbXCJnb2xhbmdcIl0sazp0LGk6XCI8L1wiLGM6W2UuQ0xDTSxlLkNCQ00sZS5RU00se2NOOlwic3RyaW5nXCIsYjpcIidcIixlOlwiW15cXFxcXFxcXF0nXCJ9LHtjTjpcInN0cmluZ1wiLGI6XCJgXCIsZTpcImBcIn0se2NOOlwibnVtYmVyXCIsYjplLkNOUitcIltkZmxzaV0/XCIscjowfSxlLkNOTV19fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwic3FsXCIsZnVuY3Rpb24oZSl7dmFyIHQ9e2NOOlwiY29tbWVudFwiLGI6XCItLVwiLGU6XCIkXCJ9O3JldHVybntjSTohMCxpOi9bPD5dLyxjOlt7Y046XCJvcGVyYXRvclwiLGJLOlwiYmVnaW4gZW5kIHN0YXJ0IGNvbW1pdCByb2xsYmFjayBzYXZlcG9pbnQgbG9jayBhbHRlciBjcmVhdGUgZHJvcCByZW5hbWUgY2FsbCBkZWxldGUgZG8gaGFuZGxlciBpbnNlcnQgbG9hZCByZXBsYWNlIHNlbGVjdCB0cnVuY2F0ZSB1cGRhdGUgc2V0IHNob3cgcHJhZ21hIGdyYW50IG1lcmdlIGRlc2NyaWJlIHVzZSBleHBsYWluIGhlbHAgZGVjbGFyZSBwcmVwYXJlIGV4ZWN1dGUgZGVhbGxvY2F0ZSBzYXZlcG9pbnQgcmVsZWFzZSB1bmxvY2sgcHVyZ2UgcmVzZXQgY2hhbmdlIHN0b3AgYW5hbHl6ZSBjYWNoZSBmbHVzaCBvcHRpbWl6ZSByZXBhaXIga2lsbCBpbnN0YWxsIHVuaW5zdGFsbCBjaGVja3N1bSByZXN0b3JlIGNoZWNrIGJhY2t1cFwiLGU6LzsvLGVXOiEwLGs6e2tleXdvcmQ6XCJhYnMgYWJzb2x1dGUgYWNvcyBhY3Rpb24gYWRkIGFkZGRhdGUgYWRkdGltZSBhZXNfZGVjcnlwdCBhZXNfZW5jcnlwdCBhZnRlciBhZ2dyZWdhdGUgYWxsIGFsbG9jYXRlIGFsdGVyIGFuYWx5emUgYW5kIGFueSBhcmUgYXMgYXNjIGFzY2lpIGFzaW4gYXNzZXJ0aW9uIGF0IGF0YW4gYXRhbjIgYXRuMiBhdXRob3JpemF0aW9uIGF1dGhvcnMgYXZnIGJhY2t1cCBiZWZvcmUgYmVnaW4gYmVuY2htYXJrIGJldHdlZW4gYmluIGJpbmxvZyBiaXRfYW5kIGJpdF9jb3VudCBiaXRfbGVuZ3RoIGJpdF9vciBiaXRfeG9yIGJvdGggYnkgY2FjaGUgY2FsbCBjYXNjYWRlIGNhc2NhZGVkIGNhc2UgY2FzdCBjYXRhbG9nIGNlaWwgY2VpbGluZyBjaGFpbiBjaGFuZ2UgY2hhbmdlZCBjaGFyX2xlbmd0aCBjaGFyYWN0ZXJfbGVuZ3RoIGNoYXJpbmRleCBjaGFyc2V0IGNoZWNrIGNoZWNrc3VtIGNoZWNrc3VtX2FnZyBjaG9vc2UgY2xvc2UgY29hbGVzY2UgY29lcmNpYmlsaXR5IGNvbGxhdGUgY29sbGF0aW9uIGNvbGxhdGlvbnByb3BlcnR5IGNvbHVtbiBjb2x1bW5zIGNvbHVtbnNfdXBkYXRlZCBjb21taXQgY29tcHJlc3MgY29uY2F0IGNvbmNhdF93cyBjb25jdXJyZW50IGNvbm5lY3QgY29ubmVjdGlvbiBjb25uZWN0aW9uX2lkIGNvbnNpc3RlbnQgY29uc3RyYWludCBjb25zdHJhaW50cyBjb250aW51ZSBjb250cmlidXRvcnMgY29udiBjb252ZXJ0IGNvbnZlcnRfdHogY29ycmVzcG9uZGluZyBjb3MgY290IGNvdW50IGNvdW50X2JpZyBjcmMzMiBjcmVhdGUgY3Jvc3MgY3VtZV9kaXN0IGN1cmRhdGUgY3VycmVudCBjdXJyZW50X2RhdGUgY3VycmVudF90aW1lIGN1cnJlbnRfdGltZXN0YW1wIGN1cnJlbnRfdXNlciBjdXJzb3IgY3VydGltZSBkYXRhIGRhdGFiYXNlIGRhdGFiYXNlcyBkYXRhbGVuZ3RoIGRhdGVfYWRkIGRhdGVfZm9ybWF0IGRhdGVfc3ViIGRhdGVhZGQgZGF0ZWRpZmYgZGF0ZWZyb21wYXJ0cyBkYXRlbmFtZSBkYXRlcGFydCBkYXRldGltZTJmcm9tcGFydHMgZGF0ZXRpbWVvZmZzZXRmcm9tcGFydHMgZGF5IGRheW5hbWUgZGF5b2Ztb250aCBkYXlvZndlZWsgZGF5b2Z5ZWFyIGRlYWxsb2NhdGUgZGVjbGFyZSBkZWNvZGUgZGVmYXVsdCBkZWZlcnJhYmxlIGRlZmVycmVkIGRlZ3JlZXMgZGVsYXllZCBkZWxldGUgZGVzX2RlY3J5cHQgZGVzX2VuY3J5cHQgZGVzX2tleV9maWxlIGRlc2MgZGVzY3JpYmUgZGVzY3JpcHRvciBkaWFnbm9zdGljcyBkaWZmZXJlbmNlIGRpc2Nvbm5lY3QgZGlzdGluY3QgZGlzdGluY3Ryb3cgZGl2IGRvIGRvbWFpbiBkb3VibGUgZHJvcCBkdW1wZmlsZSBlYWNoIGVsc2UgZWx0IGVuY2xvc2VkIGVuY29kZSBlbmNyeXB0IGVuZCBlbmQtZXhlYyBlbmdpbmUgZW5naW5lcyBlb21vbnRoIGVycm9ycyBlc2NhcGUgZXNjYXBlZCBldmVudCBldmVudGRhdGEgZXZlbnRzIGV4Y2VwdCBleGNlcHRpb24gZXhlYyBleGVjdXRlIGV4aXN0cyBleHAgZXhwbGFpbiBleHBvcnRfc2V0IGV4dGVuZGVkIGV4dGVybmFsIGV4dHJhY3QgZmFzdCBmZXRjaCBmaWVsZCBmaWVsZHMgZmluZF9pbl9zZXQgZmlyc3QgZmlyc3RfdmFsdWUgZmxvb3IgZmx1c2ggZm9yIGZvcmNlIGZvcmVpZ24gZm9ybWF0IGZvdW5kIGZvdW5kX3Jvd3MgZnJvbSBmcm9tX2Jhc2U2NCBmcm9tX2RheXMgZnJvbV91bml4dGltZSBmdWxsIGZ1bmN0aW9uIGdldCBnZXRfZm9ybWF0IGdldF9sb2NrIGdldGRhdGUgZ2V0dXRjZGF0ZSBnbG9iYWwgZ28gZ290byBncmFudCBncmFudHMgZ3JlYXRlc3QgZ3JvdXAgZ3JvdXBfY29uY2F0IGdyb3VwaW5nIGdyb3VwaW5nX2lkIGd0aWRfc3Vic2V0IGd0aWRfc3VidHJhY3QgaGFuZGxlciBoYXZpbmcgaGVscCBoZXggaGlnaF9wcmlvcml0eSBob3N0cyBob3VyIGlkZW50X2N1cnJlbnQgaWRlbnRfaW5jciBpZGVudF9zZWVkIGlkZW50aWZpZWQgaWRlbnRpdHkgaWYgaWZudWxsIGlnbm9yZSBpaWYgaWxpa2UgaW1tZWRpYXRlIGluIGluZGV4IGluZGljYXRvciBpbmV0Nl9hdG9uIGluZXQ2X250b2EgaW5ldF9hdG9uIGluZXRfbnRvYSBpbmZpbGUgaW5pdGlhbGx5IGlubmVyIGlubm9kYiBpbnB1dCBpbnNlcnQgaW5zdGFsbCBpbnN0ciBpbnRlcnNlY3QgaW50byBpcyBpc19mcmVlX2xvY2sgaXNfaXB2NCBpc19pcHY0X2NvbXBhdCBpc19pcHY0X21hcHBlZCBpc19ub3QgaXNfbm90X251bGwgaXNfdXNlZF9sb2NrIGlzZGF0ZSBpc251bGwgaXNvbGF0aW9uIGpvaW4ga2V5IGtpbGwgbGFuZ3VhZ2UgbGFzdCBsYXN0X2RheSBsYXN0X2luc2VydF9pZCBsYXN0X3ZhbHVlIGxjYXNlIGxlYWQgbGVhZGluZyBsZWFzdCBsZWF2ZXMgbGVmdCBsZW4gbGVuZ2h0IGxldmVsIGxpa2UgbGltaXQgbGluZXMgbG4gbG9hZCBsb2FkX2ZpbGUgbG9jYWwgbG9jYWx0aW1lIGxvY2FsdGltZXN0YW1wIGxvY2F0ZSBsb2NrIGxvZyBsb2cxMCBsb2cyIGxvZ2ZpbGUgbG9ncyBsb3dfcHJpb3JpdHkgbG93ZXIgbHBhZCBsdHJpbSBtYWtlX3NldCBtYWtlZGF0ZSBtYWtldGltZSBtYXN0ZXIgbWFzdGVyX3Bvc193YWl0IG1hdGNoIG1hdGNoZWQgbWF4IG1kNSBtZWRpdW0gbWVyZ2UgbWljcm9zZWNvbmQgbWlkIG1pbiBtaW51dGUgbW9kIG1vZGUgbW9kdWxlIG1vbnRoIG1vbnRobmFtZSBtdXRleCBuYW1lX2NvbnN0IG5hbWVzIG5hdGlvbmFsIG5hdHVyYWwgbmNoYXIgbmV4dCBubyBub193cml0ZV90b19iaW5sb2cgbm90IG5vdyBudWxsaWYgbnZhcmNoYXIgb2N0IG9jdGV0X2xlbmd0aCBvZiBvbGRfcGFzc3dvcmQgb24gb25seSBvcGVuIG9wdGltaXplIG9wdGlvbiBvcHRpb25hbGx5IG9yIG9yZCBvcmRlciBvdXRlciBvdXRmaWxlIG91dHB1dCBwYWQgcGFyc2UgcGFydGlhbCBwYXJ0aXRpb24gcGFzc3dvcmQgcGF0aW5kZXggcGVyY2VudF9yYW5rIHBlcmNlbnRpbGVfY29udCBwZXJjZW50aWxlX2Rpc2MgcGVyaW9kX2FkZCBwZXJpb2RfZGlmZiBwaSBwbHVnaW4gcG9zaXRpb24gcG93IHBvd2VyIHByYWdtYSBwcmVjaXNpb24gcHJlcGFyZSBwcmVzZXJ2ZSBwcmltYXJ5IHByaW9yIHByaXZpbGVnZXMgcHJvY2VkdXJlIHByb2NlZHVyZV9hbmFseXplIHByb2Nlc3NsaXN0IHByb2ZpbGUgcHJvZmlsZXMgcHVibGljIHB1Ymxpc2hpbmdzZXJ2ZXJuYW1lIHB1cmdlIHF1YXJ0ZXIgcXVlcnkgcXVpY2sgcXVvdGUgcXVvdGVuYW1lIHJhZGlhbnMgcmFuZCByZWFkIHJlZmVyZW5jZXMgcmVnZXhwIHJlbGF0aXZlIHJlbGF5bG9nIHJlbGVhc2UgcmVsZWFzZV9sb2NrIHJlbmFtZSByZXBhaXIgcmVwZWF0IHJlcGxhY2UgcmVwbGljYXRlIHJlc2V0IHJlc3RvcmUgcmVzdHJpY3QgcmV0dXJuIHJldHVybnMgcmV2ZXJzZSByZXZva2UgcmlnaHQgcmxpa2Ugcm9sbGJhY2sgcm9sbHVwIHJvdW5kIHJvdyByb3dfY291bnQgcm93cyBycGFkIHJ0cmltIHNhdmVwb2ludCBzY2hlbWEgc2Nyb2xsIHNlY190b190aW1lIHNlY29uZCBzZWN0aW9uIHNlbGVjdCBzZXJpYWxpemFibGUgc2VydmVyIHNlc3Npb24gc2Vzc2lvbl91c2VyIHNldCBzaGEgc2hhMSBzaGEyIHNoYXJlIHNob3cgc2lnbiBzaW4gc2l6ZSBzbGF2ZSBzbGVlcCBzbWFsbGRhdGV0aW1lZnJvbXBhcnRzIHNuYXBzaG90IHNvbWUgc29uYW1lIHNvdW5kZXggc291bmRzX2xpa2Ugc3BhY2Ugc3FsIHNxbF9iaWdfcmVzdWx0IHNxbF9idWZmZXJfcmVzdWx0IHNxbF9jYWNoZSBzcWxfY2FsY19mb3VuZF9yb3dzIHNxbF9ub19jYWNoZSBzcWxfc21hbGxfcmVzdWx0IHNxbF92YXJpYW50X3Byb3BlcnR5IHNxbHN0YXRlIHNxcnQgc3F1YXJlIHN0YXJ0IHN0YXJ0aW5nIHN0YXR1cyBzdGQgc3RkZGV2IHN0ZGRldl9wb3Agc3RkZGV2X3NhbXAgc3RkZXYgc3RkZXZwIHN0b3Agc3RyIHN0cl90b19kYXRlIHN0cmFpZ2h0X2pvaW4gc3RyY21wIHN0cmluZyBzdHVmZiBzdWJkYXRlIHN1YnN0ciBzdWJzdHJpbmcgc3VidGltZSBzdWJ0cmluZ19pbmRleCBzdW0gc3dpdGNob2Zmc2V0IHN5c2RhdGUgc3lzZGF0ZXRpbWUgc3lzZGF0ZXRpbWVvZmZzZXQgc3lzdGVtX3VzZXIgc3lzdXRjZGF0ZXRpbWUgdGFibGUgdGFibGVzIHRhYmxlc3BhY2UgdGFuIHRlbXBvcmFyeSB0ZXJtaW5hdGVkIHRlcnRpYXJ5X3dlaWdodHMgdGhlbiB0aW1lIHRpbWVfZm9ybWF0IHRpbWVfdG9fc2VjIHRpbWVkaWZmIHRpbWVmcm9tcGFydHMgdGltZXN0YW1wIHRpbWVzdGFtcGFkZCB0aW1lc3RhbXBkaWZmIHRpbWV6b25lX2hvdXIgdGltZXpvbmVfbWludXRlIHRvIHRvX2Jhc2U2NCB0b19kYXlzIHRvX3NlY29uZHMgdG9kYXRldGltZW9mZnNldCB0cmFpbGluZyB0cmFuc2FjdGlvbiB0cmFuc2xhdGlvbiB0cmlnZ2VyIHRyaWdnZXJfbmVzdGxldmVsIHRyaWdnZXJzIHRyaW0gdHJ1bmNhdGUgdHJ5X2Nhc3QgdHJ5X2NvbnZlcnQgdHJ5X3BhcnNlIHVjYXNlIHVuY29tcHJlc3MgdW5jb21wcmVzc2VkX2xlbmd0aCB1bmhleCB1bmljb2RlIHVuaW5zdGFsbCB1bmlvbiB1bmlxdWUgdW5peF90aW1lc3RhbXAgdW5rbm93biB1bmxvY2sgdXBkYXRlIHVwZ3JhZGUgdXBwZWQgdXBwZXIgdXNhZ2UgdXNlIHVzZXIgdXNlcl9yZXNvdXJjZXMgdXNpbmcgdXRjX2RhdGUgdXRjX3RpbWUgdXRjX3RpbWVzdGFtcCB1dWlkIHV1aWRfc2hvcnQgdmFsaWRhdGVfcGFzc3dvcmRfc3RyZW5ndGggdmFsdWUgdmFsdWVzIHZhciB2YXJfcG9wIHZhcl9zYW1wIHZhcmlhYmxlcyB2YXJpYW5jZSB2YXJwIHZlcnNpb24gdmlldyB3YXJuaW5ncyB3ZWVrIHdlZWtkYXkgd2Vla29meWVhciB3ZWlnaHRfc3RyaW5nIHdoZW4gd2hlbmV2ZXIgd2hlcmUgd2l0aCB3b3JrIHdyaXRlIHhtbCB4b3IgeWVhciB5ZWFyd2VlayB6b25cIixsaXRlcmFsOlwidHJ1ZSBmYWxzZSBudWxsXCIsYnVpbHRfaW46XCJhcnJheSBiaWdpbnQgYmluYXJ5IGJpdCBibG9iIGJvb2xlYW4gY2hhciBjaGFyYWN0ZXIgZGF0ZSBkZWMgZGVjaW1hbCBmbG9hdCBpbnQgaW50ZWdlciBpbnRlcnZhbCBudW1iZXIgbnVtZXJpYyByZWFsIHNlcmlhbCBzbWFsbGludCB2YXJjaGFyIHZhcnlpbmcgaW50OCBzZXJpYWw4IHRleHRcIn0sYzpbe2NOOlwic3RyaW5nXCIsYjpcIidcIixlOlwiJ1wiLGM6W2UuQkUse2I6XCInJ1wifV19LHtjTjpcInN0cmluZ1wiLGI6J1wiJyxlOidcIicsYzpbZS5CRSx7YjonXCJcIid9XX0se2NOOlwic3RyaW5nXCIsYjpcImBcIixlOlwiYFwiLGM6W2UuQkVdfSxlLkNOTSxlLkNCQ00sdF19LGUuQ0JDTSx0XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJ0ZXhcIixmdW5jdGlvbigpe3ZhciBjPXtjTjpcImNvbW1hbmRcIixiOlwiXFxcXFxcXFxbYS16QS1a0LAt0Y/QkC3Rj10rW1xcXFwqXT9cIn0sZT17Y046XCJjb21tYW5kXCIsYjpcIlxcXFxcXFxcW15hLXpBLVrQsC3Rj9CQLdGPMC05XVwifSxtPXtjTjpcInNwZWNpYWxcIixiOlwiW3t9XFxcXFtcXFxcXVxcXFwmI35dXCIscjowfTtyZXR1cm57Yzpbe2I6XCJcXFxcXFxcXFthLXpBLVrQsC3Rj9CQLdGPXStbXFxcXCpdPyAqPSAqLT9cXFxcZCpcXFxcLj9cXFxcZCsocHR8cGN8bW18Y218aW58ZGR8Y2N8ZXh8ZW0pP1wiLHJCOiEwLGM6W2MsZSx7Y046XCJudW1iZXJcIixiOlwiICo9XCIsZTpcIi0/XFxcXGQqXFxcXC4/XFxcXGQrKHB0fHBjfG1tfGNtfGlufGRkfGNjfGV4fGVtKT9cIixlQjohMH1dLHI6MTB9LGMsZSxtLHtjTjpcImZvcm11bGFcIixiOlwiXFxcXCRcXFxcJFwiLGU6XCJcXFxcJFxcXFwkXCIsYzpbYyxlLG1dLHI6MH0se2NOOlwiZm9ybXVsYVwiLGI6XCJcXFxcJFwiLGU6XCJcXFxcJFwiLGM6W2MsZSxtXSxyOjB9LHtjTjpcImNvbW1lbnRcIixiOlwiJVwiLGU6XCIkXCIscjowfV19fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwiaHR0cFwiLGZ1bmN0aW9uKCl7cmV0dXJue2k6XCJcXFxcU1wiLGM6W3tjTjpcInN0YXR1c1wiLGI6XCJeSFRUUC9bMC05XFxcXC5dK1wiLGU6XCIkXCIsYzpbe2NOOlwibnVtYmVyXCIsYjpcIlxcXFxiXFxcXGR7M31cXFxcYlwifV19LHtjTjpcInJlcXVlc3RcIixiOlwiXltBLVpdKyAoLio/KSBIVFRQL1swLTlcXFxcLl0rJFwiLHJCOiEwLGU6XCIkXCIsYzpbe2NOOlwic3RyaW5nXCIsYjpcIiBcIixlOlwiIFwiLGVCOiEwLGVFOiEwfV19LHtjTjpcImF0dHJpYnV0ZVwiLGI6XCJeXFxcXHdcIixlOlwiOiBcIixlRTohMCxpOlwiXFxcXG58XFxcXHN8PVwiLHN0YXJ0czp7Y046XCJzdHJpbmdcIixlOlwiJFwifX0se2I6XCJcXFxcblxcXFxuXCIsc3RhcnRzOntzTDpcIlwiLGVXOiEwfX1dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcImxpc3BcIixmdW5jdGlvbihlKXt2YXIgYj1cIlthLXpBLVpfXFxcXC1cXFxcK1xcXFwqXFxcXC9cXFxcPFxcXFw9XFxcXD5cXFxcJlxcXFwjXVthLXpBLVowLTlfXFxcXC1cXFxcK1xcXFwqXFxcXC9cXFxcPFxcXFw9XFxcXD5cXFxcJlxcXFwjIV0qXCIsYz1cIlxcXFx8W15dKj9cXFxcfFwiLHI9XCIoXFxcXC18XFxcXCspP1xcXFxkKyhcXFxcLlxcXFxkK3xcXFxcL1xcXFxkKyk/KChkfGV8ZnxsfHMpKFxcXFwrfFxcXFwtKT9cXFxcZCspP1wiLHQ9e2NOOlwic2hlYmFuZ1wiLGI6XCJeIyFcIixlOlwiJFwifSxhPXtjTjpcImxpdGVyYWxcIixiOlwiXFxcXGIodHsxfXxuaWwpXFxcXGJcIn0saT17Y046XCJudW1iZXJcIix2Olt7YjpyLHI6MH0se2I6XCIjYlswLTFdKygvWzAtMV0rKT9cIn0se2I6XCIjb1swLTddKygvWzAtN10rKT9cIn0se2I6XCIjeFswLTlhLWZdKygvWzAtOWEtZl0rKT9cIn0se2I6XCIjY1xcXFwoXCIrcitcIiArXCIrcixlOlwiXFxcXClcIn1dfSxsPWUuaW5oZXJpdChlLlFTTSx7aTpudWxsfSksbj17Y046XCJjb21tZW50XCIsYjpcIjtcIixlOlwiJFwiLHI6MH0sTj17Y046XCJ2YXJpYWJsZVwiLGI6XCJcXFxcKlwiLGU6XCJcXFxcKlwifSxkPXtjTjpcImtleXdvcmRcIixiOlwiWzomXVwiK2J9LG89e2I6Y30sdT17YjpcIlxcXFwoXCIsZTpcIlxcXFwpXCIsYzpbXCJzZWxmXCIsYSxsLGldfSxzPXtjTjpcInF1b3RlZFwiLGM6W2ksbCxOLGQsdV0sdjpbe2I6XCJbJ2BdXFxcXChcIixlOlwiXFxcXClcIn0se2I6XCJcXFxcKHF1b3RlIFwiLGU6XCJcXFxcKVwiLGs6XCJxdW90ZVwifSx7YjpcIidcIitjfV19LGY9e2NOOlwicXVvdGVkXCIsYjpcIidcIitifSx2PXtjTjpcImxpc3RcIixiOlwiXFxcXChcIixlOlwiXFxcXClcIn0sZz17ZVc6ITAscjowfTtyZXR1cm4gdi5jPVt7Y046XCJrZXl3b3JkXCIsdjpbe2I6Yn0se2I6Y31dfSxnXSxnLmM9W3MsZix2LGEsaSxsLG4sTixkLG9dLHtpOi9cXFMvLGM6W2ksdCxhLGwsbixzLGYsdl19fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwiZXJsYW5nXCIsZnVuY3Rpb24oZSl7dmFyIHI9XCJbYS16J11bYS16QS1aMC05XyddKlwiLGM9XCIoXCIrcitcIjpcIityK1wifFwiK3IrXCIpXCIsYT17a2V5d29yZDpcImFmdGVyIGFuZCBhbmRhbHNvfDEwIGJhbmQgYmVnaW4gYm5vdCBib3IgYnNsIGJ6ciBieG9yIGNhc2UgY2F0Y2ggY29uZCBkaXYgZW5kIGZ1biBpZiBsZXQgbm90IG9mIG9yZWxzZXwxMCBxdWVyeSByZWNlaXZlIHJlbSB0cnkgd2hlbiB4b3JcIixsaXRlcmFsOlwiZmFsc2UgdHJ1ZVwifSxuPXtjTjpcImNvbW1lbnRcIixiOlwiJVwiLGU6XCIkXCJ9LGI9e2NOOlwibnVtYmVyXCIsYjpcIlxcXFxiKFxcXFxkKyNbYS1mQS1GMC05XSt8XFxcXGQrKFxcXFwuXFxcXGQrKT8oW2VFXVstK10/XFxcXGQrKT8pXCIscjowfSxpPXtiOlwiZnVuXFxcXHMrXCIrcitcIi9cXFxcZCtcIn0sbz17YjpjK1wiXFxcXChcIixlOlwiXFxcXClcIixyQjohMCxyOjAsYzpbe2NOOlwiZnVuY3Rpb25fbmFtZVwiLGI6YyxyOjB9LHtiOlwiXFxcXChcIixlOlwiXFxcXClcIixlVzohMCxyRTohMCxyOjB9XX0sZD17Y046XCJ0dXBsZVwiLGI6XCJ7XCIsZTpcIn1cIixyOjB9LHQ9e2NOOlwidmFyaWFibGVcIixiOlwiXFxcXGJfKFtBLVpdW0EtWmEtejAtOV9dKik/XCIscjowfSxsPXtjTjpcInZhcmlhYmxlXCIsYjpcIltBLVpdW2EtekEtWjAtOV9dKlwiLHI6MH0sZj17YjpcIiNcIitlLlVJUixyOjAsckI6ITAsYzpbe2NOOlwicmVjb3JkX25hbWVcIixiOlwiI1wiK2UuVUlSLHI6MH0se2I6XCJ7XCIsZTpcIn1cIixyOjB9XX0scz17Yks6XCJmdW4gcmVjZWl2ZSBpZiB0cnkgY2FzZVwiLGU6XCJlbmRcIixrOmF9O3MuYz1bbixpLGUuaW5oZXJpdChlLkFTTSx7Y046XCJcIn0pLHMsbyxlLlFTTSxiLGQsdCxsLGZdO3ZhciB1PVtuLGkscyxvLGUuUVNNLGIsZCx0LGwsZl07by5jWzFdLmM9dSxkLmM9dSxmLmNbMV0uYz11O3ZhciB2PXtjTjpcInBhcmFtc1wiLGI6XCJcXFxcKFwiLGU6XCJcXFxcKVwiLGM6dX07cmV0dXJue2FsaWFzZXM6W1wiZXJsXCJdLGs6YSxpOlwiKDwvfFxcXFwqPXxcXFxcKz18LT18L1xcXFwqfFxcXFwqL3xcXFxcKFxcXFwqfFxcXFwqXFxcXCkpXCIsYzpbe2NOOlwiZnVuY3Rpb25cIixiOlwiXlwiK3IrXCJcXFxccypcXFxcKFwiLGU6XCItPlwiLHJCOiEwLGk6XCJcXFxcKHwjfC8vfC9cXFxcKnxcXFxcXFxcXHw6fDtcIixjOlt2LGUuaW5oZXJpdChlLlRNLHtiOnJ9KV0sc3RhcnRzOntlOlwiO3xcXFxcLlwiLGs6YSxjOnV9fSxuLHtjTjpcInBwXCIsYjpcIl4tXCIsZTpcIlxcXFwuXCIscjowLGVFOiEwLHJCOiEwLGw6XCItXCIrZS5JUixrOlwiLW1vZHVsZSAtcmVjb3JkIC11bmRlZiAtZXhwb3J0IC1pZmRlZiAtaWZuZGVmIC1hdXRob3IgLWNvcHlyaWdodCAtZG9jIC12c24gLWltcG9ydCAtaW5jbHVkZSAtaW5jbHVkZV9saWIgLWNvbXBpbGUgLWRlZmluZSAtZWxzZSAtZW5kaWYgLWZpbGUgLWJlaGF2aW91ciAtYmVoYXZpb3IgLXNwZWNcIixjOlt2XX0sYixlLlFTTSxmLHQsbCxkLHtiOi9cXC4kL31dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcIm1ha2VmaWxlXCIsZnVuY3Rpb24oZSl7dmFyIGE9e2NOOlwidmFyaWFibGVcIixiOi9cXCRcXCgvLGU6L1xcKS8sYzpbZS5CRV19O3JldHVybnthbGlhc2VzOltcIm1rXCIsXCJtYWtcIl0sYzpbZS5IQ00se2I6L15cXHcrXFxzKlxcVyo9LyxyQjohMCxyOjAsc3RhcnRzOntjTjpcImNvbnN0YW50XCIsZTovXFxzKlxcVyo9LyxlRTohMCxzdGFydHM6e2U6LyQvLHI6MCxjOlthXX19fSx7Y046XCJ0aXRsZVwiLGI6L15bXFx3XSs6XFxzKiQvfSx7Y046XCJwaG9ueVwiLGI6L15cXC5QSE9OWTovLGU6LyQvLGs6XCIuUEhPTllcIixsOi9bXFwuXFx3XSsvfSx7YjovXlxcdCsvLGU6LyQvLHI6MCxjOltlLlFTTSxhXX1dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcInBlcmxcIixmdW5jdGlvbihlKXt2YXIgdD1cImdldHB3ZW50IGdldHNlcnZlbnQgcXVvdGVtZXRhIG1zZ3JjdiBzY2FsYXIga2lsbCBkYm1jbG9zZSB1bmRlZiBsYyBtYSBzeXN3cml0ZSB0ciBzZW5kIHVtYXNrIHN5c29wZW4gc2htd3JpdGUgdmVjIHF4IHV0aW1lIGxvY2FsIG9jdCBzZW1jdGwgbG9jYWx0aW1lIHJlYWRwaXBlIGRvIHJldHVybiBmb3JtYXQgcmVhZCBzcHJpbnRmIGRibW9wZW4gcG9wIGdldHBncnAgbm90IGdldHB3bmFtIHJld2luZGRpciBxcWZpbGVubyBxdyBlbmRwcm90b2VudCB3YWl0IHNldGhvc3RlbnQgYmxlc3Mgc3wwIG9wZW5kaXIgY29udGludWUgZWFjaCBzbGVlcCBlbmRncmVudCBzaHV0ZG93biBkdW1wIGNob21wIGNvbm5lY3QgZ2V0c29ja25hbWUgZGllIHNvY2tldHBhaXIgY2xvc2UgZmxvY2sgZXhpc3RzIGluZGV4IHNobWdldHN1YiBmb3IgZW5kcHdlbnQgcmVkbyBsc3RhdCBtc2djdGwgc2V0cGdycCBhYnMgZXhpdCBzZWxlY3QgcHJpbnQgcmVmIGdldGhvc3RieWFkZHIgdW5zaGlmdCBmY250bCBzeXNjYWxsIGdvdG8gZ2V0bmV0YnlhZGRyIGpvaW4gZ210aW1lIHN5bWxpbmsgc2VtZ2V0IHNwbGljZSB4fDAgZ2V0cGVlcm5hbWUgcmVjdiBsb2cgc2V0c29ja29wdCBjb3MgbGFzdCByZXZlcnNlIGdldGhvc3RieW5hbWUgZ2V0Z3JuYW0gc3R1ZHkgZm9ybWxpbmUgZW5kaG9zdGVudCB0aW1lcyBjaG9wIGxlbmd0aCBnZXRob3N0ZW50IGdldG5ldGVudCBwYWNrIGdldHByb3RvZW50IGdldHNlcnZieW5hbWUgcmFuZCBta2RpciBwb3MgY2htb2QgeXwwIHN1YnN0ciBlbmRuZXRlbnQgcHJpbnRmIG5leHQgb3BlbiBtc2dzbmQgcmVhZGRpciB1c2UgdW5saW5rIGdldHNvY2tvcHQgZ2V0cHJpb3JpdHkgcmluZGV4IHdhbnRhcnJheSBoZXggc3lzdGVtIGdldHNlcnZieXBvcnQgZW5kc2VydmVudCBpbnQgY2hyIHVudGllIHJtZGlyIHByb3RvdHlwZSB0ZWxsIGxpc3RlbiBmb3JrIHNobXJlYWQgdWNmaXJzdCBzZXRwcm90b2VudCBlbHNlIHN5c3NlZWsgbGluayBnZXRncmdpZCBzaG1jdGwgd2FpdHBpZCB1bnBhY2sgZ2V0bmV0YnluYW1lIHJlc2V0IGNoZGlyIGdyZXAgc3BsaXQgcmVxdWlyZSBjYWxsZXIgbGNmaXJzdCB1bnRpbCB3YXJuIHdoaWxlIHZhbHVlcyBzaGlmdCB0ZWxsZGlyIGdldHB3dWlkIG15IGdldHByb3RvYnludW1iZXIgZGVsZXRlIGFuZCBzb3J0IHVjIGRlZmluZWQgc3JhbmQgYWNjZXB0IHBhY2thZ2Ugc2Vla2RpciBnZXRwcm90b2J5bmFtZSBzZW1vcCBvdXIgcmVuYW1lIHNlZWsgaWYgcXwwIGNocm9vdCBzeXNyZWFkIHNldHB3ZW50IG5vIGNyeXB0IGdldGMgY2hvd24gc3FydCB3cml0ZSBzZXRuZXRlbnQgc2V0cHJpb3JpdHkgZm9yZWFjaCB0aWUgc2luIG1zZ2dldCBtYXAgc3RhdCBnZXRsb2dpbiB1bmxlc3MgZWxzaWYgdHJ1bmNhdGUgZXhlYyBrZXlzIGdsb2IgdGllZCBjbG9zZWRpcmlvY3RsIHNvY2tldCByZWFkbGluayBldmFsIHhvciByZWFkbGluZSBiaW5tb2RlIHNldHNlcnZlbnQgZW9mIG9yZCBiaW5kIGFsYXJtIHBpcGUgYXRhbjIgZ2V0Z3JlbnQgZXhwIHRpbWUgcHVzaCBzZXRncmVudCBndCBsdCBvciBuZSBtfDAgYnJlYWsgZ2l2ZW4gc2F5IHN0YXRlIHdoZW5cIixyPXtjTjpcInN1YnN0XCIsYjpcIlskQF1cXFxce1wiLGU6XCJcXFxcfVwiLGs6dH0scz17YjpcIi0+e1wiLGU6XCJ9XCJ9LG49e2NOOlwidmFyaWFibGVcIix2Olt7YjovXFwkXFxkL30se2I6L1tcXCRcXCVcXEBdKFxcXlxcd1xcYnwjXFx3KyhcXDpcXDpcXHcrKSp8e1xcdyt9fFxcdysoXFw6XFw6XFx3KikqKS99LHtiOi9bXFwkXFwlXFxAXVteXFxzXFx3e10vLHI6MH1dfSxvPXtjTjpcImNvbW1lbnRcIixiOlwiXihfX0VORF9ffF9fREFUQV9fKVwiLGU6XCJcXFxcbiRcIixyOjV9LGk9W2UuQkUscixuXSxjPVtuLGUuSENNLG8se2NOOlwiY29tbWVudFwiLGI6XCJeXFxcXD1cXFxcd1wiLGU6XCJcXFxcPWN1dFwiLGVXOiEwfSxzLHtjTjpcInN0cmluZ1wiLGM6aSx2Olt7YjpcInFbcXd4cl0/XFxcXHMqXFxcXChcIixlOlwiXFxcXClcIixyOjV9LHtiOlwicVtxd3hyXT9cXFxccypcXFxcW1wiLGU6XCJcXFxcXVwiLHI6NX0se2I6XCJxW3F3eHJdP1xcXFxzKlxcXFx7XCIsZTpcIlxcXFx9XCIscjo1fSx7YjpcInFbcXd4cl0/XFxcXHMqXFxcXHxcIixlOlwiXFxcXHxcIixyOjV9LHtiOlwicVtxd3hyXT9cXFxccypcXFxcPFwiLGU6XCJcXFxcPlwiLHI6NX0se2I6XCJxd1xcXFxzK3FcIixlOlwicVwiLHI6NX0se2I6XCInXCIsZTpcIidcIixjOltlLkJFXX0se2I6J1wiJyxlOidcIid9LHtiOlwiYFwiLGU6XCJgXCIsYzpbZS5CRV19LHtiOlwie1xcXFx3K31cIixjOltdLHI6MH0se2I6XCItP1xcXFx3K1xcXFxzKlxcXFw9XFxcXD5cIixjOltdLHI6MH1dfSx7Y046XCJudW1iZXJcIixiOlwiKFxcXFxiMFswLTdfXSspfChcXFxcYjB4WzAtOWEtZkEtRl9dKyl8KFxcXFxiWzEtOV1bMC05X10qKFxcXFwuWzAtOV9dKyk/KXxbMF9dXFxcXGJcIixyOjB9LHtiOlwiKFxcXFwvXFxcXC98XCIrZS5SU1IrXCJ8XFxcXGIoc3BsaXR8cmV0dXJufHByaW50fHJldmVyc2V8Z3JlcClcXFxcYilcXFxccypcIixrOlwic3BsaXQgcmV0dXJuIHByaW50IHJldmVyc2UgZ3JlcFwiLHI6MCxjOltlLkhDTSxvLHtjTjpcInJlZ2V4cFwiLGI6XCIoc3x0cnx5KS8oXFxcXFxcXFwufFteL10pKi8oXFxcXFxcXFwufFteL10pKi9bYS16XSpcIixyOjEwfSx7Y046XCJyZWdleHBcIixiOlwiKG18cXIpPy9cIixlOlwiL1thLXpdKlwiLGM6W2UuQkVdLHI6MH1dfSx7Y046XCJzdWJcIixiSzpcInN1YlwiLGU6XCIoXFxcXHMqXFxcXCguKj9cXFxcKSk/Wzt7XVwiLHI6NX0se2NOOlwib3BlcmF0b3JcIixiOlwiLVxcXFx3XFxcXGJcIixyOjB9XTtyZXR1cm4gci5jPWMscy5jPWMse2FsaWFzZXM6W1wicGxcIl0sazp0LGM6Y319KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJydWJ5XCIsZnVuY3Rpb24oZSl7dmFyIGI9XCJbYS16QS1aX11cXFxcdypbIT89XT98Wy0rfl1cXFxcQHw8PHw+Pnw9fnw9PT0/fDw9PnxbPD5dPT98XFxcXCpcXFxcKnxbLS8rJV4mKn5gfF18XFxcXFtcXFxcXT0/XCIscj1cImFuZCBmYWxzZSB0aGVuIGRlZmluZWQgbW9kdWxlIGluIHJldHVybiByZWRvIGlmIEJFR0lOIHJldHJ5IGVuZCBmb3IgdHJ1ZSBzZWxmIHdoZW4gbmV4dCB1bnRpbCBkbyBiZWdpbiB1bmxlc3MgRU5EIHJlc2N1ZSBuaWwgZWxzZSBicmVhayB1bmRlZiBub3Qgc3VwZXIgY2xhc3MgY2FzZSByZXF1aXJlIHlpZWxkIGFsaWFzIHdoaWxlIGVuc3VyZSBlbHNpZiBvciBpbmNsdWRlIGF0dHJfcmVhZGVyIGF0dHJfd3JpdGVyIGF0dHJfYWNjZXNzb3JcIixjPXtjTjpcInlhcmRvY3RhZ1wiLGI6XCJAW0EtWmEtel0rXCJ9LGE9e2NOOlwidmFsdWVcIixiOlwiIzxcIixlOlwiPlwifSxzPXtjTjpcImNvbW1lbnRcIix2Olt7YjpcIiNcIixlOlwiJFwiLGM6W2NdfSx7YjpcIl5cXFxcPWJlZ2luXCIsZTpcIl5cXFxcPWVuZFwiLGM6W2NdLHI6MTB9LHtiOlwiXl9fRU5EX19cIixlOlwiXFxcXG4kXCJ9XX0sbj17Y046XCJzdWJzdFwiLGI6XCIjXFxcXHtcIixlOlwifVwiLGs6cn0sdD17Y046XCJzdHJpbmdcIixjOltlLkJFLG5dLHY6W3tiOi8nLyxlOi8nL30se2I6L1wiLyxlOi9cIi99LHtiOi9gLyxlOi9gL30se2I6XCIlW3FRd1d4XT9cXFxcKFwiLGU6XCJcXFxcKVwifSx7YjpcIiVbcVF3V3hdP1xcXFxbXCIsZTpcIlxcXFxdXCJ9LHtiOlwiJVtxUXdXeF0/e1wiLGU6XCJ9XCJ9LHtiOlwiJVtxUXdXeF0/PFwiLGU6XCI+XCJ9LHtiOlwiJVtxUXdXeF0/L1wiLGU6XCIvXCJ9LHtiOlwiJVtxUXdXeF0/JVwiLGU6XCIlXCJ9LHtiOlwiJVtxUXdXeF0/LVwiLGU6XCItXCJ9LHtiOlwiJVtxUXdXeF0/XFxcXHxcIixlOlwiXFxcXHxcIn0se2I6L1xcQlxcPyhcXFxcXFxkezEsM318XFxcXHhbQS1GYS1mMC05XXsxLDJ9fFxcXFx1W0EtRmEtZjAtOV17NH18XFxcXD9cXFMpXFxiL31dfSxpPXtjTjpcInBhcmFtc1wiLGI6XCJcXFxcKFwiLGU6XCJcXFxcKVwiLGs6cn0sZD1bdCxhLHMse2NOOlwiY2xhc3NcIixiSzpcImNsYXNzIG1vZHVsZVwiLGU6XCIkfDtcIixpOi89LyxjOltlLmluaGVyaXQoZS5UTSx7YjpcIltBLVphLXpfXVxcXFx3Kig6OlxcXFx3KykqKFxcXFw/fFxcXFwhKT9cIn0pLHtjTjpcImluaGVyaXRhbmNlXCIsYjpcIjxcXFxccypcIixjOlt7Y046XCJwYXJlbnRcIixiOlwiKFwiK2UuSVIrXCI6Oik/XCIrZS5JUn1dfSxzXX0se2NOOlwiZnVuY3Rpb25cIixiSzpcImRlZlwiLGU6XCIgfCR8O1wiLHI6MCxjOltlLmluaGVyaXQoZS5UTSx7YjpifSksaSxzXX0se2NOOlwiY29uc3RhbnRcIixiOlwiKDo6KT8oXFxcXGJbQS1aXVxcXFx3Kig6Oik/KStcIixyOjB9LHtjTjpcInN5bWJvbFwiLGI6ZS5VSVIrXCIoXFxcXCF8XFxcXD8pPzpcIixyOjB9LHtjTjpcInN5bWJvbFwiLGI6XCI6XCIsYzpbdCx7YjpifV0scjowfSx7Y046XCJudW1iZXJcIixiOlwiKFxcXFxiMFswLTdfXSspfChcXFxcYjB4WzAtOWEtZkEtRl9dKyl8KFxcXFxiWzEtOV1bMC05X10qKFxcXFwuWzAtOV9dKyk/KXxbMF9dXFxcXGJcIixyOjB9LHtjTjpcInZhcmlhYmxlXCIsYjpcIihcXFxcJFxcXFxXKXwoKFxcXFwkfFxcXFxAXFxcXEA/KShcXFxcdyspKVwifSx7YjpcIihcIitlLlJTUitcIilcXFxccypcIixjOlthLHMse2NOOlwicmVnZXhwXCIsYzpbZS5CRSxuXSxpOi9cXG4vLHY6W3tiOlwiL1wiLGU6XCIvW2Etel0qXCJ9LHtiOlwiJXJ7XCIsZTpcIn1bYS16XSpcIn0se2I6XCIlclxcXFwoXCIsZTpcIlxcXFwpW2Etel0qXCJ9LHtiOlwiJXIhXCIsZTpcIiFbYS16XSpcIn0se2I6XCIlclxcXFxbXCIsZTpcIlxcXFxdW2Etel0qXCJ9XX1dLHI6MH1dO24uYz1kLGkuYz1kO3ZhciBsPVwiWz4/XT5cIix1PVwiW1xcXFx3I10rXFxcXChcXFxcdytcXFxcKTpcXFxcZCs6XFxcXGQrPlwiLE49XCIoXFxcXHcrLSk/XFxcXGQrXFxcXC5cXFxcZCtcXFxcLlxcXFxkKHBcXFxcZCspP1tePl0rPlwiLG89W3tiOi9eXFxzKj0+LyxjTjpcInN0YXR1c1wiLHN0YXJ0czp7ZTpcIiRcIixjOmR9fSx7Y046XCJwcm9tcHRcIixiOlwiXihcIitsK1wifFwiK3UrXCJ8XCIrTitcIilcIixzdGFydHM6e2U6XCIkXCIsYzpkfX1dO3JldHVybnthbGlhc2VzOltcInJiXCIsXCJnZW1zcGVjXCIsXCJwb2RzcGVjXCIsXCJ0aG9yXCIsXCJpcmJcIl0sazpyLGM6W3NdLmNvbmNhdChvKS5jb25jYXQoZCl9fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwiZXJiXCIsZnVuY3Rpb24oKXtyZXR1cm57c0w6XCJ4bWxcIixzdWJMYW5ndWFnZU1vZGU6XCJjb250aW51b3VzXCIsYzpbe2NOOlwiY29tbWVudFwiLGI6XCI8JSNcIixlOlwiJT5cIn0se2I6XCI8JVslPS1dP1wiLGU6XCJbJS1dPyU+XCIsc0w6XCJydWJ5XCIsZUI6ITAsZUU6ITB9XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJhcGFjaGVcIixmdW5jdGlvbihlKXt2YXIgcj17Y046XCJudW1iZXJcIixiOlwiW1xcXFwkJV1cXFxcZCtcIn07cmV0dXJue2FsaWFzZXM6W1wiYXBhY2hlY29uZlwiXSxjSTohMCxjOltlLkhDTSx7Y046XCJ0YWdcIixiOlwiPC8/XCIsZTpcIj5cIn0se2NOOlwia2V5d29yZFwiLGI6L1xcdysvLHI6MCxrOntjb21tb246XCJvcmRlciBkZW55IGFsbG93IHNldGVudiByZXdyaXRlcnVsZSByZXdyaXRlZW5naW5lIHJld3JpdGVjb25kIGRvY3VtZW50cm9vdCBzZXRoYW5kbGVyIGVycm9yZG9jdW1lbnQgbG9hZG1vZHVsZSBvcHRpb25zIGhlYWRlciBsaXN0ZW4gc2VydmVycm9vdCBzZXJ2ZXJuYW1lXCJ9LHN0YXJ0czp7ZTovJC8scjowLGs6e2xpdGVyYWw6XCJvbiBvZmYgYWxsXCJ9LGM6W3tjTjpcInNxYnJhY2tldFwiLGI6XCJcXFxcc1xcXFxbXCIsZTpcIlxcXFxdJFwifSx7Y046XCJjYnJhY2tldFwiLGI6XCJbXFxcXCQlXVxcXFx7XCIsZTpcIlxcXFx9XCIsYzpbXCJzZWxmXCIscl19LHIsZS5RU01dfX1dLGk6L1xcUy99fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwianNvblwiLGZ1bmN0aW9uKGUpe3ZhciB0PXtsaXRlcmFsOlwidHJ1ZSBmYWxzZSBudWxsXCJ9LGk9W2UuUVNNLGUuQ05NXSxsPXtjTjpcInZhbHVlXCIsZTpcIixcIixlVzohMCxlRTohMCxjOmksazp0fSxjPXtiOlwie1wiLGU6XCJ9XCIsYzpbe2NOOlwiYXR0cmlidXRlXCIsYjonXFxcXHMqXCInLGU6J1wiXFxcXHMqOlxcXFxzKicsZUI6ITAsZUU6ITAsYzpbZS5CRV0saTpcIlxcXFxuXCIsc3RhcnRzOmx9XSxpOlwiXFxcXFNcIn0sbj17YjpcIlxcXFxbXCIsZTpcIlxcXFxdXCIsYzpbZS5pbmhlcml0KGwse2NOOm51bGx9KV0saTpcIlxcXFxTXCJ9O3JldHVybiBpLnNwbGljZShpLmxlbmd0aCwwLGMsbikse2M6aSxrOnQsaTpcIlxcXFxTXCJ9fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwiY2xvanVyZVwiLGZ1bmN0aW9uKGUpe3ZhciB0PXtidWlsdF9pbjpcImRlZiBjb25kIGFwcGx5IGlmLW5vdCBpZi1sZXQgaWYgbm90IG5vdD0gPSA8ID4gPD0gPj0gPT0gKyAvICogLSByZW0gcXVvdCBuZWc/IHBvcz8gZGVsYXk/IHN5bWJvbD8ga2V5d29yZD8gdHJ1ZT8gZmFsc2U/IGludGVnZXI/IGVtcHR5PyBjb2xsPyBsaXN0PyBzZXQ/IGlmbj8gZm4/IGFzc29jaWF0aXZlPyBzZXF1ZW50aWFsPyBzb3J0ZWQ/IGNvdW50ZWQ/IHJldmVyc2libGU/IG51bWJlcj8gZGVjaW1hbD8gY2xhc3M/IGRpc3RpbmN0PyBpc2E/IGZsb2F0PyByYXRpb25hbD8gcmVkdWNlZD8gcmF0aW8/IG9kZD8gZXZlbj8gY2hhcj8gc2VxPyB2ZWN0b3I/IHN0cmluZz8gbWFwPyBuaWw/IGNvbnRhaW5zPyB6ZXJvPyBpbnN0YW5jZT8gbm90LWV2ZXJ5PyBub3QtYW55PyBsaWJzcGVjPyAtPiAtPj4gLi4gLiBpbmMgY29tcGFyZSBkbyBkb3RpbWVzIG1hcGNhdCB0YWtlIHJlbW92ZSB0YWtlLXdoaWxlIGRyb3AgbGV0Zm4gZHJvcC1sYXN0IHRha2UtbGFzdCBkcm9wLXdoaWxlIHdoaWxlIGludGVybiBjb25kcCBjYXNlIHJlZHVjZWQgY3ljbGUgc3BsaXQtYXQgc3BsaXQtd2l0aCByZXBlYXQgcmVwbGljYXRlIGl0ZXJhdGUgcmFuZ2UgbWVyZ2UgemlwbWFwIGRlY2xhcmUgbGluZS1zZXEgc29ydCBjb21wYXJhdG9yIHNvcnQtYnkgZG9ydW4gZG9hbGwgbnRobmV4dCBudGhyZXN0IHBhcnRpdGlvbiBldmFsIGRvc2VxIGF3YWl0IGF3YWl0LWZvciBsZXQgYWdlbnQgYXRvbSBzZW5kIHNlbmQtb2ZmIHJlbGVhc2UtcGVuZGluZy1zZW5kcyBhZGQtd2F0Y2ggbWFwdiBmaWx0ZXJ2IHJlbW92ZS13YXRjaCBhZ2VudC1lcnJvciByZXN0YXJ0LWFnZW50IHNldC1lcnJvci1oYW5kbGVyIGVycm9yLWhhbmRsZXIgc2V0LWVycm9yLW1vZGUhIGVycm9yLW1vZGUgc2h1dGRvd24tYWdlbnRzIHF1b3RlIHZhciBmbiBsb29wIHJlY3VyIHRocm93IHRyeSBtb25pdG9yLWVudGVyIG1vbml0b3ItZXhpdCBkZWZtYWNybyBkZWZuIGRlZm4tIG1hY3JvZXhwYW5kIG1hY3JvZXhwYW5kLTEgZm9yIGRvc3luYyBhbmQgb3Igd2hlbiB3aGVuLW5vdCB3aGVuLWxldCBjb21wIGp1eHQgcGFydGlhbCBzZXF1ZW5jZSBtZW1vaXplIGNvbnN0YW50bHkgY29tcGxlbWVudCBpZGVudGl0eSBhc3NlcnQgcGVlayBwb3AgZG90byBwcm94eSBkZWZzdHJ1Y3QgZmlyc3QgcmVzdCBjb25zIGRlZnByb3RvY29sIGNhc3QgY29sbCBkZWZ0eXBlIGRlZnJlY29yZCBsYXN0IGJ1dGxhc3Qgc2lncyByZWlmeSBzZWNvbmQgZmZpcnN0IGZuZXh0IG5maXJzdCBubmV4dCBkZWZtdWx0aSBkZWZtZXRob2QgbWV0YSB3aXRoLW1ldGEgbnMgaW4tbnMgY3JlYXRlLW5zIGltcG9ydCByZWZlciBrZXlzIHNlbGVjdC1rZXlzIHZhbHMga2V5IHZhbCByc2VxIG5hbWUgbmFtZXNwYWNlIHByb21pc2UgaW50byB0cmFuc2llbnQgcGVyc2lzdGVudCEgY29uaiEgYXNzb2MhIGRpc3NvYyEgcG9wISBkaXNqISB1c2UgY2xhc3MgdHlwZSBudW0gZmxvYXQgZG91YmxlIHNob3J0IGJ5dGUgYm9vbGVhbiBiaWdpbnQgYmlnaW50ZWdlciBiaWdkZWMgcHJpbnQtbWV0aG9kIHByaW50LWR1cCB0aHJvdy1pZiBwcmludGYgZm9ybWF0IGxvYWQgY29tcGlsZSBnZXQtaW4gdXBkYXRlLWluIHByIHByLW9uIG5ld2xpbmUgZmx1c2ggcmVhZCBzbHVycCByZWFkLWxpbmUgc3VidmVjIHdpdGgtb3BlbiBtZW1mbiB0aW1lIHJlLWZpbmQgcmUtZ3JvdXBzIHJhbmQtaW50IHJhbmQgbW9kIGxvY2tpbmcgYXNzZXJ0LXZhbGlkLWZkZWNsIGFsaWFzIHJlc29sdmUgcmVmIGRlcmVmIHJlZnNldCBzd2FwISByZXNldCEgc2V0LXZhbGlkYXRvciEgY29tcGFyZS1hbmQtc2V0ISBhbHRlci1tZXRhISByZXNldC1tZXRhISBjb21tdXRlIGdldC12YWxpZGF0b3IgYWx0ZXIgcmVmLXNldCByZWYtaGlzdG9yeS1jb3VudCByZWYtbWluLWhpc3RvcnkgcmVmLW1heC1oaXN0b3J5IGVuc3VyZSBzeW5jIGlvISBuZXcgbmV4dCBjb25qIHNldCEgdG8tYXJyYXkgZnV0dXJlIGZ1dHVyZS1jYWxsIGludG8tYXJyYXkgYXNldCBnZW4tY2xhc3MgcmVkdWNlIG1hcCBmaWx0ZXIgZmluZCBlbXB0eSBoYXNoLW1hcCBoYXNoLXNldCBzb3J0ZWQtbWFwIHNvcnRlZC1tYXAtYnkgc29ydGVkLXNldCBzb3J0ZWQtc2V0LWJ5IHZlYyB2ZWN0b3Igc2VxIGZsYXR0ZW4gcmV2ZXJzZSBhc3NvYyBkaXNzb2MgbGlzdCBkaXNqIGdldCB1bmlvbiBkaWZmZXJlbmNlIGludGVyc2VjdGlvbiBleHRlbmQgZXh0ZW5kLXR5cGUgZXh0ZW5kLXByb3RvY29sIGludCBudGggZGVsYXkgY291bnQgY29uY2F0IGNodW5rIGNodW5rLWJ1ZmZlciBjaHVuay1hcHBlbmQgY2h1bmstZmlyc3QgY2h1bmstcmVzdCBtYXggbWluIGRlYyB1bmNoZWNrZWQtaW5jLWludCB1bmNoZWNrZWQtaW5jIHVuY2hlY2tlZC1kZWMtaW5jIHVuY2hlY2tlZC1kZWMgdW5jaGVja2VkLW5lZ2F0ZSB1bmNoZWNrZWQtYWRkLWludCB1bmNoZWNrZWQtYWRkIHVuY2hlY2tlZC1zdWJ0cmFjdC1pbnQgdW5jaGVja2VkLXN1YnRyYWN0IGNodW5rLW5leHQgY2h1bmstY29ucyBjaHVua2VkLXNlcT8gcHJuIHZhcnktbWV0YSBsYXp5LXNlcSBzcHJlYWQgbGlzdCogc3RyIGZpbmQta2V5d29yZCBrZXl3b3JkIHN5bWJvbCBnZW5zeW0gZm9yY2UgcmF0aW9uYWxpemVcIn0scj1cImEtekEtWl9cXFxcLSEuPysqPTw+JiMnXCIsbj1cIltcIityK1wiXVtcIityK1wiMC05Lzs6XSpcIixhPVwiWy0rXT9cXFxcZCsoXFxcXC5cXFxcZCspP1wiLG89e2I6bixyOjB9LHM9e2NOOlwibnVtYmVyXCIsYjphLHI6MH0sYz1lLmluaGVyaXQoZS5RU00se2k6bnVsbH0pLGk9e2NOOlwiY29tbWVudFwiLGI6XCI7XCIsZTpcIiRcIixyOjB9LGQ9e2NOOlwibGl0ZXJhbFwiLGI6L1xcYih0cnVlfGZhbHNlfG5pbClcXGIvfSxsPXtjTjpcImNvbGxlY3Rpb25cIixiOlwiW1xcXFxbXFxcXHtdXCIsZTpcIltcXFxcXVxcXFx9XVwifSxtPXtjTjpcImNvbW1lbnRcIixiOlwiXFxcXF5cIitufSxwPXtjTjpcImNvbW1lbnRcIixiOlwiXFxcXF5cXFxce1wiLGU6XCJcXFxcfVwifSx1PXtjTjpcImF0dHJpYnV0ZVwiLGI6XCJbOl1cIitufSxmPXtjTjpcImxpc3RcIixiOlwiXFxcXChcIixlOlwiXFxcXClcIn0saD17ZVc6ITAscjowfSx5PXtrOnQsbDpuLGNOOlwia2V5d29yZFwiLGI6bixzdGFydHM6aH0sYj1bZixjLG0scCxpLHUsbCxzLGQsb107cmV0dXJuIGYuYz1be2NOOlwiY29tbWVudFwiLGI6XCJjb21tZW50XCJ9LHksaF0saC5jPWIsbC5jPWIse2FsaWFzZXM6W1wiY2xqXCJdLGk6L1xcUy8sYzpbZixjLG0scCxpLHUsbCxzLGRdfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcImNzc1wiLGZ1bmN0aW9uKGUpe3ZhciBjPVwiW2EtekEtWi1dW2EtekEtWjAtOV8tXSpcIixhPXtjTjpcImZ1bmN0aW9uXCIsYjpjK1wiXFxcXChcIixyQjohMCxlRTohMCxlOlwiXFxcXChcIn07cmV0dXJue2NJOiEwLGk6XCJbPS98J11cIixjOltlLkNCQ00se2NOOlwiaWRcIixiOlwiXFxcXCNbQS1aYS16MC05Xy1dK1wifSx7Y046XCJjbGFzc1wiLGI6XCJcXFxcLltBLVphLXowLTlfLV0rXCIscjowfSx7Y046XCJhdHRyX3NlbGVjdG9yXCIsYjpcIlxcXFxbXCIsZTpcIlxcXFxdXCIsaTpcIiRcIn0se2NOOlwicHNldWRvXCIsYjpcIjooOik/W2EtekEtWjAtOVxcXFxfXFxcXC1cXFxcK1xcXFwoXFxcXClcXFxcXFxcIlxcXFwnXStcIn0se2NOOlwiYXRfcnVsZVwiLGI6XCJAKGZvbnQtZmFjZXxwYWdlKVwiLGw6XCJbYS16LV0rXCIsazpcImZvbnQtZmFjZSBwYWdlXCJ9LHtjTjpcImF0X3J1bGVcIixiOlwiQFwiLGU6XCJbeztdXCIsYzpbe2NOOlwia2V5d29yZFwiLGI6L1xcUysvfSx7YjovXFxzLyxlVzohMCxlRTohMCxyOjAsYzpbYSxlLkFTTSxlLlFTTSxlLkNTU05NXX1dfSx7Y046XCJ0YWdcIixiOmMscjowfSx7Y046XCJydWxlc1wiLGI6XCJ7XCIsZTpcIn1cIixpOlwiW15cXFxcc11cIixyOjAsYzpbZS5DQkNNLHtjTjpcInJ1bGVcIixiOlwiW15cXFxcc11cIixyQjohMCxlOlwiO1wiLGVXOiEwLGM6W3tjTjpcImF0dHJpYnV0ZVwiLGI6XCJbQS1aXFxcXF9cXFxcLlxcXFwtXStcIixlOlwiOlwiLGVFOiEwLGk6XCJbXlxcXFxzXVwiLHN0YXJ0czp7Y046XCJ2YWx1ZVwiLGVXOiEwLGVFOiEwLGM6W2EsZS5DU1NOTSxlLlFTTSxlLkFTTSxlLkNCQ00se2NOOlwiaGV4Y29sb3JcIixiOlwiI1swLTlBLUZhLWZdK1wifSx7Y046XCJpbXBvcnRhbnRcIixiOlwiIWltcG9ydGFudFwifV19fV19XX1dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcInJ1c3RcIixmdW5jdGlvbihlKXt2YXIgdD1lLmluaGVyaXQoZS5DQkNNKTtyZXR1cm4gdC5jLnB1c2goXCJzZWxmXCIpLHthbGlhc2VzOltcInJzXCJdLGs6e2tleXdvcmQ6XCJhbGlnbm9mIGFzIGJlIGJveCBicmVhayBjb25zdCBjb250aW51ZSBjcmF0ZSBkbyBlbHNlIGVudW0gZXh0ZXJuIGZhbHNlIGZuIGZvciBpZiBpbXBsIGluIGxldCBsb29wIG1hdGNoIG1vZCBtdXQgb2Zmc2V0b2Ygb25jZSBwcml2IHByb2MgcHViIHB1cmUgcmVmIHJldHVybiBzZWxmIHNpemVvZiBzdGF0aWMgc3RydWN0IHN1cGVyIHRyYWl0IHRydWUgdHlwZSB0eXBlb2YgdW5zYWZlIHVuc2l6ZWQgdXNlIHZpcnR1YWwgd2hpbGUgeWllbGQgaW50IGk4IGkxNiBpMzIgaTY0IHVpbnQgdTggdTMyIHU2NCBmbG9hdCBmMzIgZjY0IHN0ciBjaGFyIGJvb2xcIixidWlsdF9pbjpcImFzc2VydCEgYXNzZXJ0X2VxISBiaXRmbGFncyEgYnl0ZXMhIGNmZyEgY29sISBjb25jYXQhIGNvbmNhdF9pZGVudHMhIGRlYnVnX2Fzc2VydCEgZGVidWdfYXNzZXJ0X2VxISBlbnYhIHBhbmljISBmaWxlISBmb3JtYXQhIGZvcm1hdF9hcmdzISBpbmNsdWRlX2JpbiEgaW5jbHVkZV9zdHIhIGxpbmUhIGxvY2FsX2RhdGFfa2V5ISBtb2R1bGVfcGF0aCEgb3B0aW9uX2VudiEgcHJpbnQhIHByaW50bG4hIHNlbGVjdCEgc3RyaW5naWZ5ISB0cnkhIHVuaW1wbGVtZW50ZWQhIHVucmVhY2hhYmxlISB2ZWMhIHdyaXRlISB3cml0ZWxuIVwifSxsOmUuSVIrXCIhP1wiLGk6XCI8L1wiLGM6W2UuQ0xDTSx0LGUuaW5oZXJpdChlLlFTTSx7aTpudWxsfSkse2NOOlwic3RyaW5nXCIsYjovcigjKilcIi4qP1wiXFwxKD8hIykvfSx7Y046XCJzdHJpbmdcIixiOi8nXFxcXD8oeFxcd3syfXx1XFx3ezR9fFVcXHd7OH18LiknL30se2I6LydbYS16QS1aX11bYS16QS1aMC05X10qL30se2NOOlwibnVtYmVyXCIsYjovXFxiKDBbeGJdW0EtWmEtejAtOV9dK3xbMC05X10rKFxcLlswLTlfXSspPyhbZUVdWystXT9bMC05X10rKT8pKFt1aWZdKDh8MTZ8MzJ8NjQpPyk/LyxyOjB9LHtjTjpcImZ1bmN0aW9uXCIsYks6XCJmblwiLGU6XCIoXFxcXCh8PClcIixlRTohMCxjOltlLlVUTV19LHtjTjpcInByZXByb2Nlc3NvclwiLGI6XCIjXFxcXFtcIixlOlwiXFxcXF1cIn0se2JLOlwidHlwZVwiLGU6XCIoPXw8KVwiLGM6W2UuVVRNXSxpOlwiXFxcXFNcIn0se2JLOlwidHJhaXQgZW51bVwiLGU6XCIoe3w8KVwiLGM6W2UuVVRNXSxpOlwiXFxcXFNcIn0se2I6ZS5JUitcIjo6XCJ9LHtiOlwiLT5cIn1dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcInN3aWZ0XCIsZnVuY3Rpb24oZSl7dmFyIHQ9e2tleXdvcmQ6XCJjbGFzcyBkZWluaXQgZW51bSBleHRlbnNpb24gZnVuYyBpbXBvcnQgaW5pdCBsZXQgcHJvdG9jb2wgc3RhdGljIHN0cnVjdCBzdWJzY3JpcHQgdHlwZWFsaWFzIHZhciBicmVhayBjYXNlIGNvbnRpbnVlIGRlZmF1bHQgZG8gZWxzZSBmYWxsdGhyb3VnaCBpZiBpbiBmb3IgcmV0dXJuIHN3aXRjaCB3aGVyZSB3aGlsZSBhcyBkeW5hbWljVHlwZSBpcyBuZXcgc3VwZXIgc2VsZiBTZWxmIFR5cGUgX19DT0xVTU5fXyBfX0ZJTEVfXyBfX0ZVTkNUSU9OX18gX19MSU5FX18gYXNzb2NpYXRpdml0eSBkaWRTZXQgZ2V0IGluZml4IGlub3V0IGxlZnQgbXV0YXRpbmcgbm9uZSBub25tdXRhdGluZyBvcGVyYXRvciBvdmVycmlkZSBwb3N0Zml4IHByZWNlZGVuY2UgcHJlZml4IHJpZ2h0IHNldCB1bm93bmVkIHVub3duZWQgc2FmZSB1bnNhZmUgd2VhayB3aWxsU2V0XCIsbGl0ZXJhbDpcInRydWUgZmFsc2UgbmlsXCIsYnVpbHRfaW46XCJhYnMgYWR2YW5jZSBhbGlnbm9mIGFsaWdub2ZWYWx1ZSBhc3NlcnQgYnJpZGdlRnJvbU9iamVjdGl2ZUMgYnJpZGdlRnJvbU9iamVjdGl2ZUNVbmNvbmRpdGlvbmFsIGJyaWRnZVRvT2JqZWN0aXZlQyBicmlkZ2VUb09iamVjdGl2ZUNVbmNvbmRpdGlvbmFsIGMgY29udGFpbnMgY291bnQgY291bnRFbGVtZW50cyBjb3VudExlYWRpbmdaZXJvcyBkZWJ1Z1ByaW50IGRlYnVnUHJpbnRsbiBkaXN0YW5jZSBkcm9wRmlyc3QgZHJvcExhc3QgZHVtcCBlbmNvZGVCaXRzQXNXb3JkcyBlbnVtZXJhdGUgZXF1YWwgZmFsc2UgZmlsdGVyIGZpbmQgZ2V0QnJpZGdlZE9iamVjdGl2ZUNUeXBlIGdldFZhTGlzdCBpbmRpY2VzIGluc2VydGlvblNvcnQgaXNCcmlkZ2VkVG9PYmplY3RpdmVDIGlzQnJpZGdlZFZlcmJhdGltVG9PYmplY3RpdmVDIGlzVW5pcXVlbHlSZWZlcmVuY2VkIGpvaW4gbGV4aWNvZ3JhcGhpY2FsQ29tcGFyZSBtYXAgbWF4IG1heEVsZW1lbnQgbWluIG1pbkVsZW1lbnQgbmlsIG51bWVyaWNDYXN0IHBhcnRpdGlvbiBwb3NpeCBwcmludCBwcmludGxuIHF1aWNrU29ydCByZWR1Y2UgcmVmbGVjdCByZWludGVycHJldENhc3QgcmV2ZXJzZSByb3VuZFVwVG9BbGlnbm1lbnQgc2l6ZW9mIHNpemVvZlZhbHVlIHNvcnQgc3BsaXQgc3RhcnRzV2l0aCBzdHJpZGVvZiBzdHJpZGVvZlZhbHVlIHN3YXAgc3dpZnQgdG9TdHJpbmcgdHJhbnNjb2RlIHRydWUgdW5kZXJlc3RpbWF0ZUNvdW50IHVuc2FmZVJlZmxlY3Qgd2l0aEV4dGVuZGVkTGlmZXRpbWUgd2l0aE9iamVjdEF0UGx1c1plcm8gd2l0aFVuc2FmZVBvaW50ZXIgd2l0aFVuc2FmZVBvaW50ZXJUb09iamVjdCB3aXRoVW5zYWZlUG9pbnRlcnMgd2l0aFZhTGlzdFwifSxpPXtjTjpcInR5cGVcIixiOlwiXFxcXGJbQS1aXVtcXFxcdyddKlwiLHI6MH0sbj17Y046XCJjb21tZW50XCIsYjpcIi9cXFxcKlwiLGU6XCJcXFxcKi9cIixjOltlLlBXTSxcInNlbGZcIl19LHI9e2NOOlwic3Vic3RcIixiOi9cXFxcXFwoLyxlOlwiXFxcXClcIixrOnQsYzpbXX0scz17Y046XCJudW1iZXJcIixiOlwiXFxcXGIoW1xcXFxkX10rKFxcXFwuW1xcXFxkZUVfXSspP3wweFthLWZBLUYwLTlfXSsoXFxcXC5bYS1mQS1GMC05cF9dKyk/fDBiWzAxX10rfDBvWzAtN19dKylcXFxcYlwiLHI6MH0sbz1lLmluaGVyaXQoZS5RU00se2M6W3IsZS5CRV19KTtyZXR1cm4gci5jPVtzXSx7azp0LGM6W28sZS5DTENNLG4saSxzLHtjTjpcImZ1bmNcIixiSzpcImZ1bmNcIixlOlwie1wiLGVFOiEwLGM6W2UuaW5oZXJpdChlLlRNLHtiOi9bQS1aYS16JF9dWzAtOUEtWmEteiRfXSovLGk6L1xcKC99KSx7Y046XCJnZW5lcmljc1wiLGI6L1xcPC8sZTovXFw+LyxpOi9cXD4vfSx7Y046XCJwYXJhbXNcIixiOi9cXCgvLGU6L1xcKS8sazp0LGM6W1wic2VsZlwiLHMsbyxlLkNCQ00se2I6XCI6XCJ9XSxpOi9bXCInXS99XSxpOi9cXFt8JS99LHtjTjpcImNsYXNzXCIsazpcInN0cnVjdCBwcm90b2NvbCBjbGFzcyBleHRlbnNpb24gZW51bVwiLGI6XCIoc3RydWN0fHByb3RvY29sfGNsYXNzKD8hIChmdW5jfHZhcikpfGV4dGVuc2lvbnxlbnVtKVwiLGU6XCJcXFxce1wiLGVFOiEwLGM6W2UuaW5oZXJpdChlLlRNLHtiOi9bQS1aYS16JF9dWzAtOUEtWmEteiRfXSovfSldfSx7Y046XCJwcmVwcm9jZXNzb3JcIixiOlwiKEBhc3NpZ25tZW50fEBjbGFzc19wcm90b2NvbHxAZXhwb3J0ZWR8QGZpbmFsfEBsYXp5fEBub3JldHVybnxATlNDb3B5aW5nfEBOU01hbmFnZWR8QG9iamN8QG9wdGlvbmFsfEByZXF1aXJlZHxAYXV0b19jbG9zdXJlfEBub3JldHVybnxASUJBY3Rpb258QElCRGVzaWduYWJsZXxASUJJbnNwZWN0YWJsZXxASUJPdXRsZXR8QGluZml4fEBwcmVmaXh8QHBvc3RmaXgpXCJ9XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJuZ2lueFwiLGZ1bmN0aW9uKGUpe3ZhciByPXtjTjpcInZhcmlhYmxlXCIsdjpbe2I6L1xcJFxcZCsvfSx7YjovXFwkXFx7LyxlOi99L30se2I6XCJbXFxcXCRcXFxcQF1cIitlLlVJUn1dfSxiPXtlVzohMCxsOlwiW2Etei9fXStcIixrOntidWlsdF9pbjpcIm9uIG9mZiB5ZXMgbm8gdHJ1ZSBmYWxzZSBub25lIGJsb2NrZWQgZGVidWcgaW5mbyBub3RpY2Ugd2FybiBlcnJvciBjcml0IHNlbGVjdCBicmVhayBsYXN0IHBlcm1hbmVudCByZWRpcmVjdCBrcXVldWUgcnRzaWcgZXBvbGwgcG9sbCAvZGV2L3BvbGxcIn0scjowLGk6XCI9PlwiLGM6W2UuSENNLHtjTjpcInN0cmluZ1wiLGM6W2UuQkUscl0sdjpbe2I6L1wiLyxlOi9cIi99LHtiOi8nLyxlOi8nL31dfSx7Y046XCJ1cmxcIixiOlwiKFthLXpdKyk6L1wiLGU6XCJcXFxcc1wiLGVXOiEwLGVFOiEwLGM6W3JdfSx7Y046XCJyZWdleHBcIixjOltlLkJFLHJdLHY6W3tiOlwiXFxcXHNcXFxcXlwiLGU6XCJcXFxcc3x7fDtcIixyRTohMH0se2I6XCJ+XFxcXCo/XFxcXHMrXCIsZTpcIlxcXFxzfHt8O1wiLHJFOiEwfSx7YjpcIlxcXFwqKFxcXFwuW2EtelxcXFwtXSspK1wifSx7YjpcIihbYS16XFxcXC1dK1xcXFwuKStcXFxcKlwifV19LHtjTjpcIm51bWJlclwiLGI6XCJcXFxcYlxcXFxkezEsM31cXFxcLlxcXFxkezEsM31cXFxcLlxcXFxkezEsM31cXFxcLlxcXFxkezEsM30oOlxcXFxkezEsNX0pP1xcXFxiXCJ9LHtjTjpcIm51bWJlclwiLGI6XCJcXFxcYlxcXFxkK1trS21NZ0dkc2hkd3ldKlxcXFxiXCIscjowfSxyXX07cmV0dXJue2FsaWFzZXM6W1wibmdpbnhjb25mXCJdLGM6W2UuSENNLHtiOmUuVUlSK1wiXFxcXHNcIixlOlwiO3x7XCIsckI6ITAsYzpbe2NOOlwidGl0bGVcIixiOmUuVUlSLHN0YXJ0czpifV0scjowfV0saTpcIlteXFxcXHNcXFxcfV1cIn19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJjc1wiLGZ1bmN0aW9uKGUpe3ZhciByPVwiYWJzdHJhY3QgYXMgYmFzZSBib29sIGJyZWFrIGJ5dGUgY2FzZSBjYXRjaCBjaGFyIGNoZWNrZWQgY29uc3QgY29udGludWUgZGVjaW1hbCBkZWZhdWx0IGRlbGVnYXRlIGRvIGRvdWJsZSBlbHNlIGVudW0gZXZlbnQgZXhwbGljaXQgZXh0ZXJuIGZhbHNlIGZpbmFsbHkgZml4ZWQgZmxvYXQgZm9yIGZvcmVhY2ggZ290byBpZiBpbXBsaWNpdCBpbiBpbnQgaW50ZXJmYWNlIGludGVybmFsIGlzIGxvY2sgbG9uZyBudWxsIG9iamVjdCBvcGVyYXRvciBvdXQgb3ZlcnJpZGUgcGFyYW1zIHByaXZhdGUgcHJvdGVjdGVkIHB1YmxpYyByZWFkb25seSByZWYgc2J5dGUgc2VhbGVkIHNob3J0IHNpemVvZiBzdGFja2FsbG9jIHN0YXRpYyBzdHJpbmcgc3RydWN0IHN3aXRjaCB0aGlzIHRydWUgdHJ5IHR5cGVvZiB1aW50IHVsb25nIHVuY2hlY2tlZCB1bnNhZmUgdXNob3J0IHVzaW5nIHZpcnR1YWwgdm9sYXRpbGUgdm9pZCB3aGlsZSBhc3luYyBwcm90ZWN0ZWQgcHVibGljIHByaXZhdGUgaW50ZXJuYWwgYXNjZW5kaW5nIGRlc2NlbmRpbmcgZnJvbSBnZXQgZ3JvdXAgaW50byBqb2luIGxldCBvcmRlcmJ5IHBhcnRpYWwgc2VsZWN0IHNldCB2YWx1ZSB2YXIgd2hlcmUgeWllbGRcIix0PWUuSVIrXCIoPFwiK2UuSVIrXCI+KT9cIjtyZXR1cm57YWxpYXNlczpbXCJjc2hhcnBcIl0sazpyLGk6Lzo6LyxjOlt7Y046XCJjb21tZW50XCIsYjpcIi8vL1wiLGU6XCIkXCIsckI6ITAsYzpbe2NOOlwieG1sRG9jVGFnXCIsdjpbe2I6XCIvLy9cIixyOjB9LHtiOlwiPCEtLXwtLT5cIn0se2I6XCI8Lz9cIixlOlwiPlwifV19XX0sZS5DTENNLGUuQ0JDTSx7Y046XCJwcmVwcm9jZXNzb3JcIixiOlwiI1wiLGU6XCIkXCIsazpcImlmIGVsc2UgZWxpZiBlbmRpZiBkZWZpbmUgdW5kZWYgd2FybmluZyBlcnJvciBsaW5lIHJlZ2lvbiBlbmRyZWdpb24gcHJhZ21hIGNoZWNrc3VtXCJ9LHtjTjpcInN0cmluZ1wiLGI6J0BcIicsZTonXCInLGM6W3tiOidcIlwiJ31dfSxlLkFTTSxlLlFTTSxlLkNOTSx7Yks6XCJjbGFzcyBuYW1lc3BhY2UgaW50ZXJmYWNlXCIsZTovW3s7PV0vLGk6L1teXFxzOl0vLGM6W2UuVE0sZS5DTENNLGUuQ0JDTV19LHtiSzpcIm5ldyByZXR1cm4gdGhyb3cgYXdhaXRcIixyOjB9LHtjTjpcImZ1bmN0aW9uXCIsYjpcIihcIit0K1wiXFxcXHMrKStcIitlLklSK1wiXFxcXHMqXFxcXChcIixyQjohMCxlOi9bezs9XS8sZUU6ITAsazpyLGM6W3tiOmUuSVIrXCJcXFxccypcXFxcKFwiLHJCOiEwLGM6W2UuVE1dLHI6MH0se2NOOlwicGFyYW1zXCIsYjovXFwoLyxlOi9cXCkvLGs6cixyOjAsYzpbZS5BU00sZS5RU00sZS5DTk0sZS5DQkNNXX0sZS5DTENNLGUuQ0JDTV19XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJtYXJrZG93blwiLGZ1bmN0aW9uKCl7cmV0dXJue2FsaWFzZXM6W1wibWRcIixcIm1rZG93blwiLFwibWtkXCJdLGM6W3tjTjpcImhlYWRlclwiLHY6W3tiOlwiXiN7MSw2fVwiLGU6XCIkXCJ9LHtiOlwiXi4rP1xcXFxuWz0tXXsyLH0kXCJ9XX0se2I6XCI8XCIsZTpcIj5cIixzTDpcInhtbFwiLHI6MH0se2NOOlwiYnVsbGV0XCIsYjpcIl4oWyorLV18KFxcXFxkK1xcXFwuKSlcXFxccytcIn0se2NOOlwic3Ryb25nXCIsYjpcIlsqX117Mn0uKz9bKl9dezJ9XCJ9LHtjTjpcImVtcGhhc2lzXCIsdjpbe2I6XCJcXFxcKi4rP1xcXFwqXCJ9LHtiOlwiXy4rP19cIixyOjB9XX0se2NOOlwiYmxvY2txdW90ZVwiLGI6XCJePlxcXFxzK1wiLGU6XCIkXCJ9LHtjTjpcImNvZGVcIix2Olt7YjpcImAuKz9gXCJ9LHtiOlwiXiggezR9fFx0KVwiLGU6XCIkXCIscjowfV19LHtjTjpcImhvcml6b250YWxfcnVsZVwiLGI6XCJeWy1cXFxcKl17Myx9XCIsZTpcIiRcIn0se2I6XCJcXFxcWy4rP1xcXFxdW1xcXFwoXFxcXFtdLio/W1xcXFwpXFxcXF1dXCIsckI6ITAsYzpbe2NOOlwibGlua19sYWJlbFwiLGI6XCJcXFxcW1wiLGU6XCJcXFxcXVwiLGVCOiEwLHJFOiEwLHI6MH0se2NOOlwibGlua191cmxcIixiOlwiXFxcXF1cXFxcKFwiLGU6XCJcXFxcKVwiLGVCOiEwLGVFOiEwfSx7Y046XCJsaW5rX3JlZmVyZW5jZVwiLGI6XCJcXFxcXVxcXFxbXCIsZTpcIlxcXFxdXCIsZUI6ITAsZUU6ITB9XSxyOjEwfSx7YjpcIl5cXFxcWy4rXFxcXF06XCIsckI6ITAsYzpbe2NOOlwibGlua19yZWZlcmVuY2VcIixiOlwiXFxcXFtcIixlOlwiXFxcXF06XCIsZUI6ITAsZUU6ITAsc3RhcnRzOntjTjpcImxpbmtfdXJsXCIsZTpcIiRcIn19XX1dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcImRpZmZcIixmdW5jdGlvbigpe3JldHVybnthbGlhc2VzOltcInBhdGNoXCJdLGM6W3tjTjpcImNodW5rXCIscjoxMCx2Olt7YjovXlxcQFxcQCArXFwtXFxkKyxcXGQrICtcXCtcXGQrLFxcZCsgK1xcQFxcQCQvfSx7YjovXlxcKlxcKlxcKiArXFxkKyxcXGQrICtcXCpcXCpcXCpcXCokL30se2I6L15cXC1cXC1cXC0gK1xcZCssXFxkKyArXFwtXFwtXFwtXFwtJC99XX0se2NOOlwiaGVhZGVyXCIsdjpbe2I6L0luZGV4OiAvLGU6LyQvfSx7YjovPT09PT0vLGU6Lz09PT09JC99LHtiOi9eXFwtXFwtXFwtLyxlOi8kL30se2I6L15cXCp7M30gLyxlOi8kL30se2I6L15cXCtcXCtcXCsvLGU6LyQvfSx7YjovXFwqezV9LyxlOi9cXCp7NX0kL31dfSx7Y046XCJhZGRpdGlvblwiLGI6XCJeXFxcXCtcIixlOlwiJFwifSx7Y046XCJkZWxldGlvblwiLGI6XCJeXFxcXC1cIixlOlwiJFwifSx7Y046XCJjaGFuZ2VcIixiOlwiXlxcXFwhXCIsZTpcIiRcIn1dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcInZpbVwiLGZ1bmN0aW9uKGUpe3JldHVybntsOi9bISNAXFx3XSsvLGs6e2tleXdvcmQ6XCJOfDAgUHwwIFh8MCBhfDAgYWIgYWJjIGFibyBhbCBhbSBhbnwwIGFyIGFyZ2EgYXJnZCBhcmdlIGFyZ2RvIGFyZ2cgYXJnbCBhcmd1IGFzIGF1IGF1ZyBhdW4gYnwwIGJOIGJhIGJhZCBiZCBiZSBiZWwgYmYgYmwgYm0gYm4gYm8gYnAgYnIgYnJlYSBicmVha2EgYnJlYWtkIGJyZWFrbCBicm8gYnVmZG8gYnVmZmVycyBidW4gYncgY3wwIGNOIGNOZiBjYSBjYWJjIGNhZGRiIGNhZCBjYWRkZiBjYWwgY2F0IGNiIGNjIGNjbCBjZCBjZSBjZXggY2YgY2ZpciBjZ2V0YiBjZ2V0ZSBjZyBjaGFuZ2VzIGNoZCBjaGUgY2hlY2t0IGNsIGNsYSBjbG8gY20gY21hcGMgY21lIGNuIGNuZXcgY25mIGNubyBjbm9yZWEgY25vcmVtZSBjbyBjb2wgY29sbyBjb20gY29tYyBjb21wIGNvbiBjb25mIGNvcGUgY3AgY3BmIGNxIGNyIGNzIGNzdCBjdSBjdW5hIGN1bm1lIGN3IGR8MCBkZWxtIGRlYiBkZWJ1Z2cgZGVsYyBkZWxmIGRpZiBkaWZmZyBkaWZmbyBkaWZmcCBkaWZmcHUgZGlmZnMgZGlmZnRoaXMgZGlnIGRpIGRsIGRlbGwgZGogZGxpIGRvIGRvYXV0b2EgZHAgZHIgZHMgZHNwIGV8MCBlYSBlYyBlY2hvZSBlY2hvaCBlY2hvbSBlY2hvbiBlbCBlbHNlaSBlbSBlbiBlbmRmbyBlbmRmIGVuZHQgZW5kdyBlbmUgZXggZXhlIGV4aSBleHUgZnwwIGZpbGVzIGZpbGV0IGZpbiBmaW5hIGZpbmkgZmlyIGZpeCBmbyBmb2xkYyBmb2xkZCBmb2xkZG9jIGZvbGRvIGZvciBmdSBnfDAgZ28gZ3IgZ3JlcGEgZ3UgZ3YgaGEgaHwwIGhlbHBmIGhlbHBnIGhlbHB0IGhpIGhpZCBoaXMgaXwwIGlhIGlhYmMgaWYgaWogaWwgaW0gaW1hcGMgaW1lIGlubyBpbm9yZWEgaW5vcmVtZSBpbnQgaXMgaXNwIGl1IGl1bmEgaXVubWUganwwIGp1IGt8MCBrZWVwYSBrZWUga2VlcGogbE4gbE5mIGx8MCBsYWQgbGFkZGIgbGFkZGYgbGEgbGFuIGxhdCBsYiBsYyBsY2ggbGNsIGxjcyBsZSBsZWZ0YSBsZXQgbGV4IGxmIGxmaXIgbGdldGIgbGdldGUgbGcgbGdyIGxncmVwYSBsaCBsbCBsbGEgbGxpIGxtYWsgbG0gbG1hcGMgbG5lIGxuZXcgbG5mIGxuIGxvYWRrIGxvIGxvYyBsb2NrdiBsb2wgbG9wZSBscCBscGYgbHIgbHMgbHQgbHUgbHVhIGx1YWQgbHVhZiBsdiBsdmltZ3JlcGEgbHcgbXwwIG1hIG1hayBtYXAgbWFwYyBtYXJrcyBtYXQgbWUgbWVudXQgbWVzIG1rIG1rcyBta3NwIG1rdiBta3ZpZSBtb2QgbXogbXpmIG5iYyBuYiBuYnMgbnwwIG5ldyBubSBubWFwYyBubWUgbm4gbm5vcmVtZSBub2Egbm8gbm9oIG5vcmVhIG5vcmVtZSBub3JtIG51IG51biBudW5tZSBvbCBvfDAgb20gb21hcGMgb21lIG9uIG9ubyBvbm9yZW1lIG9wdCBvdSBvdW5tZSBvdyBwfDAgcHJvZmQgcHJvZiBwcm8gcHJvbXB0ciBwYyBwZWQgcGUgcGVybGQgcG8gcG9wdSBwcCBwcmUgcHJldiBwcyBwdCBwdE4gcHRmIHB0aiBwdGwgcHRuIHB0cCBwdHIgcHRzIHB1IHB3IHB5MyBweXRob24zIHB5M2QgcHkzZiBweSBweWQgcHlmIHF8MCBxdWl0YSBxYSByfDAgcmVjIHJlZCByZWRpIHJlZHIgcmVkcmF3cyByZWcgcmVzIHJldCByZXR1IHJldyByaSByaWdodGIgcnViIHJ1YnlkIHJ1YnlmIHJ1bmQgcnUgcnYgc3wwIHNOIHNhbiBzYSBzYWwgc2F2IHNiIHNiTiBzYmEgc2JmIHNibCBzYm0gc2JuIHNicCBzYnIgc2NyaXAgc2NyaXB0ZSBzY3Mgc2Ugc2V0ZiBzZXRnIHNldGwgc2Ygc2ZpciBzaCBzaW0gc2lnIHNpbCBzbCBzbGEgc20gc21hcCBzbWFwYyBzbWUgc24gc25pIHNubyBzbm9yIHNub3JlbWUgc29yIHNvIHNwZWxsZCBzcGUgc3BlbGxpIHNwZWxsciBzcGVsbHUgc3BlbGx3IHNwIHNwciBzcmUgc3Qgc3RhIHN0YXJ0ZyBzdGFydHIgc3RhciBzdG9waSBzdGogc3RzIHN1biBzdW5tIHN1bm1lIHN1cyBzdiBzdyBzeSBzeW50aSBzeW5jIHR8MCB0TiB0YWJOIHRhYmMgdGFiZG8gdGFiZSB0YWJmIHRhYmZpciB0YWJsIHRhYm0gdGFibmV3IHRhYm4gdGFibyB0YWJwIHRhYnIgdGFicyB0YWIgdGEgdGFncyB0YyB0Y2xkIHRjbGYgdGUgdGYgdGggdGogdGwgdG0gdG4gdG8gdHAgdHIgdHJ5IHRzIHR1IHV8MCB1bmRvaiB1bmRvbCB1bmEgdW5oIHVubCB1bmxvIHVubSB1bm1lIHVucyB1cCB2fDAgdmUgdmVyYiB2ZXJ0IHZpbSB2aW1ncmVwYSB2aSB2aXUgdmllIHZtIHZtYXBjIHZtZSB2bmUgdm4gdm5vcmVtZSB2cyB2dSB2dW5tZSB3aW5kbyB3fDAgd04gd2Egd2ggd2kgd2luYyB3aW5wIHduIHdwIHdxIHdxYSB3cyB3dSB3diB4fDAgeGEgeG1hcGMgeG0geG1lIHhuIHhub3JlbWUgeHUgeHVubWUgeXwwIHp8MCB+IE5leHQgUHJpbnQgYXBwZW5kIGFiYnJldmlhdGUgYWJjbGVhciBhYm92ZWxlZnQgYWxsIGFtZW51IGFub3JlbWVudSBhcmdzIGFyZ2FkZCBhcmdkZWxldGUgYXJnZWRpdCBhcmdnbG9iYWwgYXJnbG9jYWwgYXJndW1lbnQgYXNjaWkgYXV0b2NtZCBhdWdyb3VwIGF1bm1lbnUgYnVmZmVyIGJOZXh0IGJhbGwgYmFkZCBiZGVsZXRlIGJlaGF2ZSBiZWxvd3JpZ2h0IGJmaXJzdCBibGFzdCBibW9kaWZpZWQgYm5leHQgYm90cmlnaHQgYnByZXZpb3VzIGJyZXdpbmQgYnJlYWsgYnJlYWthZGQgYnJlYWtkZWwgYnJlYWtsaXN0IGJyb3dzZSBidW5sb2FkIGJ3aXBlb3V0IGNoYW5nZSBjTmV4dCBjTmZpbGUgY2FiYnJldiBjYWJjbGVhciBjYWRkYnVmZmVyIGNhZGRleHByIGNhZGRmaWxlIGNhbGwgY2F0Y2ggY2J1ZmZlciBjY2xvc2UgY2VudGVyIGNleHByIGNmaWxlIGNmaXJzdCBjZ2V0YnVmZmVyIGNnZXRleHByIGNnZXRmaWxlIGNoZGlyIGNoZWNrcGF0aCBjaGVja3RpbWUgY2xpc3QgY2xhc3QgY2xvc2UgY21hcCBjbWFwY2xlYXIgY21lbnUgY25leHQgY25ld2VyIGNuZmlsZSBjbm9yZW1hcCBjbm9yZWFiYnJldiBjbm9yZW1lbnUgY29weSBjb2xkZXIgY29sb3JzY2hlbWUgY29tbWFuZCBjb21jbGVhciBjb21waWxlciBjb250aW51ZSBjb25maXJtIGNvcGVuIGNwcmV2aW91cyBjcGZpbGUgY3F1aXQgY3Jld2luZCBjc2NvcGUgY3N0YWcgY3VubWFwIGN1bmFiYnJldiBjdW5tZW51IGN3aW5kb3cgZGVsZXRlIGRlbG1hcmtzIGRlYnVnIGRlYnVnZ3JlZWR5IGRlbGNvbW1hbmQgZGVsZnVuY3Rpb24gZGlmZnVwZGF0ZSBkaWZmZ2V0IGRpZmZvZmYgZGlmZnBhdGNoIGRpZmZwdXQgZGlmZnNwbGl0IGRpZ3JhcGhzIGRpc3BsYXkgZGVsZXRlbCBkanVtcCBkbGlzdCBkb2F1dG9jbWQgZG9hdXRvYWxsIGRlbGV0ZXAgZHJvcCBkc2VhcmNoIGRzcGxpdCBlZGl0IGVhcmxpZXIgZWNobyBlY2hvZXJyIGVjaG9obCBlY2hvbXNnIGVsc2UgZWxzZWlmIGVtZW51IGVuZGlmIGVuZGZvciBlbmRmdW5jdGlvbiBlbmR0cnkgZW5kd2hpbGUgZW5ldyBleGVjdXRlIGV4aXQgZXh1c2FnZSBmaWxlIGZpbGV0eXBlIGZpbmQgZmluYWxseSBmaW5pc2ggZmlyc3QgZml4ZGVsIGZvbGQgZm9sZGNsb3NlIGZvbGRkb29wZW4gZm9sZGRvY2xvc2VkIGZvbGRvcGVuIGZ1bmN0aW9uIGdsb2JhbCBnb3RvIGdyZXAgZ3JlcGFkZCBndWkgZ3ZpbSBoYXJkY29weSBoZWxwIGhlbHBmaW5kIGhlbHBncmVwIGhlbHB0YWdzIGhpZ2hsaWdodCBoaWRlIGhpc3RvcnkgaW5zZXJ0IGlhYmJyZXYgaWFiY2xlYXIgaWp1bXAgaWxpc3QgaW1hcCBpbWFwY2xlYXIgaW1lbnUgaW5vcmVtYXAgaW5vcmVhYmJyZXYgaW5vcmVtZW51IGludHJvIGlzZWFyY2ggaXNwbGl0IGl1bm1hcCBpdW5hYmJyZXYgaXVubWVudSBqb2luIGp1bXBzIGtlZXBhbHQga2VlcG1hcmtzIGtlZXBqdW1wcyBsTmV4dCBsTmZpbGUgbGlzdCBsYWRkZXhwciBsYWRkYnVmZmVyIGxhZGRmaWxlIGxhc3QgbGFuZ3VhZ2UgbGF0ZXIgbGJ1ZmZlciBsY2QgbGNoZGlyIGxjbG9zZSBsY3Njb3BlIGxlZnQgbGVmdGFib3ZlIGxleHByIGxmaWxlIGxmaXJzdCBsZ2V0YnVmZmVyIGxnZXRleHByIGxnZXRmaWxlIGxncmVwIGxncmVwYWRkIGxoZWxwZ3JlcCBsbGFzdCBsbGlzdCBsbWFrZSBsbWFwIGxtYXBjbGVhciBsbmV4dCBsbmV3ZXIgbG5maWxlIGxub3JlbWFwIGxvYWRrZXltYXAgbG9hZHZpZXcgbG9ja21hcmtzIGxvY2t2YXIgbG9sZGVyIGxvcGVuIGxwcmV2aW91cyBscGZpbGUgbHJld2luZCBsdGFnIGx1bm1hcCBsdWFkbyBsdWFmaWxlIGx2aW1ncmVwIGx2aW1ncmVwYWRkIGx3aW5kb3cgbW92ZSBtYXJrIG1ha2UgbWFwY2xlYXIgbWF0Y2ggbWVudSBtZW51dHJhbnNsYXRlIG1lc3NhZ2VzIG1rZXhyYyBta3Nlc3Npb24gbWtzcGVsbCBta3ZpbXJjIG1rdmlldyBtb2RlIG16c2NoZW1lIG16ZmlsZSBuYmNsb3NlIG5ia2V5IG5ic2FydCBuZXh0IG5tYXAgbm1hcGNsZWFyIG5tZW51IG5ub3JlbWFwIG5ub3JlbWVudSBub2F1dG9jbWQgbm9yZW1hcCBub2hsc2VhcmNoIG5vcmVhYmJyZXYgbm9yZW1lbnUgbm9ybWFsIG51bWJlciBudW5tYXAgbnVubWVudSBvbGRmaWxlcyBvcGVuIG9tYXAgb21hcGNsZWFyIG9tZW51IG9ubHkgb25vcmVtYXAgb25vcmVtZW51IG9wdGlvbnMgb3VubWFwIG91bm1lbnUgb3duc3ludGF4IHByaW50IHByb2ZkZWwgcHJvZmlsZSBwcm9tcHRmaW5kIHByb21wdHJlcGwgcGNsb3NlIHBlZGl0IHBlcmwgcGVybGRvIHBvcCBwb3B1cCBwcG9wIHByZXNlcnZlIHByZXZpb3VzIHBzZWFyY2ggcHRhZyBwdE5leHQgcHRmaXJzdCBwdGp1bXAgcHRsYXN0IHB0bmV4dCBwdHByZXZpb3VzIHB0cmV3aW5kIHB0c2VsZWN0IHB1dCBwd2QgcHkzZG8gcHkzZmlsZSBweXRob24gcHlkbyBweWZpbGUgcXVpdCBxdWl0YWxsIHFhbGwgcmVhZCByZWNvdmVyIHJlZG8gcmVkaXIgcmVkcmF3IHJlZHJhd3N0YXR1cyByZWdpc3RlcnMgcmVzaXplIHJldGFiIHJldHVybiByZXdpbmQgcmlnaHQgcmlnaHRiZWxvdyBydWJ5IHJ1YnlkbyBydWJ5ZmlsZSBydW5kbyBydW50aW1lIHJ2aW1pbmZvIHN1YnN0aXR1dGUgc05leHQgc2FuZGJveCBzYXJndW1lbnQgc2FsbCBzYXZlYXMgc2J1ZmZlciBzYk5leHQgc2JhbGwgc2JmaXJzdCBzYmxhc3Qgc2Jtb2RpZmllZCBzYm5leHQgc2JwcmV2aW91cyBzYnJld2luZCBzY3JpcHRuYW1lcyBzY3JpcHRlbmNvZGluZyBzY3Njb3BlIHNldCBzZXRmaWxldHlwZSBzZXRnbG9iYWwgc2V0bG9jYWwgc2ZpbmQgc2ZpcnN0IHNoZWxsIHNpbWFsdCBzaWduIHNpbGVudCBzbGVlcCBzbGFzdCBzbWFnaWMgc21hcGNsZWFyIHNtZW51IHNuZXh0IHNuaWZmIHNub21hZ2ljIHNub3JlbWFwIHNub3JlbWVudSBzb3J0IHNvdXJjZSBzcGVsbGR1bXAgc3BlbGxnb29kIHNwZWxsaW5mbyBzcGVsbHJlcGFsbCBzcGVsbHVuZG8gc3BlbGx3cm9uZyBzcGxpdCBzcHJldmlvdXMgc3Jld2luZCBzdG9wIHN0YWcgc3RhcnRncmVwbGFjZSBzdGFydHJlcGxhY2Ugc3RhcnRpbnNlcnQgc3RvcGluc2VydCBzdGp1bXAgc3RzZWxlY3Qgc3VuaGlkZSBzdW5tYXAgc3VubWVudSBzdXNwZW5kIHN2aWV3IHN3YXBuYW1lIHN5bnRheCBzeW50aW1lIHN5bmNiaW5kIHROZXh0IHRhYk5leHQgdGFiY2xvc2UgdGFiZWRpdCB0YWJmaW5kIHRhYmZpcnN0IHRhYmxhc3QgdGFibW92ZSB0YWJuZXh0IHRhYm9ubHkgdGFicHJldmlvdXMgdGFicmV3aW5kIHRhZyB0Y2wgdGNsZG8gdGNsZmlsZSB0ZWFyb2ZmIHRmaXJzdCB0aHJvdyB0anVtcCB0bGFzdCB0bWVudSB0bmV4dCB0b3BsZWZ0IHRwcmV2aW91cyB0cmV3aW5kIHRzZWxlY3QgdHVubWVudSB1bmRvIHVuZG9qb2luIHVuZG9saXN0IHVuYWJicmV2aWF0ZSB1bmhpZGUgdW5sZXQgdW5sb2NrdmFyIHVubWFwIHVubWVudSB1bnNpbGVudCB1cGRhdGUgdmdsb2JhbCB2ZXJzaW9uIHZlcmJvc2UgdmVydGljYWwgdmltZ3JlcCB2aW1ncmVwYWRkIHZpc3VhbCB2aXVzYWdlIHZpZXcgdm1hcCB2bWFwY2xlYXIgdm1lbnUgdm5ldyB2bm9yZW1hcCB2bm9yZW1lbnUgdnNwbGl0IHZ1bm1hcCB2dW5tZW51IHdyaXRlIHdOZXh0IHdhbGwgd2hpbGUgd2luc2l6ZSB3aW5jbWQgd2lucG9zIHduZXh0IHdwcmV2aW91cyB3cWFsbCB3c3ZlcmIgd3VuZG8gd3ZpbWluZm8geGl0IHhhbGwgeG1hcGNsZWFyIHhtYXAgeG1lbnUgeG5vcmVtYXAgeG5vcmVtZW51IHh1bm1hcCB4dW5tZW51IHlhbmtcIixidWlsdF9pbjpcImFicyBhY29zIGFkZCBhbmQgYXBwZW5kIGFyZ2MgYXJnaWR4IGFyZ3YgYXNpbiBhdGFuIGF0YW4yIGJyb3dzZSBicm93c2VkaXIgYnVmZXhpc3RzIGJ1Zmxpc3RlZCBidWZsb2FkZWQgYnVmbmFtZSBidWZuciBidWZ3aW5uciBieXRlMmxpbmUgYnl0ZWlkeCBjYWxsIGNlaWwgY2hhbmdlbnIgY2hhcjJuciBjaW5kZW50IGNsZWFybWF0Y2hlcyBjb2wgY29tcGxldGUgY29tcGxldGVfYWRkIGNvbXBsZXRlX2NoZWNrIGNvbmZpcm0gY29weSBjb3MgY29zaCBjb3VudCBjc2NvcGVfY29ubmVjdGlvbiBjdXJzb3IgZGVlcGNvcHkgZGVsZXRlIGRpZF9maWxldHlwZSBkaWZmX2ZpbGxlciBkaWZmX2hsSUQgZW1wdHkgZXNjYXBlIGV2YWwgZXZlbnRoYW5kbGVyIGV4ZWN1dGFibGUgZXhpc3RzIGV4cCBleHBhbmQgZXh0ZW5kIGZlZWRrZXlzIGZpbGVyZWFkYWJsZSBmaWxld3JpdGFibGUgZmlsdGVyIGZpbmRkaXIgZmluZGZpbGUgZmxvYXQybnIgZmxvb3IgZm1vZCBmbmFtZWVzY2FwZSBmbmFtZW1vZGlmeSBmb2xkY2xvc2VkIGZvbGRjbG9zZWRlbmQgZm9sZGxldmVsIGZvbGR0ZXh0IGZvbGR0ZXh0cmVzdWx0IGZvcmVncm91bmQgZnVuY3Rpb24gZ2FyYmFnZWNvbGxlY3QgZ2V0IGdldGJ1ZmxpbmUgZ2V0YnVmdmFyIGdldGNoYXIgZ2V0Y2hhcm1vZCBnZXRjbWRsaW5lIGdldGNtZHBvcyBnZXRjbWR0eXBlIGdldGN3ZCBnZXRmb250bmFtZSBnZXRmcGVybSBnZXRmc2l6ZSBnZXRmdGltZSBnZXRmdHlwZSBnZXRsaW5lIGdldGxvY2xpc3QgZ2V0bWF0Y2hlcyBnZXRwaWQgZ2V0cG9zIGdldHFmbGlzdCBnZXRyZWcgZ2V0cmVndHlwZSBnZXR0YWJ2YXIgZ2V0dGFid2ludmFyIGdldHdpbnBvc3ggZ2V0d2lucG9zeSBnZXR3aW52YXIgZ2xvYiBnbG9icGF0aCBoYXMgaGFzX2tleSBoYXNsb2NhbGRpciBoYXNtYXB0byBoaXN0YWRkIGhpc3RkZWwgaGlzdGdldCBoaXN0bnIgaGxleGlzdHMgaGxJRCBob3N0bmFtZSBpY29udiBpbmRlbnQgaW5kZXggaW5wdXQgaW5wdXRkaWFsb2cgaW5wdXRsaXN0IGlucHV0cmVzdG9yZSBpbnB1dHNhdmUgaW5wdXRzZWNyZXQgaW5zZXJ0IGludmVydCBpc2RpcmVjdG9yeSBpc2xvY2tlZCBpdGVtcyBqb2luIGtleXMgbGVuIGxpYmNhbGwgbGliY2FsbG5yIGxpbmUgbGluZTJieXRlIGxpc3BpbmRlbnQgbG9jYWx0aW1lIGxvZyBsb2cxMCBsdWFldmFsIG1hcCBtYXBhcmcgbWFwY2hlY2sgbWF0Y2ggbWF0Y2hhZGQgbWF0Y2hhcmcgbWF0Y2hkZWxldGUgbWF0Y2hlbmQgbWF0Y2hsaXN0IG1hdGNoc3RyIG1heCBtaW4gbWtkaXIgbW9kZSBtemV2YWwgbmV4dG5vbmJsYW5rIG5yMmNoYXIgb3IgcGF0aHNob3J0ZW4gcG93IHByZXZub25ibGFuayBwcmludGYgcHVtdmlzaWJsZSBweTNldmFsIHB5ZXZhbCByYW5nZSByZWFkZmlsZSByZWx0aW1lIHJlbHRpbWVzdHIgcmVtb3RlX2V4cHIgcmVtb3RlX2ZvcmVncm91bmQgcmVtb3RlX3BlZWsgcmVtb3RlX3JlYWQgcmVtb3RlX3NlbmQgcmVtb3ZlIHJlbmFtZSByZXBlYXQgcmVzb2x2ZSByZXZlcnNlIHJvdW5kIHNjcmVlbmF0dHIgc2NyZWVuY2hhciBzY3JlZW5jb2wgc2NyZWVucm93IHNlYXJjaCBzZWFyY2hkZWNsIHNlYXJjaHBhaXIgc2VhcmNocGFpcnBvcyBzZWFyY2hwb3Mgc2VydmVyMmNsaWVudCBzZXJ2ZXJsaXN0IHNldGJ1ZnZhciBzZXRjbWRwb3Mgc2V0bGluZSBzZXRsb2NsaXN0IHNldG1hdGNoZXMgc2V0cG9zIHNldHFmbGlzdCBzZXRyZWcgc2V0dGFidmFyIHNldHRhYndpbnZhciBzZXR3aW52YXIgc2hhMjU2IHNoZWxsZXNjYXBlIHNoaWZ0d2lkdGggc2ltcGxpZnkgc2luIHNpbmggc29ydCBzb3VuZGZvbGQgc3BlbGxiYWR3b3JkIHNwZWxsc3VnZ2VzdCBzcGxpdCBzcXJ0IHN0cjJmbG9hdCBzdHIybnIgc3RyY2hhcnMgc3RyZGlzcGxheXdpZHRoIHN0cmZ0aW1lIHN0cmlkeCBzdHJpbmcgc3RybGVuIHN0cnBhcnQgc3RycmlkeCBzdHJ0cmFucyBzdHJ3aWR0aCBzdWJtYXRjaCBzdWJzdGl0dXRlIHN5bmNvbmNlYWxlZCBzeW5JRCBzeW5JRGF0dHIgc3luSUR0cmFucyBzeW5zdGFjayBzeXN0ZW0gdGFicGFnZWJ1Zmxpc3QgdGFicGFnZW5yIHRhYnBhZ2V3aW5uciB0YWdmaWxlcyB0YWdsaXN0IHRhbiB0YW5oIHRlbXBuYW1lIHRvbG93ZXIgdG91cHBlciB0ciB0cnVuYyB0eXBlIHVuZG9maWxlIHVuZG90cmVlIHZhbHVlcyB2aXJ0Y29sIHZpc3VhbG1vZGUgd2lsZG1lbnVtb2RlIHdpbmJ1Zm5yIHdpbmNvbCB3aW5oZWlnaHQgd2lubGluZSB3aW5uciB3aW5yZXN0Y21kIHdpbnJlc3R2aWV3IHdpbnNhdmV2aWV3IHdpbndpZHRoIHdyaXRlZmlsZSB4b3JcIn0saTovW3s6XS8sYzpbZS5OTSxlLkFTTSx7Y046XCJzdHJpbmdcIixiOi9cIigoXFxcXFwiKXxbXlwiXFxuXSkqKFwifFxcbikvfSx7Y046XCJ2YXJpYWJsZVwiLGI6L1tid3RnbHNhdl06W1xcd1xcZF9dKi99LHtjTjpcImZ1bmN0aW9uXCIsYks6XCJmdW5jdGlvbiBmdW5jdGlvbiFcIixlOlwiJFwiLHI6MCxjOltlLlRNLHtjTjpcInBhcmFtc1wiLGI6XCJcXFxcKFwiLGU6XCJcXFxcKVwifV19XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJ0eXBlc2NyaXB0XCIsZnVuY3Rpb24oZSl7cmV0dXJue2FsaWFzZXM6W1widHNcIl0sazp7a2V5d29yZDpcImluIGlmIGZvciB3aGlsZSBmaW5hbGx5IHZhciBuZXcgZnVuY3Rpb258MCBkbyByZXR1cm4gdm9pZCBlbHNlIGJyZWFrIGNhdGNoIGluc3RhbmNlb2Ygd2l0aCB0aHJvdyBjYXNlIGRlZmF1bHQgdHJ5IHRoaXMgc3dpdGNoIGNvbnRpbnVlIHR5cGVvZiBkZWxldGUgbGV0IHlpZWxkIGNvbnN0IGNsYXNzIHB1YmxpYyBwcml2YXRlIGdldCBzZXQgc3VwZXIgaW50ZXJmYWNlIGV4dGVuZHNzdGF0aWMgY29uc3RydWN0b3IgaW1wbGVtZW50cyBlbnVtIGV4cG9ydCBpbXBvcnQgZGVjbGFyZVwiLGxpdGVyYWw6XCJ0cnVlIGZhbHNlIG51bGwgdW5kZWZpbmVkIE5hTiBJbmZpbml0eVwiLGJ1aWx0X2luOlwiZXZhbCBpc0Zpbml0ZSBpc05hTiBwYXJzZUZsb2F0IHBhcnNlSW50IGRlY29kZVVSSSBkZWNvZGVVUklDb21wb25lbnQgZW5jb2RlVVJJIGVuY29kZVVSSUNvbXBvbmVudCBlc2NhcGUgdW5lc2NhcGUgT2JqZWN0IEZ1bmN0aW9uIEJvb2xlYW4gRXJyb3IgRXZhbEVycm9yIEludGVybmFsRXJyb3IgUmFuZ2VFcnJvciBSZWZlcmVuY2VFcnJvciBTdG9wSXRlcmF0aW9uIFN5bnRheEVycm9yIFR5cGVFcnJvciBVUklFcnJvciBOdW1iZXIgTWF0aCBEYXRlIFN0cmluZyBSZWdFeHAgQXJyYXkgRmxvYXQzMkFycmF5IEZsb2F0NjRBcnJheSBJbnQxNkFycmF5IEludDMyQXJyYXkgSW50OEFycmF5IFVpbnQxNkFycmF5IFVpbnQzMkFycmF5IFVpbnQ4QXJyYXkgVWludDhDbGFtcGVkQXJyYXkgQXJyYXlCdWZmZXIgRGF0YVZpZXcgSlNPTiBJbnRsIGFyZ3VtZW50cyByZXF1aXJlIG1vZHVsZSBjb25zb2xlIHdpbmRvdyBkb2N1bWVudCBhbnkgbnVtYmVyIGJvb2xlYW4gc3RyaW5nIHZvaWRcIn0sYzpbe2NOOlwicGlcIixiOi9eXFxzKignfFwiKXVzZSBzdHJpY3QoJ3xcIikvLHI6MH0sZS5BU00sZS5RU00sZS5DTENNLGUuQ0JDTSxlLkNOTSx7YjpcIihcIitlLlJTUitcInxcXFxcYihjYXNlfHJldHVybnx0aHJvdylcXFxcYilcXFxccypcIixrOlwicmV0dXJuIHRocm93IGNhc2VcIixjOltlLkNMQ00sZS5DQkNNLGUuUk0se2I6LzwvLGU6Lz47LyxyOjAsc0w6XCJ4bWxcIn1dLHI6MH0se2NOOlwiZnVuY3Rpb25cIixiSzpcImZ1bmN0aW9uXCIsZTovXFx7LyxlRTohMCxjOltlLmluaGVyaXQoZS5UTSx7YjovW0EtWmEteiRfXVswLTlBLVphLXokX10qL30pLHtjTjpcInBhcmFtc1wiLGI6L1xcKC8sZTovXFwpLyxjOltlLkNMQ00sZS5DQkNNXSxpOi9bXCInXFwoXS99XSxpOi9cXFt8JS8scjowfSx7Y046XCJjb25zdHJ1Y3RvclwiLGJLOlwiY29uc3RydWN0b3JcIixlOi9cXHsvLGVFOiEwLHI6MTB9LHtjTjpcIm1vZHVsZVwiLGJLOlwibW9kdWxlXCIsZTovXFx7LyxlRTohMH0se2NOOlwiaW50ZXJmYWNlXCIsYks6XCJpbnRlcmZhY2VcIixlOi9cXHsvLGVFOiEwfSx7YjovXFwkWyguXS99LHtiOlwiXFxcXC5cIitlLklSLHI6MH1dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcImphdmFzY3JpcHRcIixmdW5jdGlvbihyKXtyZXR1cm57YWxpYXNlczpbXCJqc1wiXSxrOntrZXl3b3JkOlwiaW4gaWYgZm9yIHdoaWxlIGZpbmFsbHkgdmFyIG5ldyBmdW5jdGlvbiBkbyByZXR1cm4gdm9pZCBlbHNlIGJyZWFrIGNhdGNoIGluc3RhbmNlb2Ygd2l0aCB0aHJvdyBjYXNlIGRlZmF1bHQgdHJ5IHRoaXMgc3dpdGNoIGNvbnRpbnVlIHR5cGVvZiBkZWxldGUgbGV0IHlpZWxkIGNvbnN0IGNsYXNzXCIsbGl0ZXJhbDpcInRydWUgZmFsc2UgbnVsbCB1bmRlZmluZWQgTmFOIEluZmluaXR5XCIsYnVpbHRfaW46XCJldmFsIGlzRmluaXRlIGlzTmFOIHBhcnNlRmxvYXQgcGFyc2VJbnQgZGVjb2RlVVJJIGRlY29kZVVSSUNvbXBvbmVudCBlbmNvZGVVUkkgZW5jb2RlVVJJQ29tcG9uZW50IGVzY2FwZSB1bmVzY2FwZSBPYmplY3QgRnVuY3Rpb24gQm9vbGVhbiBFcnJvciBFdmFsRXJyb3IgSW50ZXJuYWxFcnJvciBSYW5nZUVycm9yIFJlZmVyZW5jZUVycm9yIFN0b3BJdGVyYXRpb24gU3ludGF4RXJyb3IgVHlwZUVycm9yIFVSSUVycm9yIE51bWJlciBNYXRoIERhdGUgU3RyaW5nIFJlZ0V4cCBBcnJheSBGbG9hdDMyQXJyYXkgRmxvYXQ2NEFycmF5IEludDE2QXJyYXkgSW50MzJBcnJheSBJbnQ4QXJyYXkgVWludDE2QXJyYXkgVWludDMyQXJyYXkgVWludDhBcnJheSBVaW50OENsYW1wZWRBcnJheSBBcnJheUJ1ZmZlciBEYXRhVmlldyBKU09OIEludGwgYXJndW1lbnRzIHJlcXVpcmUgbW9kdWxlIGNvbnNvbGUgd2luZG93IGRvY3VtZW50XCJ9LGM6W3tjTjpcInBpXCIscjoxMCx2Olt7YjovXlxccyooJ3xcIil1c2Ugc3RyaWN0KCd8XCIpL30se2I6L15cXHMqKCd8XCIpdXNlIGFzbSgnfFwiKS99XX0sci5BU00sci5RU00sci5DTENNLHIuQ0JDTSxyLkNOTSx7YjpcIihcIityLlJTUitcInxcXFxcYihjYXNlfHJldHVybnx0aHJvdylcXFxcYilcXFxccypcIixrOlwicmV0dXJuIHRocm93IGNhc2VcIixjOltyLkNMQ00sci5DQkNNLHIuUk0se2I6LzwvLGU6Lz47LyxyOjAsc0w6XCJ4bWxcIn1dLHI6MH0se2NOOlwiZnVuY3Rpb25cIixiSzpcImZ1bmN0aW9uXCIsZTovXFx7LyxlRTohMCxjOltyLmluaGVyaXQoci5UTSx7YjovW0EtWmEteiRfXVswLTlBLVphLXokX10qL30pLHtjTjpcInBhcmFtc1wiLGI6L1xcKC8sZTovXFwpLyxjOltyLkNMQ00sci5DQkNNXSxpOi9bXCInXFwoXS99XSxpOi9cXFt8JS99LHtiOi9cXCRbKC5dL30se2I6XCJcXFxcLlwiK3IuSVIscjowfV19fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwibHVhXCIsZnVuY3Rpb24oZSl7dmFyIHQ9XCJcXFxcWz0qXFxcXFtcIixhPVwiXFxcXF09KlxcXFxdXCIscj17Yjp0LGU6YSxjOltcInNlbGZcIl19LG49W3tjTjpcImNvbW1lbnRcIixiOlwiLS0oPyFcIit0K1wiKVwiLGU6XCIkXCJ9LHtjTjpcImNvbW1lbnRcIixiOlwiLS1cIit0LGU6YSxjOltyXSxyOjEwfV07cmV0dXJue2w6ZS5VSVIsazp7a2V5d29yZDpcImFuZCBicmVhayBkbyBlbHNlIGVsc2VpZiBlbmQgZmFsc2UgZm9yIGlmIGluIGxvY2FsIG5pbCBub3Qgb3IgcmVwZWF0IHJldHVybiB0aGVuIHRydWUgdW50aWwgd2hpbGVcIixidWlsdF9pbjpcIl9HIF9WRVJTSU9OIGFzc2VydCBjb2xsZWN0Z2FyYmFnZSBkb2ZpbGUgZXJyb3IgZ2V0ZmVudiBnZXRtZXRhdGFibGUgaXBhaXJzIGxvYWQgbG9hZGZpbGUgbG9hZHN0cmluZyBtb2R1bGUgbmV4dCBwYWlycyBwY2FsbCBwcmludCByYXdlcXVhbCByYXdnZXQgcmF3c2V0IHJlcXVpcmUgc2VsZWN0IHNldGZlbnYgc2V0bWV0YXRhYmxlIHRvbnVtYmVyIHRvc3RyaW5nIHR5cGUgdW5wYWNrIHhwY2FsbCBjb3JvdXRpbmUgZGVidWcgaW8gbWF0aCBvcyBwYWNrYWdlIHN0cmluZyB0YWJsZVwifSxjOm4uY29uY2F0KFt7Y046XCJmdW5jdGlvblwiLGJLOlwiZnVuY3Rpb25cIixlOlwiXFxcXClcIixjOltlLmluaGVyaXQoZS5UTSx7YjpcIihbX2EtekEtWl1cXFxcdypcXFxcLikqKFtfYS16QS1aXVxcXFx3KjopP1tfYS16QS1aXVxcXFx3KlwifSkse2NOOlwicGFyYW1zXCIsYjpcIlxcXFwoXCIsZVc6ITAsYzpufV0uY29uY2F0KG4pfSxlLkNOTSxlLkFTTSxlLlFTTSx7Y046XCJzdHJpbmdcIixiOnQsZTphLGM6W3JdLHI6NX1dKX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJkamFuZ29cIixmdW5jdGlvbigpe3ZhciBlPXtjTjpcImZpbHRlclwiLGI6L1xcfFtBLVphLXpdK1xcOj8vLGs6XCJ0cnVuY2F0ZXdvcmRzIHJlbW92ZXRhZ3MgbGluZWJyZWFrc2JyIHllc25vIGdldF9kaWdpdCB0aW1lc2luY2UgcmFuZG9tIHN0cmlwdGFncyBmaWxlc2l6ZWZvcm1hdCBlc2NhcGUgbGluZWJyZWFrcyBsZW5ndGhfaXMgbGp1c3Qgcmp1c3QgY3V0IHVybGl6ZSBmaXhfYW1wZXJzYW5kcyB0aXRsZSBmbG9hdGZvcm1hdCBjYXBmaXJzdCBwcHJpbnQgZGl2aXNpYmxlYnkgYWRkIG1ha2VfbGlzdCB1bm9yZGVyZWRfbGlzdCB1cmxlbmNvZGUgdGltZXVudGlsIHVybGl6ZXRydW5jIHdvcmRjb3VudCBzdHJpbmdmb3JtYXQgbGluZW51bWJlcnMgc2xpY2UgZGF0ZSBkaWN0c29ydCBkaWN0c29ydHJldmVyc2VkIGRlZmF1bHRfaWZfbm9uZSBwbHVyYWxpemUgbG93ZXIgam9pbiBjZW50ZXIgZGVmYXVsdCB0cnVuY2F0ZXdvcmRzX2h0bWwgdXBwZXIgbGVuZ3RoIHBob25lMm51bWVyaWMgd29yZHdyYXAgdGltZSBhZGRzbGFzaGVzIHNsdWdpZnkgZmlyc3QgZXNjYXBlanMgZm9yY2VfZXNjYXBlIGlyaWVuY29kZSBsYXN0IHNhZmUgc2FmZXNlcSB0cnVuY2F0ZWNoYXJzIGxvY2FsaXplIHVubG9jYWxpemUgbG9jYWx0aW1lIHV0YyB0aW1lem9uZVwiLGM6W3tjTjpcImFyZ3VtZW50XCIsYjovXCIvLGU6L1wiL30se2NOOlwiYXJndW1lbnRcIixiOi8nLyxlOi8nL31dfTtyZXR1cm57YWxpYXNlczpbXCJqaW5qYVwiXSxjSTohMCxzTDpcInhtbFwiLHN1Ykxhbmd1YWdlTW9kZTpcImNvbnRpbnVvdXNcIixjOlt7Y046XCJjb21tZW50XCIsYjovXFx7JVxccypjb21tZW50XFxzKiV9LyxlOi9cXHslXFxzKmVuZGNvbW1lbnRcXHMqJX0vfSx7Y046XCJjb21tZW50XCIsYjovXFx7Iy8sZTovI30vfSx7Y046XCJ0ZW1wbGF0ZV90YWdcIixiOi9cXHslLyxlOi8lfS8sazpcImNvbW1lbnQgZW5kY29tbWVudCBsb2FkIHRlbXBsYXRldGFnIGlmY2hhbmdlZCBlbmRpZmNoYW5nZWQgaWYgZW5kaWYgZmlyc3RvZiBmb3IgZW5kZm9yIGluIGlmbm90ZXF1YWwgZW5kaWZub3RlcXVhbCB3aWR0aHJhdGlvIGV4dGVuZHMgaW5jbHVkZSBzcGFjZWxlc3MgZW5kc3BhY2VsZXNzIHJlZ3JvdXAgYnkgYXMgaWZlcXVhbCBlbmRpZmVxdWFsIHNzaSBub3cgd2l0aCBjeWNsZSB1cmwgZmlsdGVyIGVuZGZpbHRlciBkZWJ1ZyBibG9jayBlbmRibG9jayBlbHNlIGF1dG9lc2NhcGUgZW5kYXV0b2VzY2FwZSBjc3JmX3Rva2VuIGVtcHR5IGVsaWYgZW5kd2l0aCBzdGF0aWMgdHJhbnMgYmxvY2t0cmFucyBlbmRibG9ja3RyYW5zIGdldF9zdGF0aWNfcHJlZml4IGdldF9tZWRpYV9wcmVmaXggcGx1cmFsIGdldF9jdXJyZW50X2xhbmd1YWdlIGxhbmd1YWdlIGdldF9hdmFpbGFibGVfbGFuZ3VhZ2VzIGdldF9jdXJyZW50X2xhbmd1YWdlX2JpZGkgZ2V0X2xhbmd1YWdlX2luZm8gZ2V0X2xhbmd1YWdlX2luZm9fbGlzdCBsb2NhbGl6ZSBlbmRsb2NhbGl6ZSBsb2NhbHRpbWUgZW5kbG9jYWx0aW1lIHRpbWV6b25lIGVuZHRpbWV6b25lIGdldF9jdXJyZW50X3RpbWV6b25lIHZlcmJhdGltXCIsYzpbZV19LHtjTjpcInZhcmlhYmxlXCIsYjovXFx7XFx7LyxlOi99fS8sYzpbZV19XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJzY2hlbWVcIixmdW5jdGlvbihlKXt2YXIgdD1cIlteXFxcXChcXFxcKVxcXFxbXFxcXF1cXFxce1xcXFx9XFxcIiwnYDsjfFxcXFxcXFxcXFxcXHNdK1wiLHI9XCIoXFxcXC18XFxcXCspP1xcXFxkKyhbLi9dXFxcXGQrKT9cIixpPXIrXCJbK1xcXFwtXVwiK3IrXCJpXCIsYT17YnVpbHRfaW46XCJjYXNlLWxhbWJkYSBjYWxsL2NjIGNsYXNzIGRlZmluZS1jbGFzcyBleGl0LWhhbmRsZXIgZmllbGQgaW1wb3J0IGluaGVyaXQgaW5pdC1maWVsZCBpbnRlcmZhY2UgbGV0Ki12YWx1ZXMgbGV0LXZhbHVlcyBsZXQvZWMgbWl4aW4gb3B0LWxhbWJkYSBvdmVycmlkZSBwcm90ZWN0IHByb3ZpZGUgcHVibGljIHJlbmFtZSByZXF1aXJlIHJlcXVpcmUtZm9yLXN5bnRheCBzeW50YXggc3ludGF4LWNhc2Ugc3ludGF4LWVycm9yIHVuaXQvc2lnIHVubGVzcyB3aGVuIHdpdGgtc3ludGF4IGFuZCBiZWdpbiBjYWxsLXdpdGgtY3VycmVudC1jb250aW51YXRpb24gY2FsbC13aXRoLWlucHV0LWZpbGUgY2FsbC13aXRoLW91dHB1dC1maWxlIGNhc2UgY29uZCBkZWZpbmUgZGVmaW5lLXN5bnRheCBkZWxheSBkbyBkeW5hbWljLXdpbmQgZWxzZSBmb3ItZWFjaCBpZiBsYW1iZGEgbGV0IGxldCogbGV0LXN5bnRheCBsZXRyZWMgbGV0cmVjLXN5bnRheCBtYXAgb3Igc3ludGF4LXJ1bGVzICcgKiArICwgLEAgLSAuLi4gLyA7IDwgPD0gPSA9PiA+ID49IGAgYWJzIGFjb3MgYW5nbGUgYXBwZW5kIGFwcGx5IGFzaW4gYXNzb2MgYXNzcSBhc3N2IGF0YW4gYm9vbGVhbj8gY2FhciBjYWRyIGNhbGwtd2l0aC1pbnB1dC1maWxlIGNhbGwtd2l0aC1vdXRwdXQtZmlsZSBjYWxsLXdpdGgtdmFsdWVzIGNhciBjZGRkYXIgY2RkZGRyIGNkciBjZWlsaW5nIGNoYXItPmludGVnZXIgY2hhci1hbHBoYWJldGljPyBjaGFyLWNpPD0/IGNoYXItY2k8PyBjaGFyLWNpPT8gY2hhci1jaT49PyBjaGFyLWNpPj8gY2hhci1kb3duY2FzZSBjaGFyLWxvd2VyLWNhc2U/IGNoYXItbnVtZXJpYz8gY2hhci1yZWFkeT8gY2hhci11cGNhc2UgY2hhci11cHBlci1jYXNlPyBjaGFyLXdoaXRlc3BhY2U/IGNoYXI8PT8gY2hhcjw/IGNoYXI9PyBjaGFyPj0/IGNoYXI+PyBjaGFyPyBjbG9zZS1pbnB1dC1wb3J0IGNsb3NlLW91dHB1dC1wb3J0IGNvbXBsZXg/IGNvbnMgY29zIGN1cnJlbnQtaW5wdXQtcG9ydCBjdXJyZW50LW91dHB1dC1wb3J0IGRlbm9taW5hdG9yIGRpc3BsYXkgZW9mLW9iamVjdD8gZXE/IGVxdWFsPyBlcXY/IGV2YWwgZXZlbj8gZXhhY3QtPmluZXhhY3QgZXhhY3Q/IGV4cCBleHB0IGZsb29yIGZvcmNlIGdjZCBpbWFnLXBhcnQgaW5leGFjdC0+ZXhhY3QgaW5leGFjdD8gaW5wdXQtcG9ydD8gaW50ZWdlci0+Y2hhciBpbnRlZ2VyPyBpbnRlcmFjdGlvbi1lbnZpcm9ubWVudCBsY20gbGVuZ3RoIGxpc3QgbGlzdC0+c3RyaW5nIGxpc3QtPnZlY3RvciBsaXN0LXJlZiBsaXN0LXRhaWwgbGlzdD8gbG9hZCBsb2cgbWFnbml0dWRlIG1ha2UtcG9sYXIgbWFrZS1yZWN0YW5ndWxhciBtYWtlLXN0cmluZyBtYWtlLXZlY3RvciBtYXggbWVtYmVyIG1lbXEgbWVtdiBtaW4gbW9kdWxvIG5lZ2F0aXZlPyBuZXdsaW5lIG5vdCBudWxsLWVudmlyb25tZW50IG51bGw/IG51bWJlci0+c3RyaW5nIG51bWJlcj8gbnVtZXJhdG9yIG9kZD8gb3Blbi1pbnB1dC1maWxlIG9wZW4tb3V0cHV0LWZpbGUgb3V0cHV0LXBvcnQ/IHBhaXI/IHBlZWstY2hhciBwb3J0PyBwb3NpdGl2ZT8gcHJvY2VkdXJlPyBxdWFzaXF1b3RlIHF1b3RlIHF1b3RpZW50IHJhdGlvbmFsPyByYXRpb25hbGl6ZSByZWFkIHJlYWQtY2hhciByZWFsLXBhcnQgcmVhbD8gcmVtYWluZGVyIHJldmVyc2Ugcm91bmQgc2NoZW1lLXJlcG9ydC1lbnZpcm9ubWVudCBzZXQhIHNldC1jYXIhIHNldC1jZHIhIHNpbiBzcXJ0IHN0cmluZyBzdHJpbmctPmxpc3Qgc3RyaW5nLT5udW1iZXIgc3RyaW5nLT5zeW1ib2wgc3RyaW5nLWFwcGVuZCBzdHJpbmctY2k8PT8gc3RyaW5nLWNpPD8gc3RyaW5nLWNpPT8gc3RyaW5nLWNpPj0/IHN0cmluZy1jaT4/IHN0cmluZy1jb3B5IHN0cmluZy1maWxsISBzdHJpbmctbGVuZ3RoIHN0cmluZy1yZWYgc3RyaW5nLXNldCEgc3RyaW5nPD0/IHN0cmluZzw/IHN0cmluZz0/IHN0cmluZz49PyBzdHJpbmc+PyBzdHJpbmc/IHN1YnN0cmluZyBzeW1ib2wtPnN0cmluZyBzeW1ib2w/IHRhbiB0cmFuc2NyaXB0LW9mZiB0cmFuc2NyaXB0LW9uIHRydW5jYXRlIHZhbHVlcyB2ZWN0b3IgdmVjdG9yLT5saXN0IHZlY3Rvci1maWxsISB2ZWN0b3ItbGVuZ3RoIHZlY3Rvci1yZWYgdmVjdG9yLXNldCEgd2l0aC1pbnB1dC1mcm9tLWZpbGUgd2l0aC1vdXRwdXQtdG8tZmlsZSB3cml0ZSB3cml0ZS1jaGFyIHplcm8/XCJ9LG49e2NOOlwic2hlYmFuZ1wiLGI6XCJeIyFcIixlOlwiJFwifSxjPXtjTjpcImxpdGVyYWxcIixiOlwiKCN0fCNmfCNcXFxcXFxcXFwiK3QrXCJ8I1xcXFxcXFxcLilcIn0sbD17Y046XCJudW1iZXJcIix2Olt7YjpyLHI6MH0se2I6aSxyOjB9LHtiOlwiI2JbMC0xXSsoL1swLTFdKyk/XCJ9LHtiOlwiI29bMC03XSsoL1swLTddKyk/XCJ9LHtiOlwiI3hbMC05YS1mXSsoL1swLTlhLWZdKyk/XCJ9XX0scz1lLlFTTSxvPXtjTjpcImNvbW1lbnRcIix2Olt7YjpcIjtcIixlOlwiJFwiLHI6MH0se2I6XCIjXFxcXHxcIixlOlwiXFxcXHwjXCJ9XX0sdT17Yjp0LHI6MH0scD17Y046XCJ2YXJpYWJsZVwiLGI6XCInXCIrdH0sZD17ZVc6ITAscjowfSxnPXtjTjpcImxpc3RcIix2Olt7YjpcIlxcXFwoXCIsZTpcIlxcXFwpXCJ9LHtiOlwiXFxcXFtcIixlOlwiXFxcXF1cIn1dLGM6W3tjTjpcImtleXdvcmRcIixiOnQsbDp0LGs6YX0sZF19O3JldHVybiBkLmM9W2MsbCxzLG8sdSxwLGddLHtpOi9cXFMvLGM6W24sbCxzLG8scCxnXX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJvY2FtbFwiLGZ1bmN0aW9uKGUpe3JldHVybnthbGlhc2VzOltcIm1sXCJdLGs6e2tleXdvcmQ6XCJhbmQgYXMgYXNzZXJ0IGFzciBiZWdpbiBjbGFzcyBjb25zdHJhaW50IGRvIGRvbmUgZG93bnRvIGVsc2UgZW5kIGV4Y2VwdGlvbiBleHRlcm5hbCBmb3IgZnVuIGZ1bmN0aW9uIGZ1bmN0b3IgaWYgaW4gaW5jbHVkZSBpbmhlcml0ISBpbmhlcml0IGluaXRpYWxpemVyIGxhbmQgbGF6eSBsZXQgbG9yIGxzbCBsc3IgbHhvciBtYXRjaCBtZXRob2QhfDEwIG1ldGhvZCBtb2QgbW9kdWxlIG11dGFibGUgbmV3IG9iamVjdCBvZiBvcGVuISBvcGVuIG9yIHByaXZhdGUgcmVjIHNpZyBzdHJ1Y3QgdGhlbiB0byB0cnkgdHlwZSB2YWwhIHZhbCB2aXJ0dWFsIHdoZW4gd2hpbGUgd2l0aCBwYXJzZXIgdmFsdWVcIixidWlsdF9pbjpcImFycmF5IGJvb2wgYnl0ZXMgY2hhciBleG58NSBmbG9hdCBpbnQgaW50MzIgaW50NjQgbGlzdCBsYXp5X3R8NSBuYXRpdmVpbnR8NSBzdHJpbmcgdW5pdCBpbl9jaGFubmVsIG91dF9jaGFubmVsIHJlZlwiLGxpdGVyYWw6XCJ0cnVlIGZhbHNlXCJ9LGk6L1xcL1xcL3w+Pi8sbDpcIlthLXpfXVxcXFx3KiE/XCIsYzpbe2NOOlwibGl0ZXJhbFwiLGI6XCJcXFxcWyhcXFxcfFxcXFx8KT9cXFxcXXxcXFxcKFxcXFwpXCJ9LHtjTjpcImNvbW1lbnRcIixiOlwiXFxcXChcXFxcKlwiLGU6XCJcXFxcKlxcXFwpXCIsYzpbXCJzZWxmXCJdfSx7Y046XCJzeW1ib2xcIixiOlwiJ1tBLVphLXpfXSg/IScpW1xcXFx3J10qXCJ9LHtjTjpcInRhZ1wiLGI6XCJgW0EtWl1bXFxcXHcnXSpcIn0se2NOOlwidHlwZVwiLGI6XCJcXFxcYltBLVpdW1xcXFx3J10qXCIscjowfSx7YjpcIlthLXpfXVxcXFx3KidbXFxcXHcnXSpcIn0sZS5pbmhlcml0KGUuQVNNLHtjTjpcImNoYXJcIixyOjB9KSxlLmluaGVyaXQoZS5RU00se2k6bnVsbH0pLHtjTjpcIm51bWJlclwiLGI6XCJcXFxcYigwW3hYXVthLWZBLUYwLTlfXStbTGxuXT98MFtvT11bMC03X10rW0xsbl0/fDBbYkJdWzAxX10rW0xsbl0/fFswLTldWzAtOV9dKihbTGxuXXwoXFxcXC5bMC05X10qKT8oW2VFXVstK10/WzAtOV9dKyk/KT8pXCIscjowfSx7YjovWy09XT4vfV19fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwicHl0aG9uXCIsZnVuY3Rpb24oZSl7dmFyIHI9e2NOOlwicHJvbXB0XCIsYjovXig+Pj58XFwuXFwuXFwuKSAvfSxiPXtjTjpcInN0cmluZ1wiLGM6W2UuQkVdLHY6W3tiOi8odXxiKT9yPycnJy8sZTovJycnLyxjOltyXSxyOjEwfSx7YjovKHV8Yik/cj9cIlwiXCIvLGU6L1wiXCJcIi8sYzpbcl0scjoxMH0se2I6Lyh1fHJ8dXIpJy8sZTovJy8scjoxMH0se2I6Lyh1fHJ8dXIpXCIvLGU6L1wiLyxyOjEwfSx7YjovKGJ8YnIpJy8sZTovJy99LHtiOi8oYnxicilcIi8sZTovXCIvfSxlLkFTTSxlLlFTTV19LGw9e2NOOlwibnVtYmVyXCIscjowLHY6W3tiOmUuQk5SK1wiW2xMakpdP1wifSx7YjpcIlxcXFxiKDBvWzAtN10rKVtsTGpKXT9cIn0se2I6ZS5DTlIrXCJbbExqSl0/XCJ9XX0sYz17Y046XCJwYXJhbXNcIixiOi9cXCgvLGU6L1xcKS8sYzpbXCJzZWxmXCIscixsLGJdfTtyZXR1cm57YWxpYXNlczpbXCJweVwiLFwiZ3lwXCJdLGs6e2tleXdvcmQ6XCJhbmQgZWxpZiBpcyBnbG9iYWwgYXMgaW4gaWYgZnJvbSByYWlzZSBmb3IgZXhjZXB0IGZpbmFsbHkgcHJpbnQgaW1wb3J0IHBhc3MgcmV0dXJuIGV4ZWMgZWxzZSBicmVhayBub3Qgd2l0aCBjbGFzcyBhc3NlcnQgeWllbGQgdHJ5IHdoaWxlIGNvbnRpbnVlIGRlbCBvciBkZWYgbGFtYmRhIG5vbmxvY2FsfDEwIE5vbmUgVHJ1ZSBGYWxzZVwiLGJ1aWx0X2luOlwiRWxsaXBzaXMgTm90SW1wbGVtZW50ZWRcIn0saTovKDxcXC98LT58XFw/KS8sYzpbcixsLGIsZS5IQ00se3Y6W3tjTjpcImZ1bmN0aW9uXCIsYks6XCJkZWZcIixyOjEwfSx7Y046XCJjbGFzc1wiLGJLOlwiY2xhc3NcIn1dLGU6LzovLGk6L1skez07XFxuXS8sYzpbZS5VVE0sY119LHtjTjpcImRlY29yYXRvclwiLGI6L0AvLGU6LyQvfSx7YjovXFxiKHByaW50fGV4ZWMpXFwoL31dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcImFwcGxlc2NyaXB0XCIsZnVuY3Rpb24oZSl7dmFyIHQ9ZS5pbmhlcml0KGUuUVNNLHtpOlwiXCJ9KSxyPXtjTjpcInBhcmFtc1wiLGI6XCJcXFxcKFwiLGU6XCJcXFxcKVwiLGM6W1wic2VsZlwiLGUuQ05NLHRdfSxvPVt7Y046XCJjb21tZW50XCIsYjpcIi0tXCIsZTpcIiRcIn0se2NOOlwiY29tbWVudFwiLGI6XCJcXFxcKFxcXFwqXCIsZTpcIlxcXFwqXFxcXClcIixjOltcInNlbGZcIix7YjpcIi0tXCIsZTpcIiRcIn1dfSxlLkhDTV07cmV0dXJue2FsaWFzZXM6W1wib3Nhc2NyaXB0XCJdLGs6e2tleXdvcmQ6XCJhYm91dCBhYm92ZSBhZnRlciBhZ2FpbnN0IGFuZCBhcm91bmQgYXMgYXQgYmFjayBiZWZvcmUgYmVnaW5uaW5nIGJlaGluZCBiZWxvdyBiZW5lYXRoIGJlc2lkZSBiZXR3ZWVuIGJ1dCBieSBjb25zaWRlcmluZyBjb250YWluIGNvbnRhaW5zIGNvbnRpbnVlIGNvcHkgZGl2IGRvZXMgZWlnaHRoIGVsc2UgZW5kIGVxdWFsIGVxdWFscyBlcnJvciBldmVyeSBleGl0IGZpZnRoIGZpcnN0IGZvciBmb3VydGggZnJvbSBmcm9udCBnZXQgZ2l2ZW4gZ2xvYmFsIGlmIGlnbm9yaW5nIGluIGludG8gaXMgaXQgaXRzIGxhc3QgbG9jYWwgbWUgbWlkZGxlIG1vZCBteSBuaW50aCBub3Qgb2Ygb24gb250byBvciBvdmVyIHByb3AgcHJvcGVydHkgcHV0IHJlZiByZWZlcmVuY2UgcmVwZWF0IHJldHVybmluZyBzY3JpcHQgc2Vjb25kIHNldCBzZXZlbnRoIHNpbmNlIHNpeHRoIHNvbWUgdGVsbCB0ZW50aCB0aGF0IHRoZXwwIHRoZW4gdGhpcmQgdGhyb3VnaCB0aHJ1IHRpbWVvdXQgdGltZXMgdG8gdHJhbnNhY3Rpb24gdHJ5IHVudGlsIHdoZXJlIHdoaWxlIHdob3NlIHdpdGggd2l0aG91dFwiLGNvbnN0YW50OlwiQXBwbGVTY3JpcHQgZmFsc2UgbGluZWZlZWQgcmV0dXJuIHBpIHF1b3RlIHJlc3VsdCBzcGFjZSB0YWIgdHJ1ZVwiLHR5cGU6XCJhbGlhcyBhcHBsaWNhdGlvbiBib29sZWFuIGNsYXNzIGNvbnN0YW50IGRhdGUgZmlsZSBpbnRlZ2VyIGxpc3QgbnVtYmVyIHJlYWwgcmVjb3JkIHN0cmluZyB0ZXh0XCIsY29tbWFuZDpcImFjdGl2YXRlIGJlZXAgY291bnQgZGVsYXkgbGF1bmNoIGxvZyBvZmZzZXQgcmVhZCByb3VuZCBydW4gc2F5IHN1bW1hcml6ZSB3cml0ZVwiLHByb3BlcnR5OlwiY2hhcmFjdGVyIGNoYXJhY3RlcnMgY29udGVudHMgZGF5IGZyb250bW9zdCBpZCBpdGVtIGxlbmd0aCBtb250aCBuYW1lIHBhcmFncmFwaCBwYXJhZ3JhcGhzIHJlc3QgcmV2ZXJzZSBydW5uaW5nIHRpbWUgdmVyc2lvbiB3ZWVrZGF5IHdvcmQgd29yZHMgeWVhclwifSxjOlt0LGUuQ05NLHtjTjpcInR5cGVcIixiOlwiXFxcXGJQT1NJWCBmaWxlXFxcXGJcIn0se2NOOlwiY29tbWFuZFwiLGI6XCJcXFxcYihjbGlwYm9hcmQgaW5mb3x0aGUgY2xpcGJvYXJkfGluZm8gZm9yfGxpc3QgKGRpc2tzfGZvbGRlcil8bW91bnQgdm9sdW1lfHBhdGggdG98KGNsb3NlfG9wZW4gZm9yKSBhY2Nlc3N8KGdldHxzZXQpIGVvZnxjdXJyZW50IGRhdGV8ZG8gc2hlbGwgc2NyaXB0fGdldCB2b2x1bWUgc2V0dGluZ3N8cmFuZG9tIG51bWJlcnxzZXQgdm9sdW1lfHN5c3RlbSBhdHRyaWJ1dGV8c3lzdGVtIGluZm98dGltZSB0byBHTVR8KGxvYWR8cnVufHN0b3JlKSBzY3JpcHR8c2NyaXB0aW5nIGNvbXBvbmVudHN8QVNDSUkgKGNoYXJhY3RlcnxudW1iZXIpfGxvY2FsaXplZCBzdHJpbmd8Y2hvb3NlIChhcHBsaWNhdGlvbnxjb2xvcnxmaWxlfGZpbGUgbmFtZXxmb2xkZXJ8ZnJvbSBsaXN0fHJlbW90ZSBhcHBsaWNhdGlvbnxVUkwpfGRpc3BsYXkgKGFsZXJ0fGRpYWxvZykpXFxcXGJ8XlxcXFxzKnJldHVyblxcXFxiXCJ9LHtjTjpcImNvbnN0YW50XCIsYjpcIlxcXFxiKHRleHQgaXRlbSBkZWxpbWl0ZXJzfGN1cnJlbnQgYXBwbGljYXRpb258bWlzc2luZyB2YWx1ZSlcXFxcYlwifSx7Y046XCJrZXl3b3JkXCIsYjpcIlxcXFxiKGFwYXJ0IGZyb218YXNpZGUgZnJvbXxpbnN0ZWFkIG9mfG91dCBvZnxncmVhdGVyIHRoYW58aXNuJ3R8KGRvZXNuJ3R8ZG9lcyBub3QpIChlcXVhbHxjb21lIGJlZm9yZXxjb21lIGFmdGVyfGNvbnRhaW4pfChncmVhdGVyfGxlc3MpIHRoYW4oIG9yIGVxdWFsKT98KHN0YXJ0cz98ZW5kc3xiZWdpbnM/KSB3aXRofGNvbnRhaW5lZCBieXxjb21lcyAoYmVmb3JlfGFmdGVyKXxhIChyZWZ8cmVmZXJlbmNlKSlcXFxcYlwifSx7Y046XCJwcm9wZXJ0eVwiLGI6XCJcXFxcYihQT1NJWCBwYXRofChkYXRlfHRpbWUpIHN0cmluZ3xxdW90ZWQgZm9ybSlcXFxcYlwifSx7Y046XCJmdW5jdGlvbl9zdGFydFwiLGJLOlwib25cIixpOlwiWyR7PTtcXFxcbl1cIixjOltlLlVUTSxyXX1dLmNvbmNhdChvKSxpOlwiLy98LT58PT5cIn19KTtcbjsgYnJvd3NlcmlmeV9zaGltX19kZWZpbmVfX21vZHVsZV9fZXhwb3J0X18odHlwZW9mIGhsanMgIT0gXCJ1bmRlZmluZWRcIiA/IGhsanMgOiB3aW5kb3cuaGxqcyk7XG5cbn0pLmNhbGwoZ2xvYmFsLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uIGRlZmluZUV4cG9ydChleCkgeyBtb2R1bGUuZXhwb3J0cyA9IGV4OyB9KTtcblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbXhwWWk5b2FXZG9iR2xuYUhScWN5OW9hV2RvYkdsbmFIUXVjR0ZqYXk1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJN0lIWmhjaUJmWDJKeWIzZHpaWEpwWm5sZmMyaHBiVjl5WlhGMWFYSmxYMTg5Y21WeGRXbHlaVHNvWm5WdVkzUnBiMjRnWW5KdmQzTmxjbWxtZVZOb2FXMG9iVzlrZFd4bExDQmxlSEJ2Y25SekxDQnlaWEYxYVhKbExDQmtaV1pwYm1Vc0lHSnliM2R6WlhKcFpubGZjMmhwYlY5ZlpHVm1hVzVsWDE5dGIyUjFiR1ZmWDJWNGNHOXlkRjlmS1NCN1hHNGhablZ1WTNScGIyNG9aU2w3WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlHVjRjRzl5ZEhNL1pTaGxlSEJ2Y25SektUb29kMmx1Wkc5M0xtaHNhbk05WlNoN2ZTa3NYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnWkdWbWFXNWxKaVprWldacGJtVXVZVzFrSmlaa1pXWnBibVVvVzEwc1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z2QybHVaRzkzTG1oc2FuTjlLU2w5S0daMWJtTjBhVzl1S0dVcGUyWjFibU4wYVc5dUlHNG9aU2w3Y21WMGRYSnVJR1V1Y21Wd2JHRmpaU2d2Smk5bmJTeGNJaVpoYlhBN1hDSXBMbkpsY0d4aFkyVW9Mend2WjIwc1hDSW1iSFE3WENJcExuSmxjR3hoWTJVb0x6NHZaMjBzWENJbVozUTdYQ0lwZldaMWJtTjBhVzl1SUhRb1pTbDdjbVYwZFhKdUlHVXVibTlrWlU1aGJXVXVkRzlNYjNkbGNrTmhjMlVvS1gxbWRXNWpkR2x2YmlCeUtHVXNiaWw3ZG1GeUlIUTlaU1ltWlM1bGVHVmpLRzRwTzNKbGRIVnliaUIwSmlZd1BUMTBMbWx1WkdWNGZXWjFibU4wYVc5dUlHRW9aU2w3ZG1GeUlHNDlLR1V1WTJ4aGMzTk9ZVzFsSzF3aUlGd2lLeWhsTG5CaGNtVnVkRTV2WkdVL1pTNXdZWEpsYm5ST2IyUmxMbU5zWVhOelRtRnRaVHBjSWx3aUtTa3VjM0JzYVhRb0wxeGNjeXN2S1R0eVpYUjFjbTRnYmoxdUxtMWhjQ2htZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWlM1eVpYQnNZV05sS0M5ZWJHRnVaeWgxWVdkbEtUOHRMeXhjSWx3aUtYMHBMRzR1Wm1sc2RHVnlLR1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJPS0dVcGZId3ZibThvTFQ4cGFHbG5hR3hwWjJoMEx5NTBaWE4wS0dVcGZTbGJNRjE5Wm5WdVkzUnBiMjRnYnlobExHNHBlM1poY2lCMFBYdDlPMlp2Y2loMllYSWdjaUJwYmlCbEtYUmJjbDA5WlZ0eVhUdHBaaWh1S1dadmNpaDJZWElnY2lCcGJpQnVLWFJiY2wwOWJsdHlYVHR5WlhSMWNtNGdkSDFtZFc1amRHbHZiaUJwS0dVcGUzWmhjaUJ1UFZ0ZE8zSmxkSFZ5YmlCbWRXNWpkR2x2YmlCeUtHVXNZU2w3Wm05eUtIWmhjaUJ2UFdVdVptbHljM1JEYUdsc1pEdHZPMjg5Ynk1dVpYaDBVMmxpYkdsdVp5a3pQVDF2TG01dlpHVlVlWEJsUDJFclBXOHVibTlrWlZaaGJIVmxMbXhsYm1kMGFEb3hQVDF2TG01dlpHVlVlWEJsSmlZb2JpNXdkWE5vS0h0bGRtVnVkRHBjSW5OMFlYSjBYQ0lzYjJabWMyVjBPbUVzYm05a1pUcHZmU2tzWVQxeUtHOHNZU2tzZENodktTNXRZWFJqYUNndlluSjhhSEo4YVcxbmZHbHVjSFYwTHlsOGZHNHVjSFZ6YUNoN1pYWmxiblE2WENKemRHOXdYQ0lzYjJabWMyVjBPbUVzYm05a1pUcHZmU2twTzNKbGRIVnliaUJoZlNobExEQXBMRzU5Wm5WdVkzUnBiMjRnWXlobExISXNZU2w3Wm5WdVkzUnBiMjRnYnlncGUzSmxkSFZ5YmlCbExteGxibWQwYUNZbWNpNXNaVzVuZEdnL1pWc3dYUzV2Wm1aelpYUWhQWEpiTUYwdWIyWm1jMlYwUDJWYk1GMHViMlptYzJWMFBISmJNRjB1YjJabWMyVjBQMlU2Y2pwY0luTjBZWEowWENJOVBYSmJNRjB1WlhabGJuUS9aVHB5T21VdWJHVnVaM1JvUDJVNmNuMW1kVzVqZEdsdmJpQnBLR1VwZTJaMWJtTjBhVzl1SUhJb1pTbDdjbVYwZFhKdVhDSWdYQ0lyWlM1dWIyUmxUbUZ0WlNzblBWd2lKeXR1S0dVdWRtRnNkV1VwS3lkY0lpZDliQ3M5WENJOFhDSXJkQ2hsS1N0QmNuSmhlUzV3Y205MGIzUjVjR1V1YldGd0xtTmhiR3dvWlM1aGRIUnlhV0oxZEdWekxISXBMbXB2YVc0b1hDSmNJaWtyWENJK1hDSjlablZ1WTNScGIyNGdZeWhsS1h0c0t6MWNJand2WENJcmRDaGxLU3RjSWo1Y0luMW1kVzVqZEdsdmJpQjFLR1VwZXloY0luTjBZWEowWENJOVBXVXVaWFpsYm5RL2FUcGpLU2hsTG01dlpHVXBmV1p2Y2loMllYSWdjejB3TEd3OVhDSmNJaXhtUFZ0ZE8yVXViR1Z1WjNSb2ZIeHlMbXhsYm1kMGFEc3BlM1poY2lCblBXOG9LVHRwWmloc0t6MXVLR0V1YzNWaWMzUnlLSE1zWjFzd1hTNXZabVp6WlhRdGN5a3BMSE05WjFzd1hTNXZabVp6WlhRc1p6MDlaU2w3Wmk1eVpYWmxjbk5sS0NrdVptOXlSV0ZqYUNoaktUdGtieUIxS0djdWMzQnNhV05sS0RBc01TbGJNRjBwTEdjOWJ5Z3BPM2RvYVd4bEtHYzlQV1VtSm1jdWJHVnVaM1JvSmlabld6QmRMbTltWm5ObGREMDljeWs3Wmk1eVpYWmxjbk5sS0NrdVptOXlSV0ZqYUNocEtYMWxiSE5sWENKemRHRnlkRndpUFQxbld6QmRMbVYyWlc1MFAyWXVjSFZ6YUNobld6QmRMbTV2WkdVcE9tWXVjRzl3S0Nrc2RTaG5Mbk53YkdsalpTZ3dMREVwV3pCZEtYMXlaWFIxY200Z2JDdHVLR0V1YzNWaWMzUnlLSE1wS1gxbWRXNWpkR2x2YmlCMUtHVXBlMloxYm1OMGFXOXVJRzRvWlNsN2NtVjBkWEp1SUdVbUptVXVjMjkxY21ObGZIeGxmV1oxYm1OMGFXOXVJSFFvZEN4eUtYdHlaWFIxY200Z1VtVm5SWGh3S0c0b2RDa3NYQ0p0WENJcktHVXVZMGsvWENKcFhDSTZYQ0pjSWlrcktISS9YQ0puWENJNlhDSmNJaWtwZldaMWJtTjBhVzl1SUhJb1lTeHBLWHRwWmlnaFlTNWpiMjF3YVd4bFpDbDdhV1lvWVM1amIyMXdhV3hsWkQwaE1DeGhMbXM5WVM1cmZIeGhMbUpMTEdFdWF5bDdkbUZ5SUdNOWUzMHNkVDFtZFc1amRHbHZiaWh1TEhRcGUyVXVZMGttSmloMFBYUXVkRzlNYjNkbGNrTmhjMlVvS1Nrc2RDNXpjR3hwZENoY0lpQmNJaWt1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhsS1h0MllYSWdkRDFsTG5Od2JHbDBLRndpZkZ3aUtUdGpXM1JiTUYxZFBWdHVMSFJiTVYwL1RuVnRZbVZ5S0hSYk1WMHBPakZkZlNsOU8xd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQmhMbXMvZFNoY0ltdGxlWGR2Y21SY0lpeGhMbXNwT2s5aWFtVmpkQzVyWlhsektHRXVheWt1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhsS1h0MUtHVXNZUzVyVzJWZEtYMHBMR0V1YXoxamZXRXViRkk5ZENoaExteDhmQzljWEdKYlFTMWFZUzE2TUMwNVgxMHJYRnhpTHl3aE1Da3NhU1ltS0dFdVlrc21KaWhoTG1JOVhDSmNYRnhjWWloY0lpdGhMbUpMTG5Od2JHbDBLRndpSUZ3aUtTNXFiMmx1S0Z3aWZGd2lLU3RjSWlsY1hGeGNZbHdpS1N4aExtSjhmQ2hoTG1JOUwxeGNRbnhjWEdJdktTeGhMbUpTUFhRb1lTNWlLU3hoTG1WOGZHRXVaVmQ4ZkNoaExtVTlMMXhjUW54Y1hHSXZLU3hoTG1VbUppaGhMbVZTUFhRb1lTNWxLU2tzWVM1MFJUMXVLR0V1WlNsOGZGd2lYQ0lzWVM1bFZ5WW1hUzUwUlNZbUtHRXVkRVVyUFNoaExtVS9YQ0o4WENJNlhDSmNJaWtyYVM1MFJTa3BMR0V1YVNZbUtHRXVhVkk5ZENoaExta3BLU3gyYjJsa0lEQTlQVDFoTG5JbUppaGhMbkk5TVNrc1lTNWpmSHdvWVM1alBWdGRLVHQyWVhJZ2N6MWJYVHRoTG1NdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlobEtYdGxMblkvWlM1MkxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2JpbDdjeTV3ZFhOb0tHOG9aU3h1S1NsOUtUcHpMbkIxYzJnb1hDSnpaV3htWENJOVBXVS9ZVHBsS1gwcExHRXVZejF6TEdFdVl5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUtHVXBlM0lvWlN4aEtYMHBMR0V1YzNSaGNuUnpKaVp5S0dFdWMzUmhjblJ6TEdrcE8zWmhjaUJzUFdFdVl5NXRZWEFvWm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUdVdVlrcy9YQ0pjWEZ4Y0xqOG9YQ0lyWlM1aUsxd2lLVnhjWEZ3dVAxd2lPbVV1WW4wcExtTnZibU5oZENoYllTNTBSU3hoTG1sZEtTNXRZWEFvYmlrdVptbHNkR1Z5S0VKdmIyeGxZVzRwTzJFdWREMXNMbXhsYm1kMGFEOTBLR3d1YW05cGJpaGNJbnhjSWlrc0lUQXBPbnRsZUdWak9tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlHNTFiR3g5ZlgxOWNpaGxLWDFtZFc1amRHbHZiaUJ6S0dVc2RDeGhMRzhwZTJaMWJtTjBhVzl1SUdrb1pTeHVLWHRtYjNJb2RtRnlJSFE5TUR0MFBHNHVZeTVzWlc1bmRHZzdkQ3NyS1dsbUtISW9iaTVqVzNSZExtSlNMR1VwS1hKbGRIVnliaUJ1TG1OYmRGMTlablZ1WTNScGIyNGdZeWhsTEc0cGUzSmxkSFZ5YmlCeUtHVXVaVklzYmlrL1pUcGxMbVZYUDJNb1pTNXdZWEpsYm5Rc2JpazZkbTlwWkNBd2ZXWjFibU4wYVc5dUlHWW9aU3h1S1h0eVpYUjFjbTRoWVNZbWNpaHVMbWxTTEdVcGZXWjFibU4wYVc5dUlHY29aU3h1S1h0MllYSWdkRDE0TG1OSlAyNWJNRjB1ZEc5TWIzZGxja05oYzJVb0tUcHVXekJkTzNKbGRIVnliaUJsTG1zdWFHRnpUM2R1VUhKdmNHVnlkSGtvZENrbUptVXVhMXQwWFgxbWRXNWpkR2x2YmlCd0tHVXNiaXgwTEhJcGUzWmhjaUJoUFhJL1hDSmNJanBGTG1Oc1lYTnpVSEpsWm1sNExHODlKenh6Y0dGdUlHTnNZWE56UFZ3aUp5dGhMR2s5ZEQ5Y0lsd2lPbHdpUEM5emNHRnVQbHdpTzNKbGRIVnliaUJ2S3oxbEt5ZGNJajRuTEc4cmJpdHBmV1oxYm1OMGFXOXVJR1FvS1h0cFppZ2hkeTVyS1hKbGRIVnliaUJ1S0hrcE8zWmhjaUJsUFZ3aVhDSXNkRDB3TzNjdWJGSXViR0Z6ZEVsdVpHVjRQVEE3Wm05eUtIWmhjaUJ5UFhjdWJGSXVaWGhsWXloNUtUdHlPeWw3WlNzOWJpaDVMbk4xWW5OMGNpaDBMSEl1YVc1a1pYZ3RkQ2twTzNaaGNpQmhQV2NvZHl4eUtUdGhQeWhDS3oxaFd6RmRMR1VyUFhBb1lWc3dYU3h1S0hKYk1GMHBLU2s2WlNzOWJpaHlXekJkS1N4MFBYY3ViRkl1YkdGemRFbHVaR1Y0TEhJOWR5NXNVaTVsZUdWaktIa3BmWEpsZEhWeWJpQmxLMjRvZVM1emRXSnpkSElvZENrcGZXWjFibU4wYVc5dUlHZ29LWHRwWmloM0xuTk1KaVloVWx0M0xuTk1YU2x5WlhSMWNtNGdiaWg1S1R0MllYSWdaVDEzTG5OTVAzTW9keTV6VEN4NUxDRXdMRXhiZHk1elRGMHBPbXdvZVNrN2NtVjBkWEp1SUhjdWNqNHdKaVlvUWlzOVpTNXlLU3hjSW1OdmJuUnBiblZ2ZFhOY0lqMDlkeTV6ZFdKTVlXNW5kV0ZuWlUxdlpHVW1KaWhNVzNjdWMweGRQV1V1ZEc5d0tTeHdLR1V1YkdGdVozVmhaMlVzWlM1MllXeDFaU3doTVN3aE1DbDlablZ1WTNScGIyNGdkaWdwZTNKbGRIVnliaUIyYjJsa0lEQWhQVDEzTG5OTVAyZ29LVHBrS0NsOVpuVnVZM1JwYjI0Z1lpaGxMSFFwZTNaaGNpQnlQV1V1WTA0L2NDaGxMbU5PTEZ3aVhDSXNJVEFwT2x3aVhDSTdaUzV5UWo4b1RTczljaXg1UFZ3aVhDSXBPbVV1WlVJL0tFMHJQVzRvZENrcmNpeDVQVndpWENJcE9paE5LejF5TEhrOWRDa3NkejFQWW1wbFkzUXVZM0psWVhSbEtHVXNlM0JoY21WdWREcDdkbUZzZFdVNmQzMTlLWDFtZFc1amRHbHZiaUJ0S0dVc2RDbDdhV1lvZVNzOVpTeDJiMmxrSURBOVBUMTBLWEpsZEhWeWJpQk5LejEyS0Nrc01EdDJZWElnY2oxcEtIUXNkeWs3YVdZb2NpbHlaWFIxY200Z1RTczlkaWdwTEdJb2NpeDBLU3h5TG5KQ1B6QTZkQzVzWlc1bmRHZzdkbUZ5SUdFOVl5aDNMSFFwTzJsbUtHRXBlM1poY2lCdlBYYzdieTV5Ulh4OGJ5NWxSWHg4S0hrclBYUXBMRTByUFhZb0tUdGtieUIzTG1OT0ppWW9UU3M5WENJOEwzTndZVzQrWENJcExFSXJQWGN1Y2l4M1BYY3VjR0Z5Wlc1ME8zZG9hV3hsS0hjaFBXRXVjR0Z5Wlc1MEtUdHlaWFIxY200Z2J5NWxSU1ltS0UwclBXNG9kQ2twTEhrOVhDSmNJaXhoTG5OMFlYSjBjeVltWWloaExuTjBZWEowY3l4Y0lsd2lLU3h2TG5KRlB6QTZkQzVzWlc1bmRHaDlhV1lvWmloMExIY3BLWFJvY205M0lHNWxkeUJGY25KdmNpZ25TV3hzWldkaGJDQnNaWGhsYldVZ1hDSW5LM1FySjF3aUlHWnZjaUJ0YjJSbElGd2lKeXNvZHk1alRueDhYQ0k4ZFc1dVlXMWxaRDVjSWlrckoxd2lKeWs3Y21WMGRYSnVJSGtyUFhRc2RDNXNaVzVuZEdoOGZERjlkbUZ5SUhnOVRpaGxLVHRwWmlnaGVDbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxVnVhMjV2ZDI0Z2JHRnVaM1ZoWjJVNklGd2lKeXRsS3lkY0lpY3BPM1VvZUNrN1ptOXlLSFpoY2lCM1BXOThmSGdzVEQxN2ZTeE5QVndpWENJc2F6MTNPMnNoUFhnN2F6MXJMbkJoY21WdWRDbHJMbU5PSmlZb1RUMXdLR3N1WTA0c1hDSmNJaXdoTUNrclRTazdkbUZ5SUhrOVhDSmNJaXhDUFRBN2RISjVlMlp2Y2loMllYSWdReXhxTEVrOU1EczdLWHRwWmloM0xuUXViR0Z6ZEVsdVpHVjRQVWtzUXoxM0xuUXVaWGhsWXloMEtTd2hReWxpY21WaGF6dHFQVzBvZEM1emRXSnpkSElvU1N4RExtbHVaR1Y0TFVrcExFTmJNRjBwTEVrOVF5NXBibVJsZUN0cWZXMG9kQzV6ZFdKemRISW9TU2twTzJadmNpaDJZWElnYXoxM08yc3VjR0Z5Wlc1ME8yczlheTV3WVhKbGJuUXBheTVqVGlZbUtFMHJQVndpUEM5emNHRnVQbHdpS1R0eVpYUjFjbTU3Y2pwQ0xIWmhiSFZsT2swc2JHRnVaM1ZoWjJVNlpTeDBiM0E2ZDMxOVkyRjBZMmdvUVNsN2FXWW9MVEVoUFVFdWJXVnpjMkZuWlM1cGJtUmxlRTltS0Z3aVNXeHNaV2RoYkZ3aUtTbHlaWFIxY201N2Nqb3dMSFpoYkhWbE9tNG9kQ2w5TzNSb2NtOTNJRUY5ZldaMWJtTjBhVzl1SUd3b1pTeDBLWHQwUFhSOGZFVXViR0Z1WjNWaFoyVnpmSHhQWW1wbFkzUXVhMlY1Y3loU0tUdDJZWElnY2oxN2Nqb3dMSFpoYkhWbE9tNG9aU2w5TEdFOWNqdHlaWFIxY200Z2RDNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtHNHBlMmxtS0U0b2Jpa3BlM1poY2lCMFBYTW9iaXhsTENFeEtUdDBMbXhoYm1kMVlXZGxQVzRzZEM1eVBtRXVjaVltS0dFOWRDa3NkQzV5UG5JdWNpWW1LR0U5Y2l4eVBYUXBmWDBwTEdFdWJHRnVaM1ZoWjJVbUppaHlMbk5sWTI5dVpGOWlaWE4wUFdFcExISjlablZ1WTNScGIyNGdaaWhsS1h0eVpYUjFjbTRnUlM1MFlXSlNaWEJzWVdObEppWW9aVDFsTG5KbGNHeGhZMlVvTDE0b0tEeGJYajVkS3o1OFhGeDBLU3NwTDJkdExHWjFibU4wYVc5dUtHVXNiaWw3Y21WMGRYSnVJRzR1Y21Wd2JHRmpaU2d2WEZ4MEwyY3NSUzUwWVdKU1pYQnNZV05sS1gwcEtTeEZMblZ6WlVKU0ppWW9aVDFsTG5KbGNHeGhZMlVvTDF4Y2JpOW5MRndpUEdKeVBsd2lLU2tzWlgxbWRXNWpkR2x2YmlCbktHVXNiaXgwS1h0MllYSWdjajF1UDNoYmJsMDZkQ3hoUFZ0bExuUnlhVzBvS1YwN2NtVjBkWEp1SUdVdWJXRjBZMmdvTHloY1hITjhYaWxvYkdwektGeGNjM3drS1M4cGZIeGhMbkIxYzJnb1hDSm9iR3B6WENJcExISW1KbUV1Y0hWemFDaHlLU3hoTG1wdmFXNG9YQ0lnWENJcExuUnlhVzBvS1gxbWRXNWpkR2x2YmlCd0tHVXBlM1poY2lCdVBXRW9aU2s3YVdZb0lTOXVieWd0UHlsb2FXZG9iR2xuYUhRdkxuUmxjM1FvYmlrcGUzWmhjaUIwTzBVdWRYTmxRbEkvS0hROVpHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkRTVUS0Z3aWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1UazVPUzk0YUhSdGJGd2lMRndpWkdsMlhDSXBMSFF1YVc1dVpYSklWRTFNUFdVdWFXNXVaWEpJVkUxTUxuSmxjR3hoWTJVb0wxeGNiaTluTEZ3aVhDSXBMbkpsY0d4aFkyVW9MenhpY2xzZ1hGd3ZYU28rTDJjc1hDSmNYRzVjSWlrcE9uUTlaVHQyWVhJZ2NqMTBMblJsZUhSRGIyNTBaVzUwTEc4OWJqOXpLRzRzY2l3aE1DazZiQ2h5S1N4MVBXa29kQ2s3YVdZb2RTNXNaVzVuZEdncGUzWmhjaUJ3UFdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUk9VeWhjSW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpFNU9Ua3ZlR2gwYld4Y0lpeGNJbVJwZGx3aUtUdHdMbWx1Ym1WeVNGUk5URDF2TG5aaGJIVmxMRzh1ZG1Gc2RXVTlZeWgxTEdrb2NDa3NjaWw5Ynk1MllXeDFaVDFtS0c4dWRtRnNkV1VwTEdVdWFXNXVaWEpJVkUxTVBXOHVkbUZzZFdVc1pTNWpiR0Z6YzA1aGJXVTlaeWhsTG1Oc1lYTnpUbUZ0WlN4dUxHOHViR0Z1WjNWaFoyVXBMR1V1Y21WemRXeDBQWHRzWVc1bmRXRm5aVHB2TG14aGJtZDFZV2RsTEhKbE9tOHVjbjBzYnk1elpXTnZibVJmWW1WemRDWW1LR1V1YzJWamIyNWtYMkpsYzNROWUyeGhibWQxWVdkbE9tOHVjMlZqYjI1a1gySmxjM1F1YkdGdVozVmhaMlVzY21VNmJ5NXpaV052Ym1SZlltVnpkQzV5ZlNsOWZXWjFibU4wYVc5dUlHUW9aU2w3UlQxdktFVXNaU2w5Wm5WdVkzUnBiMjRnYUNncGUybG1LQ0ZvTG1OaGJHeGxaQ2w3YUM1allXeHNaV1E5SVRBN2RtRnlJR1U5Wkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2hjSW5CeVpTQmpiMlJsWENJcE8wRnljbUY1TG5CeWIzUnZkSGx3WlM1bWIzSkZZV05vTG1OaGJHd29aU3h3S1gxOVpuVnVZM1JwYjI0Z2RpZ3BlMkZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0pFVDAxRGIyNTBaVzUwVEc5aFpHVmtYQ0lzYUN3aE1Ta3NZV1JrUlhabGJuUk1hWE4wWlc1bGNpaGNJbXh2WVdSY0lpeG9MQ0V4S1gxbWRXNWpkR2x2YmlCaUtHNHNkQ2w3ZG1GeUlISTlVbHR1WFQxMEtHVXBPM0l1WVd4cFlYTmxjeVltY2k1aGJHbGhjMlZ6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvWlNsN2VGdGxYVDF1ZlNsOVpuVnVZM1JwYjI0Z2JTZ3BlM0psZEhWeWJpQlBZbXBsWTNRdWEyVjVjeWhTS1gxbWRXNWpkR2x2YmlCT0tHVXBlM0psZEhWeWJpQlNXMlZkZkh4U1czaGJaVjFkZlhaaGNpQkZQWHRqYkdGemMxQnlaV1pwZURwY0ltaHNhbk10WENJc2RHRmlVbVZ3YkdGalpUcHVkV3hzTEhWelpVSlNPaUV4TEd4aGJtZDFZV2RsY3pwMmIybGtJREI5TEZJOWUzMHNlRDE3ZlR0eVpYUjFjbTRnWlM1b2FXZG9iR2xuYUhROWN5eGxMbWhwWjJoc2FXZG9kRUYxZEc4OWJDeGxMbVpwZUUxaGNtdDFjRDFtTEdVdWFHbG5hR3hwWjJoMFFteHZZMnM5Y0N4bExtTnZibVpwWjNWeVpUMWtMR1V1YVc1cGRFaHBaMmhzYVdkb2RHbHVaejFvTEdVdWFXNXBkRWhwWjJoc2FXZG9kR2x1WjA5dVRHOWhaRDEyTEdVdWNtVm5hWE4wWlhKTVlXNW5kV0ZuWlQxaUxHVXViR2x6ZEV4aGJtZDFZV2RsY3oxdExHVXVaMlYwVEdGdVozVmhaMlU5VGl4bExtbHVhR1Z5YVhROWJ5eGxMa2xTUFZ3aVcyRXRla0V0V2wxYllTMTZRUzFhTUMwNVgxMHFYQ0lzWlM1VlNWSTlYQ0piWVMxNlFTMWFYMTFiWVMxNlFTMWFNQzA1WDEwcVhDSXNaUzVPVWoxY0lseGNYRnhpWEZ4Y1hHUXJLRnhjWEZ3dVhGeGNYR1FyS1Q5Y0lpeGxMa05PVWoxY0lpaGNYRnhjWWpCYmVGaGRXMkV0WmtFdFJqQXRPVjByZkNoY1hGeGNZbHhjWEZ4a0t5aGNYRnhjTGx4Y1hGeGtLaWsvZkZ4Y1hGd3VYRnhjWEdRcktTaGJaVVZkV3kwclhUOWNYRnhjWkNzcFB5bGNJaXhsTGtKT1VqMWNJbHhjWEZ4aUtEQmlXekF4WFNzcFhDSXNaUzVTVTFJOVhDSWhmQ0U5ZkNFOVBYd2xmQ1U5ZkNaOEppWjhKajE4WEZ4Y1hDcDhYRnhjWENvOWZGeGNYRndyZkZ4Y1hGd3JQWHdzZkMxOExUMThMejE4TDN3NmZEdDhQRHg4UER3OWZEdzlmRHg4UFQwOWZEMDlmRDE4UGo0K1BYdytQajE4UGoxOFBqNCtmRDQrZkQ1OFhGeGNYRDk4WEZ4Y1hGdDhYRnhjWEh0OFhGeGNYQ2g4WEZ4Y1hGNThYRnhjWEY0OWZGeGNYRng4ZkZ4Y1hGeDhQWHhjWEZ4Y2ZGeGNYRng4Zkg1Y0lpeGxMa0pGUFh0aU9sd2lYRnhjWEZ4Y1hGeGJYRnhjWEhOY1hGeGNVMTFjSWl4eU9qQjlMR1V1UVZOTlBYdGpUanBjSW5OMGNtbHVaMXdpTEdJNlhDSW5YQ0lzWlRwY0lpZGNJaXhwT2x3aVhGeGNYRzVjSWl4ak9sdGxMa0pGWFgwc1pTNVJVMDA5ZTJOT09sd2ljM1J5YVc1blhDSXNZam9uWENJbkxHVTZKMXdpSnl4cE9sd2lYRnhjWEc1Y0lpeGpPbHRsTGtKRlhYMHNaUzVRVjAwOWUySTZMMXhjWWloaGZHRnVmSFJvWlh4aGNtVjhTWHhKSjIxOGFYTnVKM1I4Wkc5dUozUjhaRzlsYzI0bmRIeDNiMjRuZEh4aWRYUjhhblZ6ZEh4emFHOTFiR1I4Y0hKbGRIUjVmSE5wYlhCc2VYeGxibTkxWjJoOFoyOXVibUY4WjI5cGJtZDhkM1JtZkhOdmZITjFZMmdwWEZ4aUwzMHNaUzVEVEVOTlBYdGpUanBjSW1OdmJXMWxiblJjSWl4aU9sd2lMeTljSWl4bE9sd2lKRndpTEdNNlcyVXVVRmROWFgwc1pTNURRa05OUFh0alRqcGNJbU52YlcxbGJuUmNJaXhpT2x3aUwxeGNYRndxWENJc1pUcGNJbHhjWEZ3cUwxd2lMR002VzJVdVVGZE5YWDBzWlM1SVEwMDllMk5PT2x3aVkyOXRiV1Z1ZEZ3aUxHSTZYQ0lqWENJc1pUcGNJaVJjSWl4ak9sdGxMbEJYVFYxOUxHVXVUazA5ZTJOT09sd2liblZ0WW1WeVhDSXNZanBsTGs1U0xISTZNSDBzWlM1RFRrMDllMk5PT2x3aWJuVnRZbVZ5WENJc1lqcGxMa05PVWl4eU9qQjlMR1V1UWs1TlBYdGpUanBjSW01MWJXSmxjbHdpTEdJNlpTNUNUbElzY2pvd2ZTeGxMa05UVTA1TlBYdGpUanBjSW01MWJXSmxjbHdpTEdJNlpTNU9VaXRjSWlnbGZHVnRmR1Y0ZkdOb2ZISmxiWHgyZDN4MmFIeDJiV2x1ZkhadFlYaDhZMjE4YlcxOGFXNThjSFI4Y0dOOGNIaDhaR1ZuZkdkeVlXUjhjbUZrZkhSMWNtNThjM3h0YzN4SWVueHJTSHA4WkhCcGZHUndZMjE4WkhCd2VDay9YQ0lzY2pvd2ZTeGxMbEpOUFh0alRqcGNJbkpsWjJWNGNGd2lMR0k2TDF4Y0x5OHNaVG92WEZ3dlcyZHBiWFY1WFNvdkxHazZMMXhjYmk4c1l6cGJaUzVDUlN4N1lqb3ZYRnhiTHl4bE9pOWNYRjB2TEhJNk1DeGpPbHRsTGtKRlhYMWRmU3hsTGxSTlBYdGpUanBjSW5ScGRHeGxYQ0lzWWpwbExrbFNMSEk2TUgwc1pTNVZWRTA5ZTJOT09sd2lkR2wwYkdWY0lpeGlPbVV1VlVsU0xISTZNSDBzWlgwcE8yaHNhbk11Y21WbmFYTjBaWEpNWVc1bmRXRm5aU2hjSW5odGJGd2lMR1oxYm1OMGFXOXVLQ2w3ZG1GeUlIUTlYQ0piUVMxYVlTMTZNQzA1WEZ4Y1hDNWZPaTFkSzF3aUxHVTllMkk2THp4Y1hEOG9jR2h3S1Q4b1B5RmNYSGNwTHl4bE9pOWNYRDgrTHl4elREcGNJbkJvY0Z3aUxITjFZa3hoYm1kMVlXZGxUVzlrWlRwY0ltTnZiblJwYm5WdmRYTmNJbjBzWXoxN1pWYzZJVEFzYVRvdlBDOHNjam93TEdNNlcyVXNlMk5PT2x3aVlYUjBjbWxpZFhSbFhDSXNZanAwTEhJNk1IMHNlMkk2WENJOVhDSXNjam93TEdNNlczdGpUanBjSW5aaGJIVmxYQ0lzWXpwYlpWMHNkanBiZTJJNkwxd2lMeXhsT2k5Y0lpOTlMSHRpT2k4bkx5eGxPaThuTDMwc2UySTZMMXRlWEZ4elhGd3ZQbDByTDMxZGZWMTlYWDA3Y21WMGRYSnVlMkZzYVdGelpYTTZXMXdpYUhSdGJGd2lMRndpZUdoMGJXeGNJaXhjSW5KemMxd2lMRndpWVhSdmJWd2lMRndpZUhOc1hDSXNYQ0p3YkdsemRGd2lYU3hqU1RvaE1DeGpPbHQ3WTA0NlhDSmtiMk4wZVhCbFhDSXNZanBjSWp3aFJFOURWRmxRUlZ3aUxHVTZYQ0krWENJc2Nqb3hNQ3hqT2x0N1lqcGNJbHhjWEZ4YlhDSXNaVHBjSWx4Y1hGeGRYQ0o5WFgwc2UyTk9PbHdpWTI5dGJXVnVkRndpTEdJNlhDSThJUzB0WENJc1pUcGNJaTB0UGx3aUxISTZNVEI5TEh0alRqcGNJbU5rWVhSaFhDSXNZanBjSWp4Y1hGeGNJVnhjWEZ4YlEwUkJWRUZjWEZ4Y1cxd2lMR1U2WENKY1hGeGNYVnhjWEZ4ZFBsd2lMSEk2TVRCOUxIdGpUanBjSW5SaFoxd2lMR0k2WENJOGMzUjViR1VvUHoxY1hGeGNjM3crZkNRcFhDSXNaVHBjSWo1Y0lpeHJPbnQwYVhSc1pUcGNJbk4wZVd4bFhDSjlMR002VzJOZExITjBZWEowY3pwN1pUcGNJand2YzNSNWJHVStYQ0lzY2tVNklUQXNjMHc2WENKamMzTmNJbjE5TEh0alRqcGNJblJoWjF3aUxHSTZYQ0k4YzJOeWFYQjBLRDg5WEZ4Y1hITjhQbndrS1Z3aUxHVTZYQ0krWENJc2F6cDdkR2wwYkdVNlhDSnpZM0pwY0hSY0luMHNZenBiWTEwc2MzUmhjblJ6T250bE9sd2lQQzl6WTNKcGNIUStYQ0lzY2tVNklUQXNjMHc2WENKcVlYWmhjMk55YVhCMFhDSjlmU3hsTEh0alRqcGNJbkJwWENJc1lqb3ZQRnhjUDF4Y2R5c3ZMR1U2TDF4Y1B6NHZMSEk2TVRCOUxIdGpUanBjSW5SaFoxd2lMR0k2WENJOEx6OWNJaXhsT2x3aUx6OCtYQ0lzWXpwYmUyTk9PbHdpZEdsMGJHVmNJaXhpT2k5YlhpQmNYQzgrUEZ4Y2JseGNkRjByTHl4eU9qQjlMR05kZlYxOWZTazdhR3hxY3k1eVpXZHBjM1JsY2t4aGJtZDFZV2RsS0Z3aVkyeHZhblZ5WlMxeVpYQnNYQ0lzWm5WdVkzUnBiMjRvS1h0eVpYUjFjbTU3WXpwYmUyTk9PbHdpY0hKdmJYQjBYQ0lzWWpvdlhpaGJYRngzTGkxZEszeGNYSE1xSTE4cFBUNHZMSE4wWVhKMGN6cDdaVG92SkM4c2MwdzZYQ0pqYkc5cWRYSmxYQ0lzYzNWaVRHRnVaM1ZoWjJWTmIyUmxPbHdpWTI5dWRHbHVkVzkxYzF3aWZYMWRmWDBwTzJoc2FuTXVjbVZuYVhOMFpYSk1ZVzVuZFdGblpTaGNJbU53Y0Z3aUxHWjFibU4wYVc5dUtIUXBlM1poY2lCcFBYdHJaWGwzYjNKa09sd2labUZzYzJVZ2FXNTBJR1pzYjJGMElIZG9hV3hsSUhCeWFYWmhkR1VnWTJoaGNpQmpZWFJqYUNCbGVIQnZjblFnZG1seWRIVmhiQ0J2Y0dWeVlYUnZjaUJ6YVhwbGIyWWdaSGx1WVcxcFkxOWpZWE4wZkRFd0lIUjVjR1ZrWldZZ1kyOXVjM1JmWTJGemRId3hNQ0JqYjI1emRDQnpkSEoxWTNRZ1ptOXlJSE4wWVhScFkxOWpZWE4wZkRFd0lIVnVhVzl1SUc1aGJXVnpjR0ZqWlNCMWJuTnBaMjVsWkNCc2IyNW5JSFp2YkdGMGFXeGxJSE4wWVhScFl5QndjbTkwWldOMFpXUWdZbTl2YkNCMFpXMXdiR0YwWlNCdGRYUmhZbXhsSUdsbUlIQjFZbXhwWXlCbWNtbGxibVFnWkc4Z1oyOTBieUJoZFhSdklIWnZhV1FnWlc1MWJTQmxiSE5sSUdKeVpXRnJJR1Y0ZEdWeWJpQjFjMmx1WnlCMGNuVmxJR05zWVhOeklHRnpiU0JqWVhObElIUjVjR1ZwWkNCemFHOXlkQ0J5WldsdWRHVnljSEpsZEY5allYTjBmREV3SUdSbFptRjFiSFFnWkc5MVlteGxJSEpsWjJsemRHVnlJR1Y0Y0d4cFkybDBJSE5wWjI1bFpDQjBlWEJsYm1GdFpTQjBjbmtnZEdocGN5QnpkMmwwWTJnZ1kyOXVkR2x1ZFdVZ2QyTm9ZWEpmZENCcGJteHBibVVnWkdWc1pYUmxJR0ZzYVdkdWIyWWdZMmhoY2pFMlgzUWdZMmhoY2pNeVgzUWdZMjl1YzNSbGVIQnlJR1JsWTJ4MGVYQmxJRzV2WlhoalpYQjBJRzUxYkd4d2RISWdjM1JoZEdsalgyRnpjMlZ5ZENCMGFISmxZV1JmYkc5allXd2djbVZ6ZEhKcFkzUWdYMEp2YjJ3Z1kyOXRjR3hsZUNCZlEyOXRjR3hsZUNCZlNXMWhaMmx1WVhKNWFXNTBiV0Y0WDNRZ2RXbHVkRzFoZUY5MElHbHVkRGhmZENCMWFXNTBPRjkwSUdsdWRERTJYM1FnZFdsdWRERTJYM1FnYVc1ME16SmZkQ0IxYVc1ME16SmZkQ0FnYVc1ME5qUmZkQ0IxYVc1ME5qUmZkR2x1ZEY5c1pXRnpkRGhmZENCMWFXNTBYMnhsWVhOME9GOTBJR2x1ZEY5c1pXRnpkREUyWDNRZ2RXbHVkRjlzWldGemRERTJYM1FnYVc1MFgyeGxZWE4wTXpKZmRDQjFhVzUwWDJ4bFlYTjBNekpmZEdsdWRGOXNaV0Z6ZERZMFgzUWdkV2x1ZEY5c1pXRnpkRFkwWDNRZ2FXNTBYMlpoYzNRNFgzUWdkV2x1ZEY5bVlYTjBPRjkwSUdsdWRGOW1ZWE4wTVRaZmRDQjFhVzUwWDJaaGMzUXhObDkwSUdsdWRGOW1ZWE4wTXpKZmRIVnBiblJmWm1GemRETXlYM1FnYVc1MFgyWmhjM1EyTkY5MElIVnBiblJmWm1GemREWTBYM1FnYVc1MGNIUnlYM1FnZFdsdWRIQjBjbDkwSUdGMGIyMXBZMTlpYjI5c0lHRjBiMjFwWTE5amFHRnlJR0YwYjIxcFkxOXpZMmhoY21GMGIyMXBZMTkxWTJoaGNpQmhkRzl0YVdOZmMyaHZjblFnWVhSdmJXbGpYM1Z6YUc5eWRDQmhkRzl0YVdOZmFXNTBJR0YwYjIxcFkxOTFhVzUwSUdGMGIyMXBZMTlzYjI1bklHRjBiMjFwWTE5MWJHOXVaeUJoZEc5dGFXTmZiR3h2Ym1kaGRHOXRhV05mZFd4c2IyNW5JR0YwYjIxcFkxOTNZMmhoY2w5MElHRjBiMjFwWTE5amFHRnlNVFpmZENCaGRHOXRhV05mWTJoaGNqTXlYM1FnWVhSdmJXbGpYMmx1ZEcxaGVGOTBJR0YwYjIxcFkxOTFhVzUwYldGNFgzUmhkRzl0YVdOZmFXNTBjSFJ5WDNRZ1lYUnZiV2xqWDNWcGJuUndkSEpmZENCaGRHOXRhV05mYzJsNlpWOTBJR0YwYjIxcFkxOXdkSEprYVdabVgzUWdZWFJ2YldsalgybHVkRjlzWldGemREaGZkQ0JoZEc5dGFXTmZhVzUwWDJ4bFlYTjBNVFpmZEdGMGIyMXBZMTlwYm5SZmJHVmhjM1F6TWw5MElHRjBiMjFwWTE5cGJuUmZiR1ZoYzNRMk5GOTBJR0YwYjIxcFkxOTFhVzUwWDJ4bFlYTjBPRjkwSUdGMGIyMXBZMTkxYVc1MFgyeGxZWE4wTVRaZmRDQmhkRzl0YVdOZmRXbHVkRjlzWldGemRETXlYM1JoZEc5dGFXTmZkV2x1ZEY5c1pXRnpkRFkwWDNRZ1lYUnZiV2xqWDJsdWRGOW1ZWE4wT0Y5MElHRjBiMjFwWTE5cGJuUmZabUZ6ZERFMlgzUWdZWFJ2YldsalgybHVkRjltWVhOME16SmZkQ0JoZEc5dGFXTmZhVzUwWDJaaGMzUTJORjkwWVhSdmJXbGpYM1ZwYm5SZlptRnpkRGhmZENCaGRHOXRhV05mZFdsdWRGOW1ZWE4wTVRaZmRDQmhkRzl0YVdOZmRXbHVkRjltWVhOME16SmZkQ0JoZEc5dGFXTmZkV2x1ZEY5bVlYTjBOalJmZEZ3aUxHSjFhV3gwWDJsdU9sd2ljM1JrSUhOMGNtbHVaeUJqYVc0Z1kyOTFkQ0JqWlhKeUlHTnNiMmNnYzNSeWFXNW5jM1J5WldGdElHbHpkSEpwYm1kemRISmxZVzBnYjNOMGNtbHVaM04wY21WaGJTQmhkWFJ2WDNCMGNpQmtaWEYxWlNCc2FYTjBJSEYxWlhWbElITjBZV05ySUhabFkzUnZjaUJ0WVhBZ2MyVjBJR0pwZEhObGRDQnRkV3gwYVhObGRDQnRkV3gwYVcxaGNDQjFibTl5WkdWeVpXUmZjMlYwSUhWdWIzSmtaWEpsWkY5dFlYQWdkVzV2Y21SbGNtVmtYMjExYkhScGMyVjBJSFZ1YjNKa1pYSmxaRjl0ZFd4MGFXMWhjQ0JoY25KaGVTQnphR0Z5WldSZmNIUnlJR0ZpYjNKMElHRmljeUJoWTI5eklHRnphVzRnWVhSaGJqSWdZWFJoYmlCallXeHNiMk1nWTJWcGJDQmpiM05vSUdOdmN5QmxlR2wwSUdWNGNDQm1ZV0p6SUdac2IyOXlJR1p0YjJRZ1puQnlhVzUwWmlCbWNIVjBjeUJtY21WbElHWnlaWGh3SUdaelkyRnVaaUJwYzJGc2JuVnRJR2x6WVd4d2FHRWdhWE5qYm5SeWJDQnBjMlJwWjJsMElHbHpaM0poY0dnZ2FYTnNiM2RsY2lCcGMzQnlhVzUwSUdsemNIVnVZM1FnYVhOemNHRmpaU0JwYzNWd2NHVnlJR2x6ZUdScFoybDBJSFJ2Ykc5M1pYSWdkRzkxY0hCbGNpQnNZV0p6SUd4a1pYaHdJR3h2WnpFd0lHeHZaeUJ0WVd4c2IyTWdiV1Z0WTJoeUlHMWxiV050Y0NCdFpXMWpjSGtnYldWdGMyVjBJRzF2WkdZZ2NHOTNJSEJ5YVc1MFppQndkWFJqYUdGeUlIQjFkSE1nYzJOaGJtWWdjMmx1YUNCemFXNGdjMjV3Y21sdWRHWWdjM0J5YVc1MFppQnpjWEowSUhOelkyRnVaaUJ6ZEhKallYUWdjM1J5WTJoeUlITjBjbU50Y0NCemRISmpjSGtnYzNSeVkzTndiaUJ6ZEhKc1pXNGdjM1J5Ym1OaGRDQnpkSEp1WTIxd0lITjBjbTVqY0hrZ2MzUnljR0p5YXlCemRISnlZMmh5SUhOMGNuTndiaUJ6ZEhKemRISWdkR0Z1YUNCMFlXNGdkbVp3Y21sdWRHWWdkbkJ5YVc1MFppQjJjM0J5YVc1MFpsd2lmVHR5WlhSMWNtNTdZV3hwWVhObGN6cGJYQ0pqWENJc1hDSm9YQ0lzWENKakt5dGNJaXhjSW1ncksxd2lYU3hyT21rc2FUcGNJand2WENJc1l6cGJkQzVEVEVOTkxIUXVRMEpEVFN4MExsRlRUU3g3WTA0NlhDSnpkSEpwYm1kY0lpeGlPbHdpSjF4Y1hGeGNYRnhjUHk1Y0lpeGxPbHdpSjF3aUxHazZYQ0l1WENKOUxIdGpUanBjSW01MWJXSmxjbHdpTEdJNlhDSmNYRnhjWWloY1hGeGNaQ3NvWEZ4Y1hDNWNYRnhjWkNvcFAzeGNYRnhjTGx4Y1hGeGtLeWtvZFh4VmZHeDhUSHgxYkh4VlRIeG1mRVlwWENKOUxIUXVRMDVOTEh0alRqcGNJbkJ5WlhCeWIyTmxjM052Y2x3aUxHSTZYQ0lqWENJc1pUcGNJaVJjSWl4ck9sd2lhV1lnWld4elpTQmxiR2xtSUdWdVpHbG1JR1JsWm1sdVpTQjFibVJsWmlCM1lYSnVhVzVuSUdWeWNtOXlJR3hwYm1VZ2NISmhaMjFoWENJc1l6cGJlMkk2SjJsdVkyeDFaR1ZjWEZ4Y2N5cGJQRndpWFNjc1pUb25XejVjSWwwbkxHczZYQ0pwYm1Oc2RXUmxYQ0lzYVRwY0lseGNYRnh1WENKOUxIUXVRMHhEVFYxOUxIdGpUanBjSW5OMGJGOWpiMjUwWVdsdVpYSmNJaXhpT2x3aVhGeGNYR0lvWkdWeGRXVjhiR2x6ZEh4eGRXVjFaWHh6ZEdGamEzeDJaV04wYjNKOGJXRndmSE5sZEh4aWFYUnpaWFI4YlhWc2RHbHpaWFI4YlhWc2RHbHRZWEI4ZFc1dmNtUmxjbVZrWDIxaGNIeDFibTl5WkdWeVpXUmZjMlYwZkhWdWIzSmtaWEpsWkY5dGRXeDBhWE5sZEh4MWJtOXlaR1Z5WldSZmJYVnNkR2x0WVhCOFlYSnlZWGtwWEZ4Y1hITXFQRndpTEdVNlhDSStYQ0lzYXpwcExHTTZXMXdpYzJWc1psd2lYWDBzZTJJNmRDNUpVaXRjSWpvNlhDSjlMSHRpU3pwY0ltNWxkeUIwYUhKdmR5QnlaWFIxY201Y0lpeHlPakI5TEh0alRqcGNJbVoxYm1OMGFXOXVYQ0lzWWpwY0lpaGNJaXQwTGtsU0sxd2lYRnhjWEhNcktTdGNJaXQwTGtsU0sxd2lYRnhjWEhNcVhGeGNYQ2hjSWl4eVFqb2hNQ3hsT2k5YmV6czlYUzhzWlVVNklUQXNhenBwTEdNNlczdGlPblF1U1ZJclhDSmNYRnhjY3lwY1hGeGNLRndpTEhKQ09pRXdMR002VzNRdVZFMWRMSEk2TUgwc2UyTk9PbHdpY0dGeVlXMXpYQ0lzWWpvdlhGd29MeXhsT2k5Y1hDa3ZMR3M2YVN4eU9qQXNZenBiZEM1RFFrTk5YWDBzZEM1RFRFTk5MSFF1UTBKRFRWMTlYWDE5S1R0b2JHcHpMbkpsWjJsemRHVnlUR0Z1WjNWaFoyVW9YQ0pvWVhOclpXeHNYQ0lzWm5WdVkzUnBiMjRvWlNsN2RtRnlJR2s5ZTJOT09sd2lZMjl0YldWdWRGd2lMSFk2VzN0aU9sd2lMUzFjSWl4bE9sd2lKRndpZlN4N1lqcGNJbnN0WENJc1pUcGNJaTE5WENJc1l6cGJYQ0p6Wld4bVhDSmRmVjE5TEdNOWUyTk9PbHdpY0hKaFoyMWhYQ0lzWWpwY0luc3RJMXdpTEdVNlhDSWpMWDFjSW4wc1lUMTdZMDQ2WENKd2NtVndjbTlqWlhOemIzSmNJaXhpT2x3aVhpTmNJaXhsT2x3aUpGd2lmU3h1UFh0alRqcGNJblI1Y0dWY0lpeGlPbHdpWEZ4Y1hHSmJRUzFhWFZ0Y1hGeGNkeWRkS2x3aUxISTZNSDBzYkQxN1kwNDZYQ0pqYjI1MFlXbHVaWEpjSWl4aU9sd2lYRnhjWENoY0lpeGxPbHdpWEZ4Y1hDbGNJaXhwT2lkY0lpY3NZenBiWXl4cExHRXNlMk5PT2x3aWRIbHdaVndpTEdJNlhDSmNYRnhjWWx0QkxWcGRXMXhjWEZ4M1hTb29YRnhjWENnb1hGeGNYQzVjWEZ4Y0xud3NmRnhjWEZ4M0t5bGNYRnhjS1NrL1hDSjlMR1V1YVc1b1pYSnBkQ2hsTGxSTkxIdGlPbHdpVzE5aExYcGRXMXhjWEZ4M0oxMHFYQ0o5S1YxOUxIUTllMk5PT2x3aVkyOXVkR0ZwYm1WeVhDSXNZanBjSW50Y0lpeGxPbHdpZlZ3aUxHTTZiQzVqZlR0eVpYUjFjbTU3WVd4cFlYTmxjenBiWENKb2Mxd2lYU3hyT2x3aWJHVjBJR2x1SUdsbUlIUm9aVzRnWld4elpTQmpZWE5sSUc5bUlIZG9aWEpsSUdSdklHMXZaSFZzWlNCcGJYQnZjblFnYUdsa2FXNW5JSEYxWVd4cFptbGxaQ0IwZVhCbElHUmhkR0VnYm1WM2RIbHdaU0JrWlhKcGRtbHVaeUJqYkdGemN5QnBibk4wWVc1alpTQmhjeUJrWldaaGRXeDBJR2x1Wm1sNElHbHVabWw0YkNCcGJtWnBlSElnWm05eVpXbG5iaUJsZUhCdmNuUWdZMk5oYkd3Z2MzUmtZMkZzYkNCamNHeDFjM0JzZFhNZ2FuWnRJR1J2ZEc1bGRDQnpZV1psSUhWdWMyRm1aU0JtWVcxcGJIa2dabTl5WVd4c0lHMWtieUJ3Y205aklISmxZMXdpTEdNNlczdGpUanBjSW0xdlpIVnNaVndpTEdJNlhDSmNYRnhjWW0xdlpIVnNaVnhjWEZ4aVhDSXNaVHBjSW5kb1pYSmxYQ0lzYXpwY0ltMXZaSFZzWlNCM2FHVnlaVndpTEdNNlcyd3NhVjBzYVRwY0lseGNYRnhYWEZ4Y1hDNThPMXdpZlN4N1kwNDZYQ0pwYlhCdmNuUmNJaXhpT2x3aVhGeGNYR0pwYlhCdmNuUmNYRnhjWWx3aUxHVTZYQ0lrWENJc2F6cGNJbWx0Y0c5eWRId3dJSEYxWVd4cFptbGxaQ0JoY3lCb2FXUnBibWRjSWl4ak9sdHNMR2xkTEdrNlhDSmNYRnhjVjF4Y1hGd3VmRHRjSW4wc2UyTk9PbHdpWTJ4aGMzTmNJaXhpT2x3aVhpaGNYRnhjY3lvcFB5aGpiR0Z6YzN4cGJuTjBZVzVqWlNsY1hGeGNZbHdpTEdVNlhDSjNhR1Z5WlZ3aUxHczZYQ0pqYkdGemN5Qm1ZVzFwYkhrZ2FXNXpkR0Z1WTJVZ2QyaGxjbVZjSWl4ak9sdHVMR3dzYVYxOUxIdGpUanBjSW5SNWNHVmtaV1pjSWl4aU9sd2lYRnhjWEdJb1pHRjBZWHdvYm1WM0tUOTBlWEJsS1Z4Y1hGeGlYQ0lzWlRwY0lpUmNJaXhyT2x3aVpHRjBZU0JtWVcxcGJIa2dkSGx3WlNCdVpYZDBlWEJsSUdSbGNtbDJhVzVuWENJc1l6cGJZeXhwTEc0c2JDeDBYWDBzZTJOT09sd2laR1ZtWVhWc2RGd2lMR0pMT2x3aVpHVm1ZWFZzZEZ3aUxHVTZYQ0lrWENJc1l6cGJiaXhzTEdsZGZTeDdZMDQ2WENKcGJtWnBlRndpTEdKTE9sd2lhVzVtYVhnZ2FXNW1hWGhzSUdsdVptbDRjbHdpTEdVNlhDSWtYQ0lzWXpwYlpTNURUazBzYVYxOUxIdGpUanBjSW1admNtVnBaMjVjSWl4aU9sd2lYRnhjWEdKbWIzSmxhV2R1WEZ4Y1hHSmNJaXhsT2x3aUpGd2lMR3M2WENKbWIzSmxhV2R1SUdsdGNHOXlkQ0JsZUhCdmNuUWdZMk5oYkd3Z2MzUmtZMkZzYkNCamNHeDFjM0JzZFhNZ2FuWnRJR1J2ZEc1bGRDQnpZV1psSUhWdWMyRm1aVndpTEdNNlcyNHNaUzVSVTAwc2FWMTlMSHRqVGpwY0luTm9aV0poYm1kY0lpeGlPbHdpSXlGY1hGeGNMM1Z6Y2x4Y1hGd3ZZbWx1WEZ4Y1hDOWxibllnY25WdWFHRnphMlZzYkZ3aUxHVTZYQ0lrWENKOUxHTXNhU3hoTEdVdVVWTk5MR1V1UTA1TkxHNHNaUzVwYm1obGNtbDBLR1V1VkUwc2UySTZYQ0plVzE5aExYcGRXMXhjWEZ4M0oxMHFYQ0o5S1N4N1lqcGNJaTArZkR3dFhDSjlYWDE5S1R0b2JHcHpMbkpsWjJsemRHVnlUR0Z1WjNWaFoyVW9YQ0pvWVcxc1hDSXNablZ1WTNScGIyNG9LWHR5WlhSMWNtNTdZMGs2SVRBc1l6cGJlMk5PT2x3aVpHOWpkSGx3WlZ3aUxHSTZYQ0plSVNFaEtDQW9OWHd4WEZ4Y1hDNHhmRk4wY21samRIeEdjbUZ0WlhObGRIeENZWE5wWTN4TmIySnBiR1Y4VWtSR1lYeFlUVXhjWEZ4Y1lpNHFLU2svSkZ3aUxISTZNVEI5TEh0alRqcGNJbU52YlcxbGJuUmNJaXhpT2x3aVhseGNYRnh6S2lnaFBTTjhQU044TFNOOEx5a3VLaVJjSWl4eU9qQjlMSHRpT2x3aVhseGNYRnh6S2lndGZEMThJVDBwS0Q4aEl5bGNJaXh6ZEdGeWRITTZlMlU2WENKY1hGeGNibHdpTEhOTU9sd2ljblZpZVZ3aWZYMHNlMk5PT2x3aWRHRm5YQ0lzWWpwY0lsNWNYRnhjY3lvbFhDSXNZenBiZTJOT09sd2lkR2wwYkdWY0lpeGlPbHdpWEZ4Y1hIY3JYQ0o5TEh0alRqcGNJblpoYkhWbFhDSXNZanBjSWxzalhGeGNYQzVkWEZ4Y1hIY3JYQ0o5TEh0aU9sd2llMXhjWEZ4ektsd2lMR1U2WENKY1hGeGNjeXA5WENJc1pVVTZJVEFzWXpwYmUySTZYQ0k2WEZ4Y1hIY3JYRnhjWEhNcVBUNWNJaXhsT2x3aUxGeGNYRnh6SzF3aUxISkNPaUV3TEdWWE9pRXdMR002VzN0alRqcGNJbk41YldKdmJGd2lMR0k2WENJNlhGeGNYSGNyWENKOUxIdGpUanBjSW5OMGNtbHVaMXdpTEdJNkoxd2lKeXhsT2lkY0lpZDlMSHRqVGpwY0luTjBjbWx1WjF3aUxHSTZYQ0luWENJc1pUcGNJaWRjSW4wc2UySTZYQ0pjWEZ4Y2R5dGNJaXh5T2pCOVhYMWRmU3g3WWpwY0lseGNYRndvWEZ4Y1hITXFYQ0lzWlRwY0lseGNYRnh6S2x4Y1hGd3BYQ0lzWlVVNklUQXNZenBiZTJJNlhDSmNYRnhjZHl0Y1hGeGNjeW85WENJc1pUcGNJbHhjWEZ4eksxd2lMSEpDT2lFd0xHVlhPaUV3TEdNNlczdGpUanBjSW1GMGRISnBZblYwWlZ3aUxHSTZYQ0pjWEZ4Y2R5dGNJaXh5T2pCOUxIdGpUanBjSW5OMGNtbHVaMXdpTEdJNkoxd2lKeXhsT2lkY0lpZDlMSHRqVGpwY0luTjBjbWx1WjF3aUxHSTZYQ0luWENJc1pUcGNJaWRjSW4wc2UySTZYQ0pjWEZ4Y2R5dGNJaXh5T2pCOVhYMWRmVjE5TEh0alRqcGNJbUoxYkd4bGRGd2lMR0k2WENKZVhGeGNYSE1xV3oxK1hWeGNYRnh6S2x3aUxISTZNSDBzZTJJNlhDSWplMXdpTEhOMFlYSjBjenA3WlRwY0luMWNJaXh6VERwY0luSjFZbmxjSW4xOVhYMTlLVHRvYkdwekxuSmxaMmx6ZEdWeVRHRnVaM1ZoWjJVb1hDSndjbTlqWlhOemFXNW5YQ0lzWm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1ZTJzNmUydGxlWGR2Y21RNlhDSkNkV1ptWlhKbFpGSmxZV1JsY2lCUVZtVmpkRzl5SUZCR2IyNTBJRkJKYldGblpTQlFSM0poY0docFkzTWdTR0Z6YUUxaGNDQmliMjlzWldGdUlHSjVkR1VnWTJoaGNpQmpiMnh2Y2lCa2IzVmliR1VnWm14dllYUWdhVzUwSUd4dmJtY2dVM1J5YVc1bklFRnljbUY1SUVac2IyRjBSR2xqZENCR2JHOWhkRXhwYzNRZ1NXNTBSR2xqZENCSmJuUk1hWE4wSUVwVFQwNUJjbkpoZVNCS1UwOU9UMkpxWldOMElFOWlhbVZqZENCVGRISnBibWRFYVdOMElGTjBjbWx1WjB4cGMzUWdWR0ZpYkdVZ1ZHRmliR1ZTYjNjZ1dFMU1JR1poYkhObElITjVibU5vY205dWFYcGxaQ0JwYm5RZ1lXSnpkSEpoWTNRZ1pteHZZWFFnY0hKcGRtRjBaU0JqYUdGeUlHSnZiMnhsWVc0Z2MzUmhkR2xqSUc1MWJHd2dhV1lnWTI5dWMzUWdabTl5SUhSeWRXVWdkMmhwYkdVZ2JHOXVaeUIwYUhKdmR5QnpkSEpwWTNSbWNDQm1hVzVoYkd4NUlIQnliM1JsWTNSbFpDQnBiWEJ2Y25RZ2JtRjBhWFpsSUdacGJtRnNJSEpsZEhWeWJpQjJiMmxrSUdWdWRXMGdaV3h6WlNCaWNtVmhheUIwY21GdWMybGxiblFnYm1WM0lHTmhkR05vSUdsdWMzUmhibU5sYjJZZ1lubDBaU0J6ZFhCbGNpQjJiMnhoZEdsc1pTQmpZWE5sSUdGemMyVnlkQ0J6YUc5eWRDQndZV05yWVdkbElHUmxabUYxYkhRZ1pHOTFZbXhsSUhCMVlteHBZeUIwY25rZ2RHaHBjeUJ6ZDJsMFkyZ2dZMjl1ZEdsdWRXVWdkR2h5YjNkeklIQnliM1JsWTNSbFpDQndkV0pzYVdNZ2NISnBkbUYwWlZ3aUxHTnZibk4wWVc1ME9sd2lVREpFSUZBelJDQklRVXhHWDFCSklGQkpJRkZWUVZKVVJWSmZVRWtnVkVGVklGUlhUMTlRU1Z3aUxIWmhjbWxoWW14bE9sd2laR2x6Y0d4aGVVaGxhV2RvZENCa2FYTndiR0Y1VjJsa2RHZ2diVzkxYzJWWklHMXZkWE5sV0NCdGIzVnpaVkJ5WlhOelpXUWdjRzF2ZFhObFdDQndiVzkxYzJWWklHdGxlU0JyWlhsRGIyUmxJSEJwZUdWc2N5Qm1iMk4xYzJWa0lHWnlZVzFsUTI5MWJuUWdabkpoYldWU1lYUmxJR2hsYVdkb2RDQjNhV1IwYUZ3aUxIUnBkR3hsT2x3aWMyVjBkWEFnWkhKaGQxd2lMR0oxYVd4MFgybHVPbHdpYzJsNlpTQmpjbVZoZEdWSGNtRndhR2xqY3lCaVpXZHBia1J5WVhjZ1kzSmxZWFJsVTJoaGNHVWdiRzloWkZOb1lYQmxJRkJUYUdGd1pTQmhjbU1nWld4c2FYQnpaU0JzYVc1bElIQnZhVzUwSUhGMVlXUWdjbVZqZENCMGNtbGhibWRzWlNCaVpYcHBaWElnWW1WNmFXVnlSR1YwWVdsc0lHSmxlbWxsY2xCdmFXNTBJR0psZW1sbGNsUmhibWRsYm5RZ1kzVnlkbVVnWTNWeWRtVkVaWFJoYVd3Z1kzVnlkbVZRYjJsdWRDQmpkWEoyWlZSaGJtZGxiblFnWTNWeWRtVlVhV2RvZEc1bGMzTWdjMmhoY0dVZ2MyaGhjR1ZOYjJSbElHSmxaMmx1UTI5dWRHOTFjaUJpWldkcGJsTm9ZWEJsSUdKbGVtbGxjbFpsY25SbGVDQmpkWEoyWlZabGNuUmxlQ0JsYm1SRGIyNTBiM1Z5SUdWdVpGTm9ZWEJsSUhGMVlXUnlZWFJwWTFabGNuUmxlQ0IyWlhKMFpYZ2daV3hzYVhCelpVMXZaR1VnYm05VGJXOXZkR2dnY21WamRFMXZaR1VnYzIxdmIzUm9JSE4wY205clpVTmhjQ0J6ZEhKdmEyVktiMmx1SUhOMGNtOXJaVmRsYVdkb2RDQnRiM1Z6WlVOc2FXTnJaV1FnYlc5MWMyVkVjbUZuWjJWa0lHMXZkWE5sVFc5MlpXUWdiVzkxYzJWUWNtVnpjMlZrSUcxdmRYTmxVbVZzWldGelpXUWdiVzkxYzJWWGFHVmxiQ0JyWlhsUWNtVnpjMlZrSUd0bGVWQnlaWE56WldSclpYbFNaV3hsWVhObFpDQnJaWGxVZVhCbFpDQndjbWx1ZENCd2NtbHVkR3h1SUhOaGRtVWdjMkYyWlVaeVlXMWxJR1JoZVNCb2IzVnlJRzFwYkd4cGN5QnRhVzUxZEdVZ2JXOXVkR2dnYzJWamIyNWtJSGxsWVhJZ1ltRmphMmR5YjNWdVpDQmpiR1ZoY2lCamIyeHZjazF2WkdVZ1ptbHNiQ0J1YjBacGJHd2dibTlUZEhKdmEyVWdjM1J5YjJ0bElHRnNjR2hoSUdKc2RXVWdZbkpwWjJoMGJtVnpjeUJqYjJ4dmNpQm5jbVZsYmlCb2RXVWdiR1Z5Y0VOdmJHOXlJSEpsWkNCellYUjFjbUYwYVc5dUlHMXZaR1ZzV0NCdGIyUmxiRmtnYlc5a1pXeGFJSE5qY21WbGJsZ2djMk55WldWdVdTQnpZM0psWlc1YUlHRnRZbWxsYm5RZ1pXMXBjM05wZG1VZ2MyaHBibWx1WlhOeklITndaV04xYkdGeUlHRmtaQ0JqY21WaGRHVkpiV0ZuWlNCaVpXZHBia05oYldWeVlTQmpZVzFsY21FZ1pXNWtRMkZ0WlhKaElHWnlkWE4wZFcwZ2IzSjBhRzhnY0dWeWMzQmxZM1JwZG1VZ2NISnBiblJEWVcxbGNtRWdjSEpwYm5SUWNtOXFaV04wYVc5dUlHTjFjbk52Y2lCbWNtRnRaVkpoZEdVZ2JtOURkWEp6YjNJZ1pYaHBkQ0JzYjI5d0lHNXZURzl2Y0NCd2IzQlRkSGxzWlNCd2RYTm9VM1I1YkdVZ2NtVmtjbUYzSUdKcGJtRnllU0JpYjI5c1pXRnVJR0o1ZEdVZ1kyaGhjaUJtYkc5aGRDQm9aWGdnYVc1MElITjBjaUIxYm1KcGJtRnllU0IxYm1obGVDQnFiMmx1SUcxaGRHTm9JRzFoZEdOb1FXeHNJRzVtSUc1bVl5QnVabkFnYm1aeklITndiR2wwSUhOd2JHbDBWRzlyWlc1eklIUnlhVzBnWVhCd1pXNWtJR0Z5Y21GNVEyOXdlU0JqYjI1allYUWdaWGh3WVc1a0lISmxkbVZ5YzJVZ2MyaHZjblJsYmlCemIzSjBJSE53YkdsalpTQnpkV0p6WlhRZ1ltOTRJSE53YUdWeVpTQnpjR2hsY21WRVpYUmhhV3dnWTNKbFlYUmxTVzV3ZFhRZ1kzSmxZWFJsVW1WaFpHVnlJR3h2WVdSQ2VYUmxjeUJzYjJGa1NsTlBUa0Z5Y21GNUlHeHZZV1JLVTA5T1QySnFaV04wSUd4dllXUlRkSEpwYm1keklHeHZZV1JVWVdKc1pTQnNiMkZrV0UxTUlHOXdaVzRnY0dGeWMyVllUVXdnYzJGMlpWUmhZbXhsSUhObGJHVmpkRVp2YkdSbGNpQnpaV3hsWTNSSmJuQjFkQ0JpWldkcGJsSmhkeUJpWldkcGJsSmxZMjl5WkNCamNtVmhkR1ZQZFhSd2RYUWdZM0psWVhSbFYzSnBkR1Z5SUdWdVpGSmhkeUJsYm1SU1pXTnZjbVFnVUhKcGJuUlhjbWwwWlhKellYWmxRbmwwWlhNZ2MyRjJaVXBUVDA1QmNuSmhlU0J6WVhabFNsTlBUazlpYW1WamRDQnpZWFpsVTNSeVpXRnRJSE5oZG1WVGRISnBibWR6SUhOaGRtVllUVXdnYzJWc1pXTjBUM1YwY0hWMElIQnZjRTFoZEhKcGVDQndjbWx1ZEUxaGRISnBlQ0J3ZFhOb1RXRjBjbWw0SUhKbGMyVjBUV0YwY21sNElISnZkR0YwWlNCeWIzUmhkR1ZZSUhKdmRHRjBaVmtnY205MFlYUmxXaUJ6WTJGc1pTQnphR1ZoY2xnZ2MyaGxZWEpaSUhSeVlXNXpiR0YwWlNCaGJXSnBaVzUwVEdsbmFIUWdaR2x5WldOMGFXOXVZV3hNYVdkb2RDQnNhV2RvZEVaaGJHeHZabVlnYkdsbmFIUnpJR3hwWjJoMFUzQmxZM1ZzWVhJZ2JtOU1hV2RvZEhNZ2JtOXliV0ZzSUhCdmFXNTBUR2xuYUhRZ2MzQnZkRXhwWjJoMElHbHRZV2RsSUdsdFlXZGxUVzlrWlNCc2IyRmtTVzFoWjJVZ2JtOVVhVzUwSUhKbGNYVmxjM1JKYldGblpTQjBhVzUwSUhSbGVIUjFjbVVnZEdWNGRIVnlaVTF2WkdVZ2RHVjRkSFZ5WlZkeVlYQWdZbXhsYm1RZ1kyOXdlU0JtYVd4MFpYSWdaMlYwSUd4dllXUlFhWGhsYkhNZ2MyVjBJSFZ3WkdGMFpWQnBlR1ZzY3lCaWJHVnVaRTF2WkdVZ2JHOWhaRk5vWVdSbGNpQlFVMmhoWkdWeWNtVnpaWFJUYUdGa1pYSWdjMmhoWkdWeUlHTnlaV0YwWlVadmJuUWdiRzloWkVadmJuUWdkR1Y0ZENCMFpYaDBSbTl1ZENCMFpYaDBRV3hwWjI0Z2RHVjRkRXhsWVdScGJtY2dkR1Y0ZEUxdlpHVWdkR1Y0ZEZOcGVtVWdkR1Y0ZEZkcFpIUm9JSFJsZUhSQmMyTmxiblFnZEdWNGRFUmxjMk5sYm5RZ1lXSnpJR05sYVd3Z1kyOXVjM1J5WVdsdUlHUnBjM1FnWlhod0lHWnNiMjl5SUd4bGNuQWdiRzluSUcxaFp5QnRZWEFnYldGNElHMXBiaUJ1YjNKdElIQnZkeUJ5YjNWdVpDQnpjU0J6Y1hKMElHRmpiM01nWVhOcGJpQmhkR0Z1SUdGMFlXNHlJR052Y3lCa1pXZHlaV1Z6SUhKaFpHbGhibk1nYzJsdUlIUmhiaUJ1YjJselpTQnViMmx6WlVSbGRHRnBiQ0J1YjJselpWTmxaV1FnY21GdVpHOXRJSEpoYm1SdmJVZGhkWE56YVdGdUlISmhibVJ2YlZObFpXUmNJbjBzWXpwYlpTNURURU5OTEdVdVEwSkRUU3hsTGtGVFRTeGxMbEZUVFN4bExrTk9UVjE5ZlNrN2FHeHFjeTV5WldkcGMzUmxja3hoYm1kMVlXZGxLRndpWW1GemFGd2lMR1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBQWHRqVGpwY0luWmhjbWxoWW14bFhDSXNkanBiZTJJNkwxeGNKRnRjWEhkY1hHUWpRRjFiWEZ4M1hGeGtYMTBxTDMwc2UySTZMMXhjSkZ4Y2V5Z3VLajhwWEZ4OUwzMWRmU3h6UFh0alRqcGNJbk4wY21sdVoxd2lMR0k2TDF3aUx5eGxPaTljSWk4c1l6cGJaUzVDUlN4MExIdGpUanBjSW5aaGNtbGhZbXhsWENJc1lqb3ZYRndrWEZ3b0x5eGxPaTljWENrdkxHTTZXMlV1UWtWZGZWMTlMR0U5ZTJOT09sd2ljM1J5YVc1blhDSXNZam92Snk4c1pUb3ZKeTk5TzNKbGRIVnlibnRoYkdsaGMyVnpPbHRjSW5Ob1hDSXNYQ0o2YzJoY0lsMHNiRG92TFQ5YllTMTZYRnd1WFNzdkxHczZlMnRsZVhkdmNtUTZYQ0pwWmlCMGFHVnVJR1ZzYzJVZ1pXeHBaaUJtYVNCbWIzSWdkMmhwYkdVZ2FXNGdaRzhnWkc5dVpTQmpZWE5sSUdWellXTWdablZ1WTNScGIyNWNJaXhzYVhSbGNtRnNPbHdpZEhKMVpTQm1ZV3h6WlZ3aUxHSjFhV3gwWDJsdU9sd2lZbkpsWVdzZ1kyUWdZMjl1ZEdsdWRXVWdaWFpoYkNCbGVHVmpJR1Y0YVhRZ1pYaHdiM0owSUdkbGRHOXdkSE1nYUdGemFDQndkMlFnY21WaFpHOXViSGtnY21WMGRYSnVJSE5vYVdaMElIUmxjM1FnZEdsdFpYTWdkSEpoY0NCMWJXRnpheUIxYm5ObGRDQmhiR2xoY3lCaWFXNWtJR0oxYVd4MGFXNGdZMkZzYkdWeUlHTnZiVzFoYm1RZ1pHVmpiR0Z5WlNCbFkyaHZJR1Z1WVdKc1pTQm9aV3h3SUd4bGRDQnNiMk5oYkNCc2IyZHZkWFFnYldGd1ptbHNaU0J3Y21sdWRHWWdjbVZoWkNCeVpXRmtZWEp5WVhrZ2MyOTFjbU5sSUhSNWNHVWdkSGx3WlhObGRDQjFiR2x0YVhRZ2RXNWhiR2xoY3lCelpYUWdjMmh2Y0hRZ1lYVjBiMnh2WVdRZ1ltY2dZbWx1Wkd0bGVTQmllV1VnWTJGd0lHTm9aR2x5SUdOc2IyNWxJR052YlhCaGNtZDFiV1Z1ZEhNZ1kyOXRjR05oYkd3Z1kyOXRjR04wYkNCamIyMXdaR1Z6WTNKcFltVWdZMjl0Y0dacGJHVnpJR052YlhCbmNtOTFjSE1nWTI5dGNIRjFiM1JsSUdOdmJYQjBZV2R6SUdOdmJYQjBjbmtnWTI5dGNIWmhiSFZsY3lCa2FYSnpJR1JwYzJGaWJHVWdaR2x6YjNkdUlHVmphRzkwWXlCbFkyaHZkR2tnWlcxMWJHRjBaU0JtWXlCbVp5Qm1iRzloZENCbWRXNWpkR2x2Ym5NZ1oyVjBZMkZ3SUdkbGRHeHVJR2hwYzNSdmNua2dhVzUwWldkbGNpQnFiMkp6SUd0cGJHd2diR2x0YVhRZ2JHOW5JRzV2WjJ4dllpQndiM0JrSUhCeWFXNTBJSEIxYzJoa0lIQjFjMmhzYmlCeVpXaGhjMmdnYzJOb1pXUWdjMlYwWTJGd0lITmxkRzl3ZENCemRHRjBJSE4xYzNCbGJtUWdkSFI1WTNSc0lIVnVablZ1WTNScGIyNGdkVzVvWVhOb0lIVnViR2x0YVhRZ2RXNXpaWFJ2Y0hRZ2RtRnlaV1FnZDJGcGRDQjNhR1Z1WTJVZ2QyaGxjbVVnZDJocFkyZ2dlbU52YlhCcGJHVWdlbVp2Y20xaGRDQjZablJ3SUhwc1pTQjZiVzlrYkc5aFpDQjZjR0Z5YzJWdmNIUnpJSHB3Y205bUlIcHdkSGtnZW5KbFoyVjRjR0Z5YzJVZ2VuTnZZMnRsZENCNmMzUjViR1VnZW5SamNGd2lMRzl3WlhKaGRHOXlPbHdpTFc1bElDMWxjU0F0YkhRZ0xXZDBJQzFtSUMxa0lDMWxJQzF6SUMxc0lDMWhYQ0o5TEdNNlczdGpUanBjSW5Ob1pXSmhibWRjSWl4aU9pOWVJeUZiWGx4Y2JsMHJjMmhjWEhNcUpDOHNjam94TUgwc2UyTk9PbHdpWm5WdVkzUnBiMjVjSWl4aU9pOWNYSGRiWEZ4M1hGeGtYMTBxWEZ4ektseGNLRnhjY3lwY1hDbGNYSE1xWEZ4N0x5eHlRam9oTUN4ak9sdGxMbWx1YUdWeWFYUW9aUzVVVFN4N1lqb3ZYRngzVzF4Y2QxeGNaRjlkS2k5OUtWMHNjam93ZlN4bExraERUU3hsTGs1TkxITXNZU3gwWFgxOUtUdG9iR3B6TG5KbFoybHpkR1Z5VEdGdVozVmhaMlVvWENKbGNteGhibWN0Y21Wd2JGd2lMR1oxYm1OMGFXOXVLR1VwZTNKbGRIVnlibnRyT250emNHVmphV0ZzWDJaMWJtTjBhVzl1Y3pwY0luTndZWGR1SUhOd1lYZHVYMnhwYm1zZ2MyVnNabHdpTEhKbGMyVnlkbVZrT2x3aVlXWjBaWElnWVc1a0lHRnVaR0ZzYzI5OE1UQWdZbUZ1WkNCaVpXZHBiaUJpYm05MElHSnZjaUJpYzJ3Z1luTnlJR0o0YjNJZ1kyRnpaU0JqWVhSamFDQmpiMjVrSUdScGRpQmxibVFnWm5WdUlHbG1JR3hsZENCdWIzUWdiMllnYjNJZ2IzSmxiSE5sZkRFd0lIRjFaWEo1SUhKbFkyVnBkbVVnY21WdElIUnllU0IzYUdWdUlIaHZjbHdpZlN4ak9sdDdZMDQ2WENKd2NtOXRjSFJjSWl4aU9sd2lYbHN3TFRsZEt6NGdYQ0lzY2pveE1IMHNlMk5PT2x3aVkyOXRiV1Z1ZEZ3aUxHSTZYQ0lsWENJc1pUcGNJaVJjSW4wc2UyTk9PbHdpYm5WdFltVnlYQ0lzWWpwY0lseGNYRnhpS0Z4Y1hGeGtLeU5iWVMxbVFTMUdNQzA1WFN0OFhGeGNYR1FyS0Z4Y1hGd3VYRnhjWEdRcktUOG9XMlZGWFZzdEsxMC9YRnhjWEdRcktUOHBYQ0lzY2pvd2ZTeGxMa0ZUVFN4bExsRlRUU3g3WTA0NlhDSmpiMjV6ZEdGdWRGd2lMR0k2WENKY1hGeGNQeWc2T2lrL0tGdEJMVnBkWEZ4Y1hIY3FLRG82S1Q4cEsxd2lmU3g3WTA0NlhDSmhjbkp2ZDF3aUxHSTZYQ0l0UGx3aWZTeDdZMDQ2WENKdmExd2lMR0k2WENKdmExd2lmU3g3WTA0NlhDSmxlR05zWVcxaGRHbHZibDl0WVhKclhDSXNZanBjSWlGY0luMHNlMk5PT2x3aVpuVnVZM1JwYjI1ZmIzSmZZWFJ2YlZ3aUxHSTZYQ0lvWEZ4Y1hHSmJZUzE2SjExYllTMTZRUzFhTUMwNVh5ZGRLanBiWVMxNkoxMWJZUzE2UVMxYU1DMDVYeWRkS2lsOEtGeGNYRnhpVzJFdGVpZGRXMkV0ZWtFdFdqQXRPVjhuWFNvcFhDSXNjam93ZlN4N1kwNDZYQ0oyWVhKcFlXSnNaVndpTEdJNlhDSmJRUzFhWFZ0aExYcEJMVm93TFRsZkoxMHFYQ0lzY2pvd2ZWMTlmU2s3YUd4cWN5NXlaV2RwYzNSbGNreGhibWQxWVdkbEtGd2ljM1I1YkhWelhDSXNablZ1WTNScGIyNG9kQ2w3ZG1GeUlHVTllMk5PT2x3aWRtRnlhV0ZpYkdWY0lpeGlPbHdpWEZ4Y1hDUmNJaXQwTGtsU2ZTeHZQWHRqVGpwY0ltaGxlR052Ykc5eVhDSXNZanBjSWlNb1cyRXRaa0V0UmpBdE9WMTdObjE4VzJFdFprRXRSakF0T1YxN00zMHBYQ0lzY2pveE1IMHNhVDFiWENKamFHRnljMlYwWENJc1hDSmpjM05jSWl4Y0ltUmxZblZuWENJc1hDSmxlSFJsYm1SY0lpeGNJbVp2Ym5RdFptRmpaVndpTEZ3aVptOXlYQ0lzWENKcGJYQnZjblJjSWl4Y0ltbHVZMngxWkdWY0lpeGNJbTFsWkdsaFhDSXNYQ0p0YVhocGJsd2lMRndpY0dGblpWd2lMRndpZDJGeWJsd2lMRndpZDJocGJHVmNJbDBzY2oxYlhDSmhablJsY2x3aUxGd2lZbVZtYjNKbFhDSXNYQ0ptYVhKemRDMXNaWFIwWlhKY0lpeGNJbVpwY25OMExXeHBibVZjSWl4Y0ltRmpkR2wyWlZ3aUxGd2labWx5YzNRdFkyaHBiR1JjSWl4Y0ltWnZZM1Z6WENJc1hDSm9iM1psY2x3aUxGd2liR0Z1WjF3aUxGd2liR2x1YTF3aUxGd2lkbWx6YVhSbFpGd2lYU3h1UFZ0Y0ltRmNJaXhjSW1GaVluSmNJaXhjSW1Ga1pISmxjM05jSWl4Y0ltRnlkR2xqYkdWY0lpeGNJbUZ6YVdSbFhDSXNYQ0poZFdScGIxd2lMRndpWWx3aUxGd2lZbXh2WTJ0eGRXOTBaVndpTEZ3aVltOWtlVndpTEZ3aVluVjBkRzl1WENJc1hDSmpZVzUyWVhOY0lpeGNJbU5oY0hScGIyNWNJaXhjSW1OcGRHVmNJaXhjSW1OdlpHVmNJaXhjSW1Sa1hDSXNYQ0prWld4Y0lpeGNJbVJsZEdGcGJITmNJaXhjSW1SbWJsd2lMRndpWkdsMlhDSXNYQ0prYkZ3aUxGd2laSFJjSWl4Y0ltVnRYQ0lzWENKbWFXVnNaSE5sZEZ3aUxGd2labWxuWTJGd2RHbHZibHdpTEZ3aVptbG5kWEpsWENJc1hDSm1iMjkwWlhKY0lpeGNJbVp2Y20xY0lpeGNJbWd4WENJc1hDSm9NbHdpTEZ3aWFETmNJaXhjSW1nMFhDSXNYQ0pvTlZ3aUxGd2lhRFpjSWl4Y0ltaGxZV1JsY2x3aUxGd2lhR2R5YjNWd1hDSXNYQ0pvZEcxc1hDSXNYQ0pwWENJc1hDSnBabkpoYldWY0lpeGNJbWx0WjF3aUxGd2lhVzV3ZFhSY0lpeGNJbWx1YzF3aUxGd2lhMkprWENJc1hDSnNZV0psYkZ3aUxGd2liR1ZuWlc1a1hDSXNYQ0pzYVZ3aUxGd2liV0Z5YTF3aUxGd2liV1Z1ZFZ3aUxGd2libUYyWENJc1hDSnZZbXBsWTNSY0lpeGNJbTlzWENJc1hDSndYQ0lzWENKeFhDSXNYQ0p4ZFc5MFpWd2lMRndpYzJGdGNGd2lMRndpYzJWamRHbHZibHdpTEZ3aWMzQmhibHdpTEZ3aWMzUnliMjVuWENJc1hDSnpkVzF0WVhKNVhDSXNYQ0p6ZFhCY0lpeGNJblJoWW14bFhDSXNYQ0owWW05a2VWd2lMRndpZEdSY0lpeGNJblJsZUhSaGNtVmhYQ0lzWENKMFptOXZkRndpTEZ3aWRHaGNJaXhjSW5Sb1pXRmtYQ0lzWENKMGFXMWxYQ0lzWENKMGNsd2lMRndpZFd4Y0lpeGNJblpoY2x3aUxGd2lkbWxrWlc5Y0lsMHNZVDFjSWx0Y1hGeGNMbHhjWEZ4elhGeGNYRzVjWEZ4Y1cxeGNYRnc2TEYxY0lpeHNQVnRjSW1Gc2FXZHVMV052Ym5SbGJuUmNJaXhjSW1Gc2FXZHVMV2wwWlcxelhDSXNYQ0poYkdsbmJpMXpaV3htWENJc1hDSmhibWx0WVhScGIyNWNJaXhjSW1GdWFXMWhkR2x2Ymkxa1pXeGhlVndpTEZ3aVlXNXBiV0YwYVc5dUxXUnBjbVZqZEdsdmJsd2lMRndpWVc1cGJXRjBhVzl1TFdSMWNtRjBhVzl1WENJc1hDSmhibWx0WVhScGIyNHRabWxzYkMxdGIyUmxYQ0lzWENKaGJtbHRZWFJwYjI0dGFYUmxjbUYwYVc5dUxXTnZkVzUwWENJc1hDSmhibWx0WVhScGIyNHRibUZ0WlZ3aUxGd2lZVzVwYldGMGFXOXVMWEJzWVhrdGMzUmhkR1ZjSWl4Y0ltRnVhVzFoZEdsdmJpMTBhVzFwYm1jdFpuVnVZM1JwYjI1Y0lpeGNJbUYxZEc5Y0lpeGNJbUpoWTJ0bVlXTmxMWFpwYzJsaWFXeHBkSGxjSWl4Y0ltSmhZMnRuY205MWJtUmNJaXhjSW1KaFkydG5jbTkxYm1RdFlYUjBZV05vYldWdWRGd2lMRndpWW1GamEyZHliM1Z1WkMxamJHbHdYQ0lzWENKaVlXTnJaM0p2ZFc1a0xXTnZiRzl5WENJc1hDSmlZV05yWjNKdmRXNWtMV2x0WVdkbFhDSXNYQ0ppWVdOclozSnZkVzVrTFc5eWFXZHBibHdpTEZ3aVltRmphMmR5YjNWdVpDMXdiM05wZEdsdmJsd2lMRndpWW1GamEyZHliM1Z1WkMxeVpYQmxZWFJjSWl4Y0ltSmhZMnRuY205MWJtUXRjMmw2WlZ3aUxGd2lZbTl5WkdWeVhDSXNYQ0ppYjNKa1pYSXRZbTkwZEc5dFhDSXNYQ0ppYjNKa1pYSXRZbTkwZEc5dExXTnZiRzl5WENJc1hDSmliM0prWlhJdFltOTBkRzl0TFd4bFpuUXRjbUZrYVhWelhDSXNYQ0ppYjNKa1pYSXRZbTkwZEc5dExYSnBaMmgwTFhKaFpHbDFjMXdpTEZ3aVltOXlaR1Z5TFdKdmRIUnZiUzF6ZEhsc1pWd2lMRndpWW05eVpHVnlMV0p2ZEhSdmJTMTNhV1IwYUZ3aUxGd2lZbTl5WkdWeUxXTnZiR3hoY0hObFhDSXNYQ0ppYjNKa1pYSXRZMjlzYjNKY0lpeGNJbUp2Y21SbGNpMXBiV0ZuWlZ3aUxGd2lZbTl5WkdWeUxXbHRZV2RsTFc5MWRITmxkRndpTEZ3aVltOXlaR1Z5TFdsdFlXZGxMWEpsY0dWaGRGd2lMRndpWW05eVpHVnlMV2x0WVdkbExYTnNhV05sWENJc1hDSmliM0prWlhJdGFXMWhaMlV0YzI5MWNtTmxYQ0lzWENKaWIzSmtaWEl0YVcxaFoyVXRkMmxrZEdoY0lpeGNJbUp2Y21SbGNpMXNaV1owWENJc1hDSmliM0prWlhJdGJHVm1kQzFqYjJ4dmNsd2lMRndpWW05eVpHVnlMV3hsWm5RdGMzUjViR1ZjSWl4Y0ltSnZjbVJsY2kxc1pXWjBMWGRwWkhSb1hDSXNYQ0ppYjNKa1pYSXRjbUZrYVhWelhDSXNYQ0ppYjNKa1pYSXRjbWxuYUhSY0lpeGNJbUp2Y21SbGNpMXlhV2RvZEMxamIyeHZjbHdpTEZ3aVltOXlaR1Z5TFhKcFoyaDBMWE4wZVd4bFhDSXNYQ0ppYjNKa1pYSXRjbWxuYUhRdGQybGtkR2hjSWl4Y0ltSnZjbVJsY2kxemNHRmphVzVuWENJc1hDSmliM0prWlhJdGMzUjViR1ZjSWl4Y0ltSnZjbVJsY2kxMGIzQmNJaXhjSW1KdmNtUmxjaTEwYjNBdFkyOXNiM0pjSWl4Y0ltSnZjbVJsY2kxMGIzQXRiR1ZtZEMxeVlXUnBkWE5jSWl4Y0ltSnZjbVJsY2kxMGIzQXRjbWxuYUhRdGNtRmthWFZ6WENJc1hDSmliM0prWlhJdGRHOXdMWE4wZVd4bFhDSXNYQ0ppYjNKa1pYSXRkRzl3TFhkcFpIUm9YQ0lzWENKaWIzSmtaWEl0ZDJsa2RHaGNJaXhjSW1KdmRIUnZiVndpTEZ3aVltOTRMV1JsWTI5eVlYUnBiMjR0WW5KbFlXdGNJaXhjSW1KdmVDMXphR0ZrYjNkY0lpeGNJbUp2ZUMxemFYcHBibWRjSWl4Y0ltSnlaV0ZyTFdGbWRHVnlYQ0lzWENKaWNtVmhheTFpWldadmNtVmNJaXhjSW1KeVpXRnJMV2x1YzJsa1pWd2lMRndpWTJGd2RHbHZiaTF6YVdSbFhDSXNYQ0pqYkdWaGNsd2lMRndpWTJ4cGNGd2lMRndpWTJ4cGNDMXdZWFJvWENJc1hDSmpiMnh2Y2x3aUxGd2lZMjlzZFcxdUxXTnZkVzUwWENJc1hDSmpiMngxYlc0dFptbHNiRndpTEZ3aVkyOXNkVzF1TFdkaGNGd2lMRndpWTI5c2RXMXVMWEoxYkdWY0lpeGNJbU52YkhWdGJpMXlkV3hsTFdOdmJHOXlYQ0lzWENKamIyeDFiVzR0Y25Wc1pTMXpkSGxzWlZ3aUxGd2lZMjlzZFcxdUxYSjFiR1V0ZDJsa2RHaGNJaXhjSW1OdmJIVnRiaTF6Y0dGdVhDSXNYQ0pqYjJ4MWJXNHRkMmxrZEdoY0lpeGNJbU52YkhWdGJuTmNJaXhjSW1OdmJuUmxiblJjSWl4Y0ltTnZkVzUwWlhJdGFXNWpjbVZ0Wlc1MFhDSXNYQ0pqYjNWdWRHVnlMWEpsYzJWMFhDSXNYQ0pqZFhKemIzSmNJaXhjSW1ScGNtVmpkR2x2Ymx3aUxGd2laR2x6Y0d4aGVWd2lMRndpWlcxd2RIa3RZMlZzYkhOY0lpeGNJbVpwYkhSbGNsd2lMRndpWm14bGVGd2lMRndpWm14bGVDMWlZWE5wYzF3aUxGd2labXhsZUMxa2FYSmxZM1JwYjI1Y0lpeGNJbVpzWlhndFpteHZkMXdpTEZ3aVpteGxlQzFuY205M1hDSXNYQ0ptYkdWNExYTm9jbWx1YTF3aUxGd2labXhsZUMxM2NtRndYQ0lzWENKbWJHOWhkRndpTEZ3aVptOXVkRndpTEZ3aVptOXVkQzFtWVcxcGJIbGNJaXhjSW1admJuUXRabVZoZEhWeVpTMXpaWFIwYVc1bmMxd2lMRndpWm05dWRDMXJaWEp1YVc1blhDSXNYQ0ptYjI1MExXeGhibWQxWVdkbExXOTJaWEp5YVdSbFhDSXNYQ0ptYjI1MExYTnBlbVZjSWl4Y0ltWnZiblF0YzJsNlpTMWhaR3AxYzNSY0lpeGNJbVp2Ym5RdGMzUnlaWFJqYUZ3aUxGd2labTl1ZEMxemRIbHNaVndpTEZ3aVptOXVkQzEyWVhKcFlXNTBYQ0lzWENKbWIyNTBMWFpoY21saGJuUXRiR2xuWVhSMWNtVnpYQ0lzWENKbWIyNTBMWGRsYVdkb2RGd2lMRndpYUdWcFoyaDBYQ0lzWENKb2VYQm9aVzV6WENJc1hDSnBZMjl1WENJc1hDSnBiV0ZuWlMxdmNtbGxiblJoZEdsdmJsd2lMRndpYVcxaFoyVXRjbVZ1WkdWeWFXNW5YQ0lzWENKcGJXRm5aUzF5WlhOdmJIVjBhVzl1WENJc1hDSnBiV1V0Ylc5a1pWd2lMRndpYVc1b1pYSnBkRndpTEZ3aWFXNXBkR2xoYkZ3aUxGd2lhblZ6ZEdsbWVTMWpiMjUwWlc1MFhDSXNYQ0pzWldaMFhDSXNYQ0pzWlhSMFpYSXRjM0JoWTJsdVoxd2lMRndpYkdsdVpTMW9aV2xuYUhSY0lpeGNJbXhwYzNRdGMzUjViR1ZjSWl4Y0lteHBjM1F0YzNSNWJHVXRhVzFoWjJWY0lpeGNJbXhwYzNRdGMzUjViR1V0Y0c5emFYUnBiMjVjSWl4Y0lteHBjM1F0YzNSNWJHVXRkSGx3WlZ3aUxGd2liV0Z5WjJsdVhDSXNYQ0p0WVhKbmFXNHRZbTkwZEc5dFhDSXNYQ0p0WVhKbmFXNHRiR1ZtZEZ3aUxGd2liV0Z5WjJsdUxYSnBaMmgwWENJc1hDSnRZWEpuYVc0dGRHOXdYQ0lzWENKdFlYSnJjMXdpTEZ3aWJXRnphMXdpTEZ3aWJXRjRMV2hsYVdkb2RGd2lMRndpYldGNExYZHBaSFJvWENJc1hDSnRhVzR0YUdWcFoyaDBYQ0lzWENKdGFXNHRkMmxrZEdoY0lpeGNJbTVoZGkxa2IzZHVYQ0lzWENKdVlYWXRhVzVrWlhoY0lpeGNJbTVoZGkxc1pXWjBYQ0lzWENKdVlYWXRjbWxuYUhSY0lpeGNJbTVoZGkxMWNGd2lMRndpYm05dVpWd2lMRndpYm05eWJXRnNYQ0lzWENKdlltcGxZM1F0Wm1sMFhDSXNYQ0p2WW1wbFkzUXRjRzl6YVhScGIyNWNJaXhjSW05d1lXTnBkSGxjSWl4Y0ltOXlaR1Z5WENJc1hDSnZjbkJvWVc1elhDSXNYQ0p2ZFhSc2FXNWxYQ0lzWENKdmRYUnNhVzVsTFdOdmJHOXlYQ0lzWENKdmRYUnNhVzVsTFc5bVpuTmxkRndpTEZ3aWIzVjBiR2x1WlMxemRIbHNaVndpTEZ3aWIzVjBiR2x1WlMxM2FXUjBhRndpTEZ3aWIzWmxjbVpzYjNkY0lpeGNJbTkyWlhKbWJHOTNMWGR5WVhCY0lpeGNJbTkyWlhKbWJHOTNMWGhjSWl4Y0ltOTJaWEptYkc5M0xYbGNJaXhjSW5CaFpHUnBibWRjSWl4Y0luQmhaR1JwYm1jdFltOTBkRzl0WENJc1hDSndZV1JrYVc1bkxXeGxablJjSWl4Y0luQmhaR1JwYm1jdGNtbG5hSFJjSWl4Y0luQmhaR1JwYm1jdGRHOXdYQ0lzWENKd1lXZGxMV0p5WldGckxXRm1kR1Z5WENJc1hDSndZV2RsTFdKeVpXRnJMV0psWm05eVpWd2lMRndpY0dGblpTMWljbVZoYXkxcGJuTnBaR1ZjSWl4Y0luQmxjbk53WldOMGFYWmxYQ0lzWENKd1pYSnpjR1ZqZEdsMlpTMXZjbWxuYVc1Y0lpeGNJbkJ2YVc1MFpYSXRaWFpsYm5SelhDSXNYQ0p3YjNOcGRHbHZibHdpTEZ3aWNYVnZkR1Z6WENJc1hDSnlaWE5wZW1WY0lpeGNJbkpwWjJoMFhDSXNYQ0owWVdJdGMybDZaVndpTEZ3aWRHRmliR1V0YkdGNWIzVjBYQ0lzWENKMFpYaDBMV0ZzYVdkdVhDSXNYQ0owWlhoMExXRnNhV2R1TFd4aGMzUmNJaXhjSW5SbGVIUXRaR1ZqYjNKaGRHbHZibHdpTEZ3aWRHVjRkQzFrWldOdmNtRjBhVzl1TFdOdmJHOXlYQ0lzWENKMFpYaDBMV1JsWTI5eVlYUnBiMjR0YkdsdVpWd2lMRndpZEdWNGRDMWtaV052Y21GMGFXOXVMWE4wZVd4bFhDSXNYQ0owWlhoMExXbHVaR1Z1ZEZ3aUxGd2lkR1Y0ZEMxdmRtVnlabXh2ZDF3aUxGd2lkR1Y0ZEMxeVpXNWtaWEpwYm1kY0lpeGNJblJsZUhRdGMyaGhaRzkzWENJc1hDSjBaWGgwTFhSeVlXNXpabTl5YlZ3aUxGd2lkR1Y0ZEMxMWJtUmxjbXhwYm1VdGNHOXphWFJwYjI1Y0lpeGNJblJ2Y0Z3aUxGd2lkSEpoYm5ObWIzSnRYQ0lzWENKMGNtRnVjMlp2Y20wdGIzSnBaMmx1WENJc1hDSjBjbUZ1YzJadmNtMHRjM1I1YkdWY0lpeGNJblJ5WVc1emFYUnBiMjVjSWl4Y0luUnlZVzV6YVhScGIyNHRaR1ZzWVhsY0lpeGNJblJ5WVc1emFYUnBiMjR0WkhWeVlYUnBiMjVjSWl4Y0luUnlZVzV6YVhScGIyNHRjSEp2Y0dWeWRIbGNJaXhjSW5SeVlXNXphWFJwYjI0dGRHbHRhVzVuTFdaMWJtTjBhVzl1WENJc1hDSjFibWxqYjJSbExXSnBaR2xjSWl4Y0luWmxjblJwWTJGc0xXRnNhV2R1WENJc1hDSjJhWE5wWW1sc2FYUjVYQ0lzWENKM2FHbDBaUzF6Y0dGalpWd2lMRndpZDJsa2IzZHpYQ0lzWENKM2FXUjBhRndpTEZ3aWQyOXlaQzFpY21WaGExd2lMRndpZDI5eVpDMXpjR0ZqYVc1blhDSXNYQ0ozYjNKa0xYZHlZWEJjSWl4Y0lub3RhVzVrWlhoY0lsMHNaRDFiWENKY1hGeGNlMXdpTEZ3aVhGeGNYSDFjSWl4Y0lseGNYRncvWENJc1hDSW9YRnhjWEdKU1pYUjFjbTVjWEZ4Y1lpbGNJaXhjSWloY1hGeGNZa1Z1WkZ4Y1hGeGlLVndpTEZ3aUtGeGNYRnhpWlc1a1hGeGNYR0lwWENJc1hDSTdYQ0lzWENJalhGeGNYSE5jSWl4Y0lseGNYRndxWEZ4Y1hITmNJaXhjSWowOVBWeGNYRnh6WENJc1hDSmNYRnhjZkZ3aVhUdHlaWFIxY201N1lXeHBZWE5sY3pwYlhDSnpkSGxzWENKZExHTkpPaUV4TEdrNlhDSW9YQ0lyWkM1cWIybHVLRndpZkZ3aUtTdGNJaWxjSWl4ck9sd2lhV1lnWld4elpTQm1iM0lnYVc1Y0lpeGpPbHQwTGxGVFRTeDBMa0ZUVFN4MExrTk1RMDBzZEM1RFFrTk5MRzhzZTJJNlhDSmNYRnhjTGx0aExYcEJMVnBkVzJFdGVrRXRXakF0T1Y4dFhTcGNJaXRoTEhKQ09pRXdMR002VzN0alRqcGNJbU5zWVhOelhDSXNZanBjSWx4Y1hGd3VXMkV0ZWtFdFdsMWJZUzE2UVMxYU1DMDVYeTFkS2x3aWZWMTlMSHRpT2x3aVhGeGNYQ05iWVMxNlFTMWFYVnRoTFhwQkxWb3dMVGxmTFYwcVhDSXJZU3h5UWpvaE1DeGpPbHQ3WTA0NlhDSnBaRndpTEdJNlhDSmNYRnhjSTF0aExYcEJMVnBkVzJFdGVrRXRXakF0T1Y4dFhTcGNJbjFkZlN4N1lqcGNJbHhjWEZ4aUtGd2lLMjR1YW05cGJpaGNJbnhjSWlrclhDSXBYQ0lyWVN4eVFqb2hNQ3hqT2x0N1kwNDZYQ0owWVdkY0lpeGlPbHdpWEZ4Y1hHSmJZUzE2UVMxYVhWdGhMWHBCTFZvd0xUbGZMVjBxWENKOVhYMHNlMk5PT2x3aWNITmxkV1J2WENJc1lqcGNJaVkvT2o4NlhGeGNYR0lvWENJcmNpNXFiMmx1S0Z3aWZGd2lLU3RjSWlsY0lpdGhmU3g3WTA0NlhDSmhkRjl5ZFd4bFhDSXNZanBjSWtBb1hDSXJhUzVxYjJsdUtGd2lmRndpS1N0Y0lpbGNYRnhjWWx3aWZTeGxMSFF1UTFOVFRrMHNkQzVPVFN4N1kwNDZYQ0ptZFc1amRHbHZibHdpTEdJNlhDSmNYRnhjWWx0aExYcEJMVnBkVzJFdGVrRXRXakF0T1Y4dFhTcGNYRnhjS0M0cVhGeGNYQ2xjSWl4cE9sd2lXMXhjWEZ4dVhWd2lMSEpDT2lFd0xHTTZXM3RqVGpwY0luUnBkR3hsWENJc1lqcGNJbHhjWEZ4aVcyRXRla0V0V2wxYllTMTZRUzFhTUMwNVh5MWRLbHdpZlN4N1kwNDZYQ0p3WVhKaGJYTmNJaXhpT2k5Y1hDZ3ZMR1U2TDF4Y0tTOHNZenBiYnl4bExIUXVRVk5OTEhRdVExTlRUazBzZEM1T1RTeDBMbEZUVFYxOVhYMHNlMk5PT2x3aVlYUjBjbWxpZFhSbFhDSXNZanBjSWx4Y1hGeGlLRndpSzJ3dWNtVjJaWEp6WlNncExtcHZhVzRvWENKOFhDSXBLMXdpS1Z4Y1hGeGlYQ0o5WFgxOUtUdG9iR3B6TG5KbFoybHpkR1Z5VEdGdVozVmhaMlVvWENKc1pYTnpYQ0lzWm5WdVkzUnBiMjRvWlNsN2RtRnlJSEk5WENKYlhGeGNYSGN0WFN0Y0lpeDBQVndpS0Z3aUszSXJYQ0o4UUh0Y0lpdHlLMXdpZlNrclhDSXNZVDFiWFN4alBWdGRMRzQ5Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1ZTJOT09sd2ljM1J5YVc1blhDSXNZanBjSW40L1hDSXJaU3RjSWk0cVAxd2lLMlY5ZlN4cFBXWjFibU4wYVc5dUtHVXNjaXgwS1h0eVpYUjFjbTU3WTA0NlpTeGlPbklzY2pwMGZYMHNjejFtZFc1amRHbHZiaWh5TEhRc1lTbDdjbVYwZFhKdUlHVXVhVzVvWlhKcGRDaDdZMDQ2Y2l4aU9uUXJYQ0pjWEZ4Y0tGd2lMR1U2WENKY1hGeGNLRndpTEhKQ09pRXdMR1ZGT2lFd0xISTZNSDBzWVNsOUxHSTllMkk2WENKY1hGeGNLRndpTEdVNlhDSmNYRnhjS1Z3aUxHTTZZeXh5T2pCOU8yTXVjSFZ6YUNobExrTk1RMDBzWlM1RFFrTk5MRzRvWENJblhDSXBMRzRvSjF3aUp5a3NaUzVEVTFOT1RTeHBLRndpYUdWNFkyOXNiM0pjSWl4Y0lpTmJNQzA1UVMxR1lTMW1YU3RjWEZ4Y1lsd2lLU3h6S0Z3aVpuVnVZM1JwYjI1Y0lpeGNJaWgxY214OFpHRjBZUzExY21rcFhDSXNlM04wWVhKMGN6cDdZMDQ2WENKemRISnBibWRjSWl4bE9sd2lXMXhjWEZ3cFhGeGNYRzVkWENJc1pVVTZJVEI5ZlNrc2N5aGNJbVoxYm1OMGFXOXVYQ0lzY2lrc1lpeHBLRndpZG1GeWFXRmliR1ZjSWl4Y0lrQkFQMXdpSzNJc01UQXBMR2tvWENKMllYSnBZV0pzWlZ3aUxGd2lRSHRjSWl0eUsxd2lmVndpS1N4cEtGd2lZblZwYkhSZmFXNWNJaXhjSW40L1lGdGVZRjBxUDJCY0lpa3NlMk5PT2x3aVlYUjBjbWxpZFhSbFhDSXNZanB5SzF3aVhGeGNYSE1xT2x3aUxHVTZYQ0k2WENJc2NrSTZJVEFzWlVVNklUQjlLVHQyWVhJZ2J6MWpMbU52Ym1OaGRDaDdZanBjSW50Y0lpeGxPbHdpZlZ3aUxHTTZZWDBwTEhVOWUySkxPbHdpZDJobGJsd2lMR1ZYT2lFd0xHTTZXM3RpU3pwY0ltRnVaQ0J1YjNSY0luMWRMbU52Ym1OaGRDaGpLWDBzUXoxN1kwNDZYQ0poZEhSeWFXSjFkR1ZjSWl4aU9uUXNaVHBjSWpwY0lpeGxSVG9oTUN4ak9sdGxMa05NUTAwc1pTNURRa05OWFN4cE9pOWNYRk12TEhOMFlYSjBjenA3WlRwY0lsczdmVjFjSWl4eVJUb2hNQ3hqT21Nc2FUcGNJbHM4UFNSZFhDSjlmU3hzUFh0alRqcGNJbUYwWDNKMWJHVmNJaXhpT2x3aVFDaHBiWEJ2Y25SOGJXVmthV0Y4WTJoaGNuTmxkSHhtYjI1MExXWmhZMlY4S0MxYllTMTZYU3N0S1Q5clpYbG1jbUZ0WlhOOGMzVndjRzl5ZEhOOFpHOWpkVzFsYm5SOGJtRnRaWE53WVdObGZIQmhaMlY4ZG1sbGQzQnZjblI4YUc5emRDbGNYRnhjWWx3aUxITjBZWEowY3pwN1pUcGNJbHM3ZTMxZFhDSXNja1U2SVRBc1l6cGpMSEk2TUgxOUxHUTllMk5PT2x3aWRtRnlhV0ZpYkdWY0lpeDJPbHQ3WWpwY0lrQmNJaXR5SzF3aVhGeGNYSE1xT2x3aUxISTZNVFY5TEh0aU9sd2lRRndpSzNKOVhTeHpkR0Z5ZEhNNmUyVTZYQ0piTzMxZFhDSXNja1U2SVRBc1l6cHZmWDBzY0QxN2RqcGJlMkk2WENKYlhGeGNYQzRqT2laY1hGeGNXMTFjSWl4bE9sd2lXenQ3ZlYxY0luMHNlMkk2ZEN0Y0lsdGVPMTBxZTF3aUxHVTZYQ0o3WENKOVhTeHlRam9oTUN4eVJUb2hNQ3hwT2x3aVd6dzlKeVJjWEZ3aVhWd2lMR002VzJVdVEweERUU3hsTGtOQ1EwMHNkU3hwS0Z3aWEyVjVkMjl5WkZ3aUxGd2lZV3hzWEZ4Y1hHSmNJaWtzYVNoY0luWmhjbWxoWW14bFhDSXNYQ0pBZTF3aUszSXJYQ0o5WENJcExHa29YQ0owWVdkY0lpeDBLMXdpSlQ5Y0lpd3dLU3hwS0Z3aWFXUmNJaXhjSWlOY0lpdDBLU3hwS0Z3aVkyeGhjM05jSWl4Y0lseGNYRnd1WENJcmRDd3dLU3hwS0Z3aWEyVjVkMjl5WkZ3aUxGd2lKbHdpTERBcExITW9YQ0p3YzJWMVpHOWNJaXhjSWpwdWIzUmNJaWtzY3loY0ltdGxlWGR2Y21SY0lpeGNJanBsZUhSbGJtUmNJaWtzYVNoY0luQnpaWFZrYjF3aUxGd2lPam8vWENJcmRDa3NlMk5PT2x3aVlYUjBjbDl6Wld4bFkzUnZjbHdpTEdJNlhDSmNYRnhjVzF3aUxHVTZYQ0pjWEZ4Y1hWd2lmU3g3WWpwY0lseGNYRndvWENJc1pUcGNJbHhjWEZ3cFhDSXNZenB2ZlN4N1lqcGNJaUZwYlhCdmNuUmhiblJjSW4xZGZUdHlaWFIxY200Z1lTNXdkWE5vS0dVdVEweERUU3hsTGtOQ1EwMHNiQ3hrTEhBc1F5a3NlMk5KT2lFd0xHazZYQ0piUFQ0bkx6d29KRnhjWENKZFhDSXNZenBoZlgwcE8yaHNhbk11Y21WbmFYTjBaWEpNWVc1bmRXRm5aU2hjSW5OallXeGhYQ0lzWm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5ZTJOT09sd2lZVzV1YjNSaGRHbHZibHdpTEdJNlhDSkFXMEV0V21FdGVsMHJYQ0o5TEdFOWUyTk9PbHdpYzNSeWFXNW5YQ0lzWWpvbmRUOXlQMXdpWENKY0lpY3NaVG9uWENKY0lsd2lKeXh5T2pFd2ZTeHlQWHRqVGpwY0luTjViV0p2YkZ3aUxHSTZYQ0luWEZ4Y1hIZGJYRnhjWEhkY1hGeGNaRjlkS2lnL0lTY3BYQ0o5TEdNOWUyTk9PbHdpZEhsd1pWd2lMR0k2WENKY1hGeGNZbHRCTFZwZFcwRXRXbUV0ZWpBdE9WOWRLbHdpTEhJNk1IMHNhVDE3WTA0NlhDSjBhWFJzWlZ3aUxHSTZMMXRlTUMwNVhGeHVYRngwSUZ3aUp5Z3BMQzVnZTMxY1hGdGNYRjA2TzExYlhseGNibHhjZENCY0lpY29LU3d1WUh0OVhGeGJYRnhkT2p0ZEszeGJYakF0T1Z4Y2JseGNkQ0JjSWljb0tTd3VZSHQ5WEZ4YlhGeGRPanM5WFM4c2Nqb3dmU3hzUFh0alRqcGNJbU5zWVhOelhDSXNZa3M2WENKamJHRnpjeUJ2WW1wbFkzUWdkSEpoYVhRZ2RIbHdaVndpTEdVNkwxczZQWHRjWEZzb1hGeHVPMTB2TEdNNlczdGpUanBjSW10bGVYZHZjbVJjSWl4aVN6cGNJbVY0ZEdWdVpITWdkMmwwYUZ3aUxISTZNVEI5TEdsZGZTeHVQWHRqVGpwY0ltWjFibU4wYVc5dVhDSXNZa3M2WENKa1pXWWdkbUZzWENJc1pUb3ZXem85ZTF4Y1d5aGNYRzQ3WFM4c1l6cGJhVjE5TzNKbGRIVnlibnRyT250c2FYUmxjbUZzT2x3aWRISjFaU0JtWVd4elpTQnVkV3hzWENJc2EyVjVkMjl5WkRwY0luUjVjR1VnZVdsbGJHUWdiR0Y2ZVNCdmRtVnljbWxrWlNCa1pXWWdkMmwwYUNCMllXd2dkbUZ5SUhObFlXeGxaQ0JoWW5OMGNtRmpkQ0J3Y21sMllYUmxJSFJ5WVdsMElHOWlhbVZqZENCcFppQm1iM0pUYjIxbElHWnZjaUIzYUdsc1pTQjBhSEp2ZHlCbWFXNWhiR3g1SUhCeWIzUmxZM1JsWkNCbGVIUmxibVJ6SUdsdGNHOXlkQ0JtYVc1aGJDQnlaWFIxY200Z1pXeHpaU0JpY21WaGF5QnVaWGNnWTJGMFkyZ2djM1Z3WlhJZ1kyeGhjM01nWTJGelpTQndZV05yWVdkbElHUmxabUYxYkhRZ2RISjVJSFJvYVhNZ2JXRjBZMmdnWTI5dWRHbHVkV1VnZEdoeWIzZHpJR2x0Y0d4cFkybDBYQ0o5TEdNNlcyVXVRMHhEVFN4bExrTkNRMDBzWVN4bExsRlRUU3h5TEdNc2JpeHNMR1V1UTA1TkxIUmRmWDBwTzJoc2FuTXVjbVZuYVhOMFpYSk1ZVzVuZFdGblpTaGNJbXBoZG1GY0lpeG1kVzVqZEdsdmJpaGxLWHQyWVhJZ1lUMWxMbFZKVWl0Y0lpZzhYQ0lyWlM1VlNWSXJYQ0krS1Q5Y0lpeDBQVndpWm1Gc2MyVWdjM2x1WTJoeWIyNXBlbVZrSUdsdWRDQmhZbk4wY21GamRDQm1iRzloZENCd2NtbDJZWFJsSUdOb1lYSWdZbTl2YkdWaGJpQnpkR0YwYVdNZ2JuVnNiQ0JwWmlCamIyNXpkQ0JtYjNJZ2RISjFaU0IzYUdsc1pTQnNiMjVuSUhOMGNtbGpkR1p3SUdacGJtRnNiSGtnY0hKdmRHVmpkR1ZrSUdsdGNHOXlkQ0J1WVhScGRtVWdabWx1WVd3Z2RtOXBaQ0JsYm5WdElHVnNjMlVnWW5KbFlXc2dkSEpoYm5OcFpXNTBJR05oZEdOb0lHbHVjM1JoYm1ObGIyWWdZbmwwWlNCemRYQmxjaUIyYjJ4aGRHbHNaU0JqWVhObElHRnpjMlZ5ZENCemFHOXlkQ0J3WVdOcllXZGxJR1JsWm1GMWJIUWdaRzkxWW14bElIQjFZbXhwWXlCMGNua2dkR2hwY3lCemQybDBZMmdnWTI5dWRHbHVkV1VnZEdoeWIzZHpJSEJ5YjNSbFkzUmxaQ0J3ZFdKc2FXTWdjSEpwZG1GMFpWd2lMR005WENJb1hGeGNYR0lvTUdKYk1ERmZYU3NwZkZ4Y1hGeGlNRnQ0V0YxYllTMW1RUzFHTUMwNVgxMHJmQ2hjWEZ4Y1lsdGNYRnhjWkY5ZEt5aGNYRnhjTGx0Y1hGeGNaRjlkS2lrL2ZGeGNYRnd1VzF4Y1hGeGtYMTByS1NoYlpVVmRXeTByWFQ5Y1hGeGNaQ3NwUHlsYmJFeG1SbDAvWENJc2NqMTdZMDQ2WENKdWRXMWlaWEpjSWl4aU9tTXNjam93ZlR0eVpYUjFjbTU3WVd4cFlYTmxjenBiWENKcWMzQmNJbDBzYXpwMExHazZMenhjWEM4dkxHTTZXM3RqVGpwY0ltcGhkbUZrYjJOY0lpeGlPbHdpTDF4Y1hGd3FYRnhjWENwY0lpeGxPbHdpWEZ4Y1hDb3ZYQ0lzY2pvd0xHTTZXM3RqVGpwY0ltcGhkbUZrYjJOMFlXZGNJaXhpT2x3aUtGNThYRnhjWEhNcFFGdEJMVnBoTFhwZEsxd2lmVjE5TEdVdVEweERUU3hsTGtOQ1EwMHNaUzVCVTAwc1pTNVJVMDBzZTJOT09sd2lZMnhoYzNOY0lpeGlTenBjSW1Oc1lYTnpJR2x1ZEdWeVptRmpaVndpTEdVNkwxdDdPejFkTHl4bFJUb2hNQ3hyT2x3aVkyeGhjM01nYVc1MFpYSm1ZV05sWENJc2FUb3ZXenBjSWx4Y1cxeGNYVjB2TEdNNlczdGlTenBjSW1WNGRHVnVaSE1nYVcxd2JHVnRaVzUwYzF3aWZTeGxMbFZVVFYxOUxIdGlTenBjSW01bGR5QjBhSEp2ZHlCeVpYUjFjbTVjSWl4eU9qQjlMSHRqVGpwY0ltWjFibU4wYVc5dVhDSXNZanBjSWloY0lpdGhLMXdpWEZ4Y1hITXJLU3RjSWl0bExsVkpVaXRjSWx4Y1hGeHpLbHhjWEZ3b1hDSXNja0k2SVRBc1pUb3ZXM3M3UFYwdkxHVkZPaUV3TEdzNmRDeGpPbHQ3WWpwbExsVkpVaXRjSWx4Y1hGeHpLbHhjWEZ3b1hDSXNja0k2SVRBc2Nqb3dMR002VzJVdVZWUk5YWDBzZTJOT09sd2ljR0Z5WVcxelhDSXNZam92WEZ3b0x5eGxPaTljWENrdkxHczZkQ3h5T2pBc1l6cGJaUzVCVTAwc1pTNVJVMDBzWlM1RFRrMHNaUzVEUWtOTlhYMHNaUzVEVEVOTkxHVXVRMEpEVFYxOUxISXNlMk5PT2x3aVlXNXViM1JoZEdsdmJsd2lMR0k2WENKQVcwRXRXbUV0ZWwwclhDSjlYWDE5S1R0b2JHcHpMbkpsWjJsemRHVnlUR0Z1WjNWaFoyVW9YQ0p2WW1wbFkzUnBkbVZqWENJc1puVnVZM1JwYjI0b1pTbDdkbUZ5SUhROWUydGxlWGR2Y21RNlhDSnBiblFnWm14dllYUWdkMmhwYkdVZ1kyaGhjaUJsZUhCdmNuUWdjMmw2Wlc5bUlIUjVjR1ZrWldZZ1kyOXVjM1FnYzNSeWRXTjBJR1p2Y2lCMWJtbHZiaUIxYm5OcFoyNWxaQ0JzYjI1bklIWnZiR0YwYVd4bElITjBZWFJwWXlCaWIyOXNJRzExZEdGaWJHVWdhV1lnWkc4Z2NtVjBkWEp1SUdkdmRHOGdkbTlwWkNCbGJuVnRJR1ZzYzJVZ1luSmxZV3NnWlhoMFpYSnVJR0Z6YlNCallYTmxJSE5vYjNKMElHUmxabUYxYkhRZ1pHOTFZbXhsSUhKbFoybHpkR1Z5SUdWNGNHeHBZMmwwSUhOcFoyNWxaQ0IwZVhCbGJtRnRaU0IwYUdseklITjNhWFJqYUNCamIyNTBhVzUxWlNCM1kyaGhjbDkwSUdsdWJHbHVaU0J5WldGa2IyNXNlU0JoYzNOcFoyNGdjbVZoWkhkeWFYUmxJSE5sYkdZZ1FITjVibU5vY205dWFYcGxaQ0JwWkNCMGVYQmxiMllnYm05dVlYUnZiV2xqSUhOMWNHVnlJSFZ1YVdOb1lYSWdTVUpQZFhSc1pYUWdTVUpCWTNScGIyNGdjM1J5YjI1bklIZGxZV3NnWTI5d2VTQnBiaUJ2ZFhRZ2FXNXZkWFFnWW5samIzQjVJR0o1Y21WbUlHOXVaWGRoZVNCZlgzTjBjbTl1WnlCZlgzZGxZV3NnWDE5aWJHOWpheUJmWDJGMWRHOXlaV3hsWVhOcGJtY2dRSEJ5YVhaaGRHVWdRSEJ5YjNSbFkzUmxaQ0JBY0hWaWJHbGpJRUIwY25rZ1FIQnliM0JsY25SNUlFQmxibVFnUUhSb2NtOTNJRUJqWVhSamFDQkFabWx1WVd4c2VTQkFZWFYwYjNKbGJHVmhjMlZ3YjI5c0lFQnplVzUwYUdWemFYcGxJRUJrZVc1aGJXbGpJRUJ6Wld4bFkzUnZjaUJBYjNCMGFXOXVZV3dnUUhKbGNYVnBjbVZrWENJc2JHbDBaWEpoYkRwY0ltWmhiSE5sSUhSeWRXVWdSa0ZNVTBVZ1ZGSlZSU0J1YVd3Z1dVVlRJRTVQSUU1VlRFeGNJaXhpZFdsc2RGOXBianBjSWs1VFUzUnlhVzVuSUU1VFJHRjBZU0JPVTBScFkzUnBiMjVoY25rZ1EwZFNaV04wSUVOSFVHOXBiblFnVlVsQ2RYUjBiMjRnVlVsTVlXSmxiQ0JWU1ZSbGVIUldhV1YzSUZWSlYyVmlWbWxsZHlCTlMwMWhjRlpwWlhjZ1RsTldhV1YzSUU1VFZtbGxkME52Ym5SeWIyeHNaWElnVGxOWGFXNWtiM2NnVGxOWGFXNWtiM2REYjI1MGNtOXNiR1Z5SUU1VFUyVjBJRTVUVlZWSlJDQk9VMGx1WkdWNFUyVjBJRlZKVTJWbmJXVnVkR1ZrUTI5dWRISnZiQ0JPVTA5aWFtVmpkQ0JWU1ZSaFlteGxWbWxsZDBSbGJHVm5ZWFJsSUZWSlZHRmliR1ZXYVdWM1JHRjBZVk52ZFhKalpTQk9VMVJvY21WaFpDQlZTVUZqZEdsMmFYUjVTVzVrYVdOaGRHOXlJRlZKVkdGaVltRnlJRlZKVkc5dmJFSmhjaUJWU1VKaGNrSjFkSFJ2YmtsMFpXMGdWVWxKYldGblpWWnBaWGNnVGxOQmRYUnZjbVZzWldGelpWQnZiMndnVlVsVVlXSnNaVlpwWlhjZ1FrOVBUQ0JPVTBsdWRHVm5aWElnUTBkR2JHOWhkQ0JPVTBWNFkyVndkR2x2YmlCT1UweHZaeUJPVTAxMWRHRmliR1ZUZEhKcGJtY2dUbE5OZFhSaFlteGxRWEp5WVhrZ1RsTk5kWFJoWW14bFJHbGpkR2x2Ym1GeWVTQk9VMVZTVENCT1UwbHVaR1Y0VUdGMGFDQkRSMU5wZW1VZ1ZVbFVZV0pzWlZacFpYZERaV3hzSUZWSlZtbGxkeUJWU1ZacFpYZERiMjUwY205c2JHVnlJRlZKVG1GMmFXZGhkR2x2YmtKaGNpQlZTVTVoZG1sbllYUnBiMjVEYjI1MGNtOXNiR1Z5SUZWSlZHRmlRbUZ5UTI5dWRISnZiR3hsY2lCVlNWQnZjRzkyWlhKRGIyNTBjbTlzYkdWeUlGVkpVRzl3YjNabGNrTnZiblJ5YjJ4c1pYSkVaV3hsWjJGMFpTQlZTVWx0WVdkbElFNVRUblZ0WW1WeUlGVkpVMlZoY21Ob1FtRnlJRTVUUm1WMFkyaGxaRkpsYzNWc2RITkRiMjUwY205c2JHVnlJRTVUUm1WMFkyaGxaRkpsYzNWc2RITkRhR0Z1WjJWVWVYQmxJRlZKVTJOeWIyeHNWbWxsZHlCVlNWTmpjbTlzYkZacFpYZEVaV3hsWjJGMFpTQlZTVVZrWjJWSmJuTmxkSE1nVlVsRGIyeHZjaUJWU1VadmJuUWdWVWxCY0hCc2FXTmhkR2x2YmlCT1UwNXZkRVp2ZFc1a0lFNVRUbTkwYVdacFkyRjBhVzl1UTJWdWRHVnlJRTVUVG05MGFXWnBZMkYwYVc5dUlGVkpURzlqWVd4T2IzUnBabWxqWVhScGIyNGdUbE5DZFc1a2JHVWdUbE5HYVd4bFRXRnVZV2RsY2lCT1UxUnBiV1ZKYm5SbGNuWmhiQ0JPVTBSaGRHVWdUbE5EWVd4bGJtUmhjaUJPVTFWelpYSkVaV1poZFd4MGN5QlZTVmRwYm1SdmR5Qk9VMUpoYm1kbElFNVRRWEp5WVhrZ1RsTkZjbkp2Y2lCT1UxVlNURkpsY1hWbGMzUWdUbE5WVWt4RGIyNXVaV04wYVc5dUlFNVRWVkpNVTJWemMybHZiaUJPVTFWU1RGTmxjM05wYjI1RVlYUmhWR0Z6YXlCT1UxVlNURk5sYzNOcGIyNUViM2R1Ykc5aFpGUmhjMnNnVGxOVlVreFRaWE56YVc5dVZYQnNiMkZrVkdGemF5Qk9VMVZTVEZKbGMzQnZibk5sVlVsSmJuUmxjbVpoWTJWUGNtbGxiblJoZEdsdmJpQk5VRTF2ZG1sbFVHeGhlV1Z5UTI5dWRISnZiR3hsY2lCa2FYTndZWFJqYUY5dmJtTmxYM1FnWkdsemNHRjBZMmhmY1hWbGRXVmZkQ0JrYVhOd1lYUmphRjl6ZVc1aklHUnBjM0JoZEdOb1gyRnplVzVqSUdScGMzQmhkR05vWDI5dVkyVmNJbjBzYnowdlcyRXRla0V0V2tCZFcyRXRla0V0V2pBdE9WOWRLaThzWVQxY0lrQnBiblJsY21aaFkyVWdRR05zWVhOeklFQndjbTkwYjJOdmJDQkFhVzF3YkdWdFpXNTBZWFJwYjI1Y0lqdHlaWFIxY201N1lXeHBZWE5sY3pwYlhDSnRYQ0lzWENKdGJWd2lMRndpYjJKcVkxd2lMRndpYjJKcUxXTmNJbDBzYXpwMExHdzZieXhwT2x3aVBDOWNJaXhqT2x0bExrTk1RMDBzWlM1RFFrTk5MR1V1UTA1TkxHVXVVVk5OTEh0alRqcGNJbk4wY21sdVoxd2lMSFk2VzN0aU9pZEFYQ0luTEdVNkoxd2lKeXhwT2x3aVhGeGNYRzVjSWl4ak9sdGxMa0pGWFgwc2UySTZYQ0luWENJc1pUcGNJbHRlWEZ4Y1hGeGNYRnhkSjF3aUxHazZYQ0piWGx4Y1hGeGNYRnhjWFZ0ZUoxMWNJbjFkZlN4N1kwNDZYQ0p3Y21Wd2NtOWpaWE56YjNKY0lpeGlPbHdpSTF3aUxHVTZYQ0lrWENJc1l6cGJlMk5PT2x3aWRHbDBiR1ZjSWl4Mk9sdDdZam9uWENJbkxHVTZKMXdpSjMwc2UySTZYQ0k4WENJc1pUcGNJajVjSW4xZGZWMTlMSHRqVGpwY0ltTnNZWE56WENJc1lqcGNJaWhjSWl0aExuTndiR2wwS0Z3aUlGd2lLUzVxYjJsdUtGd2lmRndpS1N0Y0lpbGNYRnhjWWx3aUxHVTZYQ0lvZTN3a0tWd2lMR1ZGT2lFd0xHczZZU3hzT204c1l6cGJaUzVWVkUxZGZTeDdZMDQ2WENKMllYSnBZV0pzWlZ3aUxHSTZYQ0pjWEZ4Y0xsd2lLMlV1VlVsU0xISTZNSDFkZlgwcE8yaHNhbk11Y21WbmFYTjBaWEpNWVc1bmRXRm5aU2hjSW1oaGJtUnNaV0poY25OY0lpeG1kVzVqZEdsdmJpZ3BlM1poY2lCbFBWd2laV0ZqYUNCcGJpQjNhWFJvSUdsbUlHVnNjMlVnZFc1c1pYTnpJR0pwYm1SaGRIUnlJR0ZqZEdsdmJpQmpiMnhzWldOMGFXOXVJR1JsWW5WbloyVnlJR3h2WnlCdmRYUnNaWFFnZEdWdGNHeGhkR1VnZFc1aWIzVnVaQ0IyYVdWM0lIbHBaV3hrWENJN2NtVjBkWEp1ZTJGc2FXRnpaWE02VzF3aWFHSnpYQ0lzWENKb2RHMXNMbWhpYzF3aUxGd2lhSFJ0YkM1b1lXNWtiR1ZpWVhKelhDSmRMR05KT2lFd0xITk1PbHdpZUcxc1hDSXNjM1ZpVEdGdVozVmhaMlZOYjJSbE9sd2lZMjl1ZEdsdWRXOTFjMXdpTEdNNlczdGpUanBjSW1WNGNISmxjM05wYjI1Y0lpeGlPbHdpZTN0Y0lpeGxPbHdpZlgxY0lpeGpPbHQ3WTA0NlhDSmlaV2RwYmkxaWJHOWphMXdpTEdJNlhDSWpXMkV0ZWtFdFdpMGdMbDByWENJc2F6cGxmU3g3WTA0NlhDSnpkSEpwYm1kY0lpeGlPaWRjSWljc1pUb25YQ0luZlN4N1kwNDZYQ0psYm1RdFlteHZZMnRjSWl4aU9sd2lYRnhjWEM5YllTMTZRUzFhTFNBdVhTdGNJaXhyT21WOUxIdGpUanBjSW5aaGNtbGhZbXhsWENJc1lqcGNJbHRoTFhwQkxWb3RMbDByWENJc2F6cGxmVjE5WFgxOUtUdG9iR3B6TG5KbFoybHpkR1Z5VEdGdVozVmhaMlVvWENKd2FIQmNJaXhtZFc1amRHbHZiaWhsS1h0MllYSWdZejE3WTA0NlhDSjJZWEpwWVdKc1pWd2lMR0k2WENKY1hGeGNKQ3RiWVMxNlFTMWFYMzh0dzc5ZFcyRXRla0V0V2pBdE9WOS9MY08vWFNwY0luMHNhVDE3WTA0NlhDSndjbVZ3Y205alpYTnpiM0pjSWl4aU9pODhYRncvS0hCb2NDay9mRnhjUHo0dmZTeGhQWHRqVGpwY0luTjBjbWx1WjF3aUxHTTZXMlV1UWtVc2FWMHNkanBiZTJJNkoySmNJaWNzWlRvblhDSW5mU3g3WWpwY0ltSW5YQ0lzWlRwY0lpZGNJbjBzWlM1cGJtaGxjbWwwS0dVdVFWTk5MSHRwT201MWJHeDlLU3hsTG1sdWFHVnlhWFFvWlM1UlUwMHNlMms2Ym5Wc2JIMHBYWDBzYmoxN2RqcGJaUzVDVGswc1pTNURUazFkZlR0eVpYUjFjbTU3WVd4cFlYTmxjenBiWENKd2FIQXpYQ0lzWENKd2FIQTBYQ0lzWENKd2FIQTFYQ0lzWENKd2FIQTJYQ0pkTEdOSk9pRXdMR3M2WENKaGJtUWdhVzVqYkhWa1pWOXZibU5sSUd4cGMzUWdZV0p6ZEhKaFkzUWdaMnh2WW1Gc0lIQnlhWFpoZEdVZ1pXTm9ieUJwYm5SbGNtWmhZMlVnWVhNZ2MzUmhkR2xqSUdWdVpITjNhWFJqYUNCaGNuSmhlU0J1ZFd4c0lHbG1JR1Z1Wkhkb2FXeGxJRzl5SUdOdmJuTjBJR1p2Y2lCbGJtUm1iM0psWVdOb0lITmxiR1lnZG1GeUlIZG9hV3hsSUdsemMyVjBJSEIxWW14cFl5QndjbTkwWldOMFpXUWdaWGhwZENCbWIzSmxZV05vSUhSb2NtOTNJR1ZzYzJWcFppQnBibU5zZFdSbElGOWZSa2xNUlY5ZklHVnRjSFI1SUhKbGNYVnBjbVZmYjI1alpTQmtieUI0YjNJZ2NtVjBkWEp1SUhCaGNtVnVkQ0JqYkc5dVpTQjFjMlVnWDE5RFRFRlRVMTlmSUY5ZlRFbE9SVjlmSUdWc2MyVWdZbkpsWVdzZ2NISnBiblFnWlhaaGJDQnVaWGNnWTJGMFkyZ2dYMTlOUlZSSVQwUmZYeUJqWVhObElHVjRZMlZ3ZEdsdmJpQmtaV1poZFd4MElHUnBaU0J5WlhGMWFYSmxJRjlmUmxWT1ExUkpUMDVmWHlCbGJtUmtaV05zWVhKbElHWnBibUZzSUhSeWVTQnpkMmwwWTJnZ1kyOXVkR2x1ZFdVZ1pXNWtabTl5SUdWdVpHbG1JR1JsWTJ4aGNtVWdkVzV6WlhRZ2RISjFaU0JtWVd4elpTQjBjbUZwZENCbmIzUnZJR2x1YzNSaGJtTmxiMllnYVc1emRHVmhaRzltSUY5ZlJFbFNYMThnWDE5T1FVMUZVMUJCUTBWZlh5QjVhV1ZzWkNCbWFXNWhiR3g1WENJc1l6cGJaUzVEVEVOTkxHVXVTRU5OTEh0alRqcGNJbU52YlcxbGJuUmNJaXhpT2x3aUwxeGNYRndxWENJc1pUcGNJbHhjWEZ3cUwxd2lMR002VzN0alRqcGNJbkJvY0dSdlkxd2lMR0k2WENKY1hGeGNjMEJiUVMxYVlTMTZYU3RjSW4wc2FWMTlMSHRqVGpwY0ltTnZiVzFsYm5SY0lpeGlPbHdpWDE5b1lXeDBYMk52YlhCcGJHVnlMaXMvTzF3aUxHVlhPaUV3TEdzNlhDSmZYMmhoYkhSZlkyOXRjR2xzWlhKY0lpeHNPbVV1VlVsU2ZTeDdZMDQ2WENKemRISnBibWRjSWl4aU9sd2lQRHc4V3lkY1hGd2lYVDljWEZ4Y2R5dGJKMXhjWENKZFB5UmNJaXhsT2x3aVhseGNYRngzS3p0Y0lpeGpPbHRsTGtKRlhYMHNhU3hqTEh0aU9pOHRQaXRiWVMxNlFTMWFYMXhjZURkbUxWeGNlR1ptWFZ0aExYcEJMVm93TFRsZlhGeDROMll0WEZ4NFptWmRLaTk5TEh0alRqcGNJbVoxYm1OMGFXOXVYQ0lzWWtzNlhDSm1kVzVqZEdsdmJsd2lMR1U2TDFzN2UxMHZMR1ZGT2lFd0xHazZYQ0pjWEZ4Y0pIeGNYRnhjVzN3bFhDSXNZenBiWlM1VlZFMHNlMk5PT2x3aWNHRnlZVzF6WENJc1lqcGNJbHhjWEZ3b1hDSXNaVHBjSWx4Y1hGd3BYQ0lzWXpwYlhDSnpaV3htWENJc1l5eGxMa05DUTAwc1lTeHVYWDFkZlN4N1kwNDZYQ0pqYkdGemMxd2lMR0pMT2x3aVkyeGhjM01nYVc1MFpYSm1ZV05sWENJc1pUcGNJbnRjSWl4bFJUb2hNQ3hwT2k5Yk9seGNLRnhjSkZ3aVhTOHNZenBiZTJKTE9sd2laWGgwWlc1a2N5QnBiWEJzWlcxbGJuUnpYQ0o5TEdVdVZWUk5YWDBzZTJKTE9sd2libUZ0WlhOd1lXTmxYQ0lzWlRwY0lqdGNJaXhwT2k5YlhGd3VKMTB2TEdNNlcyVXVWVlJOWFgwc2UySkxPbHdpZFhObFhDSXNaVHBjSWp0Y0lpeGpPbHRsTGxWVVRWMTlMSHRpT2x3aVBUNWNJbjBzWVN4dVhYMTlLVHRvYkdwekxuSmxaMmx6ZEdWeVRHRnVaM1ZoWjJVb1hDSnRZWFJzWVdKY0lpeG1kVzVqZEdsdmJpaGxLWHQyWVhJZ1lUMWJaUzVEVGswc2UyTk9PbHdpYzNSeWFXNW5YQ0lzWWpwY0lpZGNJaXhsT2x3aUoxd2lMR002VzJVdVFrVXNlMkk2WENJbkoxd2lmVjE5WFN4elBYdHlPakFzWXpwYmUyTk9PbHdpYjNCbGNtRjBiM0pjSWl4aU9pOG5XeWRjWEM1ZEtpOTlYWDA3Y21WMGRYSnVlMnM2ZTJ0bGVYZHZjbVE2WENKaWNtVmhheUJqWVhObElHTmhkR05vSUdOc1lYTnpaR1ZtSUdOdmJuUnBiblZsSUdWc2MyVWdaV3h6WldsbUlHVnVaQ0JsYm5WdFpYSmhkR1ZrSUdWMlpXNTBjeUJtYjNJZ1puVnVZM1JwYjI0Z1oyeHZZbUZzSUdsbUlHMWxkR2h2WkhNZ2IzUm9aWEozYVhObElIQmhjbVp2Y2lCd1pYSnphWE4wWlc1MElIQnliM0JsY25ScFpYTWdjbVYwZFhKdUlITndiV1FnYzNkcGRHTm9JSFJ5ZVNCM2FHbHNaVndpTEdKMWFXeDBYMmx1T2x3aWMybHVJSE5wYm1RZ2MybHVhQ0JoYzJsdUlHRnphVzVrSUdGemFXNW9JR052Y3lCamIzTmtJR052YzJnZ1lXTnZjeUJoWTI5elpDQmhZMjl6YUNCMFlXNGdkR0Z1WkNCMFlXNW9JR0YwWVc0Z1lYUmhibVFnWVhSaGJqSWdZWFJoYm1nZ2MyVmpJSE5sWTJRZ2MyVmphQ0JoYzJWaklHRnpaV05rSUdGelpXTm9JR056WXlCamMyTmtJR056WTJnZ1lXTnpZeUJoWTNOalpDQmhZM05qYUNCamIzUWdZMjkwWkNCamIzUm9JR0ZqYjNRZ1lXTnZkR1FnWVdOdmRHZ2dhSGx3YjNRZ1pYaHdJR1Y0Y0cweElHeHZaeUJzYjJjeGNDQnNiMmN4TUNCc2IyY3lJSEJ2ZHpJZ2NtVmhiSEJ2ZHlCeVpXRnNiRzluSUhKbFlXeHpjWEowSUhOeGNuUWdiblJvY205dmRDQnVaWGgwY0c5M01pQmhZbk1nWVc1bmJHVWdZMjl0Y0d4bGVDQmpiMjVxSUdsdFlXY2djbVZoYkNCMWJuZHlZWEFnYVhOeVpXRnNJR053Ykhod1lXbHlJR1pwZUNCbWJHOXZjaUJqWldsc0lISnZkVzVrSUcxdlpDQnlaVzBnYzJsbmJpQmhhWEo1SUdKbGMzTmxiR29nWW1WemMyVnNlU0JpWlhOelpXeG9JR0psYzNObGJHa2dZbVZ6YzJWc2F5QmlaWFJoSUdKbGRHRnBibU1nWW1WMFlXeHVJR1ZzYkdsd2FpQmxiR3hwY0d0bElHVnlaaUJsY21aaklHVnlabU40SUdWeVptbHVkaUJsZUhCcGJuUWdaMkZ0YldFZ1oyRnRiV0ZwYm1NZ1oyRnRiV0ZzYmlCd2Mya2diR1ZuWlc1a2NtVWdZM0p2YzNNZ1pHOTBJR1poWTNSdmNpQnBjM0J5YVcxbElIQnlhVzFsY3lCblkyUWdiR050SUhKaGRDQnlZWFJ6SUhCbGNtMXpJRzVqYUc5dmMyVnJJR1poWTNSdmNtbGhiQ0JqWVhKME1uTndhQ0JqWVhKME1uQnZiQ0J3YjJ3eVkyRnlkQ0J6Y0dneVkyRnlkQ0JvYzNZeWNtZGlJSEpuWWpKb2MzWWdlbVZ5YjNNZ2IyNWxjeUJsZVdVZ2NtVndiV0YwSUhKaGJtUWdjbUZ1Wkc0Z2JHbHVjM0JoWTJVZ2JHOW5jM0JoWTJVZ1puSmxjWE53WVdObElHMWxjMmhuY21sa0lHRmpZM1Z0WVhKeVlYa2djMmw2WlNCc1pXNW5kR2dnYm1ScGJYTWdiblZ0Wld3Z1pHbHpjQ0JwYzJWdGNIUjVJR2x6WlhGMVlXd2dhWE5sY1hWaGJIZHBkR2hsY1hWaGJHNWhibk1nWTJGMElISmxjMmhoY0dVZ1pHbGhaeUJpYkd0a2FXRm5JSFJ5YVd3Z2RISnBkU0JtYkdsd2JISWdabXhwY0hWa0lHWnNhWEJrYVcwZ2NtOTBPVEFnWm1sdVpDQnpkV0l5YVc1a0lHbHVaREp6ZFdJZ1luTjRablZ1SUc1a1ozSnBaQ0J3WlhKdGRYUmxJR2x3WlhKdGRYUmxJSE5vYVdaMFpHbHRJR05wY21OemFHbG1kQ0J6Y1hWbFpYcGxJR2x6YzJOaGJHRnlJR2x6ZG1WamRHOXlJR0Z1Y3lCbGNITWdjbVZoYkcxaGVDQnlaV0ZzYldsdUlIQnBJR2tnYVc1bUlHNWhiaUJwYzI1aGJpQnBjMmx1WmlCcGMyWnBibWwwWlNCcUlIZG9lU0JqYjIxd1lXNGdaMkZzYkdWeWVTQm9ZV1JoYldGeVpDQm9ZVzVyWld3Z2FHbHNZaUJwYm5ab2FXeGlJRzFoWjJsaklIQmhjMk5oYkNCeWIzTnpaWElnZEc5bGNHeHBkSG9nZG1GdVpHVnlJSGRwYkd0cGJuTnZibHdpZlN4cE9pY29MeTk4WENKOEkzd3ZYRnhjWENwOFhGeGNYSE1yTDF4Y1hGeDNLeWtuTEdNNlczdGpUanBjSW1aMWJtTjBhVzl1WENJc1lrczZYQ0ptZFc1amRHbHZibHdpTEdVNlhDSWtYQ0lzWXpwYlpTNVZWRTBzZTJOT09sd2ljR0Z5WVcxelhDSXNZanBjSWx4Y1hGd29YQ0lzWlRwY0lseGNYRndwWENKOUxIdGpUanBjSW5CaGNtRnRjMXdpTEdJNlhDSmNYRnhjVzF3aUxHVTZYQ0pjWEZ4Y1hWd2lmVjE5TEh0aU9pOWJZUzE2UVMxYVgxMWJZUzE2UVMxYVh6QXRPVjBxSjFzblhGd3VYU292TEhKQ09pRXdMSEk2TUN4ak9sdDdZam92VzJFdGVrRXRXbDlkVzJFdGVrRXRXbDh3TFRsZEtpOHNjam93ZlN4ekxtTmJNRjFkZlN4N1kwNDZYQ0p0WVhSeWFYaGNJaXhpT2x3aVhGeGNYRnRjSWl4bE9sd2lYRnhjWEYxY0lpeGpPbUVzY2pvd0xITjBZWEowY3pwemZTeDdZMDQ2WENKalpXeHNYQ0lzWWpwY0lseGNYRng3WENJc1pUb3ZYRng5THl4ak9tRXNjam93TEdrNkx6b3ZMSE4wWVhKMGN6cHpmU3g3WWpvdlhGd3BMeXh5T2pBc2MzUmhjblJ6T25OOUxIdGpUanBjSW1OdmJXMWxiblJjSWl4aU9sd2lYRnhjWENWY0lpeGxPbHdpSkZ3aWZWMHVZMjl1WTJGMEtHRXBmWDBwTzJoc2FuTXVjbVZuYVhOMFpYSk1ZVzVuZFdGblpTaGNJbU52Wm1abFpYTmpjbWx3ZEZ3aUxHWjFibU4wYVc5dUtHVXBlM1poY2lCalBYdHJaWGwzYjNKa09sd2lhVzRnYVdZZ1ptOXlJSGRvYVd4bElHWnBibUZzYkhrZ2JtVjNJR1J2SUhKbGRIVnliaUJsYkhObElHSnlaV0ZySUdOaGRHTm9JR2x1YzNSaGJtTmxiMllnZEdoeWIzY2dkSEo1SUhSb2FYTWdjM2RwZEdOb0lHTnZiblJwYm5WbElIUjVjR1Z2WmlCa1pXeGxkR1VnWkdWaWRXZG5aWElnYzNWd1pYSWdkR2hsYmlCMWJteGxjM01nZFc1MGFXd2diRzl2Y0NCdlppQmllU0IzYUdWdUlHRnVaQ0J2Y2lCcGN5QnBjMjUwSUc1dmRGd2lMR3hwZEdWeVlXdzZYQ0owY25WbElHWmhiSE5sSUc1MWJHd2dkVzVrWldacGJtVmtJSGxsY3lCdWJ5QnZiaUJ2Wm1aY0lpeHlaWE5sY25abFpEcGNJbU5oYzJVZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCMllYSWdkbTlwWkNCM2FYUm9JR052Ym5OMElHeGxkQ0JsYm5WdElHVjRjRzl5ZENCcGJYQnZjblFnYm1GMGFYWmxJRjlmYUdGelVISnZjQ0JmWDJWNGRHVnVaSE1nWDE5emJHbGpaU0JmWDJKcGJtUWdYMTlwYm1SbGVFOW1YQ0lzWW5WcGJIUmZhVzQ2WENKdWNHMGdjbVZ4ZFdseVpTQmpiMjV6YjJ4bElIQnlhVzUwSUcxdlpIVnNaU0JuYkc5aVlXd2dkMmx1Wkc5M0lHUnZZM1Z0Wlc1MFhDSjlMRzQ5WENKYlFTMWFZUzE2SkY5ZFd6QXRPVUV0V21FdGVpUmZYU3BjSWl4MFBYdGpUanBjSW5OMVluTjBYQ0lzWWpvdkkxeGNleThzWlRvdmZTOHNhenBqZlN4eVBWdGxMa0pPVFN4bExtbHVhR1Z5YVhRb1pTNURUazBzZTNOMFlYSjBjenA3WlRwY0lpaGNYRnhjY3lvdktUOWNJaXh5T2pCOWZTa3NlMk5PT2x3aWMzUnlhVzVuWENJc2RqcGJlMkk2THljbkp5OHNaVG92Snljbkx5eGpPbHRsTGtKRlhYMHNlMkk2THljdkxHVTZMeWN2TEdNNlcyVXVRa1ZkZlN4N1lqb3ZYQ0pjSWx3aUx5eGxPaTljSWx3aVhDSXZMR002VzJVdVFrVXNkRjE5TEh0aU9pOWNJaThzWlRvdlhDSXZMR002VzJVdVFrVXNkRjE5WFgwc2UyTk9PbHdpY21WblpYaHdYQ0lzZGpwYmUySTZYQ0l2THk5Y0lpeGxPbHdpTHk4dlhDSXNZenBiZEN4bExraERUVjE5TEh0aU9sd2lMeTliWjJsdFhTcGNJaXh5T2pCOUxIdGlPaTljWEM4b1B5RmJJQ3BkS1NoY1hGeGNYRnd2ZkM0cEtqOWNYQzliWjJsdFhTb29QejFjWEZkOEpDa3ZmVjE5TEh0alRqcGNJbkJ5YjNCbGNuUjVYQ0lzWWpwY0lrQmNJaXR1ZlN4N1lqcGNJbUJjSWl4bE9sd2lZRndpTEdWQ09pRXdMR1ZGT2lFd0xITk1PbHdpYW1GMllYTmpjbWx3ZEZ3aWZWMDdkQzVqUFhJN2RtRnlJR2s5WlM1cGJtaGxjbWwwS0dVdVZFMHNlMkk2Ym4wcExITTlYQ0lvWEZ4Y1hDZ3VLbHhjWEZ3cEtUOWNYRnhjY3lwY1hGeGNRbHN0UFYwK1hDSXNiejE3WTA0NlhDSndZWEpoYlhOY0lpeGlPbHdpWEZ4Y1hDaGJYbHhjWEZ3b1hWd2lMSEpDT2lFd0xHTTZXM3RpT2k5Y1hDZ3ZMR1U2TDF4Y0tTOHNhenBqTEdNNlcxd2ljMlZzWmx3aVhTNWpiMjVqWVhRb2NpbDlYWDA3Y21WMGRYSnVlMkZzYVdGelpYTTZXMXdpWTI5bVptVmxYQ0lzWENKamMyOXVYQ0lzWENKcFkyVmtYQ0pkTEdzNll5eHBPaTljWEM5Y1hDb3ZMR002Y2k1amIyNWpZWFFvVzN0alRqcGNJbU52YlcxbGJuUmNJaXhpT2x3aUl5TWpYQ0lzWlRwY0lpTWpJMXdpTEdNNlcyVXVVRmROWFgwc1pTNUlRMDBzZTJOT09sd2lablZ1WTNScGIyNWNJaXhpT2x3aVhseGNYRnh6S2x3aUsyNHJYQ0pjWEZ4Y2N5bzlYRnhjWEhNcVhDSXJjeXhsT2x3aVd5MDlYVDVjSWl4eVFqb2hNQ3hqT2x0cExHOWRmU3g3WWpvdld6cGNYQ2dzUFYxY1hITXFMeXh5T2pBc1l6cGJlMk5PT2x3aVpuVnVZM1JwYjI1Y0lpeGlPbk1zWlRwY0lsc3RQVjArWENJc2NrSTZJVEFzWXpwYmIxMTlYWDBzZTJOT09sd2lZMnhoYzNOY0lpeGlTenBjSW1Oc1lYTnpYQ0lzWlRwY0lpUmNJaXhwT2k5Yk9qMWNJbHhjVzF4Y1hWMHZMR002VzN0aVN6cGNJbVY0ZEdWdVpITmNJaXhsVnpvaE1DeHBPaTliT2oxY0lseGNXMXhjWFYwdkxHTTZXMmxkZlN4cFhYMHNlMk5PT2x3aVlYUjBjbWxpZFhSbFhDSXNZanB1SzF3aU9sd2lMR1U2WENJNlhDSXNja0k2SVRBc2NrVTZJVEFzY2pvd2ZWMHBmWDBwTzJoc2FuTXVjbVZuYVhOMFpYSk1ZVzVuZFdGblpTaGNJbWx1YVZ3aUxHWjFibU4wYVc5dUtHVXBlM0psZEhWeWJudGpTVG9oTUN4cE9pOWNYRk12TEdNNlczdGpUanBjSW1OdmJXMWxiblJjSWl4aU9sd2lPMXdpTEdVNlhDSWtYQ0o5TEh0alRqcGNJblJwZEd4bFhDSXNZanBjSWw1Y1hGeGNXMXdpTEdVNlhDSmNYRnhjWFZ3aWZTeDdZMDQ2WENKelpYUjBhVzVuWENJc1lqcGNJbDViWVMxNk1DMDVYRnhjWEZ0Y1hGeGNYVjh0WFN0YklGeGNYRngwWFNvOVd5QmNYRnhjZEYwcVhDSXNaVHBjSWlSY0lpeGpPbHQ3WTA0NlhDSjJZV3gxWlZ3aUxHVlhPaUV3TEdzNlhDSnZiaUJ2Wm1ZZ2RISjFaU0JtWVd4elpTQjVaWE1nYm05Y0lpeGpPbHRsTGxGVFRTeGxMazVOWFN4eU9qQjlYWDFkZlgwcE8yaHNhbk11Y21WbmFYTjBaWEpNWVc1bmRXRm5aU2hjSW1keWIyOTJlVndpTEdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5Ym50ck9udDBlWEJsYm1GdFpUcGNJbUo1ZEdVZ2MyaHZjblFnWTJoaGNpQnBiblFnYkc5dVp5QmliMjlzWldGdUlHWnNiMkYwSUdSdmRXSnNaU0IyYjJsa1hDSXNiR2wwWlhKaGJEcGNJblJ5ZFdVZ1ptRnNjMlVnYm5Wc2JGd2lMR3RsZVhkdmNtUTZYQ0prWldZZ1lYTWdhVzRnWVhOelpYSjBJSFJ5WVdsMElITjFjR1Z5SUhSb2FYTWdZV0p6ZEhKaFkzUWdjM1JoZEdsaklIWnZiR0YwYVd4bElIUnlZVzV6YVdWdWRDQndkV0pzYVdNZ2NISnBkbUYwWlNCd2NtOTBaV04wWldRZ2MzbHVZMmh5YjI1cGVtVmtJR1pwYm1Gc0lHTnNZWE56SUdsdWRHVnlabUZqWlNCbGJuVnRJR2xtSUdWc2MyVWdabTl5SUhkb2FXeGxJSE4zYVhSamFDQmpZWE5sSUdKeVpXRnJJR1JsWm1GMWJIUWdZMjl1ZEdsdWRXVWdkR2h5YjNjZ2RHaHliM2R6SUhSeWVTQmpZWFJqYUNCbWFXNWhiR3g1SUdsdGNHeGxiV1Z1ZEhNZ1pYaDBaVzVrY3lCdVpYY2dhVzF3YjNKMElIQmhZMnRoWjJVZ2NtVjBkWEp1SUdsdWMzUmhibU5sYjJaY0luMHNZenBiWlM1RFRFTk5MSHRqVGpwY0ltcGhkbUZrYjJOY0lpeGlPbHdpTDF4Y1hGd3FYRnhjWENwY0lpeGxPbHdpWEZ4Y1hDb3ZMeXBjSWl4eU9qQXNZenBiZTJOT09sd2lhbUYyWVdSdlkzUmhaMXdpTEdJNlhDSW9YbnhjWEZ4Y2N5bEFXMEV0V21FdGVsMHJYQ0o5WFgwc1pTNURRa05OTEh0alRqcGNJbk4wY21sdVoxd2lMR0k2SjF3aVhDSmNJaWNzWlRvblhDSmNJbHdpSjMwc2UyTk9PbHdpYzNSeWFXNW5YQ0lzWWpwY0lpY25KMXdpTEdVNlhDSW5KeWRjSW4wc2UyTk9PbHdpYzNSeWFXNW5YQ0lzWWpwY0lseGNYRndrTDF3aUxHVTZYQ0l2WEZ4Y1hDUmNJaXh5T2pFd2ZTeGxMa0ZUVFN4N1kwNDZYQ0p5WldkbGVIQmNJaXhpT2k5K1AxeGNMMXRlWEZ3dlhGeHVYU3RjWEM4dkxHTTZXMlV1UWtWZGZTeGxMbEZUVFN4N1kwNDZYQ0p6YUdWaVlXNW5YQ0lzWWpwY0lsNGpJUzkxYzNJdlltbHVMMlZ1ZGx3aUxHVTZYQ0lrWENJc2FUcGNJbHhjYmx3aWZTeGxMa0pPVFN4N1kwNDZYQ0pqYkdGemMxd2lMR0pMT2x3aVkyeGhjM01nYVc1MFpYSm1ZV05sSUhSeVlXbDBJR1Z1ZFcxY0lpeGxPbHdpZTF3aUxHazZYQ0k2WENJc1l6cGJlMkpMT2x3aVpYaDBaVzVrY3lCcGJYQnNaVzFsYm5SelhDSjlMR1V1VlZSTlhYMHNaUzVEVGswc2UyTk9PbHdpWVc1dWIzUmhkR2x2Ymx3aUxHSTZYQ0pBVzBFdFdtRXRlbDByWENKOUxIdGpUanBjSW5OMGNtbHVaMXdpTEdJNkwxdGVYRncvWFhzd2ZWdEJMVnBoTFhvd0xUbGZKRjBySUNvNkwzMHNlMkk2TDF4Y1B5OHNaVG92WEZ3NkwzMHNlMk5PT2x3aWJHRmlaV3hjSWl4aU9sd2lYbHhjWEZ4ektsdEJMVnBoTFhvd0xUbGZKRjByT2x3aUxISTZNSDFkZlgwcE8yaHNhbk11Y21WbmFYTjBaWEpNWVc1bmRXRm5aU2hjSW5KY0lpeG1kVzVqZEdsdmJpaGxLWHQyWVhJZ2NqMWNJaWhiWVMxNlFTMWFYWHhjWEZ4Y0xsdGhMWHBCTFZvdVhTbGJZUzE2UVMxYU1DMDVMbDlkS2x3aU8zSmxkSFZ5Ym50ak9sdGxMa2hEVFN4N1lqcHlMR3c2Y2l4ck9udHJaWGwzYjNKa09sd2lablZ1WTNScGIyNGdhV1lnYVc0Z1luSmxZV3NnYm1WNGRDQnlaWEJsWVhRZ1pXeHpaU0JtYjNJZ2NtVjBkWEp1SUhOM2FYUmphQ0IzYUdsc1pTQjBjbmtnZEhKNVEyRjBZMmg4TVRBZ2MzUnZjQ0IzWVhKdWFXNW5JSEpsY1hWcGNtVWdiR2xpY21GeWVTQmhkSFJoWTJnZ1pHVjBZV05vSUhOdmRYSmpaU0J6WlhSTlpYUm9iMlFnYzJWMFIyVnVaWEpwWXlCelpYUkhjbTkxY0VkbGJtVnlhV01nYzJWMFEyeGhjM01nTGk0dWZERXdYQ0lzYkdsMFpYSmhiRHBjSWs1VlRFd2dUa0VnVkZKVlJTQkdRVXhUUlNCVUlFWWdTVzVtSUU1aFRpQk9RVjlwYm5SbFoyVnlYM3d4TUNCT1FWOXlaV0ZzWDN3eE1DQk9RVjlqYUdGeVlXTjBaWEpmZkRFd0lFNUJYMk52YlhCc1pYaGZmREV3WENKOUxISTZNSDBzZTJOT09sd2liblZ0WW1WeVhDSXNZanBjSWpCYmVGaGRXekF0T1dFdFprRXRSbDByVzB4cFhUOWNYRnhjWWx3aUxISTZNSDBzZTJOT09sd2liblZ0WW1WeVhDSXNZanBjSWx4Y1hGeGtLeWcvT2x0bFJWMWJLMXhjWEZ3dFhUOWNYRnhjWkNvcFAweGNYRnhjWWx3aUxISTZNSDBzZTJOT09sd2liblZ0WW1WeVhDSXNZanBjSWx4Y1hGeGtLMXhjWEZ3dUtEOGhYRnhjWEdRcEtEODZhVnhjWEZ4aUtUOWNJaXh5T2pCOUxIdGpUanBjSW01MWJXSmxjbHdpTEdJNlhDSmNYRnhjWkNzb1B6cGNYRnhjTGx4Y1hGeGtLaWsvS0Q4NlcyVkZYVnNyWEZ4Y1hDMWRQMXhjWEZ4a0tpay9hVDljWEZ4Y1lsd2lMSEk2TUgwc2UyTk9PbHdpYm5WdFltVnlYQ0lzWWpwY0lseGNYRnd1WEZ4Y1hHUXJLRDg2VzJWRlhWc3JYRnhjWEMxZFAxeGNYRnhrS2lrL2FUOWNYRnhjWWx3aUxISTZNSDBzZTJJNlhDSmdYQ0lzWlRwY0ltQmNJaXh5T2pCOUxIdGpUanBjSW5OMGNtbHVaMXdpTEdNNlcyVXVRa1ZkTEhZNlczdGlPaWRjSWljc1pUb25YQ0luZlN4N1lqcGNJaWRjSWl4bE9sd2lKMXdpZlYxOVhYMTlLVHRvYkdwekxuSmxaMmx6ZEdWeVRHRnVaM1ZoWjJVb1hDSmxiR2w0YVhKY0lpeG1kVzVqZEdsdmJpaGxLWHQyWVhJZ2NqMWNJbHRoTFhwQkxWcGZYVnRoTFhwQkxWb3dMVGxmWFNvb1hGeGNYQ0Y4WEZ4Y1hEOHBQMXdpTEdJOVhDSmJZUzE2UVMxYVgxMWNYRnhjZHlwYklUODlYVDk4V3kwcmZsMWNYRnhjUUh3OFBIdytQbnc5Zm53OVBUMC9mRHc5UG54YlBENWRQVDk4WEZ4Y1hDcGNYRnhjS254YkxTOHJKVjRtS241Z2ZGMThYRnhjWEZ0Y1hGeGNYVDAvWENJc2JqMWNJbUZ1WkNCbVlXeHpaU0IwYUdWdUlHUmxabWx1WldRZ2JXOWtkV3hsSUdsdUlISmxkSFZ5YmlCeVpXUnZJSEpsZEhKNUlHVnVaQ0JtYjNJZ2RISjFaU0J6Wld4bUlIZG9aVzRnYm1WNGRDQjFiblJwYkNCa2J5QmlaV2RwYmlCMWJteGxjM01nYm1sc0lHSnlaV0ZySUc1dmRDQmpZWE5sSUdOdmJtUWdZV3hwWVhNZ2QyaHBiR1VnWlc1emRYSmxJRzl5SUdsdVkyeDFaR1VnZFhObElHRnNhV0Z6SUdadUlIRjFiM1JsWENJc1l6MTdZMDQ2WENKemRXSnpkRndpTEdJNlhDSWpYRnhjWEh0Y0lpeGxPbHdpZlZ3aUxHdzZjaXhyT201OUxHRTllMk5PT2x3aWMzUnlhVzVuWENJc1l6cGJaUzVDUlN4alhTeDJPbHQ3WWpvdkp5OHNaVG92Snk5OUxIdGlPaTljSWk4c1pUb3ZYQ0l2ZlYxOUxITTllMlZYT2lFd0xISkZPaUV3TEd3NmNpeHJPbTRzY2pvd2ZTeHBQWHRqVGpwY0ltWjFibU4wYVc5dVhDSXNZa3M2WENKa1pXWWdaR1ZtYldGamNtOWNJaXhsT2k5Y1hHSmtiMXhjWWk4c1l6cGJaUzVwYm1obGNtbDBLR1V1VkUwc2UySTZZaXh6ZEdGeWRITTZjMzBwWFgwc2JEMWxMbWx1YUdWeWFYUW9hU3g3WTA0NlhDSmpiR0Z6YzF3aUxHSkxPbHdpWkdWbWJXOWtkV3hsSUdSbFpuSmxZMjl5WkZ3aUxHVTZMMXhjWW1SdlhGeGlmQ1I4T3k5OUtTeDBQVnRoTEdVdVNFTk5MR3dzYVN4N1kwNDZYQ0pqYjI1emRHRnVkRndpTEdJNlhDSW9YRnhjWEdKYlFTMWFYMTFjWEZ4Y2R5b29MaWsvS1N0Y0lpeHlPakI5TEh0alRqcGNJbk41YldKdmJGd2lMR0k2WENJNlhDSXNZenBiWVN4N1lqcGlmVjBzY2pvd2ZTeDdZMDQ2WENKemVXMWliMnhjSWl4aU9uSXJYQ0k2WENJc2Nqb3dmU3g3WTA0NlhDSnVkVzFpWlhKY0lpeGlPbHdpS0Z4Y1hGeGlNRnN3TFRkZlhTc3BmQ2hjWEZ4Y1lqQjRXekF0T1dFdFprRXRSbDlkS3lsOEtGeGNYRnhpV3pFdE9WMWJNQzA1WDEwcUtGeGNYRnd1V3pBdE9WOWRLeWsvS1h4Yk1GOWRYRnhjWEdKY0lpeHlPakI5TEh0alRqcGNJblpoY21saFlteGxYQ0lzWWpwY0lpaGNYRnhjSkZ4Y1hGeFhLWHdvS0Z4Y1hGd2tmRnhjWEZ4QVhGeGNYRUEvS1NoY1hGeGNkeXNwS1Z3aWZTeDdZanBjSWkwK1hDSjlMSHRpT2x3aUtGd2lLMlV1VWxOU0sxd2lLVnhjWEZ4ektsd2lMR002VzJVdVNFTk5MSHRqVGpwY0luSmxaMlY0Y0Z3aUxHazZYQ0pjWEZ4Y2Jsd2lMR002VzJVdVFrVXNZMTBzZGpwYmUySTZYQ0l2WENJc1pUcGNJaTliWVMxNlhTcGNJbjBzZTJJNlhDSWxjbHhjWEZ4YlhDSXNaVHBjSWx4Y1hGeGRXMkV0ZWwwcVhDSjlYWDFkTEhJNk1IMWRPM0psZEhWeWJpQmpMbU05ZEN4ekxtTTlkQ3g3YkRweUxHczZiaXhqT25SOWZTazdhR3hxY3k1eVpXZHBjM1JsY2t4aGJtZDFZV2RsS0Z3aVoyOWNJaXhtZFc1amRHbHZiaWhsS1h0MllYSWdkRDE3YTJWNWQyOXlaRHBjSW1KeVpXRnJJR1JsWm1GMWJIUWdablZ1WXlCcGJuUmxjbVpoWTJVZ2MyVnNaV04wSUdOaGMyVWdiV0Z3SUhOMGNuVmpkQ0JqYUdGdUlHVnNjMlVnWjI5MGJ5QndZV05yWVdkbElITjNhWFJqYUNCamIyNXpkQ0JtWVd4c2RHaHliM1ZuYUNCcFppQnlZVzVuWlNCMGVYQmxJR052Ym5ScGJuVmxJR1p2Y2lCcGJYQnZjblFnY21WMGRYSnVJSFpoY2lCbmJ5QmtaV1psY2x3aUxHTnZibk4wWVc1ME9sd2lkSEoxWlNCbVlXeHpaU0JwYjNSaElHNXBiRndpTEhSNWNHVnVZVzFsT2x3aVltOXZiQ0JpZVhSbElHTnZiWEJzWlhnMk5DQmpiMjF3YkdWNE1USTRJR1pzYjJGME16SWdabXh2WVhRMk5DQnBiblE0SUdsdWRERTJJR2x1ZERNeUlHbHVkRFkwSUhOMGNtbHVaeUIxYVc1ME9DQjFhVzUwTVRZZ2RXbHVkRE15SUhWcGJuUTJOQ0JwYm5RZ2RXbHVkQ0IxYVc1MGNIUnlJSEoxYm1WY0lpeGlkV2xzZEY5cGJqcGNJbUZ3Y0dWdVpDQmpZWEFnWTJ4dmMyVWdZMjl0Y0d4bGVDQmpiM0I1SUdsdFlXY2diR1Z1SUcxaGEyVWdibVYzSUhCaGJtbGpJSEJ5YVc1MElIQnlhVzUwYkc0Z2NtVmhiQ0J5WldOdmRtVnlJR1JsYkdWMFpWd2lmVHR5WlhSMWNtNTdZV3hwWVhObGN6cGJYQ0puYjJ4aGJtZGNJbDBzYXpwMExHazZYQ0k4TDF3aUxHTTZXMlV1UTB4RFRTeGxMa05DUTAwc1pTNVJVMDBzZTJOT09sd2ljM1J5YVc1blhDSXNZanBjSWlkY0lpeGxPbHdpVzE1Y1hGeGNYRnhjWEYwblhDSjlMSHRqVGpwY0luTjBjbWx1WjF3aUxHSTZYQ0pnWENJc1pUcGNJbUJjSW4wc2UyTk9PbHdpYm5WdFltVnlYQ0lzWWpwbExrTk9VaXRjSWx0a1pteHphVjAvWENJc2Nqb3dmU3hsTGtOT1RWMTlmU2s3YUd4cWN5NXlaV2RwYzNSbGNreGhibWQxWVdkbEtGd2ljM0ZzWENJc1puVnVZM1JwYjI0b1pTbDdkbUZ5SUhROWUyTk9PbHdpWTI5dGJXVnVkRndpTEdJNlhDSXRMVndpTEdVNlhDSWtYQ0o5TzNKbGRIVnlibnRqU1RvaE1DeHBPaTliUEQ1ZEx5eGpPbHQ3WTA0NlhDSnZjR1Z5WVhSdmNsd2lMR0pMT2x3aVltVm5hVzRnWlc1a0lITjBZWEowSUdOdmJXMXBkQ0J5YjJ4c1ltRmpheUJ6WVhabGNHOXBiblFnYkc5amF5QmhiSFJsY2lCamNtVmhkR1VnWkhKdmNDQnlaVzVoYldVZ1kyRnNiQ0JrWld4bGRHVWdaRzhnYUdGdVpHeGxjaUJwYm5ObGNuUWdiRzloWkNCeVpYQnNZV05sSUhObGJHVmpkQ0IwY25WdVkyRjBaU0IxY0dSaGRHVWdjMlYwSUhOb2IzY2djSEpoWjIxaElHZHlZVzUwSUcxbGNtZGxJR1JsYzJOeWFXSmxJSFZ6WlNCbGVIQnNZV2x1SUdobGJIQWdaR1ZqYkdGeVpTQndjbVZ3WVhKbElHVjRaV04xZEdVZ1pHVmhiR3h2WTJGMFpTQnpZWFpsY0c5cGJuUWdjbVZzWldGelpTQjFibXh2WTJzZ2NIVnlaMlVnY21WelpYUWdZMmhoYm1kbElITjBiM0FnWVc1aGJIbDZaU0JqWVdOb1pTQm1iSFZ6YUNCdmNIUnBiV2w2WlNCeVpYQmhhWElnYTJsc2JDQnBibk4wWVd4c0lIVnVhVzV6ZEdGc2JDQmphR1ZqYTNOMWJTQnlaWE4wYjNKbElHTm9aV05ySUdKaFkydDFjRndpTEdVNkx6c3ZMR1ZYT2lFd0xHczZlMnRsZVhkdmNtUTZYQ0poWW5NZ1lXSnpiMngxZEdVZ1lXTnZjeUJoWTNScGIyNGdZV1JrSUdGa1pHUmhkR1VnWVdSa2RHbHRaU0JoWlhOZlpHVmpjbmx3ZENCaFpYTmZaVzVqY25sd2RDQmhablJsY2lCaFoyZHlaV2RoZEdVZ1lXeHNJR0ZzYkc5allYUmxJR0ZzZEdWeUlHRnVZV3g1ZW1VZ1lXNWtJR0Z1ZVNCaGNtVWdZWE1nWVhOaklHRnpZMmxwSUdGemFXNGdZWE56WlhKMGFXOXVJR0YwSUdGMFlXNGdZWFJoYmpJZ1lYUnVNaUJoZFhSb2IzSnBlbUYwYVc5dUlHRjFkR2h2Y25NZ1lYWm5JR0poWTJ0MWNDQmlaV1p2Y21VZ1ltVm5hVzRnWW1WdVkyaHRZWEpySUdKbGRIZGxaVzRnWW1sdUlHSnBibXh2WnlCaWFYUmZZVzVrSUdKcGRGOWpiM1Z1ZENCaWFYUmZiR1Z1WjNSb0lHSnBkRjl2Y2lCaWFYUmZlRzl5SUdKdmRHZ2dZbmtnWTJGamFHVWdZMkZzYkNCallYTmpZV1JsSUdOaGMyTmhaR1ZrSUdOaGMyVWdZMkZ6ZENCallYUmhiRzluSUdObGFXd2dZMlZwYkdsdVp5QmphR0ZwYmlCamFHRnVaMlVnWTJoaGJtZGxaQ0JqYUdGeVgyeGxibWQwYUNCamFHRnlZV04wWlhKZmJHVnVaM1JvSUdOb1lYSnBibVJsZUNCamFHRnljMlYwSUdOb1pXTnJJR05vWldOcmMzVnRJR05vWldOcmMzVnRYMkZuWnlCamFHOXZjMlVnWTJ4dmMyVWdZMjloYkdWelkyVWdZMjlsY21OcFltbHNhWFI1SUdOdmJHeGhkR1VnWTI5c2JHRjBhVzl1SUdOdmJHeGhkR2x2Ym5CeWIzQmxjblI1SUdOdmJIVnRiaUJqYjJ4MWJXNXpJR052YkhWdGJuTmZkWEJrWVhSbFpDQmpiMjF0YVhRZ1kyOXRjSEpsYzNNZ1kyOXVZMkYwSUdOdmJtTmhkRjkzY3lCamIyNWpkWEp5Wlc1MElHTnZibTVsWTNRZ1kyOXVibVZqZEdsdmJpQmpiMjV1WldOMGFXOXVYMmxrSUdOdmJuTnBjM1JsYm5RZ1kyOXVjM1J5WVdsdWRDQmpiMjV6ZEhKaGFXNTBjeUJqYjI1MGFXNTFaU0JqYjI1MGNtbGlkWFJ2Y25NZ1kyOXVkaUJqYjI1MlpYSjBJR052Ym5abGNuUmZkSG9nWTI5eWNtVnpjRzl1WkdsdVp5QmpiM01nWTI5MElHTnZkVzUwSUdOdmRXNTBYMkpwWnlCamNtTXpNaUJqY21WaGRHVWdZM0p2YzNNZ1kzVnRaVjlrYVhOMElHTjFjbVJoZEdVZ1kzVnljbVZ1ZENCamRYSnlaVzUwWDJSaGRHVWdZM1Z5Y21WdWRGOTBhVzFsSUdOMWNuSmxiblJmZEdsdFpYTjBZVzF3SUdOMWNuSmxiblJmZFhObGNpQmpkWEp6YjNJZ1kzVnlkR2x0WlNCa1lYUmhJR1JoZEdGaVlYTmxJR1JoZEdGaVlYTmxjeUJrWVhSaGJHVnVaM1JvSUdSaGRHVmZZV1JrSUdSaGRHVmZabTl5YldGMElHUmhkR1ZmYzNWaUlHUmhkR1ZoWkdRZ1pHRjBaV1JwWm1ZZ1pHRjBaV1p5YjIxd1lYSjBjeUJrWVhSbGJtRnRaU0JrWVhSbGNHRnlkQ0JrWVhSbGRHbHRaVEptY205dGNHRnlkSE1nWkdGMFpYUnBiV1Z2Wm1aelpYUm1jbTl0Y0dGeWRITWdaR0Y1SUdSaGVXNWhiV1VnWkdGNWIyWnRiMjUwYUNCa1lYbHZabmRsWldzZ1pHRjViMlo1WldGeUlHUmxZV3hzYjJOaGRHVWdaR1ZqYkdGeVpTQmtaV052WkdVZ1pHVm1ZWFZzZENCa1pXWmxjbkpoWW14bElHUmxabVZ5Y21Wa0lHUmxaM0psWlhNZ1pHVnNZWGxsWkNCa1pXeGxkR1VnWkdWelgyUmxZM0o1Y0hRZ1pHVnpYMlZ1WTNKNWNIUWdaR1Z6WDJ0bGVWOW1hV3hsSUdSbGMyTWdaR1Z6WTNKcFltVWdaR1Z6WTNKcGNIUnZjaUJrYVdGbmJtOXpkR2xqY3lCa2FXWm1aWEpsYm1ObElHUnBjMk52Ym01bFkzUWdaR2x6ZEdsdVkzUWdaR2x6ZEdsdVkzUnliM2NnWkdsMklHUnZJR1J2YldGcGJpQmtiM1ZpYkdVZ1pISnZjQ0JrZFcxd1ptbHNaU0JsWVdOb0lHVnNjMlVnWld4MElHVnVZMnh2YzJWa0lHVnVZMjlrWlNCbGJtTnllWEIwSUdWdVpDQmxibVF0WlhobFl5QmxibWRwYm1VZ1pXNW5hVzVsY3lCbGIyMXZiblJvSUdWeWNtOXljeUJsYzJOaGNHVWdaWE5qWVhCbFpDQmxkbVZ1ZENCbGRtVnVkR1JoZEdFZ1pYWmxiblJ6SUdWNFkyVndkQ0JsZUdObGNIUnBiMjRnWlhobFl5QmxlR1ZqZFhSbElHVjRhWE4wY3lCbGVIQWdaWGh3YkdGcGJpQmxlSEJ2Y25SZmMyVjBJR1Y0ZEdWdVpHVmtJR1Y0ZEdWeWJtRnNJR1Y0ZEhKaFkzUWdabUZ6ZENCbVpYUmphQ0JtYVdWc1pDQm1hV1ZzWkhNZ1ptbHVaRjlwYmw5elpYUWdabWx5YzNRZ1ptbHljM1JmZG1Gc2RXVWdabXh2YjNJZ1pteDFjMmdnWm05eUlHWnZjbU5sSUdadmNtVnBaMjRnWm05eWJXRjBJR1p2ZFc1a0lHWnZkVzVrWDNKdmQzTWdabkp2YlNCbWNtOXRYMkpoYzJVMk5DQm1jbTl0WDJSaGVYTWdabkp2YlY5MWJtbDRkR2x0WlNCbWRXeHNJR1oxYm1OMGFXOXVJR2RsZENCblpYUmZabTl5YldGMElHZGxkRjlzYjJOcklHZGxkR1JoZEdVZ1oyVjBkWFJqWkdGMFpTQm5iRzlpWVd3Z1oyOGdaMjkwYnlCbmNtRnVkQ0JuY21GdWRITWdaM0psWVhSbGMzUWdaM0p2ZFhBZ1ozSnZkWEJmWTI5dVkyRjBJR2R5YjNWd2FXNW5JR2R5YjNWd2FXNW5YMmxrSUdkMGFXUmZjM1ZpYzJWMElHZDBhV1JmYzNWaWRISmhZM1FnYUdGdVpHeGxjaUJvWVhacGJtY2dhR1ZzY0NCb1pYZ2dhR2xuYUY5d2NtbHZjbWwwZVNCb2IzTjBjeUJvYjNWeUlHbGtaVzUwWDJOMWNuSmxiblFnYVdSbGJuUmZhVzVqY2lCcFpHVnVkRjl6WldWa0lHbGtaVzUwYVdacFpXUWdhV1JsYm5ScGRIa2dhV1lnYVdadWRXeHNJR2xuYm05eVpTQnBhV1lnYVd4cGEyVWdhVzF0WldScFlYUmxJR2x1SUdsdVpHVjRJR2x1WkdsallYUnZjaUJwYm1WME5sOWhkRzl1SUdsdVpYUTJYMjUwYjJFZ2FXNWxkRjloZEc5dUlHbHVaWFJmYm5SdllTQnBibVpwYkdVZ2FXNXBkR2xoYkd4NUlHbHVibVZ5SUdsdWJtOWtZaUJwYm5CMWRDQnBibk5sY25RZ2FXNXpkR0ZzYkNCcGJuTjBjaUJwYm5SbGNuTmxZM1FnYVc1MGJ5QnBjeUJwYzE5bWNtVmxYMnh2WTJzZ2FYTmZhWEIyTkNCcGMxOXBjSFkwWDJOdmJYQmhkQ0JwYzE5cGNIWTBYMjFoY0hCbFpDQnBjMTl1YjNRZ2FYTmZibTkwWDI1MWJHd2dhWE5mZFhObFpGOXNiMk5ySUdselpHRjBaU0JwYzI1MWJHd2dhWE52YkdGMGFXOXVJR3B2YVc0Z2EyVjVJR3RwYkd3Z2JHRnVaM1ZoWjJVZ2JHRnpkQ0JzWVhOMFgyUmhlU0JzWVhOMFgybHVjMlZ5ZEY5cFpDQnNZWE4wWDNaaGJIVmxJR3hqWVhObElHeGxZV1FnYkdWaFpHbHVaeUJzWldGemRDQnNaV0YyWlhNZ2JHVm1kQ0JzWlc0Z2JHVnVaMmgwSUd4bGRtVnNJR3hwYTJVZ2JHbHRhWFFnYkdsdVpYTWdiRzRnYkc5aFpDQnNiMkZrWDJacGJHVWdiRzlqWVd3Z2JHOWpZV3gwYVcxbElHeHZZMkZzZEdsdFpYTjBZVzF3SUd4dlkyRjBaU0JzYjJOcklHeHZaeUJzYjJjeE1DQnNiMmN5SUd4dloyWnBiR1VnYkc5bmN5QnNiM2RmY0hKcGIzSnBkSGtnYkc5M1pYSWdiSEJoWkNCc2RISnBiU0J0WVd0bFgzTmxkQ0J0WVd0bFpHRjBaU0J0WVd0bGRHbHRaU0J0WVhOMFpYSWdiV0Z6ZEdWeVgzQnZjMTkzWVdsMElHMWhkR05vSUcxaGRHTm9aV1FnYldGNElHMWtOU0J0WldScGRXMGdiV1Z5WjJVZ2JXbGpjbTl6WldOdmJtUWdiV2xrSUcxcGJpQnRhVzUxZEdVZ2JXOWtJRzF2WkdVZ2JXOWtkV3hsSUcxdmJuUm9JRzF2Ym5Sb2JtRnRaU0J0ZFhSbGVDQnVZVzFsWDJOdmJuTjBJRzVoYldWeklHNWhkR2x2Ym1Gc0lHNWhkSFZ5WVd3Z2JtTm9ZWElnYm1WNGRDQnVieUJ1YjE5M2NtbDBaVjkwYjE5aWFXNXNiMmNnYm05MElHNXZkeUJ1ZFd4c2FXWWdiblpoY21Ob1lYSWdiMk4wSUc5amRHVjBYMnhsYm1kMGFDQnZaaUJ2YkdSZmNHRnpjM2R2Y21RZ2IyNGdiMjVzZVNCdmNHVnVJRzl3ZEdsdGFYcGxJRzl3ZEdsdmJpQnZjSFJwYjI1aGJHeDVJRzl5SUc5eVpDQnZjbVJsY2lCdmRYUmxjaUJ2ZFhSbWFXeGxJRzkxZEhCMWRDQndZV1FnY0dGeWMyVWdjR0Z5ZEdsaGJDQndZWEowYVhScGIyNGdjR0Z6YzNkdmNtUWdjR0YwYVc1a1pYZ2djR1Z5WTJWdWRGOXlZVzVySUhCbGNtTmxiblJwYkdWZlkyOXVkQ0J3WlhKalpXNTBhV3hsWDJScGMyTWdjR1Z5YVc5a1gyRmtaQ0J3WlhKcGIyUmZaR2xtWmlCd2FTQndiSFZuYVc0Z2NHOXphWFJwYjI0Z2NHOTNJSEJ2ZDJWeUlIQnlZV2R0WVNCd2NtVmphWE5wYjI0Z2NISmxjR0Z5WlNCd2NtVnpaWEoyWlNCd2NtbHRZWEo1SUhCeWFXOXlJSEJ5YVhacGJHVm5aWE1nY0hKdlkyVmtkWEpsSUhCeWIyTmxaSFZ5WlY5aGJtRnNlWHBsSUhCeWIyTmxjM05zYVhOMElIQnliMlpwYkdVZ2NISnZabWxzWlhNZ2NIVmliR2xqSUhCMVlteHBjMmhwYm1kelpYSjJaWEp1WVcxbElIQjFjbWRsSUhGMVlYSjBaWElnY1hWbGNua2djWFZwWTJzZ2NYVnZkR1VnY1hWdmRHVnVZVzFsSUhKaFpHbGhibk1nY21GdVpDQnlaV0ZrSUhKbFptVnlaVzVqWlhNZ2NtVm5aWGh3SUhKbGJHRjBhWFpsSUhKbGJHRjViRzluSUhKbGJHVmhjMlVnY21Wc1pXRnpaVjlzYjJOcklISmxibUZ0WlNCeVpYQmhhWElnY21Wd1pXRjBJSEpsY0d4aFkyVWdjbVZ3YkdsallYUmxJSEpsYzJWMElISmxjM1J2Y21VZ2NtVnpkSEpwWTNRZ2NtVjBkWEp1SUhKbGRIVnlibk1nY21WMlpYSnpaU0J5WlhadmEyVWdjbWxuYUhRZ2NteHBhMlVnY205c2JHSmhZMnNnY205c2JIVndJSEp2ZFc1a0lISnZkeUJ5YjNkZlkyOTFiblFnY205M2N5QnljR0ZrSUhKMGNtbHRJSE5oZG1Wd2IybHVkQ0J6WTJobGJXRWdjMk55YjJ4c0lITmxZMTkwYjE5MGFXMWxJSE5sWTI5dVpDQnpaV04wYVc5dUlITmxiR1ZqZENCelpYSnBZV3hwZW1GaWJHVWdjMlZ5ZG1WeUlITmxjM05wYjI0Z2MyVnpjMmx2Ymw5MWMyVnlJSE5sZENCemFHRWdjMmhoTVNCemFHRXlJSE5vWVhKbElITm9iM2NnYzJsbmJpQnphVzRnYzJsNlpTQnpiR0YyWlNCemJHVmxjQ0J6YldGc2JHUmhkR1YwYVcxbFpuSnZiWEJoY25SeklITnVZWEJ6YUc5MElITnZiV1VnYzI5dVlXMWxJSE52ZFc1a1pYZ2djMjkxYm1SelgyeHBhMlVnYzNCaFkyVWdjM0ZzSUhOeGJGOWlhV2RmY21WemRXeDBJSE54YkY5aWRXWm1aWEpmY21WemRXeDBJSE54YkY5allXTm9aU0J6Y1d4ZlkyRnNZMTltYjNWdVpGOXliM2R6SUhOeGJGOXViMTlqWVdOb1pTQnpjV3hmYzIxaGJHeGZjbVZ6ZFd4MElITnhiRjkyWVhKcFlXNTBYM0J5YjNCbGNuUjVJSE54YkhOMFlYUmxJSE54Y25RZ2MzRjFZWEpsSUhOMFlYSjBJSE4wWVhKMGFXNW5JSE4wWVhSMWN5QnpkR1FnYzNSa1pHVjJJSE4wWkdSbGRsOXdiM0FnYzNSa1pHVjJYM05oYlhBZ2MzUmtaWFlnYzNSa1pYWndJSE4wYjNBZ2MzUnlJSE4wY2w5MGIxOWtZWFJsSUhOMGNtRnBaMmgwWDJwdmFXNGdjM1J5WTIxd0lITjBjbWx1WnlCemRIVm1aaUJ6ZFdKa1lYUmxJSE4xWW5OMGNpQnpkV0p6ZEhKcGJtY2djM1ZpZEdsdFpTQnpkV0owY21sdVoxOXBibVJsZUNCemRXMGdjM2RwZEdOb2IyWm1jMlYwSUhONWMyUmhkR1VnYzNselpHRjBaWFJwYldVZ2MzbHpaR0YwWlhScGJXVnZabVp6WlhRZ2MzbHpkR1Z0WDNWelpYSWdjM2x6ZFhSalpHRjBaWFJwYldVZ2RHRmliR1VnZEdGaWJHVnpJSFJoWW14bGMzQmhZMlVnZEdGdUlIUmxiWEJ2Y21GeWVTQjBaWEp0YVc1aGRHVmtJSFJsY25ScFlYSjVYM2RsYVdkb2RITWdkR2hsYmlCMGFXMWxJSFJwYldWZlptOXliV0YwSUhScGJXVmZkRzlmYzJWaklIUnBiV1ZrYVdabUlIUnBiV1ZtY205dGNHRnlkSE1nZEdsdFpYTjBZVzF3SUhScGJXVnpkR0Z0Y0dGa1pDQjBhVzFsYzNSaGJYQmthV1ptSUhScGJXVjZiMjVsWDJodmRYSWdkR2x0WlhwdmJtVmZiV2x1ZFhSbElIUnZJSFJ2WDJKaGMyVTJOQ0IwYjE5a1lYbHpJSFJ2WDNObFkyOXVaSE1nZEc5a1lYUmxkR2x0Wlc5bVpuTmxkQ0IwY21GcGJHbHVaeUIwY21GdWMyRmpkR2x2YmlCMGNtRnVjMnhoZEdsdmJpQjBjbWxuWjJWeUlIUnlhV2RuWlhKZmJtVnpkR3hsZG1Wc0lIUnlhV2RuWlhKeklIUnlhVzBnZEhKMWJtTmhkR1VnZEhKNVgyTmhjM1FnZEhKNVgyTnZiblpsY25RZ2RISjVYM0JoY25ObElIVmpZWE5sSUhWdVkyOXRjSEpsYzNNZ2RXNWpiMjF3Y21WemMyVmtYMnhsYm1kMGFDQjFibWhsZUNCMWJtbGpiMlJsSUhWdWFXNXpkR0ZzYkNCMWJtbHZiaUIxYm1seGRXVWdkVzVwZUY5MGFXMWxjM1JoYlhBZ2RXNXJibTkzYmlCMWJteHZZMnNnZFhCa1lYUmxJSFZ3WjNKaFpHVWdkWEJ3WldRZ2RYQndaWElnZFhOaFoyVWdkWE5sSUhWelpYSWdkWE5sY2w5eVpYTnZkWEpqWlhNZ2RYTnBibWNnZFhSalgyUmhkR1VnZFhSalgzUnBiV1VnZFhSalgzUnBiV1Z6ZEdGdGNDQjFkV2xrSUhWMWFXUmZjMmh2Y25RZ2RtRnNhV1JoZEdWZmNHRnpjM2R2Y21SZmMzUnlaVzVuZEdnZ2RtRnNkV1VnZG1Gc2RXVnpJSFpoY2lCMllYSmZjRzl3SUhaaGNsOXpZVzF3SUhaaGNtbGhZbXhsY3lCMllYSnBZVzVqWlNCMllYSndJSFpsY25OcGIyNGdkbWxsZHlCM1lYSnVhVzVuY3lCM1pXVnJJSGRsWld0a1lYa2dkMlZsYTI5bWVXVmhjaUIzWldsbmFIUmZjM1J5YVc1bklIZG9aVzRnZDJobGJtVjJaWElnZDJobGNtVWdkMmwwYUNCM2IzSnJJSGR5YVhSbElIaHRiQ0I0YjNJZ2VXVmhjaUI1WldGeWQyVmxheUI2YjI1Y0lpeHNhWFJsY21Gc09sd2lkSEoxWlNCbVlXeHpaU0J1ZFd4c1hDSXNZblZwYkhSZmFXNDZYQ0poY25KaGVTQmlhV2RwYm5RZ1ltbHVZWEo1SUdKcGRDQmliRzlpSUdKdmIyeGxZVzRnWTJoaGNpQmphR0Z5WVdOMFpYSWdaR0YwWlNCa1pXTWdaR1ZqYVcxaGJDQm1iRzloZENCcGJuUWdhVzUwWldkbGNpQnBiblJsY25aaGJDQnVkVzFpWlhJZ2JuVnRaWEpwWXlCeVpXRnNJSE5sY21saGJDQnpiV0ZzYkdsdWRDQjJZWEpqYUdGeUlIWmhjbmxwYm1jZ2FXNTBPQ0J6WlhKcFlXdzRJSFJsZUhSY0luMHNZenBiZTJOT09sd2ljM1J5YVc1blhDSXNZanBjSWlkY0lpeGxPbHdpSjF3aUxHTTZXMlV1UWtVc2UySTZYQ0luSjF3aWZWMTlMSHRqVGpwY0luTjBjbWx1WjF3aUxHSTZKMXdpSnl4bE9pZGNJaWNzWXpwYlpTNUNSU3g3WWpvblhDSmNJaWQ5WFgwc2UyTk9PbHdpYzNSeWFXNW5YQ0lzWWpwY0ltQmNJaXhsT2x3aVlGd2lMR002VzJVdVFrVmRmU3hsTGtOT1RTeGxMa05DUTAwc2RGMTlMR1V1UTBKRFRTeDBYWDE5S1R0b2JHcHpMbkpsWjJsemRHVnlUR0Z1WjNWaFoyVW9YQ0owWlhoY0lpeG1kVzVqZEdsdmJpZ3BlM1poY2lCalBYdGpUanBjSW1OdmJXMWhibVJjSWl4aU9sd2lYRnhjWEZ4Y1hGeGJZUzE2UVMxYTBMQXQwWS9Ra0MzUmoxMHJXMXhjWEZ3cVhUOWNJbjBzWlQxN1kwNDZYQ0pqYjIxdFlXNWtYQ0lzWWpwY0lseGNYRnhjWEZ4Y1cxNWhMWHBCTFZyUXNDM1JqOUNRTGRHUE1DMDVYVndpZlN4dFBYdGpUanBjSW5Od1pXTnBZV3hjSWl4aU9sd2lXM3Q5WEZ4Y1hGdGNYRnhjWFZ4Y1hGd21JMzVkWENJc2Nqb3dmVHR5WlhSMWNtNTdZenBiZTJJNlhDSmNYRnhjWEZ4Y1hGdGhMWHBCTFZyUXNDM1JqOUNRTGRHUFhTdGJYRnhjWENwZFB5QXFQU0FxTFQ5Y1hGeGNaQ3BjWEZ4Y0xqOWNYRnhjWkNzb2NIUjhjR044YlcxOFkyMThhVzU4WkdSOFkyTjhaWGg4WlcwcFAxd2lMSEpDT2lFd0xHTTZXMk1zWlN4N1kwNDZYQ0p1ZFcxaVpYSmNJaXhpT2x3aUlDbzlYQ0lzWlRwY0lpMC9YRnhjWEdRcVhGeGNYQzQvWEZ4Y1hHUXJLSEIwZkhCamZHMXRmR050ZkdsdWZHUmtmR05qZkdWNGZHVnRLVDljSWl4bFFqb2hNSDFkTEhJNk1UQjlMR01zWlN4dExIdGpUanBjSW1admNtMTFiR0ZjSWl4aU9sd2lYRnhjWENSY1hGeGNKRndpTEdVNlhDSmNYRnhjSkZ4Y1hGd2tYQ0lzWXpwYll5eGxMRzFkTEhJNk1IMHNlMk5PT2x3aVptOXliWFZzWVZ3aUxHSTZYQ0pjWEZ4Y0pGd2lMR1U2WENKY1hGeGNKRndpTEdNNlcyTXNaU3h0WFN4eU9qQjlMSHRqVGpwY0ltTnZiVzFsYm5SY0lpeGlPbHdpSlZ3aUxHVTZYQ0lrWENJc2Nqb3dmVjE5ZlNrN2FHeHFjeTV5WldkcGMzUmxja3hoYm1kMVlXZGxLRndpYUhSMGNGd2lMR1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVlMms2WENKY1hGeGNVMXdpTEdNNlczdGpUanBjSW5OMFlYUjFjMXdpTEdJNlhDSmVTRlJVVUM5Yk1DMDVYRnhjWEM1ZEsxd2lMR1U2WENJa1hDSXNZenBiZTJOT09sd2liblZ0WW1WeVhDSXNZanBjSWx4Y1hGeGlYRnhjWEdSN00zMWNYRnhjWWx3aWZWMTlMSHRqVGpwY0luSmxjWFZsYzNSY0lpeGlPbHdpWGx0QkxWcGRLeUFvTGlvL0tTQklWRlJRTDFzd0xUbGNYRnhjTGwwckpGd2lMSEpDT2lFd0xHVTZYQ0lrWENJc1l6cGJlMk5PT2x3aWMzUnlhVzVuWENJc1lqcGNJaUJjSWl4bE9sd2lJRndpTEdWQ09pRXdMR1ZGT2lFd2ZWMTlMSHRqVGpwY0ltRjBkSEpwWW5WMFpWd2lMR0k2WENKZVhGeGNYSGRjSWl4bE9sd2lPaUJjSWl4bFJUb2hNQ3hwT2x3aVhGeGNYRzU4WEZ4Y1hITjhQVndpTEhOMFlYSjBjenA3WTA0NlhDSnpkSEpwYm1kY0lpeGxPbHdpSkZ3aWZYMHNlMkk2WENKY1hGeGNibHhjWEZ4dVhDSXNjM1JoY25Sek9udHpURHBjSWx3aUxHVlhPaUV3ZlgxZGZYMHBPMmhzYW5NdWNtVm5hWE4wWlhKTVlXNW5kV0ZuWlNoY0lteHBjM0JjSWl4bWRXNWpkR2x2YmlobEtYdDJZWElnWWoxY0lsdGhMWHBCTFZwZlhGeGNYQzFjWEZ4Y0sxeGNYRndxWEZ4Y1hDOWNYRnhjUEZ4Y1hGdzlYRnhjWEQ1Y1hGeGNKbHhjWEZ3alhWdGhMWHBCTFZvd0xUbGZYRnhjWEMxY1hGeGNLMXhjWEZ3cVhGeGNYQzljWEZ4Y1BGeGNYRnc5WEZ4Y1hENWNYRnhjSmx4Y1hGd2pJVjBxWENJc1l6MWNJbHhjWEZ4OFcxNWRLajljWEZ4Y2ZGd2lMSEk5WENJb1hGeGNYQzE4WEZ4Y1hDc3BQMXhjWEZ4a0t5aGNYRnhjTGx4Y1hGeGtLM3hjWEZ4Y0wxeGNYRnhrS3lrL0tDaGtmR1Y4Wm54c2ZITXBLRnhjWEZ3cmZGeGNYRnd0S1Q5Y1hGeGNaQ3NwUDF3aUxIUTllMk5PT2x3aWMyaGxZbUZ1WjF3aUxHSTZYQ0plSXlGY0lpeGxPbHdpSkZ3aWZTeGhQWHRqVGpwY0lteHBkR1Z5WVd4Y0lpeGlPbHdpWEZ4Y1hHSW9kSHN4Zlh4dWFXd3BYRnhjWEdKY0luMHNhVDE3WTA0NlhDSnVkVzFpWlhKY0lpeDJPbHQ3WWpweUxISTZNSDBzZTJJNlhDSWpZbHN3TFRGZEt5Z3ZXekF0TVYwcktUOWNJbjBzZTJJNlhDSWpiMXN3TFRkZEt5Z3ZXekF0TjEwcktUOWNJbjBzZTJJNlhDSWplRnN3TFRsaExXWmRLeWd2V3pBdE9XRXRabDByS1Q5Y0luMHNlMkk2WENJalkxeGNYRndvWENJcmNpdGNJaUFyWENJcmNpeGxPbHdpWEZ4Y1hDbGNJbjFkZlN4c1BXVXVhVzVvWlhKcGRDaGxMbEZUVFN4N2FUcHVkV3hzZlNrc2JqMTdZMDQ2WENKamIyMXRaVzUwWENJc1lqcGNJanRjSWl4bE9sd2lKRndpTEhJNk1IMHNUajE3WTA0NlhDSjJZWEpwWVdKc1pWd2lMR0k2WENKY1hGeGNLbHdpTEdVNlhDSmNYRnhjS2x3aWZTeGtQWHRqVGpwY0ltdGxlWGR2Y21SY0lpeGlPbHdpV3pvbVhWd2lLMko5TEc4OWUySTZZMzBzZFQxN1lqcGNJbHhjWEZ3b1hDSXNaVHBjSWx4Y1hGd3BYQ0lzWXpwYlhDSnpaV3htWENJc1lTeHNMR2xkZlN4elBYdGpUanBjSW5GMWIzUmxaRndpTEdNNlcya3NiQ3hPTEdRc2RWMHNkanBiZTJJNlhDSmJKMkJkWEZ4Y1hDaGNJaXhsT2x3aVhGeGNYQ2xjSW4wc2UySTZYQ0pjWEZ4Y0tIRjFiM1JsSUZ3aUxHVTZYQ0pjWEZ4Y0tWd2lMR3M2WENKeGRXOTBaVndpZlN4N1lqcGNJaWRjSWl0amZWMTlMR1k5ZTJOT09sd2ljWFZ2ZEdWa1hDSXNZanBjSWlkY0lpdGlmU3gyUFh0alRqcGNJbXhwYzNSY0lpeGlPbHdpWEZ4Y1hDaGNJaXhsT2x3aVhGeGNYQ2xjSW4wc1p6MTdaVmM2SVRBc2Nqb3dmVHR5WlhSMWNtNGdkaTVqUFZ0N1kwNDZYQ0pyWlhsM2IzSmtYQ0lzZGpwYmUySTZZbjBzZTJJNlkzMWRmU3huWFN4bkxtTTlXM01zWml4MkxHRXNhU3hzTEc0c1RpeGtMRzlkTEh0cE9pOWNYRk12TEdNNlcya3NkQ3hoTEd3c2JpeHpMR1lzZGwxOWZTazdhR3hxY3k1eVpXZHBjM1JsY2t4aGJtZDFZV2RsS0Z3aVpYSnNZVzVuWENJc1puVnVZM1JwYjI0b1pTbDdkbUZ5SUhJOVhDSmJZUzE2SjExYllTMTZRUzFhTUMwNVh5ZGRLbHdpTEdNOVhDSW9YQ0lyY2l0Y0lqcGNJaXR5SzF3aWZGd2lLM0lyWENJcFhDSXNZVDE3YTJWNWQyOXlaRHBjSW1GbWRHVnlJR0Z1WkNCaGJtUmhiSE52ZkRFd0lHSmhibVFnWW1WbmFXNGdZbTV2ZENCaWIzSWdZbk5zSUdKNmNpQmllRzl5SUdOaGMyVWdZMkYwWTJnZ1kyOXVaQ0JrYVhZZ1pXNWtJR1oxYmlCcFppQnNaWFFnYm05MElHOW1JRzl5Wld4elpYd3hNQ0J4ZFdWeWVTQnlaV05sYVhabElISmxiU0IwY25rZ2QyaGxiaUI0YjNKY0lpeHNhWFJsY21Gc09sd2labUZzYzJVZ2RISjFaVndpZlN4dVBYdGpUanBjSW1OdmJXMWxiblJjSWl4aU9sd2lKVndpTEdVNlhDSWtYQ0o5TEdJOWUyTk9PbHdpYm5WdFltVnlYQ0lzWWpwY0lseGNYRnhpS0Z4Y1hGeGtLeU5iWVMxbVFTMUdNQzA1WFN0OFhGeGNYR1FyS0Z4Y1hGd3VYRnhjWEdRcktUOG9XMlZGWFZzdEsxMC9YRnhjWEdRcktUOHBYQ0lzY2pvd2ZTeHBQWHRpT2x3aVpuVnVYRnhjWEhNclhDSXJjaXRjSWk5Y1hGeGNaQ3RjSW4wc2J6MTdZanBqSzF3aVhGeGNYQ2hjSWl4bE9sd2lYRnhjWENsY0lpeHlRam9oTUN4eU9qQXNZenBiZTJOT09sd2lablZ1WTNScGIyNWZibUZ0WlZ3aUxHSTZZeXh5T2pCOUxIdGlPbHdpWEZ4Y1hDaGNJaXhsT2x3aVhGeGNYQ2xjSWl4bFZ6b2hNQ3h5UlRvaE1DeHlPakI5WFgwc1pEMTdZMDQ2WENKMGRYQnNaVndpTEdJNlhDSjdYQ0lzWlRwY0luMWNJaXh5T2pCOUxIUTllMk5PT2x3aWRtRnlhV0ZpYkdWY0lpeGlPbHdpWEZ4Y1hHSmZLRnRCTFZwZFcwRXRXbUV0ZWpBdE9WOWRLaWsvWENJc2Nqb3dmU3hzUFh0alRqcGNJblpoY21saFlteGxYQ0lzWWpwY0lsdEJMVnBkVzJFdGVrRXRXakF0T1Y5ZEtsd2lMSEk2TUgwc1pqMTdZanBjSWlOY0lpdGxMbFZKVWl4eU9qQXNja0k2SVRBc1l6cGJlMk5PT2x3aWNtVmpiM0prWDI1aGJXVmNJaXhpT2x3aUkxd2lLMlV1VlVsU0xISTZNSDBzZTJJNlhDSjdYQ0lzWlRwY0luMWNJaXh5T2pCOVhYMHNjejE3WWtzNlhDSm1kVzRnY21WalpXbDJaU0JwWmlCMGNua2dZMkZ6WlZ3aUxHVTZYQ0psYm1SY0lpeHJPbUY5TzNNdVl6MWJiaXhwTEdVdWFXNW9aWEpwZENobExrRlRUU3g3WTA0NlhDSmNJbjBwTEhNc2J5eGxMbEZUVFN4aUxHUXNkQ3hzTEdaZE8zWmhjaUIxUFZ0dUxHa3NjeXh2TEdVdVVWTk5MR0lzWkN4MExHd3NabDA3Ynk1ald6RmRMbU05ZFN4a0xtTTlkU3htTG1OYk1WMHVZejExTzNaaGNpQjJQWHRqVGpwY0luQmhjbUZ0YzF3aUxHSTZYQ0pjWEZ4Y0tGd2lMR1U2WENKY1hGeGNLVndpTEdNNmRYMDdjbVYwZFhKdWUyRnNhV0Z6WlhNNlcxd2laWEpzWENKZExHczZZU3hwT2x3aUtEd3ZmRnhjWEZ3cVBYeGNYRnhjS3oxOExUMThMMXhjWEZ3cWZGeGNYRndxTDN4Y1hGeGNLRnhjWEZ3cWZGeGNYRndxWEZ4Y1hDa3BYQ0lzWXpwYmUyTk9PbHdpWm5WdVkzUnBiMjVjSWl4aU9sd2lYbHdpSzNJclhDSmNYRnhjY3lwY1hGeGNLRndpTEdVNlhDSXRQbHdpTEhKQ09pRXdMR2s2WENKY1hGeGNLSHdqZkM4dmZDOWNYRnhjS254Y1hGeGNYRnhjWEh3NmZEdGNJaXhqT2x0MkxHVXVhVzVvWlhKcGRDaGxMbFJOTEh0aU9uSjlLVjBzYzNSaGNuUnpPbnRsT2x3aU8zeGNYRnhjTGx3aUxHczZZU3hqT25WOWZTeHVMSHRqVGpwY0luQndYQ0lzWWpwY0lsNHRYQ0lzWlRwY0lseGNYRnd1WENJc2Nqb3dMR1ZGT2lFd0xISkNPaUV3TEd3NlhDSXRYQ0lyWlM1SlVpeHJPbHdpTFcxdlpIVnNaU0F0Y21WamIzSmtJQzExYm1SbFppQXRaWGh3YjNKMElDMXBabVJsWmlBdGFXWnVaR1ZtSUMxaGRYUm9iM0lnTFdOdmNIbHlhV2RvZENBdFpHOWpJQzEyYzI0Z0xXbHRjRzl5ZENBdGFXNWpiSFZrWlNBdGFXNWpiSFZrWlY5c2FXSWdMV052YlhCcGJHVWdMV1JsWm1sdVpTQXRaV3h6WlNBdFpXNWthV1lnTFdacGJHVWdMV0psYUdGMmFXOTFjaUF0WW1Wb1lYWnBiM0lnTFhOd1pXTmNJaXhqT2x0MlhYMHNZaXhsTGxGVFRTeG1MSFFzYkN4a0xIdGlPaTljWEM0a0wzMWRmWDBwTzJoc2FuTXVjbVZuYVhOMFpYSk1ZVzVuZFdGblpTaGNJbTFoYTJWbWFXeGxYQ0lzWm5WdVkzUnBiMjRvWlNsN2RtRnlJR0U5ZTJOT09sd2lkbUZ5YVdGaWJHVmNJaXhpT2k5Y1hDUmNYQ2d2TEdVNkwxeGNLUzhzWXpwYlpTNUNSVjE5TzNKbGRIVnlibnRoYkdsaGMyVnpPbHRjSW0xclhDSXNYQ0p0WVd0Y0lsMHNZenBiWlM1SVEwMHNlMkk2TDE1Y1hIY3JYRnh6S2x4Y1Z5bzlMeXh5UWpvaE1DeHlPakFzYzNSaGNuUnpPbnRqVGpwY0ltTnZibk4wWVc1MFhDSXNaVG92WEZ4ektseGNWeW85THl4bFJUb2hNQ3h6ZEdGeWRITTZlMlU2THlRdkxISTZNQ3hqT2x0aFhYMTlmU3g3WTA0NlhDSjBhWFJzWlZ3aUxHSTZMMTViWEZ4M1hTczZYRnh6S2lRdmZTeDdZMDQ2WENKd2FHOXVlVndpTEdJNkwxNWNYQzVRU0U5T1dUb3ZMR1U2THlRdkxHczZYQ0l1VUVoUFRsbGNJaXhzT2k5YlhGd3VYRngzWFNzdmZTeDdZam92WGx4Y2RDc3ZMR1U2THlRdkxISTZNQ3hqT2x0bExsRlRUU3hoWFgxZGZYMHBPMmhzYW5NdWNtVm5hWE4wWlhKTVlXNW5kV0ZuWlNoY0luQmxjbXhjSWl4bWRXNWpkR2x2YmlobEtYdDJZWElnZEQxY0ltZGxkSEIzWlc1MElHZGxkSE5sY25abGJuUWdjWFZ2ZEdWdFpYUmhJRzF6WjNKamRpQnpZMkZzWVhJZ2EybHNiQ0JrWW0xamJHOXpaU0IxYm1SbFppQnNZeUJ0WVNCemVYTjNjbWwwWlNCMGNpQnpaVzVrSUhWdFlYTnJJSE41YzI5d1pXNGdjMmh0ZDNKcGRHVWdkbVZqSUhGNElIVjBhVzFsSUd4dlkyRnNJRzlqZENCelpXMWpkR3dnYkc5allXeDBhVzFsSUhKbFlXUndhWEJsSUdSdklISmxkSFZ5YmlCbWIzSnRZWFFnY21WaFpDQnpjSEpwYm5SbUlHUmliVzl3Wlc0Z2NHOXdJR2RsZEhCbmNuQWdibTkwSUdkbGRIQjNibUZ0SUhKbGQybHVaR1JwY2lCeGNXWnBiR1Z1YnlCeGR5QmxibVJ3Y205MGIyVnVkQ0IzWVdsMElITmxkR2h2YzNSbGJuUWdZbXhsYzNNZ2Mzd3dJRzl3Wlc1a2FYSWdZMjl1ZEdsdWRXVWdaV0ZqYUNCemJHVmxjQ0JsYm1SbmNtVnVkQ0J6YUhWMFpHOTNiaUJrZFcxd0lHTm9iMjF3SUdOdmJtNWxZM1FnWjJWMGMyOWphMjVoYldVZ1pHbGxJSE52WTJ0bGRIQmhhWElnWTJ4dmMyVWdabXh2WTJzZ1pYaHBjM1J6SUdsdVpHVjRJSE5vYldkbGRITjFZaUJtYjNJZ1pXNWtjSGRsYm5RZ2NtVmtieUJzYzNSaGRDQnRjMmRqZEd3Z2MyVjBjR2R5Y0NCaFluTWdaWGhwZENCelpXeGxZM1FnY0hKcGJuUWdjbVZtSUdkbGRHaHZjM1JpZVdGa1pISWdkVzV6YUdsbWRDQm1ZMjUwYkNCemVYTmpZV3hzSUdkdmRHOGdaMlYwYm1WMFlubGhaR1J5SUdwdmFXNGdaMjEwYVcxbElITjViV3hwYm1zZ2MyVnRaMlYwSUhOd2JHbGpaU0I0ZkRBZ1oyVjBjR1ZsY201aGJXVWdjbVZqZGlCc2IyY2djMlYwYzI5amEyOXdkQ0JqYjNNZ2JHRnpkQ0J5WlhabGNuTmxJR2RsZEdodmMzUmllVzVoYldVZ1oyVjBaM0p1WVcwZ2MzUjFaSGtnWm05eWJXeHBibVVnWlc1a2FHOXpkR1Z1ZENCMGFXMWxjeUJqYUc5d0lHeGxibWQwYUNCblpYUm9iM04wWlc1MElHZGxkRzVsZEdWdWRDQndZV05ySUdkbGRIQnliM1J2Wlc1MElHZGxkSE5sY25aaWVXNWhiV1VnY21GdVpDQnRhMlJwY2lCd2IzTWdZMmh0YjJRZ2VYd3dJSE4xWW5OMGNpQmxibVJ1WlhSbGJuUWdjSEpwYm5SbUlHNWxlSFFnYjNCbGJpQnRjMmR6Ym1RZ2NtVmhaR1JwY2lCMWMyVWdkVzVzYVc1cklHZGxkSE52WTJ0dmNIUWdaMlYwY0hKcGIzSnBkSGtnY21sdVpHVjRJSGRoYm5SaGNuSmhlU0JvWlhnZ2MzbHpkR1Z0SUdkbGRITmxjblppZVhCdmNuUWdaVzVrYzJWeWRtVnVkQ0JwYm5RZ1kyaHlJSFZ1ZEdsbElISnRaR2x5SUhCeWIzUnZkSGx3WlNCMFpXeHNJR3hwYzNSbGJpQm1iM0pySUhOb2JYSmxZV1FnZFdObWFYSnpkQ0J6WlhSd2NtOTBiMlZ1ZENCbGJITmxJSE41YzNObFpXc2diR2x1YXlCblpYUm5jbWRwWkNCemFHMWpkR3dnZDJGcGRIQnBaQ0IxYm5CaFkyc2daMlYwYm1WMFlubHVZVzFsSUhKbGMyVjBJR05vWkdseUlHZHlaWEFnYzNCc2FYUWdjbVZ4ZFdseVpTQmpZV3hzWlhJZ2JHTm1hWEp6ZENCMWJuUnBiQ0IzWVhKdUlIZG9hV3hsSUhaaGJIVmxjeUJ6YUdsbWRDQjBaV3hzWkdseUlHZGxkSEIzZFdsa0lHMTVJR2RsZEhCeWIzUnZZbmx1ZFcxaVpYSWdaR1ZzWlhSbElHRnVaQ0J6YjNKMElIVmpJR1JsWm1sdVpXUWdjM0poYm1RZ1lXTmpaWEIwSUhCaFkydGhaMlVnYzJWbGEyUnBjaUJuWlhSd2NtOTBiMko1Ym1GdFpTQnpaVzF2Y0NCdmRYSWdjbVZ1WVcxbElITmxaV3NnYVdZZ2NYd3dJR05vY205dmRDQnplWE55WldGa0lITmxkSEIzWlc1MElHNXZJR055ZVhCMElHZGxkR01nWTJodmQyNGdjM0Z5ZENCM2NtbDBaU0J6WlhSdVpYUmxiblFnYzJWMGNISnBiM0pwZEhrZ1ptOXlaV0ZqYUNCMGFXVWdjMmx1SUcxeloyZGxkQ0J0WVhBZ2MzUmhkQ0JuWlhSc2IyZHBiaUIxYm14bGMzTWdaV3h6YVdZZ2RISjFibU5oZEdVZ1pYaGxZeUJyWlhseklHZHNiMklnZEdsbFpDQmpiRzl6WldScGNtbHZZM1JzSUhOdlkydGxkQ0J5WldGa2JHbHVheUJsZG1Gc0lIaHZjaUJ5WldGa2JHbHVaU0JpYVc1dGIyUmxJSE5sZEhObGNuWmxiblFnWlc5bUlHOXlaQ0JpYVc1a0lHRnNZWEp0SUhCcGNHVWdZWFJoYmpJZ1oyVjBaM0psYm5RZ1pYaHdJSFJwYldVZ2NIVnphQ0J6WlhSbmNtVnVkQ0JuZENCc2RDQnZjaUJ1WlNCdGZEQWdZbkpsWVdzZ1oybDJaVzRnYzJGNUlITjBZWFJsSUhkb1pXNWNJaXh5UFh0alRqcGNJbk4xWW5OMFhDSXNZanBjSWxza1FGMWNYRnhjZTF3aUxHVTZYQ0pjWEZ4Y2ZWd2lMR3M2ZEgwc2N6MTdZanBjSWkwK2Uxd2lMR1U2WENKOVhDSjlMRzQ5ZTJOT09sd2lkbUZ5YVdGaWJHVmNJaXgyT2x0N1lqb3ZYRndrWEZ4a0wzMHNlMkk2TDF0Y1hDUmNYQ1ZjWEVCZEtGeGNYbHhjZDF4Y1lud2pYRngzS3loY1hEcGNYRHBjWEhjcktTcDhlMXhjZHl0OWZGeGNkeXNvWEZ3NlhGdzZYRngzS2lrcUtTOTlMSHRpT2k5YlhGd2tYRndsWEZ4QVhWdGVYRnh6WEZ4M2UxMHZMSEk2TUgxZGZTeHZQWHRqVGpwY0ltTnZiVzFsYm5SY0lpeGlPbHdpWGloZlgwVk9SRjlmZkY5ZlJFRlVRVjlmS1Z3aUxHVTZYQ0pjWEZ4Y2JpUmNJaXh5T2pWOUxHazlXMlV1UWtVc2NpeHVYU3hqUFZ0dUxHVXVTRU5OTEc4c2UyTk9PbHdpWTI5dGJXVnVkRndpTEdJNlhDSmVYRnhjWEQxY1hGeGNkMXdpTEdVNlhDSmNYRnhjUFdOMWRGd2lMR1ZYT2lFd2ZTeHpMSHRqVGpwY0luTjBjbWx1WjF3aUxHTTZhU3gyT2x0N1lqcGNJbkZiY1hkNGNsMC9YRnhjWEhNcVhGeGNYQ2hjSWl4bE9sd2lYRnhjWENsY0lpeHlPalY5TEh0aU9sd2ljVnR4ZDNoeVhUOWNYRnhjY3lwY1hGeGNXMXdpTEdVNlhDSmNYRnhjWFZ3aUxISTZOWDBzZTJJNlhDSnhXM0YzZUhKZFAxeGNYRnh6S2x4Y1hGeDdYQ0lzWlRwY0lseGNYRng5WENJc2NqbzFmU3g3WWpwY0luRmJjWGQ0Y2wwL1hGeGNYSE1xWEZ4Y1hIeGNJaXhsT2x3aVhGeGNYSHhjSWl4eU9qVjlMSHRpT2x3aWNWdHhkM2h5WFQ5Y1hGeGNjeXBjWEZ4Y1BGd2lMR1U2WENKY1hGeGNQbHdpTEhJNk5YMHNlMkk2WENKeGQxeGNYRnh6SzNGY0lpeGxPbHdpY1Z3aUxISTZOWDBzZTJJNlhDSW5YQ0lzWlRwY0lpZGNJaXhqT2x0bExrSkZYWDBzZTJJNkoxd2lKeXhsT2lkY0lpZDlMSHRpT2x3aVlGd2lMR1U2WENKZ1hDSXNZenBiWlM1Q1JWMTlMSHRpT2x3aWUxeGNYRngzSzMxY0lpeGpPbHRkTEhJNk1IMHNlMkk2WENJdFAxeGNYRngzSzF4Y1hGeHpLbHhjWEZ3OVhGeGNYRDVjSWl4ak9sdGRMSEk2TUgxZGZTeDdZMDQ2WENKdWRXMWlaWEpjSWl4aU9sd2lLRnhjWEZ4aU1Gc3dMVGRmWFNzcGZDaGNYRnhjWWpCNFd6QXRPV0V0WmtFdFJsOWRLeWw4S0Z4Y1hGeGlXekV0T1YxYk1DMDVYMTBxS0Z4Y1hGd3VXekF0T1Y5ZEt5ay9LWHhiTUY5ZFhGeGNYR0pjSWl4eU9qQjlMSHRpT2x3aUtGeGNYRnd2WEZ4Y1hDOThYQ0lyWlM1U1UxSXJYQ0o4WEZ4Y1hHSW9jM0JzYVhSOGNtVjBkWEp1ZkhCeWFXNTBmSEpsZG1WeWMyVjhaM0psY0NsY1hGeGNZaWxjWEZ4Y2N5cGNJaXhyT2x3aWMzQnNhWFFnY21WMGRYSnVJSEJ5YVc1MElISmxkbVZ5YzJVZ1ozSmxjRndpTEhJNk1DeGpPbHRsTGtoRFRTeHZMSHRqVGpwY0luSmxaMlY0Y0Z3aUxHSTZYQ0lvYzN4MGNueDVLUzhvWEZ4Y1hGeGNYRnd1ZkZ0ZUwxMHBLaThvWEZ4Y1hGeGNYRnd1ZkZ0ZUwxMHBLaTliWVMxNlhTcGNJaXh5T2pFd2ZTeDdZMDQ2WENKeVpXZGxlSEJjSWl4aU9sd2lLRzE4Y1hJcFB5OWNJaXhsT2x3aUwxdGhMWHBkS2x3aUxHTTZXMlV1UWtWZExISTZNSDFkZlN4N1kwNDZYQ0p6ZFdKY0lpeGlTenBjSW5OMVlsd2lMR1U2WENJb1hGeGNYSE1xWEZ4Y1hDZ3VLajljWEZ4Y0tTay9XenQ3WFZ3aUxISTZOWDBzZTJOT09sd2liM0JsY21GMGIzSmNJaXhpT2x3aUxWeGNYRngzWEZ4Y1hHSmNJaXh5T2pCOVhUdHlaWFIxY200Z2NpNWpQV01zY3k1alBXTXNlMkZzYVdGelpYTTZXMXdpY0d4Y0lsMHNhenAwTEdNNlkzMTlLVHRvYkdwekxuSmxaMmx6ZEdWeVRHRnVaM1ZoWjJVb1hDSnlkV0o1WENJc1puVnVZM1JwYjI0b1pTbDdkbUZ5SUdJOVhDSmJZUzE2UVMxYVgxMWNYRnhjZHlwYklUODlYVDk4V3kwcmZsMWNYRnhjUUh3OFBIdytQbnc5Zm53OVBUMC9mRHc5UG54YlBENWRQVDk4WEZ4Y1hDcGNYRnhjS254YkxTOHJKVjRtS241Z2ZGMThYRnhjWEZ0Y1hGeGNYVDAvWENJc2NqMWNJbUZ1WkNCbVlXeHpaU0IwYUdWdUlHUmxabWx1WldRZ2JXOWtkV3hsSUdsdUlISmxkSFZ5YmlCeVpXUnZJR2xtSUVKRlIwbE9JSEpsZEhKNUlHVnVaQ0JtYjNJZ2RISjFaU0J6Wld4bUlIZG9aVzRnYm1WNGRDQjFiblJwYkNCa2J5QmlaV2RwYmlCMWJteGxjM01nUlU1RUlISmxjMk4xWlNCdWFXd2daV3h6WlNCaWNtVmhheUIxYm1SbFppQnViM1FnYzNWd1pYSWdZMnhoYzNNZ1kyRnpaU0J5WlhGMWFYSmxJSGxwWld4a0lHRnNhV0Z6SUhkb2FXeGxJR1Z1YzNWeVpTQmxiSE5wWmlCdmNpQnBibU5zZFdSbElHRjBkSEpmY21WaFpHVnlJR0YwZEhKZmQzSnBkR1Z5SUdGMGRISmZZV05qWlhOemIzSmNJaXhqUFh0alRqcGNJbmxoY21SdlkzUmhaMXdpTEdJNlhDSkFXMEV0V21FdGVsMHJYQ0o5TEdFOWUyTk9PbHdpZG1Gc2RXVmNJaXhpT2x3aUl6eGNJaXhsT2x3aVBsd2lmU3h6UFh0alRqcGNJbU52YlcxbGJuUmNJaXgyT2x0N1lqcGNJaU5jSWl4bE9sd2lKRndpTEdNNlcyTmRmU3g3WWpwY0lsNWNYRnhjUFdKbFoybHVYQ0lzWlRwY0lsNWNYRnhjUFdWdVpGd2lMR002VzJOZExISTZNVEI5TEh0aU9sd2lYbDlmUlU1RVgxOWNJaXhsT2x3aVhGeGNYRzRrWENKOVhYMHNiajE3WTA0NlhDSnpkV0p6ZEZ3aUxHSTZYQ0lqWEZ4Y1hIdGNJaXhsT2x3aWZWd2lMR3M2Y24wc2REMTdZMDQ2WENKemRISnBibWRjSWl4ak9sdGxMa0pGTEc1ZExIWTZXM3RpT2k4bkx5eGxPaThuTDMwc2UySTZMMXdpTHl4bE9pOWNJaTk5TEh0aU9pOWdMeXhsT2k5Z0wzMHNlMkk2WENJbFczRlJkMWQ0WFQ5Y1hGeGNLRndpTEdVNlhDSmNYRnhjS1Z3aWZTeDdZanBjSWlWYmNWRjNWM2hkUDF4Y1hGeGJYQ0lzWlRwY0lseGNYRnhkWENKOUxIdGlPbHdpSlZ0eFVYZFhlRjAvZTF3aUxHVTZYQ0o5WENKOUxIdGlPbHdpSlZ0eFVYZFhlRjAvUEZ3aUxHVTZYQ0krWENKOUxIdGlPbHdpSlZ0eFVYZFhlRjAvTDF3aUxHVTZYQ0l2WENKOUxIdGlPbHdpSlZ0eFVYZFhlRjAvSlZ3aUxHVTZYQ0lsWENKOUxIdGlPbHdpSlZ0eFVYZFhlRjAvTFZ3aUxHVTZYQ0l0WENKOUxIdGlPbHdpSlZ0eFVYZFhlRjAvWEZ4Y1hIeGNJaXhsT2x3aVhGeGNYSHhjSW4wc2UySTZMMXhjUWx4Y1B5aGNYRnhjWEZ4a2V6RXNNMzE4WEZ4Y1hIaGJRUzFHWVMxbU1DMDVYWHN4TERKOWZGeGNYRngxVzBFdFJtRXRaakF0T1YxN05IMThYRnhjWEQ5Y1hGTXBYRnhpTDMxZGZTeHBQWHRqVGpwY0luQmhjbUZ0YzF3aUxHSTZYQ0pjWEZ4Y0tGd2lMR1U2WENKY1hGeGNLVndpTEdzNmNuMHNaRDFiZEN4aExITXNlMk5PT2x3aVkyeGhjM05jSWl4aVN6cGNJbU5zWVhOeklHMXZaSFZzWlZ3aUxHVTZYQ0lrZkR0Y0lpeHBPaTg5THl4ak9sdGxMbWx1YUdWeWFYUW9aUzVVVFN4N1lqcGNJbHRCTFZwaExYcGZYVnhjWEZ4M0tpZzZPbHhjWEZ4M0t5a3FLRnhjWEZ3L2ZGeGNYRndoS1Q5Y0luMHBMSHRqVGpwY0ltbHVhR1Z5YVhSaGJtTmxYQ0lzWWpwY0lqeGNYRnhjY3lwY0lpeGpPbHQ3WTA0NlhDSndZWEpsYm5SY0lpeGlPbHdpS0Z3aUsyVXVTVklyWENJNk9pay9YQ0lyWlM1SlVuMWRmU3h6WFgwc2UyTk9PbHdpWm5WdVkzUnBiMjVjSWl4aVN6cGNJbVJsWmx3aUxHVTZYQ0lnZkNSOE8xd2lMSEk2TUN4ak9sdGxMbWx1YUdWeWFYUW9aUzVVVFN4N1lqcGlmU2tzYVN4elhYMHNlMk5PT2x3aVkyOXVjM1JoYm5SY0lpeGlPbHdpS0RvNktUOG9YRnhjWEdKYlFTMWFYVnhjWEZ4M0tpZzZPaWsvS1N0Y0lpeHlPakI5TEh0alRqcGNJbk41YldKdmJGd2lMR0k2WlM1VlNWSXJYQ0lvWEZ4Y1hDRjhYRnhjWEQ4cFB6cGNJaXh5T2pCOUxIdGpUanBjSW5ONWJXSnZiRndpTEdJNlhDSTZYQ0lzWXpwYmRDeDdZanBpZlYwc2Nqb3dmU3g3WTA0NlhDSnVkVzFpWlhKY0lpeGlPbHdpS0Z4Y1hGeGlNRnN3TFRkZlhTc3BmQ2hjWEZ4Y1lqQjRXekF0T1dFdFprRXRSbDlkS3lsOEtGeGNYRnhpV3pFdE9WMWJNQzA1WDEwcUtGeGNYRnd1V3pBdE9WOWRLeWsvS1h4Yk1GOWRYRnhjWEdKY0lpeHlPakI5TEh0alRqcGNJblpoY21saFlteGxYQ0lzWWpwY0lpaGNYRnhjSkZ4Y1hGeFhLWHdvS0Z4Y1hGd2tmRnhjWEZ4QVhGeGNYRUEvS1NoY1hGeGNkeXNwS1Z3aWZTeDdZanBjSWloY0lpdGxMbEpUVWl0Y0lpbGNYRnhjY3lwY0lpeGpPbHRoTEhNc2UyTk9PbHdpY21WblpYaHdYQ0lzWXpwYlpTNUNSU3h1WFN4cE9pOWNYRzR2TEhZNlczdGlPbHdpTDF3aUxHVTZYQ0l2VzJFdGVsMHFYQ0o5TEh0aU9sd2lKWEo3WENJc1pUcGNJbjFiWVMxNlhTcGNJbjBzZTJJNlhDSWxjbHhjWEZ3b1hDSXNaVHBjSWx4Y1hGd3BXMkV0ZWwwcVhDSjlMSHRpT2x3aUpYSWhYQ0lzWlRwY0lpRmJZUzE2WFNwY0luMHNlMkk2WENJbGNseGNYRnhiWENJc1pUcGNJbHhjWEZ4ZFcyRXRlbDBxWENKOVhYMWRMSEk2TUgxZE8yNHVZejFrTEdrdVl6MWtPM1poY2lCc1BWd2lXejQvWFQ1Y0lpeDFQVndpVzF4Y1hGeDNJMTByWEZ4Y1hDaGNYRnhjZHl0Y1hGeGNLVHBjWEZ4Y1pDczZYRnhjWEdRclBsd2lMRTQ5WENJb1hGeGNYSGNyTFNrL1hGeGNYR1FyWEZ4Y1hDNWNYRnhjWkN0Y1hGeGNMbHhjWEZ4a0tIQmNYRnhjWkNzcFAxdGVQbDByUGx3aUxHODlXM3RpT2k5ZVhGeHpLajArTHl4alRqcGNJbk4wWVhSMWMxd2lMSE4wWVhKMGN6cDdaVHBjSWlSY0lpeGpPbVI5ZlN4N1kwNDZYQ0p3Y205dGNIUmNJaXhpT2x3aVhpaGNJaXRzSzF3aWZGd2lLM1VyWENKOFhDSXJUaXRjSWlsY0lpeHpkR0Z5ZEhNNmUyVTZYQ0lrWENJc1l6cGtmWDFkTzNKbGRIVnlibnRoYkdsaGMyVnpPbHRjSW5KaVhDSXNYQ0puWlcxemNHVmpYQ0lzWENKd2IyUnpjR1ZqWENJc1hDSjBhRzl5WENJc1hDSnBjbUpjSWwwc2F6cHlMR002VzNOZExtTnZibU5oZENodktTNWpiMjVqWVhRb1pDbDlmU2s3YUd4cWN5NXlaV2RwYzNSbGNreGhibWQxWVdkbEtGd2laWEppWENJc1puVnVZM1JwYjI0b0tYdHlaWFIxY201N2MwdzZYQ0o0Yld4Y0lpeHpkV0pNWVc1bmRXRm5aVTF2WkdVNlhDSmpiMjUwYVc1MWIzVnpYQ0lzWXpwYmUyTk9PbHdpWTI5dGJXVnVkRndpTEdJNlhDSThKU05jSWl4bE9sd2lKVDVjSW4wc2UySTZYQ0k4SlZzbFBTMWRQMXdpTEdVNlhDSmJKUzFkUHlVK1hDSXNjMHc2WENKeWRXSjVYQ0lzWlVJNklUQXNaVVU2SVRCOVhYMTlLVHRvYkdwekxuSmxaMmx6ZEdWeVRHRnVaM1ZoWjJVb1hDSmhjR0ZqYUdWY0lpeG1kVzVqZEdsdmJpaGxLWHQyWVhJZ2NqMTdZMDQ2WENKdWRXMWlaWEpjSWl4aU9sd2lXMXhjWEZ3a0pWMWNYRnhjWkN0Y0luMDdjbVYwZFhKdWUyRnNhV0Z6WlhNNlcxd2lZWEJoWTJobFkyOXVabHdpWFN4alNUb2hNQ3hqT2x0bExraERUU3g3WTA0NlhDSjBZV2RjSWl4aU9sd2lQQzgvWENJc1pUcGNJajVjSW4wc2UyTk9PbHdpYTJWNWQyOXlaRndpTEdJNkwxeGNkeXN2TEhJNk1DeHJPbnRqYjIxdGIyNDZYQ0p2Y21SbGNpQmtaVzU1SUdGc2JHOTNJSE5sZEdWdWRpQnlaWGR5YVhSbGNuVnNaU0J5WlhkeWFYUmxaVzVuYVc1bElISmxkM0pwZEdWamIyNWtJR1J2WTNWdFpXNTBjbTl2ZENCelpYUm9ZVzVrYkdWeUlHVnljbTl5Wkc5amRXMWxiblFnYkc5aFpHMXZaSFZzWlNCdmNIUnBiMjV6SUdobFlXUmxjaUJzYVhOMFpXNGdjMlZ5ZG1WeWNtOXZkQ0J6WlhKMlpYSnVZVzFsWENKOUxITjBZWEowY3pwN1pUb3ZKQzhzY2pvd0xHczZlMnhwZEdWeVlXdzZYQ0p2YmlCdlptWWdZV3hzWENKOUxHTTZXM3RqVGpwY0luTnhZbkpoWTJ0bGRGd2lMR0k2WENKY1hGeGNjMXhjWEZ4YlhDSXNaVHBjSWx4Y1hGeGRKRndpZlN4N1kwNDZYQ0pqWW5KaFkydGxkRndpTEdJNlhDSmJYRnhjWENRbFhWeGNYRng3WENJc1pUcGNJbHhjWEZ4OVhDSXNZenBiWENKelpXeG1YQ0lzY2wxOUxISXNaUzVSVTAxZGZYMWRMR2s2TDF4Y1V5OTlmU2s3YUd4cWN5NXlaV2RwYzNSbGNreGhibWQxWVdkbEtGd2lhbk52Ymx3aUxHWjFibU4wYVc5dUtHVXBlM1poY2lCMFBYdHNhWFJsY21Gc09sd2lkSEoxWlNCbVlXeHpaU0J1ZFd4c1hDSjlMR2s5VzJVdVVWTk5MR1V1UTA1TlhTeHNQWHRqVGpwY0luWmhiSFZsWENJc1pUcGNJaXhjSWl4bFZ6b2hNQ3hsUlRvaE1DeGpPbWtzYXpwMGZTeGpQWHRpT2x3aWUxd2lMR1U2WENKOVhDSXNZenBiZTJOT09sd2lZWFIwY21saWRYUmxYQ0lzWWpvblhGeGNYSE1xWENJbkxHVTZKMXdpWEZ4Y1hITXFPbHhjWEZ4ektpY3NaVUk2SVRBc1pVVTZJVEFzWXpwYlpTNUNSVjBzYVRwY0lseGNYRnh1WENJc2MzUmhjblJ6T214OVhTeHBPbHdpWEZ4Y1hGTmNJbjBzYmoxN1lqcGNJbHhjWEZ4YlhDSXNaVHBjSWx4Y1hGeGRYQ0lzWXpwYlpTNXBibWhsY21sMEtHd3NlMk5PT201MWJHeDlLVjBzYVRwY0lseGNYRnhUWENKOU8zSmxkSFZ5YmlCcExuTndiR2xqWlNocExteGxibWQwYUN3d0xHTXNiaWtzZTJNNmFTeHJPblFzYVRwY0lseGNYRnhUWENKOWZTazdhR3hxY3k1eVpXZHBjM1JsY2t4aGJtZDFZV2RsS0Z3aVkyeHZhblZ5WlZ3aUxHWjFibU4wYVc5dUtHVXBlM1poY2lCMFBYdGlkV2xzZEY5cGJqcGNJbVJsWmlCamIyNWtJR0Z3Y0d4NUlHbG1MVzV2ZENCcFppMXNaWFFnYVdZZ2JtOTBJRzV2ZEQwZ1BTQThJRDRnUEQwZ1BqMGdQVDBnS3lBdklDb2dMU0J5WlcwZ2NYVnZkQ0J1WldjL0lIQnZjejhnWkdWc1lYay9JSE41YldKdmJEOGdhMlY1ZDI5eVpEOGdkSEoxWlQ4Z1ptRnNjMlUvSUdsdWRHVm5aWEkvSUdWdGNIUjVQeUJqYjJ4c1B5QnNhWE4wUHlCelpYUS9JR2xtYmo4Z1ptNC9JR0Z6YzI5amFXRjBhWFpsUHlCelpYRjFaVzUwYVdGc1B5QnpiM0owWldRL0lHTnZkVzUwWldRL0lISmxkbVZ5YzJsaWJHVS9JRzUxYldKbGNqOGdaR1ZqYVcxaGJEOGdZMnhoYzNNL0lHUnBjM1JwYm1OMFB5QnBjMkUvSUdac2IyRjBQeUJ5WVhScGIyNWhiRDhnY21Wa2RXTmxaRDhnY21GMGFXOC9JRzlrWkQ4Z1pYWmxiajhnWTJoaGNqOGdjMlZ4UHlCMlpXTjBiM0kvSUhOMGNtbHVaejhnYldGd1B5QnVhV3cvSUdOdmJuUmhhVzV6UHlCNlpYSnZQeUJwYm5OMFlXNWpaVDhnYm05MExXVjJaWEo1UHlCdWIzUXRZVzU1UHlCc2FXSnpjR1ZqUHlBdFBpQXRQajRnTGk0Z0xpQnBibU1nWTI5dGNHRnlaU0JrYnlCa2IzUnBiV1Z6SUcxaGNHTmhkQ0IwWVd0bElISmxiVzkyWlNCMFlXdGxMWGRvYVd4bElHUnliM0FnYkdWMFptNGdaSEp2Y0Mxc1lYTjBJSFJoYTJVdGJHRnpkQ0JrY205d0xYZG9hV3hsSUhkb2FXeGxJR2x1ZEdWeWJpQmpiMjVrY0NCallYTmxJSEpsWkhWalpXUWdZM2xqYkdVZ2MzQnNhWFF0WVhRZ2MzQnNhWFF0ZDJsMGFDQnlaWEJsWVhRZ2NtVndiR2xqWVhSbElHbDBaWEpoZEdVZ2NtRnVaMlVnYldWeVoyVWdlbWx3YldGd0lHUmxZMnhoY21VZ2JHbHVaUzF6WlhFZ2MyOXlkQ0JqYjIxd1lYSmhkRzl5SUhOdmNuUXRZbmtnWkc5eWRXNGdaRzloYkd3Z2JuUm9ibVY0ZENCdWRHaHlaWE4wSUhCaGNuUnBkR2x2YmlCbGRtRnNJR1J2YzJWeElHRjNZV2wwSUdGM1lXbDBMV1p2Y2lCc1pYUWdZV2RsYm5RZ1lYUnZiU0J6Wlc1a0lITmxibVF0YjJabUlISmxiR1ZoYzJVdGNHVnVaR2x1WnkxelpXNWtjeUJoWkdRdGQyRjBZMmdnYldGd2RpQm1hV3gwWlhKMklISmxiVzkyWlMxM1lYUmphQ0JoWjJWdWRDMWxjbkp2Y2lCeVpYTjBZWEowTFdGblpXNTBJSE5sZEMxbGNuSnZjaTFvWVc1a2JHVnlJR1Z5Y205eUxXaGhibVJzWlhJZ2MyVjBMV1Z5Y205eUxXMXZaR1VoSUdWeWNtOXlMVzF2WkdVZ2MyaDFkR1J2ZDI0dFlXZGxiblJ6SUhGMWIzUmxJSFpoY2lCbWJpQnNiMjl3SUhKbFkzVnlJSFJvY205M0lIUnllU0J0YjI1cGRHOXlMV1Z1ZEdWeUlHMXZibWwwYjNJdFpYaHBkQ0JrWldadFlXTnlieUJrWldadUlHUmxabTR0SUcxaFkzSnZaWGh3WVc1a0lHMWhZM0p2Wlhod1lXNWtMVEVnWm05eUlHUnZjM2x1WXlCaGJtUWdiM0lnZDJobGJpQjNhR1Z1TFc1dmRDQjNhR1Z1TFd4bGRDQmpiMjF3SUdwMWVIUWdjR0Z5ZEdsaGJDQnpaWEYxWlc1alpTQnRaVzF2YVhwbElHTnZibk4wWVc1MGJIa2dZMjl0Y0d4bGJXVnVkQ0JwWkdWdWRHbDBlU0JoYzNObGNuUWdjR1ZsYXlCd2IzQWdaRzkwYnlCd2NtOTRlU0JrWldaemRISjFZM1FnWm1seWMzUWdjbVZ6ZENCamIyNXpJR1JsWm5CeWIzUnZZMjlzSUdOaGMzUWdZMjlzYkNCa1pXWjBlWEJsSUdSbFpuSmxZMjl5WkNCc1lYTjBJR0oxZEd4aGMzUWdjMmxuY3lCeVpXbG1lU0J6WldOdmJtUWdabVpwY25OMElHWnVaWGgwSUc1bWFYSnpkQ0J1Ym1WNGRDQmtaV1p0ZFd4MGFTQmtaV1p0WlhSb2IyUWdiV1YwWVNCM2FYUm9MVzFsZEdFZ2JuTWdhVzR0Ym5NZ1kzSmxZWFJsTFc1eklHbHRjRzl5ZENCeVpXWmxjaUJyWlhseklITmxiR1ZqZEMxclpYbHpJSFpoYkhNZ2EyVjVJSFpoYkNCeWMyVnhJRzVoYldVZ2JtRnRaWE53WVdObElIQnliMjFwYzJVZ2FXNTBieUIwY21GdWMybGxiblFnY0dWeWMybHpkR1Z1ZENFZ1kyOXVhaUVnWVhOemIyTWhJR1JwYzNOdll5RWdjRzl3SVNCa2FYTnFJU0IxYzJVZ1kyeGhjM01nZEhsd1pTQnVkVzBnWm14dllYUWdaRzkxWW14bElITm9iM0owSUdKNWRHVWdZbTl2YkdWaGJpQmlhV2RwYm5RZ1ltbG5hVzUwWldkbGNpQmlhV2RrWldNZ2NISnBiblF0YldWMGFHOWtJSEJ5YVc1MExXUjFjQ0IwYUhKdmR5MXBaaUJ3Y21sdWRHWWdabTl5YldGMElHeHZZV1FnWTI5dGNHbHNaU0JuWlhRdGFXNGdkWEJrWVhSbExXbHVJSEJ5SUhCeUxXOXVJRzVsZDJ4cGJtVWdabXgxYzJnZ2NtVmhaQ0J6YkhWeWNDQnlaV0ZrTFd4cGJtVWdjM1ZpZG1WaklIZHBkR2d0YjNCbGJpQnRaVzFtYmlCMGFXMWxJSEpsTFdacGJtUWdjbVV0WjNKdmRYQnpJSEpoYm1RdGFXNTBJSEpoYm1RZ2JXOWtJR3h2WTJ0cGJtY2dZWE56WlhKMExYWmhiR2xrTFdaa1pXTnNJR0ZzYVdGeklISmxjMjlzZG1VZ2NtVm1JR1JsY21WbUlISmxabk5sZENCemQyRndJU0J5WlhObGRDRWdjMlYwTFhaaGJHbGtZWFJ2Y2lFZ1kyOXRjR0Z5WlMxaGJtUXRjMlYwSVNCaGJIUmxjaTF0WlhSaElTQnlaWE5sZEMxdFpYUmhJU0JqYjIxdGRYUmxJR2RsZEMxMllXeHBaR0YwYjNJZ1lXeDBaWElnY21WbUxYTmxkQ0J5WldZdGFHbHpkRzl5ZVMxamIzVnVkQ0J5WldZdGJXbHVMV2hwYzNSdmNua2djbVZtTFcxaGVDMW9hWE4wYjNKNUlHVnVjM1Z5WlNCemVXNWpJR2x2SVNCdVpYY2dibVY0ZENCamIyNXFJSE5sZENFZ2RHOHRZWEp5WVhrZ1puVjBkWEpsSUdaMWRIVnlaUzFqWVd4c0lHbHVkRzh0WVhKeVlYa2dZWE5sZENCblpXNHRZMnhoYzNNZ2NtVmtkV05sSUcxaGNDQm1hV3gwWlhJZ1ptbHVaQ0JsYlhCMGVTQm9ZWE5vTFcxaGNDQm9ZWE5vTFhObGRDQnpiM0owWldRdGJXRndJSE52Y25SbFpDMXRZWEF0WW5rZ2MyOXlkR1ZrTFhObGRDQnpiM0owWldRdGMyVjBMV0o1SUhabFl5QjJaV04wYjNJZ2MyVnhJR1pzWVhSMFpXNGdjbVYyWlhKelpTQmhjM052WXlCa2FYTnpiMk1nYkdsemRDQmthWE5xSUdkbGRDQjFibWx2YmlCa2FXWm1aWEpsYm1ObElHbHVkR1Z5YzJWamRHbHZiaUJsZUhSbGJtUWdaWGgwWlc1a0xYUjVjR1VnWlhoMFpXNWtMWEJ5YjNSdlkyOXNJR2x1ZENCdWRHZ2daR1ZzWVhrZ1kyOTFiblFnWTI5dVkyRjBJR05vZFc1cklHTm9kVzVyTFdKMVptWmxjaUJqYUhWdWF5MWhjSEJsYm1RZ1kyaDFibXN0Wm1seWMzUWdZMmgxYm1zdGNtVnpkQ0J0WVhnZ2JXbHVJR1JsWXlCMWJtTm9aV05yWldRdGFXNWpMV2x1ZENCMWJtTm9aV05yWldRdGFXNWpJSFZ1WTJobFkydGxaQzFrWldNdGFXNWpJSFZ1WTJobFkydGxaQzFrWldNZ2RXNWphR1ZqYTJWa0xXNWxaMkYwWlNCMWJtTm9aV05yWldRdFlXUmtMV2x1ZENCMWJtTm9aV05yWldRdFlXUmtJSFZ1WTJobFkydGxaQzF6ZFdKMGNtRmpkQzFwYm5RZ2RXNWphR1ZqYTJWa0xYTjFZblJ5WVdOMElHTm9kVzVyTFc1bGVIUWdZMmgxYm1zdFkyOXVjeUJqYUhWdWEyVmtMWE5sY1Q4Z2NISnVJSFpoY25rdGJXVjBZU0JzWVhwNUxYTmxjU0J6Y0hKbFlXUWdiR2x6ZENvZ2MzUnlJR1pwYm1RdGEyVjVkMjl5WkNCclpYbDNiM0prSUhONWJXSnZiQ0JuWlc1emVXMGdabTl5WTJVZ2NtRjBhVzl1WVd4cGVtVmNJbjBzY2oxY0ltRXRla0V0V2w5Y1hGeGNMU0V1UHlzcVBUdytKaU1uWENJc2JqMWNJbHRjSWl0eUsxd2lYVnRjSWl0eUsxd2lNQzA1THpzNlhTcGNJaXhoUFZ3aVd5MHJYVDljWEZ4Y1pDc29YRnhjWEM1Y1hGeGNaQ3NwUDF3aUxHODllMkk2Yml4eU9qQjlMSE05ZTJOT09sd2liblZ0WW1WeVhDSXNZanBoTEhJNk1IMHNZejFsTG1sdWFHVnlhWFFvWlM1UlUwMHNlMms2Ym5Wc2JIMHBMR2s5ZTJOT09sd2lZMjl0YldWdWRGd2lMR0k2WENJN1hDSXNaVHBjSWlSY0lpeHlPakI5TEdROWUyTk9PbHdpYkdsMFpYSmhiRndpTEdJNkwxeGNZaWgwY25WbGZHWmhiSE5sZkc1cGJDbGNYR0l2ZlN4c1BYdGpUanBjSW1OdmJHeGxZM1JwYjI1Y0lpeGlPbHdpVzF4Y1hGeGJYRnhjWEh0ZFhDSXNaVHBjSWx0Y1hGeGNYVnhjWEZ4OVhWd2lmU3h0UFh0alRqcGNJbU52YlcxbGJuUmNJaXhpT2x3aVhGeGNYRjVjSWl0dWZTeHdQWHRqVGpwY0ltTnZiVzFsYm5SY0lpeGlPbHdpWEZ4Y1hGNWNYRnhjZTF3aUxHVTZYQ0pjWEZ4Y2ZWd2lmU3gxUFh0alRqcGNJbUYwZEhKcFluVjBaVndpTEdJNlhDSmJPbDFjSWl0dWZTeG1QWHRqVGpwY0lteHBjM1JjSWl4aU9sd2lYRnhjWENoY0lpeGxPbHdpWEZ4Y1hDbGNJbjBzYUQxN1pWYzZJVEFzY2pvd2ZTeDVQWHRyT25Rc2JEcHVMR05PT2x3aWEyVjVkMjl5WkZ3aUxHSTZiaXh6ZEdGeWRITTZhSDBzWWoxYlppeGpMRzBzY0N4cExIVXNiQ3h6TEdRc2IxMDdjbVYwZFhKdUlHWXVZejFiZTJOT09sd2lZMjl0YldWdWRGd2lMR0k2WENKamIyMXRaVzUwWENKOUxIa3NhRjBzYUM1alBXSXNiQzVqUFdJc2UyRnNhV0Z6WlhNNlcxd2lZMnhxWENKZExHazZMMXhjVXk4c1l6cGJaaXhqTEcwc2NDeHBMSFVzYkN4ekxHUmRmWDBwTzJoc2FuTXVjbVZuYVhOMFpYSk1ZVzVuZFdGblpTaGNJbU56YzF3aUxHWjFibU4wYVc5dUtHVXBlM1poY2lCalBWd2lXMkV0ZWtFdFdpMWRXMkV0ZWtFdFdqQXRPVjh0WFNwY0lpeGhQWHRqVGpwY0ltWjFibU4wYVc5dVhDSXNZanBqSzF3aVhGeGNYQ2hjSWl4eVFqb2hNQ3hsUlRvaE1DeGxPbHdpWEZ4Y1hDaGNJbjA3Y21WMGRYSnVlMk5KT2lFd0xHazZYQ0piUFM5OEoxMWNJaXhqT2x0bExrTkNRMDBzZTJOT09sd2lhV1JjSWl4aU9sd2lYRnhjWENOYlFTMWFZUzE2TUMwNVh5MWRLMXdpZlN4N1kwNDZYQ0pqYkdGemMxd2lMR0k2WENKY1hGeGNMbHRCTFZwaExYb3dMVGxmTFYwclhDSXNjam93ZlN4N1kwNDZYQ0poZEhSeVgzTmxiR1ZqZEc5eVhDSXNZanBjSWx4Y1hGeGJYQ0lzWlRwY0lseGNYRnhkWENJc2FUcGNJaVJjSW4wc2UyTk9PbHdpY0hObGRXUnZYQ0lzWWpwY0lqb29PaWsvVzJFdGVrRXRXakF0T1Z4Y1hGeGZYRnhjWEMxY1hGeGNLMXhjWEZ3b1hGeGNYQ2xjWEZ4Y1hGeGNJbHhjWEZ3blhTdGNJbjBzZTJOT09sd2lZWFJmY25Wc1pWd2lMR0k2WENKQUtHWnZiblF0Wm1GalpYeHdZV2RsS1Z3aUxHdzZYQ0piWVMxNkxWMHJYQ0lzYXpwY0ltWnZiblF0Wm1GalpTQndZV2RsWENKOUxIdGpUanBjSW1GMFgzSjFiR1ZjSWl4aU9sd2lRRndpTEdVNlhDSmJlenRkWENJc1l6cGJlMk5PT2x3aWEyVjVkMjl5WkZ3aUxHSTZMMXhjVXlzdmZTeDdZam92WEZ4ekx5eGxWem9oTUN4bFJUb2hNQ3h5T2pBc1l6cGJZU3hsTGtGVFRTeGxMbEZUVFN4bExrTlRVMDVOWFgxZGZTeDdZMDQ2WENKMFlXZGNJaXhpT21Nc2Nqb3dmU3g3WTA0NlhDSnlkV3hsYzF3aUxHSTZYQ0o3WENJc1pUcGNJbjFjSWl4cE9sd2lXMTVjWEZ4Y2MxMWNJaXh5T2pBc1l6cGJaUzVEUWtOTkxIdGpUanBjSW5KMWJHVmNJaXhpT2x3aVcxNWNYRnhjYzExY0lpeHlRam9oTUN4bE9sd2lPMXdpTEdWWE9pRXdMR002VzN0alRqcGNJbUYwZEhKcFluVjBaVndpTEdJNlhDSmJRUzFhWEZ4Y1hGOWNYRnhjTGx4Y1hGd3RYU3RjSWl4bE9sd2lPbHdpTEdWRk9pRXdMR2s2WENKYlhseGNYRnh6WFZ3aUxITjBZWEowY3pwN1kwNDZYQ0oyWVd4MVpWd2lMR1ZYT2lFd0xHVkZPaUV3TEdNNlcyRXNaUzVEVTFOT1RTeGxMbEZUVFN4bExrRlRUU3hsTGtOQ1EwMHNlMk5PT2x3aWFHVjRZMjlzYjNKY0lpeGlPbHdpSTFzd0xUbEJMVVpoTFdaZEsxd2lmU3g3WTA0NlhDSnBiWEJ2Y25SaGJuUmNJaXhpT2x3aUlXbHRjRzl5ZEdGdWRGd2lmVjE5ZlYxOVhYMWRmWDBwTzJoc2FuTXVjbVZuYVhOMFpYSk1ZVzVuZFdGblpTaGNJbkoxYzNSY0lpeG1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMWxMbWx1YUdWeWFYUW9aUzVEUWtOTktUdHlaWFIxY200Z2RDNWpMbkIxYzJnb1hDSnpaV3htWENJcExIdGhiR2xoYzJWek9sdGNJbkp6WENKZExHczZlMnRsZVhkdmNtUTZYQ0poYkdsbmJtOW1JR0Z6SUdKbElHSnZlQ0JpY21WaGF5QmpiMjV6ZENCamIyNTBhVzUxWlNCamNtRjBaU0JrYnlCbGJITmxJR1Z1ZFcwZ1pYaDBaWEp1SUdaaGJITmxJR1p1SUdadmNpQnBaaUJwYlhCc0lHbHVJR3hsZENCc2IyOXdJRzFoZEdOb0lHMXZaQ0J0ZFhRZ2IyWm1jMlYwYjJZZ2IyNWpaU0J3Y21sMklIQnliMk1nY0hWaUlIQjFjbVVnY21WbUlISmxkSFZ5YmlCelpXeG1JSE5wZW1WdlppQnpkR0YwYVdNZ2MzUnlkV04wSUhOMWNHVnlJSFJ5WVdsMElIUnlkV1VnZEhsd1pTQjBlWEJsYjJZZ2RXNXpZV1psSUhWdWMybDZaV1FnZFhObElIWnBjblIxWVd3Z2QyaHBiR1VnZVdsbGJHUWdhVzUwSUdrNElHa3hOaUJwTXpJZ2FUWTBJSFZwYm5RZ2RUZ2dkVE15SUhVMk5DQm1iRzloZENCbU16SWdaalkwSUhOMGNpQmphR0Z5SUdKdmIyeGNJaXhpZFdsc2RGOXBianBjSW1GemMyVnlkQ0VnWVhOelpYSjBYMlZ4SVNCaWFYUm1iR0ZuY3lFZ1lubDBaWE1oSUdObVp5RWdZMjlzSVNCamIyNWpZWFFoSUdOdmJtTmhkRjlwWkdWdWRITWhJR1JsWW5WblgyRnpjMlZ5ZENFZ1pHVmlkV2RmWVhOelpYSjBYMlZ4SVNCbGJuWWhJSEJoYm1saklTQm1hV3hsSVNCbWIzSnRZWFFoSUdadmNtMWhkRjloY21keklTQnBibU5zZFdSbFgySnBiaUVnYVc1amJIVmtaVjl6ZEhJaElHeHBibVVoSUd4dlkyRnNYMlJoZEdGZmEyVjVJU0J0YjJSMWJHVmZjR0YwYUNFZ2IzQjBhVzl1WDJWdWRpRWdjSEpwYm5RaElIQnlhVzUwYkc0aElITmxiR1ZqZENFZ2MzUnlhVzVuYVdaNUlTQjBjbmtoSUhWdWFXMXdiR1Z0Wlc1MFpXUWhJSFZ1Y21WaFkyaGhZbXhsSVNCMlpXTWhJSGR5YVhSbElTQjNjbWwwWld4dUlWd2lmU3hzT21VdVNWSXJYQ0loUDF3aUxHazZYQ0k4TDF3aUxHTTZXMlV1UTB4RFRTeDBMR1V1YVc1b1pYSnBkQ2hsTGxGVFRTeDdhVHB1ZFd4c2ZTa3NlMk5PT2x3aWMzUnlhVzVuWENJc1lqb3ZjaWdqS2lsY0lpNHFQMXdpWEZ3eEtEOGhJeWt2ZlN4N1kwNDZYQ0p6ZEhKcGJtZGNJaXhpT2k4blhGeGNYRDhvZUZ4Y2Qzc3lmWHgxWEZ4M2V6UjlmRlZjWEhkN09IMThMaWtuTDMwc2UySTZMeWRiWVMxNlFTMWFYMTFiWVMxNlFTMWFNQzA1WDEwcUwzMHNlMk5PT2x3aWJuVnRZbVZ5WENJc1lqb3ZYRnhpS0RCYmVHSmRXMEV0V21FdGVqQXRPVjlkSzN4Yk1DMDVYMTByS0Z4Y0xsc3dMVGxmWFNzcFB5aGJaVVZkV3lzdFhUOWJNQzA1WDEwcktUOHBLRnQxYVdaZEtEaDhNVFo4TXpKOE5qUXBQeWsvTHl4eU9qQjlMSHRqVGpwY0ltWjFibU4wYVc5dVhDSXNZa3M2WENKbWJsd2lMR1U2WENJb1hGeGNYQ2g4UENsY0lpeGxSVG9oTUN4ak9sdGxMbFZVVFYxOUxIdGpUanBjSW5CeVpYQnliMk5sYzNOdmNsd2lMR0k2WENJalhGeGNYRnRjSWl4bE9sd2lYRnhjWEYxY0luMHNlMkpMT2x3aWRIbHdaVndpTEdVNlhDSW9QWHc4S1Z3aUxHTTZXMlV1VlZSTlhTeHBPbHdpWEZ4Y1hGTmNJbjBzZTJKTE9sd2lkSEpoYVhRZ1pXNTFiVndpTEdVNlhDSW9lM3c4S1Z3aUxHTTZXMlV1VlZSTlhTeHBPbHdpWEZ4Y1hGTmNJbjBzZTJJNlpTNUpVaXRjSWpvNlhDSjlMSHRpT2x3aUxUNWNJbjFkZlgwcE8yaHNhbk11Y21WbmFYTjBaWEpNWVc1bmRXRm5aU2hjSW5OM2FXWjBYQ0lzWm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5ZTJ0bGVYZHZjbVE2WENKamJHRnpjeUJrWldsdWFYUWdaVzUxYlNCbGVIUmxibk5wYjI0Z1puVnVZeUJwYlhCdmNuUWdhVzVwZENCc1pYUWdjSEp2ZEc5amIyd2djM1JoZEdsaklITjBjblZqZENCemRXSnpZM0pwY0hRZ2RIbHdaV0ZzYVdGeklIWmhjaUJpY21WaGF5QmpZWE5sSUdOdmJuUnBiblZsSUdSbFptRjFiSFFnWkc4Z1pXeHpaU0JtWVd4c2RHaHliM1ZuYUNCcFppQnBiaUJtYjNJZ2NtVjBkWEp1SUhOM2FYUmphQ0IzYUdWeVpTQjNhR2xzWlNCaGN5QmtlVzVoYldsalZIbHdaU0JwY3lCdVpYY2djM1Z3WlhJZ2MyVnNaaUJUWld4bUlGUjVjR1VnWDE5RFQweFZUVTVmWHlCZlgwWkpURVZmWHlCZlgwWlZUa05VU1U5T1gxOGdYMTlNU1U1RlgxOGdZWE56YjJOcFlYUnBkbWwwZVNCa2FXUlRaWFFnWjJWMElHbHVabWw0SUdsdWIzVjBJR3hsWm5RZ2JYVjBZWFJwYm1jZ2JtOXVaU0J1YjI1dGRYUmhkR2x1WnlCdmNHVnlZWFJ2Y2lCdmRtVnljbWxrWlNCd2IzTjBabWw0SUhCeVpXTmxaR1Z1WTJVZ2NISmxabWw0SUhKcFoyaDBJSE5sZENCMWJtOTNibVZrSUhWdWIzZHVaV1FnYzJGbVpTQjFibk5oWm1VZ2QyVmhheUIzYVd4c1UyVjBYQ0lzYkdsMFpYSmhiRHBjSW5SeWRXVWdabUZzYzJVZ2JtbHNYQ0lzWW5WcGJIUmZhVzQ2WENKaFluTWdZV1IyWVc1alpTQmhiR2xuYm05bUlHRnNhV2R1YjJaV1lXeDFaU0JoYzNObGNuUWdZbkpwWkdkbFJuSnZiVTlpYW1WamRHbDJaVU1nWW5KcFpHZGxSbkp2YlU5aWFtVmpkR2wyWlVOVmJtTnZibVJwZEdsdmJtRnNJR0p5YVdSblpWUnZUMkpxWldOMGFYWmxReUJpY21sa1oyVlViMDlpYW1WamRHbDJaVU5WYm1OdmJtUnBkR2x2Ym1Gc0lHTWdZMjl1ZEdGcGJuTWdZMjkxYm5RZ1kyOTFiblJGYkdWdFpXNTBjeUJqYjNWdWRFeGxZV1JwYm1kYVpYSnZjeUJrWldKMVoxQnlhVzUwSUdSbFluVm5VSEpwYm5Sc2JpQmthWE4wWVc1alpTQmtjbTl3Um1seWMzUWdaSEp2Y0V4aGMzUWdaSFZ0Y0NCbGJtTnZaR1ZDYVhSelFYTlhiM0prY3lCbGJuVnRaWEpoZEdVZ1pYRjFZV3dnWm1Gc2MyVWdabWxzZEdWeUlHWnBibVFnWjJWMFFuSnBaR2RsWkU5aWFtVmpkR2wyWlVOVWVYQmxJR2RsZEZaaFRHbHpkQ0JwYm1ScFkyVnpJR2x1YzJWeWRHbHZibE52Y25RZ2FYTkNjbWxrWjJWa1ZHOVBZbXBsWTNScGRtVkRJR2x6UW5KcFpHZGxaRlpsY21KaGRHbHRWRzlQWW1wbFkzUnBkbVZESUdselZXNXBjWFZsYkhsU1pXWmxjbVZ1WTJWa0lHcHZhVzRnYkdWNGFXTnZaM0poY0docFkyRnNRMjl0Y0dGeVpTQnRZWEFnYldGNElHMWhlRVZzWlcxbGJuUWdiV2x1SUcxcGJrVnNaVzFsYm5RZ2JtbHNJRzUxYldWeWFXTkRZWE4wSUhCaGNuUnBkR2x2YmlCd2IzTnBlQ0J3Y21sdWRDQndjbWx1ZEd4dUlIRjFhV05yVTI5eWRDQnlaV1IxWTJVZ2NtVm1iR1ZqZENCeVpXbHVkR1Z5Y0hKbGRFTmhjM1FnY21WMlpYSnpaU0J5YjNWdVpGVndWRzlCYkdsbmJtMWxiblFnYzJsNlpXOW1JSE5wZW1WdlpsWmhiSFZsSUhOdmNuUWdjM0JzYVhRZ2MzUmhjblJ6VjJsMGFDQnpkSEpwWkdWdlppQnpkSEpwWkdWdlpsWmhiSFZsSUhOM1lYQWdjM2RwWm5RZ2RHOVRkSEpwYm1jZ2RISmhibk5qYjJSbElIUnlkV1VnZFc1a1pYSmxjM1JwYldGMFpVTnZkVzUwSUhWdWMyRm1aVkpsWm14bFkzUWdkMmwwYUVWNGRHVnVaR1ZrVEdsbVpYUnBiV1VnZDJsMGFFOWlhbVZqZEVGMFVHeDFjMXBsY204Z2QybDBhRlZ1YzJGbVpWQnZhVzUwWlhJZ2QybDBhRlZ1YzJGbVpWQnZhVzUwWlhKVWIwOWlhbVZqZENCM2FYUm9WVzV6WVdabFVHOXBiblJsY25NZ2QybDBhRlpoVEdsemRGd2lmU3hwUFh0alRqcGNJblI1Y0dWY0lpeGlPbHdpWEZ4Y1hHSmJRUzFhWFZ0Y1hGeGNkeWRkS2x3aUxISTZNSDBzYmoxN1kwNDZYQ0pqYjIxdFpXNTBYQ0lzWWpwY0lpOWNYRnhjS2x3aUxHVTZYQ0pjWEZ4Y0tpOWNJaXhqT2x0bExsQlhUU3hjSW5ObGJHWmNJbDE5TEhJOWUyTk9PbHdpYzNWaWMzUmNJaXhpT2k5Y1hGeGNYRndvTHl4bE9sd2lYRnhjWENsY0lpeHJPblFzWXpwYlhYMHNjejE3WTA0NlhDSnVkVzFpWlhKY0lpeGlPbHdpWEZ4Y1hHSW9XMXhjWEZ4a1gxMHJLRnhjWEZ3dVcxeGNYRnhrWlVWZlhTc3BQM3d3ZUZ0aExXWkJMVVl3TFRsZlhTc29YRnhjWEM1YllTMW1RUzFHTUMwNWNGOWRLeWsvZkRCaVd6QXhYMTByZkRCdld6QXROMTlkS3lsY1hGeGNZbHdpTEhJNk1IMHNiejFsTG1sdWFHVnlhWFFvWlM1UlUwMHNlMk02VzNJc1pTNUNSVjE5S1R0eVpYUjFjbTRnY2k1alBWdHpYU3g3YXpwMExHTTZXMjhzWlM1RFRFTk5MRzRzYVN4ekxIdGpUanBjSW1aMWJtTmNJaXhpU3pwY0ltWjFibU5jSWl4bE9sd2llMXdpTEdWRk9pRXdMR002VzJVdWFXNW9aWEpwZENobExsUk5MSHRpT2k5YlFTMWFZUzE2SkY5ZFd6QXRPVUV0V21FdGVpUmZYU292TEdrNkwxeGNLQzk5S1N4N1kwNDZYQ0puWlc1bGNtbGpjMXdpTEdJNkwxeGNQQzhzWlRvdlhGdytMeXhwT2k5Y1hENHZmU3g3WTA0NlhDSndZWEpoYlhOY0lpeGlPaTljWENndkxHVTZMMXhjS1M4c2F6cDBMR002VzF3aWMyVnNabHdpTEhNc2J5eGxMa05DUTAwc2UySTZYQ0k2WENKOVhTeHBPaTliWENJblhTOTlYU3hwT2k5Y1hGdDhKUzk5TEh0alRqcGNJbU5zWVhOelhDSXNhenBjSW5OMGNuVmpkQ0J3Y205MGIyTnZiQ0JqYkdGemN5QmxlSFJsYm5OcGIyNGdaVzUxYlZ3aUxHSTZYQ0lvYzNSeWRXTjBmSEJ5YjNSdlkyOXNmR05zWVhOektEOGhJQ2htZFc1amZIWmhjaWtwZkdWNGRHVnVjMmx2Ym54bGJuVnRLVndpTEdVNlhDSmNYRnhjZTF3aUxHVkZPaUV3TEdNNlcyVXVhVzVvWlhKcGRDaGxMbFJOTEh0aU9pOWJRUzFhWVMxNkpGOWRXekF0T1VFdFdtRXRlaVJmWFNvdmZTbGRmU3g3WTA0NlhDSndjbVZ3Y205alpYTnpiM0pjSWl4aU9sd2lLRUJoYzNOcFoyNXRaVzUwZkVCamJHRnpjMTl3Y205MGIyTnZiSHhBWlhod2IzSjBaV1I4UUdacGJtRnNmRUJzWVhwNWZFQnViM0psZEhWeWJueEFUbE5EYjNCNWFXNW5mRUJPVTAxaGJtRm5aV1I4UUc5aWFtTjhRRzl3ZEdsdmJtRnNmRUJ5WlhGMWFYSmxaSHhBWVhWMGIxOWpiRzl6ZFhKbGZFQnViM0psZEhWeWJueEFTVUpCWTNScGIyNThRRWxDUkdWemFXZHVZV0pzWlh4QVNVSkpibk53WldOMFlXSnNaWHhBU1VKUGRYUnNaWFI4UUdsdVptbDRmRUJ3Y21WbWFYaDhRSEJ2YzNSbWFYZ3BYQ0o5WFgxOUtUdG9iR3B6TG5KbFoybHpkR1Z5VEdGdVozVmhaMlVvWENKdVoybHVlRndpTEdaMWJtTjBhVzl1S0dVcGUzWmhjaUJ5UFh0alRqcGNJblpoY21saFlteGxYQ0lzZGpwYmUySTZMMXhjSkZ4Y1pDc3ZmU3g3WWpvdlhGd2tYRng3THl4bE9pOTlMMzBzZTJJNlhDSmJYRnhjWENSY1hGeGNRRjFjSWl0bExsVkpVbjFkZlN4aVBYdGxWem9oTUN4c09sd2lXMkV0ZWk5ZlhTdGNJaXhyT250aWRXbHNkRjlwYmpwY0ltOXVJRzltWmlCNVpYTWdibThnZEhKMVpTQm1ZV3h6WlNCdWIyNWxJR0pzYjJOclpXUWdaR1ZpZFdjZ2FXNW1ieUJ1YjNScFkyVWdkMkZ5YmlCbGNuSnZjaUJqY21sMElITmxiR1ZqZENCaWNtVmhheUJzWVhOMElIQmxjbTFoYm1WdWRDQnlaV1JwY21WamRDQnJjWFZsZFdVZ2NuUnphV2NnWlhCdmJHd2djRzlzYkNBdlpHVjJMM0J2Ykd4Y0luMHNjam93TEdrNlhDSTlQbHdpTEdNNlcyVXVTRU5OTEh0alRqcGNJbk4wY21sdVoxd2lMR002VzJVdVFrVXNjbDBzZGpwYmUySTZMMXdpTHl4bE9pOWNJaTk5TEh0aU9pOG5MeXhsT2k4bkwzMWRmU3g3WTA0NlhDSjFjbXhjSWl4aU9sd2lLRnRoTFhwZEt5azZMMXdpTEdVNlhDSmNYRnhjYzF3aUxHVlhPaUV3TEdWRk9pRXdMR002VzNKZGZTeDdZMDQ2WENKeVpXZGxlSEJjSWl4ak9sdGxMa0pGTEhKZExIWTZXM3RpT2x3aVhGeGNYSE5jWEZ4Y1hsd2lMR1U2WENKY1hGeGNjM3g3ZkR0Y0lpeHlSVG9oTUgwc2UySTZYQ0orWEZ4Y1hDby9YRnhjWEhNclhDSXNaVHBjSWx4Y1hGeHpmSHQ4TzF3aUxISkZPaUV3ZlN4N1lqcGNJbHhjWEZ3cUtGeGNYRnd1VzJFdGVseGNYRnd0WFNzcEsxd2lmU3g3WWpwY0lpaGJZUzE2WEZ4Y1hDMWRLMXhjWEZ3dUtTdGNYRnhjS2x3aWZWMTlMSHRqVGpwY0ltNTFiV0psY2x3aUxHSTZYQ0pjWEZ4Y1lseGNYRnhrZXpFc00zMWNYRnhjTGx4Y1hGeGtlekVzTTMxY1hGeGNMbHhjWEZ4a2V6RXNNMzFjWEZ4Y0xseGNYRnhrZXpFc00zMG9PbHhjWEZ4a2V6RXNOWDBwUDF4Y1hGeGlYQ0o5TEh0alRqcGNJbTUxYldKbGNsd2lMR0k2WENKY1hGeGNZbHhjWEZ4a0sxdHJTMjFOWjBka2MyaGtkM2xkS2x4Y1hGeGlYQ0lzY2pvd2ZTeHlYWDA3Y21WMGRYSnVlMkZzYVdGelpYTTZXMXdpYm1kcGJuaGpiMjVtWENKZExHTTZXMlV1U0VOTkxIdGlPbVV1VlVsU0sxd2lYRnhjWEhOY0lpeGxPbHdpTzN4N1hDSXNja0k2SVRBc1l6cGJlMk5PT2x3aWRHbDBiR1ZjSWl4aU9tVXVWVWxTTEhOMFlYSjBjenBpZlYwc2Nqb3dmVjBzYVRwY0lsdGVYRnhjWEhOY1hGeGNmVjFjSW4xOUtUdG9iR3B6TG5KbFoybHpkR1Z5VEdGdVozVmhaMlVvWENKamMxd2lMR1oxYm1OMGFXOXVLR1VwZTNaaGNpQnlQVndpWVdKemRISmhZM1FnWVhNZ1ltRnpaU0JpYjI5c0lHSnlaV0ZySUdKNWRHVWdZMkZ6WlNCallYUmphQ0JqYUdGeUlHTm9aV05yWldRZ1kyOXVjM1FnWTI5dWRHbHVkV1VnWkdWamFXMWhiQ0JrWldaaGRXeDBJR1JsYkdWbllYUmxJR1J2SUdSdmRXSnNaU0JsYkhObElHVnVkVzBnWlhabGJuUWdaWGh3YkdsamFYUWdaWGgwWlhKdUlHWmhiSE5sSUdacGJtRnNiSGtnWm1sNFpXUWdabXh2WVhRZ1ptOXlJR1p2Y21WaFkyZ2daMjkwYnlCcFppQnBiWEJzYVdOcGRDQnBiaUJwYm5RZ2FXNTBaWEptWVdObElHbHVkR1Z5Ym1Gc0lHbHpJR3h2WTJzZ2JHOXVaeUJ1ZFd4c0lHOWlhbVZqZENCdmNHVnlZWFJ2Y2lCdmRYUWdiM1psY25KcFpHVWdjR0Z5WVcxeklIQnlhWFpoZEdVZ2NISnZkR1ZqZEdWa0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCeVpXWWdjMko1ZEdVZ2MyVmhiR1ZrSUhOb2IzSjBJSE5wZW1WdlppQnpkR0ZqYTJGc2JHOWpJSE4wWVhScFl5QnpkSEpwYm1jZ2MzUnlkV04wSUhOM2FYUmphQ0IwYUdseklIUnlkV1VnZEhKNUlIUjVjR1Z2WmlCMWFXNTBJSFZzYjI1bklIVnVZMmhsWTJ0bFpDQjFibk5oWm1VZ2RYTm9iM0owSUhWemFXNW5JSFpwY25SMVlXd2dkbTlzWVhScGJHVWdkbTlwWkNCM2FHbHNaU0JoYzNsdVl5QndjbTkwWldOMFpXUWdjSFZpYkdsaklIQnlhWFpoZEdVZ2FXNTBaWEp1WVd3Z1lYTmpaVzVrYVc1bklHUmxjMk5sYm1ScGJtY2dabkp2YlNCblpYUWdaM0p2ZFhBZ2FXNTBieUJxYjJsdUlHeGxkQ0J2Y21SbGNtSjVJSEJoY25ScFlXd2djMlZzWldOMElITmxkQ0IyWVd4MVpTQjJZWElnZDJobGNtVWdlV2xsYkdSY0lpeDBQV1V1U1ZJclhDSW9QRndpSzJVdVNWSXJYQ0krS1Q5Y0lqdHlaWFIxY201N1lXeHBZWE5sY3pwYlhDSmpjMmhoY25CY0lsMHNhenB5TEdrNkx6bzZMeXhqT2x0N1kwNDZYQ0pqYjIxdFpXNTBYQ0lzWWpwY0lpOHZMMXdpTEdVNlhDSWtYQ0lzY2tJNklUQXNZenBiZTJOT09sd2llRzFzUkc5alZHRm5YQ0lzZGpwYmUySTZYQ0l2THk5Y0lpeHlPakI5TEh0aU9sd2lQQ0V0TFh3dExUNWNJbjBzZTJJNlhDSThMejljSWl4bE9sd2lQbHdpZlYxOVhYMHNaUzVEVEVOTkxHVXVRMEpEVFN4N1kwNDZYQ0p3Y21Wd2NtOWpaWE56YjNKY0lpeGlPbHdpSTF3aUxHVTZYQ0lrWENJc2F6cGNJbWxtSUdWc2MyVWdaV3hwWmlCbGJtUnBaaUJrWldacGJtVWdkVzVrWldZZ2QyRnlibWx1WnlCbGNuSnZjaUJzYVc1bElISmxaMmx2YmlCbGJtUnlaV2RwYjI0Z2NISmhaMjFoSUdOb1pXTnJjM1Z0WENKOUxIdGpUanBjSW5OMGNtbHVaMXdpTEdJNkowQmNJaWNzWlRvblhDSW5MR002VzN0aU9pZGNJbHdpSjMxZGZTeGxMa0ZUVFN4bExsRlRUU3hsTGtOT1RTeDdZa3M2WENKamJHRnpjeUJ1WVcxbGMzQmhZMlVnYVc1MFpYSm1ZV05sWENJc1pUb3ZXM3M3UFYwdkxHazZMMXRlWEZ4ek9sMHZMR002VzJVdVZFMHNaUzVEVEVOTkxHVXVRMEpEVFYxOUxIdGlTenBjSW01bGR5QnlaWFIxY200Z2RHaHliM2NnWVhkaGFYUmNJaXh5T2pCOUxIdGpUanBjSW1aMWJtTjBhVzl1WENJc1lqcGNJaWhjSWl0MEsxd2lYRnhjWEhNcktTdGNJaXRsTGtsU0sxd2lYRnhjWEhNcVhGeGNYQ2hjSWl4eVFqb2hNQ3hsT2k5YmV6czlYUzhzWlVVNklUQXNhenB5TEdNNlczdGlPbVV1U1ZJclhDSmNYRnhjY3lwY1hGeGNLRndpTEhKQ09pRXdMR002VzJVdVZFMWRMSEk2TUgwc2UyTk9PbHdpY0dGeVlXMXpYQ0lzWWpvdlhGd29MeXhsT2k5Y1hDa3ZMR3M2Y2l4eU9qQXNZenBiWlM1QlUwMHNaUzVSVTAwc1pTNURUazBzWlM1RFFrTk5YWDBzWlM1RFRFTk5MR1V1UTBKRFRWMTlYWDE5S1R0b2JHcHpMbkpsWjJsemRHVnlUR0Z1WjNWaFoyVW9YQ0p0WVhKclpHOTNibHdpTEdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1ZTJGc2FXRnpaWE02VzF3aWJXUmNJaXhjSW0xclpHOTNibHdpTEZ3aWJXdGtYQ0pkTEdNNlczdGpUanBjSW1obFlXUmxjbHdpTEhZNlczdGlPbHdpWGlON01TdzJmVndpTEdVNlhDSWtYQ0o5TEh0aU9sd2lYaTRyUDF4Y1hGeHVXejB0WFhzeUxIMGtYQ0o5WFgwc2UySTZYQ0k4WENJc1pUcGNJajVjSWl4elREcGNJbmh0YkZ3aUxISTZNSDBzZTJOT09sd2lZblZzYkdWMFhDSXNZanBjSWw0b1d5b3JMVjE4S0Z4Y1hGeGtLMXhjWEZ3dUtTbGNYRnhjY3l0Y0luMHNlMk5PT2x3aWMzUnliMjVuWENJc1lqcGNJbHNxWDExN01uMHVLejliS2w5ZGV6SjlYQ0o5TEh0alRqcGNJbVZ0Y0doaGMybHpYQ0lzZGpwYmUySTZYQ0pjWEZ4Y0tpNHJQMXhjWEZ3cVhDSjlMSHRpT2x3aVh5NHJQMTljSWl4eU9qQjlYWDBzZTJOT09sd2lZbXh2WTJ0eGRXOTBaVndpTEdJNlhDSmVQbHhjWEZ4eksxd2lMR1U2WENJa1hDSjlMSHRqVGpwY0ltTnZaR1ZjSWl4Mk9sdDdZanBjSW1BdUt6OWdYQ0o5TEh0aU9sd2lYaWdnZXpSOWZGeDBLVndpTEdVNlhDSWtYQ0lzY2pvd2ZWMTlMSHRqVGpwY0ltaHZjbWw2YjI1MFlXeGZjblZzWlZ3aUxHSTZYQ0plV3kxY1hGeGNLbDE3TXl4OVhDSXNaVHBjSWlSY0luMHNlMkk2WENKY1hGeGNXeTRyUDF4Y1hGeGRXMXhjWEZ3b1hGeGNYRnRkTGlvL1cxeGNYRndwWEZ4Y1hGMWRYQ0lzY2tJNklUQXNZenBiZTJOT09sd2liR2x1YTE5c1lXSmxiRndpTEdJNlhDSmNYRnhjVzF3aUxHVTZYQ0pjWEZ4Y1hWd2lMR1ZDT2lFd0xISkZPaUV3TEhJNk1IMHNlMk5PT2x3aWJHbHVhMTkxY214Y0lpeGlPbHdpWEZ4Y1hGMWNYRnhjS0Z3aUxHVTZYQ0pjWEZ4Y0tWd2lMR1ZDT2lFd0xHVkZPaUV3ZlN4N1kwNDZYQ0pzYVc1clgzSmxabVZ5Wlc1alpWd2lMR0k2WENKY1hGeGNYVnhjWEZ4YlhDSXNaVHBjSWx4Y1hGeGRYQ0lzWlVJNklUQXNaVVU2SVRCOVhTeHlPakV3ZlN4N1lqcGNJbDVjWEZ4Y1d5NHJYRnhjWEYwNlhDSXNja0k2SVRBc1l6cGJlMk5PT2x3aWJHbHVhMTl5WldabGNtVnVZMlZjSWl4aU9sd2lYRnhjWEZ0Y0lpeGxPbHdpWEZ4Y1hGMDZYQ0lzWlVJNklUQXNaVVU2SVRBc2MzUmhjblJ6T250alRqcGNJbXhwYm10ZmRYSnNYQ0lzWlRwY0lpUmNJbjE5WFgxZGZYMHBPMmhzYW5NdWNtVm5hWE4wWlhKTVlXNW5kV0ZuWlNoY0ltUnBabVpjSWl4bWRXNWpkR2x2YmlncGUzSmxkSFZ5Ym50aGJHbGhjMlZ6T2x0Y0luQmhkR05vWENKZExHTTZXM3RqVGpwY0ltTm9kVzVyWENJc2Nqb3hNQ3gyT2x0N1lqb3ZYbHhjUUZ4Y1FDQXJYRnd0WEZ4a0t5eGNYR1FySUN0Y1hDdGNYR1FyTEZ4Y1pDc2dLMXhjUUZ4Y1FDUXZmU3g3WWpvdlhseGNLbHhjS2x4Y0tpQXJYRnhrS3l4Y1hHUXJJQ3RjWENwY1hDcGNYQ3BjWENva0wzMHNlMkk2TDE1Y1hDMWNYQzFjWEMwZ0sxeGNaQ3NzWEZ4a0t5QXJYRnd0WEZ3dFhGd3RYRnd0SkM5OVhYMHNlMk5PT2x3aWFHVmhaR1Z5WENJc2RqcGJlMkk2TDBsdVpHVjRPaUF2TEdVNkx5UXZmU3g3WWpvdlBUMDlQVDB2TEdVNkx6MDlQVDA5SkM5OUxIdGlPaTllWEZ3dFhGd3RYRnd0THl4bE9pOGtMMzBzZTJJNkwxNWNYQ3A3TTMwZ0x5eGxPaThrTDMwc2UySTZMMTVjWEN0Y1hDdGNYQ3N2TEdVNkx5UXZmU3g3WWpvdlhGd3FlelY5THl4bE9pOWNYQ3A3Tlgwa0wzMWRmU3g3WTA0NlhDSmhaR1JwZEdsdmJsd2lMR0k2WENKZVhGeGNYQ3RjSWl4bE9sd2lKRndpZlN4N1kwNDZYQ0prWld4bGRHbHZibHdpTEdJNlhDSmVYRnhjWEMxY0lpeGxPbHdpSkZ3aWZTeDdZMDQ2WENKamFHRnVaMlZjSWl4aU9sd2lYbHhjWEZ3aFhDSXNaVHBjSWlSY0luMWRmWDBwTzJoc2FuTXVjbVZuYVhOMFpYSk1ZVzVuZFdGblpTaGNJblpwYlZ3aUxHWjFibU4wYVc5dUtHVXBlM0psZEhWeWJudHNPaTliSVNOQVhGeDNYU3N2TEdzNmUydGxlWGR2Y21RNlhDSk9mREFnVUh3d0lGaDhNQ0JoZkRBZ1lXSWdZV0pqSUdGaWJ5QmhiQ0JoYlNCaGJud3dJR0Z5SUdGeVoyRWdZWEpuWkNCaGNtZGxJR0Z5WjJSdklHRnlaMmNnWVhKbmJDQmhjbWQxSUdGeklHRjFJR0YxWnlCaGRXNGdZbnd3SUdKT0lHSmhJR0poWkNCaVpDQmlaU0JpWld3Z1ltWWdZbXdnWW0wZ1ltNGdZbThnWW5BZ1luSWdZbkpsWVNCaWNtVmhhMkVnWW5KbFlXdGtJR0p5WldGcmJDQmljbThnWW5WbVpHOGdZblZtWm1WeWN5QmlkVzRnWW5jZ1kzd3dJR05PSUdOT1ppQmpZU0JqWVdKaklHTmhaR1JpSUdOaFpDQmpZV1JrWmlCallXd2dZMkYwSUdOaUlHTmpJR05qYkNCalpDQmpaU0JqWlhnZ1kyWWdZMlpwY2lCaloyVjBZaUJqWjJWMFpTQmpaeUJqYUdGdVoyVnpJR05vWkNCamFHVWdZMmhsWTJ0MElHTnNJR05zWVNCamJHOGdZMjBnWTIxaGNHTWdZMjFsSUdOdUlHTnVaWGNnWTI1bUlHTnVieUJqYm05eVpXRWdZMjV2Y21WdFpTQmpieUJqYjJ3Z1kyOXNieUJqYjIwZ1kyOXRZeUJqYjIxd0lHTnZiaUJqYjI1bUlHTnZjR1VnWTNBZ1kzQm1JR054SUdOeUlHTnpJR056ZENCamRTQmpkVzVoSUdOMWJtMWxJR04zSUdSOE1DQmtaV3h0SUdSbFlpQmtaV0oxWjJjZ1pHVnNZeUJrWld4bUlHUnBaaUJrYVdabVp5QmthV1ptYnlCa2FXWm1jQ0JrYVdabWNIVWdaR2xtWm5NZ1pHbG1ablJvYVhNZ1pHbG5JR1JwSUdSc0lHUmxiR3dnWkdvZ1pHeHBJR1J2SUdSdllYVjBiMkVnWkhBZ1pISWdaSE1nWkhOd0lHVjhNQ0JsWVNCbFl5QmxZMmh2WlNCbFkyaHZhQ0JsWTJodmJTQmxZMmh2YmlCbGJDQmxiSE5sYVNCbGJTQmxiaUJsYm1SbWJ5QmxibVJtSUdWdVpIUWdaVzVrZHlCbGJtVWdaWGdnWlhobElHVjRhU0JsZUhVZ1pud3dJR1pwYkdWeklHWnBiR1YwSUdacGJpQm1hVzVoSUdacGJta2dabWx5SUdacGVDQm1ieUJtYjJ4a1l5Qm1iMnhrWkNCbWIyeGtaRzlqSUdadmJHUnZJR1p2Y2lCbWRTQm5mREFnWjI4Z1ozSWdaM0psY0dFZ1ozVWdaM1lnYUdFZ2FId3dJR2hsYkhCbUlHaGxiSEJuSUdobGJIQjBJR2hwSUdocFpDQm9hWE1nYVh3d0lHbGhJR2xoWW1NZ2FXWWdhV29nYVd3Z2FXMGdhVzFoY0dNZ2FXMWxJR2x1YnlCcGJtOXlaV0VnYVc1dmNtVnRaU0JwYm5RZ2FYTWdhWE53SUdsMUlHbDFibUVnYVhWdWJXVWdhbnd3SUdwMUlHdDhNQ0JyWldWd1lTQnJaV1VnYTJWbGNHb2diRTRnYkU1bUlHeDhNQ0JzWVdRZ2JHRmtaR0lnYkdGa1pHWWdiR0VnYkdGdUlHeGhkQ0JzWWlCc1l5QnNZMmdnYkdOc0lHeGpjeUJzWlNCc1pXWjBZU0JzWlhRZ2JHVjRJR3htSUd4bWFYSWdiR2RsZEdJZ2JHZGxkR1VnYkdjZ2JHZHlJR3huY21Wd1lTQnNhQ0JzYkNCc2JHRWdiR3hwSUd4dFlXc2diRzBnYkcxaGNHTWdiRzVsSUd4dVpYY2diRzVtSUd4dUlHeHZZV1JySUd4dklHeHZZeUJzYjJOcmRpQnNiMndnYkc5d1pTQnNjQ0JzY0dZZ2JISWdiSE1nYkhRZ2JIVWdiSFZoSUd4MVlXUWdiSFZoWmlCc2RpQnNkbWx0WjNKbGNHRWdiSGNnYlh3d0lHMWhJRzFoYXlCdFlYQWdiV0Z3WXlCdFlYSnJjeUJ0WVhRZ2JXVWdiV1Z1ZFhRZ2JXVnpJRzFySUcxcmN5QnRhM053SUcxcmRpQnRhM1pwWlNCdGIyUWdiWG9nYlhwbUlHNWlZeUJ1WWlCdVluTWdibnd3SUc1bGR5QnViU0J1YldGd1l5QnViV1VnYm00Z2JtNXZjbVZ0WlNCdWIyRWdibThnYm05b0lHNXZjbVZoSUc1dmNtVnRaU0J1YjNKdElHNTFJRzUxYmlCdWRXNXRaU0J2YkNCdmZEQWdiMjBnYjIxaGNHTWdiMjFsSUc5dUlHOXVieUJ2Ym05eVpXMWxJRzl3ZENCdmRTQnZkVzV0WlNCdmR5QndmREFnY0hKdlptUWdjSEp2WmlCd2NtOGdjSEp2YlhCMGNpQndZeUJ3WldRZ2NHVWdjR1Z5YkdRZ2NHOGdjRzl3ZFNCd2NDQndjbVVnY0hKbGRpQndjeUJ3ZENCd2RFNGdjSFJtSUhCMGFpQndkR3dnY0hSdUlIQjBjQ0J3ZEhJZ2NIUnpJSEIxSUhCM0lIQjVNeUJ3ZVhSb2IyNHpJSEI1TTJRZ2NIa3paaUJ3ZVNCd2VXUWdjSGxtSUhGOE1DQnhkV2wwWVNCeFlTQnlmREFnY21WaklISmxaQ0J5WldScElISmxaSElnY21Wa2NtRjNjeUJ5WldjZ2NtVnpJSEpsZENCeVpYUjFJSEpsZHlCeWFTQnlhV2RvZEdJZ2NuVmlJSEoxWW5sa0lISjFZbmxtSUhKMWJtUWdjblVnY25ZZ2Mzd3dJSE5PSUhOaGJpQnpZU0J6WVd3Z2MyRjJJSE5pSUhOaVRpQnpZbUVnYzJKbUlITmliQ0J6WW0wZ2MySnVJSE5pY0NCelluSWdjMk55YVhBZ2MyTnlhWEIwWlNCelkzTWdjMlVnYzJWMFppQnpaWFJuSUhObGRHd2djMllnYzJacGNpQnphQ0J6YVcwZ2MybG5JSE5wYkNCemJDQnpiR0VnYzIwZ2MyMWhjQ0J6YldGd1l5QnpiV1VnYzI0Z2MyNXBJSE51YnlCemJtOXlJSE51YjNKbGJXVWdjMjl5SUhOdklITndaV3hzWkNCemNHVWdjM0JsYkd4cElITndaV3hzY2lCemNHVnNiSFVnYzNCbGJHeDNJSE53SUhOd2NpQnpjbVVnYzNRZ2MzUmhJSE4wWVhKMFp5QnpkR0Z5ZEhJZ2MzUmhjaUJ6ZEc5d2FTQnpkR29nYzNSeklITjFiaUJ6ZFc1dElITjFibTFsSUhOMWN5QnpkaUJ6ZHlCemVTQnplVzUwYVNCemVXNWpJSFI4TUNCMFRpQjBZV0pPSUhSaFltTWdkR0ZpWkc4Z2RHRmlaU0IwWVdKbUlIUmhZbVpwY2lCMFlXSnNJSFJoWW0wZ2RHRmlibVYzSUhSaFltNGdkR0ZpYnlCMFlXSndJSFJoWW5JZ2RHRmljeUIwWVdJZ2RHRWdkR0ZuY3lCMFl5QjBZMnhrSUhSamJHWWdkR1VnZEdZZ2RHZ2dkR29nZEd3Z2RHMGdkRzRnZEc4Z2RIQWdkSElnZEhKNUlIUnpJSFIxSUhWOE1DQjFibVJ2YWlCMWJtUnZiQ0IxYm1FZ2RXNW9JSFZ1YkNCMWJteHZJSFZ1YlNCMWJtMWxJSFZ1Y3lCMWNDQjJmREFnZG1VZ2RtVnlZaUIyWlhKMElIWnBiU0IyYVcxbmNtVndZU0IyYVNCMmFYVWdkbWxsSUhadElIWnRZWEJqSUhadFpTQjJibVVnZG00Z2RtNXZjbVZ0WlNCMmN5QjJkU0IyZFc1dFpTQjNhVzVrYnlCM2ZEQWdkMDRnZDJFZ2QyZ2dkMmtnZDJsdVl5QjNhVzV3SUhkdUlIZHdJSGR4SUhkeFlTQjNjeUIzZFNCM2RpQjRmREFnZUdFZ2VHMWhjR01nZUcwZ2VHMWxJSGh1SUhodWIzSmxiV1VnZUhVZ2VIVnViV1VnZVh3d0lIcDhNQ0IrSUU1bGVIUWdVSEpwYm5RZ1lYQndaVzVrSUdGaVluSmxkbWxoZEdVZ1lXSmpiR1ZoY2lCaFltOTJaV3hsWm5RZ1lXeHNJR0Z0Wlc1MUlHRnViM0psYldWdWRTQmhjbWR6SUdGeVoyRmtaQ0JoY21ka1pXeGxkR1VnWVhKblpXUnBkQ0JoY21kbmJHOWlZV3dnWVhKbmJHOWpZV3dnWVhKbmRXMWxiblFnWVhOamFXa2dZWFYwYjJOdFpDQmhkV2R5YjNWd0lHRjFibTFsYm5VZ1luVm1abVZ5SUdKT1pYaDBJR0poYkd3Z1ltRmtaQ0JpWkdWc1pYUmxJR0psYUdGMlpTQmlaV3h2ZDNKcFoyaDBJR0ptYVhKemRDQmliR0Z6ZENCaWJXOWthV1pwWldRZ1ltNWxlSFFnWW05MGNtbG5hSFFnWW5CeVpYWnBiM1Z6SUdKeVpYZHBibVFnWW5KbFlXc2dZbkpsWVd0aFpHUWdZbkpsWVd0a1pXd2dZbkpsWVd0c2FYTjBJR0p5YjNkelpTQmlkVzVzYjJGa0lHSjNhWEJsYjNWMElHTm9ZVzVuWlNCalRtVjRkQ0JqVG1acGJHVWdZMkZpWW5KbGRpQmpZV0pqYkdWaGNpQmpZV1JrWW5WbVptVnlJR05oWkdSbGVIQnlJR05oWkdSbWFXeGxJR05oYkd3Z1kyRjBZMmdnWTJKMVptWmxjaUJqWTJ4dmMyVWdZMlZ1ZEdWeUlHTmxlSEJ5SUdObWFXeGxJR05tYVhKemRDQmpaMlYwWW5WbVptVnlJR05uWlhSbGVIQnlJR05uWlhSbWFXeGxJR05vWkdseUlHTm9aV05yY0dGMGFDQmphR1ZqYTNScGJXVWdZMnhwYzNRZ1kyeGhjM1FnWTJ4dmMyVWdZMjFoY0NCamJXRndZMnhsWVhJZ1kyMWxiblVnWTI1bGVIUWdZMjVsZDJWeUlHTnVabWxzWlNCamJtOXlaVzFoY0NCamJtOXlaV0ZpWW5KbGRpQmpibTl5WlcxbGJuVWdZMjl3ZVNCamIyeGtaWElnWTI5c2IzSnpZMmhsYldVZ1kyOXRiV0Z1WkNCamIyMWpiR1ZoY2lCamIyMXdhV3hsY2lCamIyNTBhVzUxWlNCamIyNW1hWEp0SUdOdmNHVnVJR053Y21WMmFXOTFjeUJqY0dacGJHVWdZM0YxYVhRZ1kzSmxkMmx1WkNCamMyTnZjR1VnWTNOMFlXY2dZM1Z1YldGd0lHTjFibUZpWW5KbGRpQmpkVzV0Wlc1MUlHTjNhVzVrYjNjZ1pHVnNaWFJsSUdSbGJHMWhjbXR6SUdSbFluVm5JR1JsWW5WblozSmxaV1I1SUdSbGJHTnZiVzFoYm1RZ1pHVnNablZ1WTNScGIyNGdaR2xtWm5Wd1pHRjBaU0JrYVdabVoyVjBJR1JwWm1adlptWWdaR2xtWm5CaGRHTm9JR1JwWm1ad2RYUWdaR2xtWm5Od2JHbDBJR1JwWjNKaGNHaHpJR1JwYzNCc1lYa2daR1ZzWlhSbGJDQmthblZ0Y0NCa2JHbHpkQ0JrYjJGMWRHOWpiV1FnWkc5aGRYUnZZV3hzSUdSbGJHVjBaWEFnWkhKdmNDQmtjMlZoY21Ob0lHUnpjR3hwZENCbFpHbDBJR1ZoY214cFpYSWdaV05vYnlCbFkyaHZaWEp5SUdWamFHOW9iQ0JsWTJodmJYTm5JR1ZzYzJVZ1pXeHpaV2xtSUdWdFpXNTFJR1Z1WkdsbUlHVnVaR1p2Y2lCbGJtUm1kVzVqZEdsdmJpQmxibVIwY25rZ1pXNWtkMmhwYkdVZ1pXNWxkeUJsZUdWamRYUmxJR1Y0YVhRZ1pYaDFjMkZuWlNCbWFXeGxJR1pwYkdWMGVYQmxJR1pwYm1RZ1ptbHVZV3hzZVNCbWFXNXBjMmdnWm1seWMzUWdabWw0WkdWc0lHWnZiR1FnWm05c1pHTnNiM05sSUdadmJHUmtiMjl3Wlc0Z1ptOXNaR1J2WTJ4dmMyVmtJR1p2YkdSdmNHVnVJR1oxYm1OMGFXOXVJR2RzYjJKaGJDQm5iM1J2SUdkeVpYQWdaM0psY0dGa1pDQm5kV2tnWjNacGJTQm9ZWEprWTI5d2VTQm9aV3h3SUdobGJIQm1hVzVrSUdobGJIQm5jbVZ3SUdobGJIQjBZV2R6SUdocFoyaHNhV2RvZENCb2FXUmxJR2hwYzNSdmNua2dhVzV6WlhKMElHbGhZbUp5WlhZZ2FXRmlZMnhsWVhJZ2FXcDFiWEFnYVd4cGMzUWdhVzFoY0NCcGJXRndZMnhsWVhJZ2FXMWxiblVnYVc1dmNtVnRZWEFnYVc1dmNtVmhZbUp5WlhZZ2FXNXZjbVZ0Wlc1MUlHbHVkSEp2SUdselpXRnlZMmdnYVhOd2JHbDBJR2wxYm0xaGNDQnBkVzVoWW1KeVpYWWdhWFZ1YldWdWRTQnFiMmx1SUdwMWJYQnpJR3RsWlhCaGJIUWdhMlZsY0cxaGNtdHpJR3RsWlhCcWRXMXdjeUJzVG1WNGRDQnNUbVpwYkdVZ2JHbHpkQ0JzWVdSa1pYaHdjaUJzWVdSa1luVm1abVZ5SUd4aFpHUm1hV3hsSUd4aGMzUWdiR0Z1WjNWaFoyVWdiR0YwWlhJZ2JHSjFabVpsY2lCc1kyUWdiR05vWkdseUlHeGpiRzl6WlNCc1kzTmpiM0JsSUd4bFpuUWdiR1ZtZEdGaWIzWmxJR3hsZUhCeUlHeG1hV3hsSUd4bWFYSnpkQ0JzWjJWMFluVm1abVZ5SUd4blpYUmxlSEJ5SUd4blpYUm1hV3hsSUd4bmNtVndJR3huY21Wd1lXUmtJR3hvWld4d1ozSmxjQ0JzYkdGemRDQnNiR2x6ZENCc2JXRnJaU0JzYldGd0lHeHRZWEJqYkdWaGNpQnNibVY0ZENCc2JtVjNaWElnYkc1bWFXeGxJR3h1YjNKbGJXRndJR3h2WVdSclpYbHRZWEFnYkc5aFpIWnBaWGNnYkc5amEyMWhjbXR6SUd4dlkydDJZWElnYkc5c1pHVnlJR3h2Y0dWdUlHeHdjbVYyYVc5MWN5QnNjR1pwYkdVZ2JISmxkMmx1WkNCc2RHRm5JR3gxYm0xaGNDQnNkV0ZrYnlCc2RXRm1hV3hsSUd4MmFXMW5jbVZ3SUd4MmFXMW5jbVZ3WVdSa0lHeDNhVzVrYjNjZ2JXOTJaU0J0WVhKcklHMWhhMlVnYldGd1kyeGxZWElnYldGMFkyZ2diV1Z1ZFNCdFpXNTFkSEpoYm5Oc1lYUmxJRzFsYzNOaFoyVnpJRzFyWlhoeVl5QnRhM05sYzNOcGIyNGdiV3R6Y0dWc2JDQnRhM1pwYlhKaklHMXJkbWxsZHlCdGIyUmxJRzE2YzJOb1pXMWxJRzE2Wm1sc1pTQnVZbU5zYjNObElHNWlhMlY1SUc1aWMyRnlkQ0J1WlhoMElHNXRZWEFnYm0xaGNHTnNaV0Z5SUc1dFpXNTFJRzV1YjNKbGJXRndJRzV1YjNKbGJXVnVkU0J1YjJGMWRHOWpiV1FnYm05eVpXMWhjQ0J1YjJoc2MyVmhjbU5vSUc1dmNtVmhZbUp5WlhZZ2JtOXlaVzFsYm5VZ2JtOXliV0ZzSUc1MWJXSmxjaUJ1ZFc1dFlYQWdiblZ1YldWdWRTQnZiR1JtYVd4bGN5QnZjR1Z1SUc5dFlYQWdiMjFoY0dOc1pXRnlJRzl0Wlc1MUlHOXViSGtnYjI1dmNtVnRZWEFnYjI1dmNtVnRaVzUxSUc5d2RHbHZibk1nYjNWdWJXRndJRzkxYm0xbGJuVWdiM2R1YzNsdWRHRjRJSEJ5YVc1MElIQnliMlprWld3Z2NISnZabWxzWlNCd2NtOXRjSFJtYVc1a0lIQnliMjF3ZEhKbGNHd2djR05zYjNObElIQmxaR2wwSUhCbGNtd2djR1Z5YkdSdklIQnZjQ0J3YjNCMWNDQndjRzl3SUhCeVpYTmxjblpsSUhCeVpYWnBiM1Z6SUhCelpXRnlZMmdnY0hSaFp5QndkRTVsZUhRZ2NIUm1hWEp6ZENCd2RHcDFiWEFnY0hSc1lYTjBJSEIwYm1WNGRDQndkSEJ5WlhacGIzVnpJSEIwY21WM2FXNWtJSEIwYzJWc1pXTjBJSEIxZENCd2QyUWdjSGt6Wkc4Z2NIa3pabWxzWlNCd2VYUm9iMjRnY0hsa2J5QndlV1pwYkdVZ2NYVnBkQ0J4ZFdsMFlXeHNJSEZoYkd3Z2NtVmhaQ0J5WldOdmRtVnlJSEpsWkc4Z2NtVmthWElnY21Wa2NtRjNJSEpsWkhKaGQzTjBZWFIxY3lCeVpXZHBjM1JsY25NZ2NtVnphWHBsSUhKbGRHRmlJSEpsZEhWeWJpQnlaWGRwYm1RZ2NtbG5hSFFnY21sbmFIUmlaV3h2ZHlCeWRXSjVJSEoxWW5sa2J5QnlkV0o1Wm1sc1pTQnlkVzVrYnlCeWRXNTBhVzFsSUhKMmFXMXBibVp2SUhOMVluTjBhWFIxZEdVZ2MwNWxlSFFnYzJGdVpHSnZlQ0J6WVhKbmRXMWxiblFnYzJGc2JDQnpZWFpsWVhNZ2MySjFabVpsY2lCellrNWxlSFFnYzJKaGJHd2djMkptYVhKemRDQnpZbXhoYzNRZ2MySnRiMlJwWm1sbFpDQnpZbTVsZUhRZ2MySndjbVYyYVc5MWN5QnpZbkpsZDJsdVpDQnpZM0pwY0hSdVlXMWxjeUJ6WTNKcGNIUmxibU52WkdsdVp5QnpZM05qYjNCbElITmxkQ0J6WlhSbWFXeGxkSGx3WlNCelpYUm5iRzlpWVd3Z2MyVjBiRzlqWVd3Z2MyWnBibVFnYzJacGNuTjBJSE5vWld4c0lITnBiV0ZzZENCemFXZHVJSE5wYkdWdWRDQnpiR1ZsY0NCemJHRnpkQ0J6YldGbmFXTWdjMjFoY0dOc1pXRnlJSE50Wlc1MUlITnVaWGgwSUhOdWFXWm1JSE51YjIxaFoybGpJSE51YjNKbGJXRndJSE51YjNKbGJXVnVkU0J6YjNKMElITnZkWEpqWlNCemNHVnNiR1IxYlhBZ2MzQmxiR3huYjI5a0lITndaV3hzYVc1bWJ5QnpjR1ZzYkhKbGNHRnNiQ0J6Y0dWc2JIVnVaRzhnYzNCbGJHeDNjbTl1WnlCemNHeHBkQ0J6Y0hKbGRtbHZkWE1nYzNKbGQybHVaQ0J6ZEc5d0lITjBZV2NnYzNSaGNuUm5jbVZ3YkdGalpTQnpkR0Z5ZEhKbGNHeGhZMlVnYzNSaGNuUnBibk5sY25RZ2MzUnZjR2x1YzJWeWRDQnpkR3AxYlhBZ2MzUnpaV3hsWTNRZ2MzVnVhR2xrWlNCemRXNXRZWEFnYzNWdWJXVnVkU0J6ZFhOd1pXNWtJSE4yYVdWM0lITjNZWEJ1WVcxbElITjViblJoZUNCemVXNTBhVzFsSUhONWJtTmlhVzVrSUhST1pYaDBJSFJoWWs1bGVIUWdkR0ZpWTJ4dmMyVWdkR0ZpWldScGRDQjBZV0ptYVc1a0lIUmhZbVpwY25OMElIUmhZbXhoYzNRZ2RHRmliVzkyWlNCMFlXSnVaWGgwSUhSaFltOXViSGtnZEdGaWNISmxkbWx2ZFhNZ2RHRmljbVYzYVc1a0lIUmhaeUIwWTJ3Z2RHTnNaRzhnZEdOc1ptbHNaU0IwWldGeWIyWm1JSFJtYVhKemRDQjBhSEp2ZHlCMGFuVnRjQ0IwYkdGemRDQjBiV1Z1ZFNCMGJtVjRkQ0IwYjNCc1pXWjBJSFJ3Y21WMmFXOTFjeUIwY21WM2FXNWtJSFJ6Wld4bFkzUWdkSFZ1YldWdWRTQjFibVJ2SUhWdVpHOXFiMmx1SUhWdVpHOXNhWE4wSUhWdVlXSmljbVYyYVdGMFpTQjFibWhwWkdVZ2RXNXNaWFFnZFc1c2IyTnJkbUZ5SUhWdWJXRndJSFZ1YldWdWRTQjFibk5wYkdWdWRDQjFjR1JoZEdVZ2RtZHNiMkpoYkNCMlpYSnphVzl1SUhabGNtSnZjMlVnZG1WeWRHbGpZV3dnZG1sdFozSmxjQ0IyYVcxbmNtVndZV1JrSUhacGMzVmhiQ0IyYVhWellXZGxJSFpwWlhjZ2RtMWhjQ0IyYldGd1kyeGxZWElnZG0xbGJuVWdkbTVsZHlCMmJtOXlaVzFoY0NCMmJtOXlaVzFsYm5VZ2RuTndiR2wwSUhaMWJtMWhjQ0IyZFc1dFpXNTFJSGR5YVhSbElIZE9aWGgwSUhkaGJHd2dkMmhwYkdVZ2QybHVjMmw2WlNCM2FXNWpiV1FnZDJsdWNHOXpJSGR1WlhoMElIZHdjbVYyYVc5MWN5QjNjV0ZzYkNCM2MzWmxjbUlnZDNWdVpHOGdkM1pwYldsdVptOGdlR2wwSUhoaGJHd2dlRzFoY0dOc1pXRnlJSGh0WVhBZ2VHMWxiblVnZUc1dmNtVnRZWEFnZUc1dmNtVnRaVzUxSUhoMWJtMWhjQ0I0ZFc1dFpXNTFJSGxoYm10Y0lpeGlkV2xzZEY5cGJqcGNJbUZpY3lCaFkyOXpJR0ZrWkNCaGJtUWdZWEJ3Wlc1a0lHRnlaMk1nWVhKbmFXUjRJR0Z5WjNZZ1lYTnBiaUJoZEdGdUlHRjBZVzR5SUdKeWIzZHpaU0JpY205M2MyVmthWElnWW5WbVpYaHBjM1J6SUdKMVpteHBjM1JsWkNCaWRXWnNiMkZrWldRZ1luVm1ibUZ0WlNCaWRXWnVjaUJpZFdaM2FXNXVjaUJpZVhSbE1teHBibVVnWW5sMFpXbGtlQ0JqWVd4c0lHTmxhV3dnWTJoaGJtZGxibklnWTJoaGNqSnVjaUJqYVc1a1pXNTBJR05zWldGeWJXRjBZMmhsY3lCamIyd2dZMjl0Y0d4bGRHVWdZMjl0Y0d4bGRHVmZZV1JrSUdOdmJYQnNaWFJsWDJOb1pXTnJJR052Ym1acGNtMGdZMjl3ZVNCamIzTWdZMjl6YUNCamIzVnVkQ0JqYzJOdmNHVmZZMjl1Ym1WamRHbHZiaUJqZFhKemIzSWdaR1ZsY0dOdmNIa2daR1ZzWlhSbElHUnBaRjltYVd4bGRIbHdaU0JrYVdabVgyWnBiR3hsY2lCa2FXWm1YMmhzU1VRZ1pXMXdkSGtnWlhOallYQmxJR1YyWVd3Z1pYWmxiblJvWVc1a2JHVnlJR1Y0WldOMWRHRmliR1VnWlhocGMzUnpJR1Y0Y0NCbGVIQmhibVFnWlhoMFpXNWtJR1psWldSclpYbHpJR1pwYkdWeVpXRmtZV0pzWlNCbWFXeGxkM0pwZEdGaWJHVWdabWxzZEdWeUlHWnBibVJrYVhJZ1ptbHVaR1pwYkdVZ1pteHZZWFF5Ym5JZ1pteHZiM0lnWm0xdlpDQm1ibUZ0WldWelkyRndaU0JtYm1GdFpXMXZaR2xtZVNCbWIyeGtZMnh2YzJWa0lHWnZiR1JqYkc5elpXUmxibVFnWm05c1pHeGxkbVZzSUdadmJHUjBaWGgwSUdadmJHUjBaWGgwY21WemRXeDBJR1p2Y21WbmNtOTFibVFnWm5WdVkzUnBiMjRnWjJGeVltRm5aV052Ykd4bFkzUWdaMlYwSUdkbGRHSjFabXhwYm1VZ1oyVjBZblZtZG1GeUlHZGxkR05vWVhJZ1oyVjBZMmhoY20xdlpDQm5aWFJqYldSc2FXNWxJR2RsZEdOdFpIQnZjeUJuWlhSamJXUjBlWEJsSUdkbGRHTjNaQ0JuWlhSbWIyNTBibUZ0WlNCblpYUm1jR1Z5YlNCblpYUm1jMmw2WlNCblpYUm1kR2x0WlNCblpYUm1kSGx3WlNCblpYUnNhVzVsSUdkbGRHeHZZMnhwYzNRZ1oyVjBiV0YwWTJobGN5Qm5aWFJ3YVdRZ1oyVjBjRzl6SUdkbGRIRm1iR2x6ZENCblpYUnlaV2NnWjJWMGNtVm5kSGx3WlNCblpYUjBZV0oyWVhJZ1oyVjBkR0ZpZDJsdWRtRnlJR2RsZEhkcGJuQnZjM2dnWjJWMGQybHVjRzl6ZVNCblpYUjNhVzUyWVhJZ1oyeHZZaUJuYkc5aWNHRjBhQ0JvWVhNZ2FHRnpYMnRsZVNCb1lYTnNiMk5oYkdScGNpQm9ZWE50WVhCMGJ5Qm9hWE4wWVdSa0lHaHBjM1JrWld3Z2FHbHpkR2RsZENCb2FYTjBibklnYUd4bGVHbHpkSE1nYUd4SlJDQm9iM04wYm1GdFpTQnBZMjl1ZGlCcGJtUmxiblFnYVc1a1pYZ2dhVzV3ZFhRZ2FXNXdkWFJrYVdGc2IyY2dhVzV3ZFhSc2FYTjBJR2x1Y0hWMGNtVnpkRzl5WlNCcGJuQjFkSE5oZG1VZ2FXNXdkWFJ6WldOeVpYUWdhVzV6WlhKMElHbHVkbVZ5ZENCcGMyUnBjbVZqZEc5eWVTQnBjMnh2WTJ0bFpDQnBkR1Z0Y3lCcWIybHVJR3RsZVhNZ2JHVnVJR3hwWW1OaGJHd2diR2xpWTJGc2JHNXlJR3hwYm1VZ2JHbHVaVEppZVhSbElHeHBjM0JwYm1SbGJuUWdiRzlqWVd4MGFXMWxJR3h2WnlCc2IyY3hNQ0JzZFdGbGRtRnNJRzFoY0NCdFlYQmhjbWNnYldGd1kyaGxZMnNnYldGMFkyZ2diV0YwWTJoaFpHUWdiV0YwWTJoaGNtY2diV0YwWTJoa1pXeGxkR1VnYldGMFkyaGxibVFnYldGMFkyaHNhWE4wSUcxaGRHTm9jM1J5SUcxaGVDQnRhVzRnYld0a2FYSWdiVzlrWlNCdGVtVjJZV3dnYm1WNGRHNXZibUpzWVc1cklHNXlNbU5vWVhJZ2IzSWdjR0YwYUhOb2IzSjBaVzRnY0c5M0lIQnlaWFp1YjI1aWJHRnVheUJ3Y21sdWRHWWdjSFZ0ZG1semFXSnNaU0J3ZVRObGRtRnNJSEI1WlhaaGJDQnlZVzVuWlNCeVpXRmtabWxzWlNCeVpXeDBhVzFsSUhKbGJIUnBiV1Z6ZEhJZ2NtVnRiM1JsWDJWNGNISWdjbVZ0YjNSbFgyWnZjbVZuY205MWJtUWdjbVZ0YjNSbFgzQmxaV3NnY21WdGIzUmxYM0psWVdRZ2NtVnRiM1JsWDNObGJtUWdjbVZ0YjNabElISmxibUZ0WlNCeVpYQmxZWFFnY21WemIyeDJaU0J5WlhabGNuTmxJSEp2ZFc1a0lITmpjbVZsYm1GMGRISWdjMk55WldWdVkyaGhjaUJ6WTNKbFpXNWpiMndnYzJOeVpXVnVjbTkzSUhObFlYSmphQ0J6WldGeVkyaGtaV05zSUhObFlYSmphSEJoYVhJZ2MyVmhjbU5vY0dGcGNuQnZjeUJ6WldGeVkyaHdiM01nYzJWeWRtVnlNbU5zYVdWdWRDQnpaWEoyWlhKc2FYTjBJSE5sZEdKMVpuWmhjaUJ6WlhSamJXUndiM01nYzJWMGJHbHVaU0J6WlhSc2IyTnNhWE4wSUhObGRHMWhkR05vWlhNZ2MyVjBjRzl6SUhObGRIRm1iR2x6ZENCelpYUnlaV2NnYzJWMGRHRmlkbUZ5SUhObGRIUmhZbmRwYm5aaGNpQnpaWFIzYVc1MllYSWdjMmhoTWpVMklITm9aV3hzWlhOallYQmxJSE5vYVdaMGQybGtkR2dnYzJsdGNHeHBabmtnYzJsdUlITnBibWdnYzI5eWRDQnpiM1Z1WkdadmJHUWdjM0JsYkd4aVlXUjNiM0prSUhOd1pXeHNjM1ZuWjJWemRDQnpjR3hwZENCemNYSjBJSE4wY2pKbWJHOWhkQ0J6ZEhJeWJuSWdjM1J5WTJoaGNuTWdjM1J5WkdsemNHeGhlWGRwWkhSb0lITjBjbVowYVcxbElITjBjbWxrZUNCemRISnBibWNnYzNSeWJHVnVJSE4wY25CaGNuUWdjM1J5Y21sa2VDQnpkSEowY21GdWN5QnpkSEozYVdSMGFDQnpkV0p0WVhSamFDQnpkV0p6ZEdsMGRYUmxJSE41Ym1OdmJtTmxZV3hsWkNCemVXNUpSQ0J6ZVc1SlJHRjBkSElnYzNsdVNVUjBjbUZ1Y3lCemVXNXpkR0ZqYXlCemVYTjBaVzBnZEdGaWNHRm5aV0oxWm14cGMzUWdkR0ZpY0dGblpXNXlJSFJoWW5CaFoyVjNhVzV1Y2lCMFlXZG1hV3hsY3lCMFlXZHNhWE4wSUhSaGJpQjBZVzVvSUhSbGJYQnVZVzFsSUhSdmJHOTNaWElnZEc5MWNIQmxjaUIwY2lCMGNuVnVZeUIwZVhCbElIVnVaRzltYVd4bElIVnVaRzkwY21WbElIWmhiSFZsY3lCMmFYSjBZMjlzSUhacGMzVmhiRzF2WkdVZ2QybHNaRzFsYm5WdGIyUmxJSGRwYm1KMVptNXlJSGRwYm1OdmJDQjNhVzVvWldsbmFIUWdkMmx1YkdsdVpTQjNhVzV1Y2lCM2FXNXlaWE4wWTIxa0lIZHBibkpsYzNSMmFXVjNJSGRwYm5OaGRtVjJhV1YzSUhkcGJuZHBaSFJvSUhkeWFYUmxabWxzWlNCNGIzSmNJbjBzYVRvdlczczZYUzhzWXpwYlpTNU9UU3hsTGtGVFRTeDdZMDQ2WENKemRISnBibWRjSWl4aU9pOWNJaWdvWEZ4Y1hGd2lLWHhiWGx3aVhGeHVYU2txS0Z3aWZGeGNiaWt2ZlN4N1kwNDZYQ0oyWVhKcFlXSnNaVndpTEdJNkwxdGlkM1JuYkhOaGRsMDZXMXhjZDF4Y1pGOWRLaTk5TEh0alRqcGNJbVoxYm1OMGFXOXVYQ0lzWWtzNlhDSm1kVzVqZEdsdmJpQm1kVzVqZEdsdmJpRmNJaXhsT2x3aUpGd2lMSEk2TUN4ak9sdGxMbFJOTEh0alRqcGNJbkJoY21GdGMxd2lMR0k2WENKY1hGeGNLRndpTEdVNlhDSmNYRnhjS1Z3aWZWMTlYWDE5S1R0b2JHcHpMbkpsWjJsemRHVnlUR0Z1WjNWaFoyVW9YQ0owZVhCbGMyTnlhWEIwWENJc1puVnVZM1JwYjI0b1pTbDdjbVYwZFhKdWUyRnNhV0Z6WlhNNlcxd2lkSE5jSWwwc2F6cDdhMlY1ZDI5eVpEcGNJbWx1SUdsbUlHWnZjaUIzYUdsc1pTQm1hVzVoYkd4NUlIWmhjaUJ1WlhjZ1puVnVZM1JwYjI1OE1DQmtieUJ5WlhSMWNtNGdkbTlwWkNCbGJITmxJR0p5WldGcklHTmhkR05vSUdsdWMzUmhibU5sYjJZZ2QybDBhQ0IwYUhKdmR5QmpZWE5sSUdSbFptRjFiSFFnZEhKNUlIUm9hWE1nYzNkcGRHTm9JR052Ym5ScGJuVmxJSFI1Y0dWdlppQmtaV3hsZEdVZ2JHVjBJSGxwWld4a0lHTnZibk4wSUdOc1lYTnpJSEIxWW14cFl5QndjbWwyWVhSbElHZGxkQ0J6WlhRZ2MzVndaWElnYVc1MFpYSm1ZV05sSUdWNGRHVnVaSE56ZEdGMGFXTWdZMjl1YzNSeWRXTjBiM0lnYVcxd2JHVnRaVzUwY3lCbGJuVnRJR1Y0Y0c5eWRDQnBiWEJ2Y25RZ1pHVmpiR0Z5WlZ3aUxHeHBkR1Z5WVd3NlhDSjBjblZsSUdaaGJITmxJRzUxYkd3Z2RXNWtaV1pwYm1Wa0lFNWhUaUJKYm1acGJtbDBlVndpTEdKMWFXeDBYMmx1T2x3aVpYWmhiQ0JwYzBacGJtbDBaU0JwYzA1aFRpQndZWEp6WlVac2IyRjBJSEJoY25ObFNXNTBJR1JsWTI5a1pWVlNTU0JrWldOdlpHVlZVa2xEYjIxd2IyNWxiblFnWlc1amIyUmxWVkpKSUdWdVkyOWtaVlZTU1VOdmJYQnZibVZ1ZENCbGMyTmhjR1VnZFc1bGMyTmhjR1VnVDJKcVpXTjBJRVoxYm1OMGFXOXVJRUp2YjJ4bFlXNGdSWEp5YjNJZ1JYWmhiRVZ5Y205eUlFbHVkR1Z5Ym1Gc1JYSnliM0lnVW1GdVoyVkZjbkp2Y2lCU1pXWmxjbVZ1WTJWRmNuSnZjaUJUZEc5d1NYUmxjbUYwYVc5dUlGTjViblJoZUVWeWNtOXlJRlI1Y0dWRmNuSnZjaUJWVWtsRmNuSnZjaUJPZFcxaVpYSWdUV0YwYUNCRVlYUmxJRk4wY21sdVp5QlNaV2RGZUhBZ1FYSnlZWGtnUm14dllYUXpNa0Z5Y21GNUlFWnNiMkYwTmpSQmNuSmhlU0JKYm5ReE5rRnljbUY1SUVsdWRETXlRWEp5WVhrZ1NXNTBPRUZ5Y21GNUlGVnBiblF4TmtGeWNtRjVJRlZwYm5Rek1rRnljbUY1SUZWcGJuUTRRWEp5WVhrZ1ZXbHVkRGhEYkdGdGNHVmtRWEp5WVhrZ1FYSnlZWGxDZFdabVpYSWdSR0YwWVZacFpYY2dTbE5QVGlCSmJuUnNJR0Z5WjNWdFpXNTBjeUJ5WlhGMWFYSmxJRzF2WkhWc1pTQmpiMjV6YjJ4bElIZHBibVJ2ZHlCa2IyTjFiV1Z1ZENCaGJua2diblZ0WW1WeUlHSnZiMnhsWVc0Z2MzUnlhVzVuSUhadmFXUmNJbjBzWXpwYmUyTk9PbHdpY0dsY0lpeGlPaTllWEZ4ektpZ25mRndpS1hWelpTQnpkSEpwWTNRb0ozeGNJaWt2TEhJNk1IMHNaUzVCVTAwc1pTNVJVMDBzWlM1RFRFTk5MR1V1UTBKRFRTeGxMa05PVFN4N1lqcGNJaWhjSWl0bExsSlRVaXRjSW54Y1hGeGNZaWhqWVhObGZISmxkSFZ5Ym54MGFISnZkeWxjWEZ4Y1lpbGNYRnhjY3lwY0lpeHJPbHdpY21WMGRYSnVJSFJvY205M0lHTmhjMlZjSWl4ak9sdGxMa05NUTAwc1pTNURRa05OTEdVdVVrMHNlMkk2THp3dkxHVTZMejQ3THl4eU9qQXNjMHc2WENKNGJXeGNJbjFkTEhJNk1IMHNlMk5PT2x3aVpuVnVZM1JwYjI1Y0lpeGlTenBjSW1aMWJtTjBhVzl1WENJc1pUb3ZYRng3THl4bFJUb2hNQ3hqT2x0bExtbHVhR1Z5YVhRb1pTNVVUU3g3WWpvdlcwRXRXbUV0ZWlSZlhWc3dMVGxCTFZwaExYb2tYMTBxTDMwcExIdGpUanBjSW5CaGNtRnRjMXdpTEdJNkwxeGNLQzhzWlRvdlhGd3BMeXhqT2x0bExrTk1RMDBzWlM1RFFrTk5YU3hwT2k5YlhDSW5YRndvWFM5OVhTeHBPaTljWEZ0OEpTOHNjam93ZlN4N1kwNDZYQ0pqYjI1emRISjFZM1J2Y2x3aUxHSkxPbHdpWTI5dWMzUnlkV04wYjNKY0lpeGxPaTljWEhzdkxHVkZPaUV3TEhJNk1UQjlMSHRqVGpwY0ltMXZaSFZzWlZ3aUxHSkxPbHdpYlc5a2RXeGxYQ0lzWlRvdlhGeDdMeXhsUlRvaE1IMHNlMk5PT2x3aWFXNTBaWEptWVdObFhDSXNZa3M2WENKcGJuUmxjbVpoWTJWY0lpeGxPaTljWEhzdkxHVkZPaUV3ZlN4N1lqb3ZYRndrV3lndVhTOTlMSHRpT2x3aVhGeGNYQzVjSWl0bExrbFNMSEk2TUgxZGZYMHBPMmhzYW5NdWNtVm5hWE4wWlhKTVlXNW5kV0ZuWlNoY0ltcGhkbUZ6WTNKcGNIUmNJaXhtZFc1amRHbHZiaWh5S1h0eVpYUjFjbTU3WVd4cFlYTmxjenBiWENKcWMxd2lYU3hyT250clpYbDNiM0prT2x3aWFXNGdhV1lnWm05eUlIZG9hV3hsSUdacGJtRnNiSGtnZG1GeUlHNWxkeUJtZFc1amRHbHZiaUJrYnlCeVpYUjFjbTRnZG05cFpDQmxiSE5sSUdKeVpXRnJJR05oZEdOb0lHbHVjM1JoYm1ObGIyWWdkMmwwYUNCMGFISnZkeUJqWVhObElHUmxabUYxYkhRZ2RISjVJSFJvYVhNZ2MzZHBkR05vSUdOdmJuUnBiblZsSUhSNWNHVnZaaUJrWld4bGRHVWdiR1YwSUhscFpXeGtJR052Ym5OMElHTnNZWE56WENJc2JHbDBaWEpoYkRwY0luUnlkV1VnWm1Gc2MyVWdiblZzYkNCMWJtUmxabWx1WldRZ1RtRk9JRWx1Wm1sdWFYUjVYQ0lzWW5WcGJIUmZhVzQ2WENKbGRtRnNJR2x6Um1sdWFYUmxJR2x6VG1GT0lIQmhjbk5sUm14dllYUWdjR0Z5YzJWSmJuUWdaR1ZqYjJSbFZWSkpJR1JsWTI5a1pWVlNTVU52YlhCdmJtVnVkQ0JsYm1OdlpHVlZVa2tnWlc1amIyUmxWVkpKUTI5dGNHOXVaVzUwSUdWelkyRndaU0IxYm1WelkyRndaU0JQWW1wbFkzUWdSblZ1WTNScGIyNGdRbTl2YkdWaGJpQkZjbkp2Y2lCRmRtRnNSWEp5YjNJZ1NXNTBaWEp1WVd4RmNuSnZjaUJTWVc1blpVVnljbTl5SUZKbFptVnlaVzVqWlVWeWNtOXlJRk4wYjNCSmRHVnlZWFJwYjI0Z1UzbHVkR0Y0UlhKeWIzSWdWSGx3WlVWeWNtOXlJRlZTU1VWeWNtOXlJRTUxYldKbGNpQk5ZWFJvSUVSaGRHVWdVM1J5YVc1bklGSmxaMFY0Y0NCQmNuSmhlU0JHYkc5aGRETXlRWEp5WVhrZ1JteHZZWFEyTkVGeWNtRjVJRWx1ZERFMlFYSnlZWGtnU1c1ME16SkJjbkpoZVNCSmJuUTRRWEp5WVhrZ1ZXbHVkREUyUVhKeVlYa2dWV2x1ZERNeVFYSnlZWGtnVldsdWREaEJjbkpoZVNCVmFXNTBPRU5zWVcxd1pXUkJjbkpoZVNCQmNuSmhlVUoxWm1abGNpQkVZWFJoVm1sbGR5QktVMDlPSUVsdWRHd2dZWEpuZFcxbGJuUnpJSEpsY1hWcGNtVWdiVzlrZFd4bElHTnZibk52YkdVZ2QybHVaRzkzSUdSdlkzVnRaVzUwWENKOUxHTTZXM3RqVGpwY0luQnBYQ0lzY2pveE1DeDJPbHQ3WWpvdlhseGNjeW9vSjN4Y0lpbDFjMlVnYzNSeWFXTjBLQ2Q4WENJcEwzMHNlMkk2TDE1Y1hITXFLQ2Q4WENJcGRYTmxJR0Z6YlNnbmZGd2lLUzk5WFgwc2NpNUJVMDBzY2k1UlUwMHNjaTVEVEVOTkxISXVRMEpEVFN4eUxrTk9UU3g3WWpwY0lpaGNJaXR5TGxKVFVpdGNJbnhjWEZ4Y1lpaGpZWE5sZkhKbGRIVnlibngwYUhKdmR5bGNYRnhjWWlsY1hGeGNjeXBjSWl4ck9sd2ljbVYwZFhKdUlIUm9jbTkzSUdOaGMyVmNJaXhqT2x0eUxrTk1RMDBzY2k1RFFrTk5MSEl1VWswc2UySTZMend2TEdVNkx6NDdMeXh5T2pBc2MwdzZYQ0o0Yld4Y0luMWRMSEk2TUgwc2UyTk9PbHdpWm5WdVkzUnBiMjVjSWl4aVN6cGNJbVoxYm1OMGFXOXVYQ0lzWlRvdlhGeDdMeXhsUlRvaE1DeGpPbHR5TG1sdWFHVnlhWFFvY2k1VVRTeDdZam92VzBFdFdtRXRlaVJmWFZzd0xUbEJMVnBoTFhva1gxMHFMMzBwTEh0alRqcGNJbkJoY21GdGMxd2lMR0k2TDF4Y0tDOHNaVG92WEZ3cEx5eGpPbHR5TGtOTVEwMHNjaTVEUWtOTlhTeHBPaTliWENJblhGd29YUzk5WFN4cE9pOWNYRnQ4SlM5OUxIdGlPaTljWENSYktDNWRMMzBzZTJJNlhDSmNYRnhjTGx3aUszSXVTVklzY2pvd2ZWMTlmU2s3YUd4cWN5NXlaV2RwYzNSbGNreGhibWQxWVdkbEtGd2liSFZoWENJc1puVnVZM1JwYjI0b1pTbDdkbUZ5SUhROVhDSmNYRnhjV3owcVhGeGNYRnRjSWl4aFBWd2lYRnhjWEYwOUtseGNYRnhkWENJc2NqMTdZanAwTEdVNllTeGpPbHRjSW5ObGJHWmNJbDE5TEc0OVczdGpUanBjSW1OdmJXMWxiblJjSWl4aU9sd2lMUzBvUHlGY0lpdDBLMXdpS1Z3aUxHVTZYQ0lrWENKOUxIdGpUanBjSW1OdmJXMWxiblJjSWl4aU9sd2lMUzFjSWl0MExHVTZZU3hqT2x0eVhTeHlPakV3ZlYwN2NtVjBkWEp1ZTJ3NlpTNVZTVklzYXpwN2EyVjVkMjl5WkRwY0ltRnVaQ0JpY21WaGF5QmtieUJsYkhObElHVnNjMlZwWmlCbGJtUWdabUZzYzJVZ1ptOXlJR2xtSUdsdUlHeHZZMkZzSUc1cGJDQnViM1FnYjNJZ2NtVndaV0YwSUhKbGRIVnliaUIwYUdWdUlIUnlkV1VnZFc1MGFXd2dkMmhwYkdWY0lpeGlkV2xzZEY5cGJqcGNJbDlISUY5V1JWSlRTVTlPSUdGemMyVnlkQ0JqYjJ4c1pXTjBaMkZ5WW1GblpTQmtiMlpwYkdVZ1pYSnliM0lnWjJWMFptVnVkaUJuWlhSdFpYUmhkR0ZpYkdVZ2FYQmhhWEp6SUd4dllXUWdiRzloWkdacGJHVWdiRzloWkhOMGNtbHVaeUJ0YjJSMWJHVWdibVY0ZENCd1lXbHljeUJ3WTJGc2JDQndjbWx1ZENCeVlYZGxjWFZoYkNCeVlYZG5aWFFnY21GM2MyVjBJSEpsY1hWcGNtVWdjMlZzWldOMElITmxkR1psYm5ZZ2MyVjBiV1YwWVhSaFlteGxJSFJ2Ym5WdFltVnlJSFJ2YzNSeWFXNW5JSFI1Y0dVZ2RXNXdZV05ySUhod1kyRnNiQ0JqYjNKdmRYUnBibVVnWkdWaWRXY2dhVzhnYldGMGFDQnZjeUJ3WVdOcllXZGxJSE4wY21sdVp5QjBZV0pzWlZ3aWZTeGpPbTR1WTI5dVkyRjBLRnQ3WTA0NlhDSm1kVzVqZEdsdmJsd2lMR0pMT2x3aVpuVnVZM1JwYjI1Y0lpeGxPbHdpWEZ4Y1hDbGNJaXhqT2x0bExtbHVhR1Z5YVhRb1pTNVVUU3g3WWpwY0lpaGJYMkV0ZWtFdFdsMWNYRnhjZHlwY1hGeGNMaWtxS0Z0ZllTMTZRUzFhWFZ4Y1hGeDNLam9wUDF0ZllTMTZRUzFhWFZ4Y1hGeDNLbHdpZlNrc2UyTk9PbHdpY0dGeVlXMXpYQ0lzWWpwY0lseGNYRndvWENJc1pWYzZJVEFzWXpwdWZWMHVZMjl1WTJGMEtHNHBmU3hsTGtOT1RTeGxMa0ZUVFN4bExsRlRUU3g3WTA0NlhDSnpkSEpwYm1kY0lpeGlPblFzWlRwaExHTTZXM0pkTEhJNk5YMWRLWDE5S1R0b2JHcHpMbkpsWjJsemRHVnlUR0Z1WjNWaFoyVW9YQ0prYW1GdVoyOWNJaXhtZFc1amRHbHZiaWdwZTNaaGNpQmxQWHRqVGpwY0ltWnBiSFJsY2x3aUxHSTZMMXhjZkZ0QkxWcGhMWHBkSzF4Y09qOHZMR3M2WENKMGNuVnVZMkYwWlhkdmNtUnpJSEpsYlc5MlpYUmhaM01nYkdsdVpXSnlaV0ZyYzJKeUlIbGxjMjV2SUdkbGRGOWthV2RwZENCMGFXMWxjMmx1WTJVZ2NtRnVaRzl0SUhOMGNtbHdkR0ZuY3lCbWFXeGxjMmw2WldadmNtMWhkQ0JsYzJOaGNHVWdiR2x1WldKeVpXRnJjeUJzWlc1bmRHaGZhWE1nYkdwMWMzUWdjbXAxYzNRZ1kzVjBJSFZ5YkdsNlpTQm1hWGhmWVcxd1pYSnpZVzVrY3lCMGFYUnNaU0JtYkc5aGRHWnZjbTFoZENCallYQm1hWEp6ZENCd2NISnBiblFnWkdsMmFYTnBZbXhsWW5rZ1lXUmtJRzFoYTJWZmJHbHpkQ0IxYm05eVpHVnlaV1JmYkdsemRDQjFjbXhsYm1OdlpHVWdkR2x0WlhWdWRHbHNJSFZ5YkdsNlpYUnlkVzVqSUhkdmNtUmpiM1Z1ZENCemRISnBibWRtYjNKdFlYUWdiR2x1Wlc1MWJXSmxjbk1nYzJ4cFkyVWdaR0YwWlNCa2FXTjBjMjl5ZENCa2FXTjBjMjl5ZEhKbGRtVnljMlZrSUdSbFptRjFiSFJmYVdaZmJtOXVaU0J3YkhWeVlXeHBlbVVnYkc5M1pYSWdhbTlwYmlCalpXNTBaWElnWkdWbVlYVnNkQ0IwY25WdVkyRjBaWGR2Y21SelgyaDBiV3dnZFhCd1pYSWdiR1Z1WjNSb0lIQm9iMjVsTW01MWJXVnlhV01nZDI5eVpIZHlZWEFnZEdsdFpTQmhaR1J6YkdGemFHVnpJSE5zZFdkcFpua2dabWx5YzNRZ1pYTmpZWEJsYW5NZ1ptOXlZMlZmWlhOallYQmxJR2x5YVdWdVkyOWtaU0JzWVhOMElITmhabVVnYzJGbVpYTmxjU0IwY25WdVkyRjBaV05vWVhKeklHeHZZMkZzYVhwbElIVnViRzlqWVd4cGVtVWdiRzlqWVd4MGFXMWxJSFYwWXlCMGFXMWxlbTl1WlZ3aUxHTTZXM3RqVGpwY0ltRnlaM1Z0Wlc1MFhDSXNZam92WENJdkxHVTZMMXdpTDMwc2UyTk9PbHdpWVhKbmRXMWxiblJjSWl4aU9pOG5MeXhsT2k4bkwzMWRmVHR5WlhSMWNtNTdZV3hwWVhObGN6cGJYQ0pxYVc1cVlWd2lYU3hqU1RvaE1DeHpURHBjSW5odGJGd2lMSE4xWWt4aGJtZDFZV2RsVFc5a1pUcGNJbU52Ym5ScGJuVnZkWE5jSWl4ak9sdDdZMDQ2WENKamIyMXRaVzUwWENJc1lqb3ZYRng3SlZ4Y2N5cGpiMjF0Wlc1MFhGeHpLaVY5THl4bE9pOWNYSHNsWEZ4ekttVnVaR052YlcxbGJuUmNYSE1xSlgwdmZTeDdZMDQ2WENKamIyMXRaVzUwWENJc1lqb3ZYRng3SXk4c1pUb3ZJMzB2ZlN4N1kwNDZYQ0owWlcxd2JHRjBaVjkwWVdkY0lpeGlPaTljWEhzbEx5eGxPaThsZlM4c2F6cGNJbU52YlcxbGJuUWdaVzVrWTI5dGJXVnVkQ0JzYjJGa0lIUmxiWEJzWVhSbGRHRm5JR2xtWTJoaGJtZGxaQ0JsYm1ScFptTm9ZVzVuWldRZ2FXWWdaVzVrYVdZZ1ptbHljM1J2WmlCbWIzSWdaVzVrWm05eUlHbHVJR2xtYm05MFpYRjFZV3dnWlc1a2FXWnViM1JsY1hWaGJDQjNhV1IwYUhKaGRHbHZJR1Y0ZEdWdVpITWdhVzVqYkhWa1pTQnpjR0ZqWld4bGMzTWdaVzVrYzNCaFkyVnNaWE56SUhKbFozSnZkWEFnWW5rZ1lYTWdhV1psY1hWaGJDQmxibVJwWm1WeGRXRnNJSE56YVNCdWIzY2dkMmwwYUNCamVXTnNaU0IxY213Z1ptbHNkR1Z5SUdWdVpHWnBiSFJsY2lCa1pXSjFaeUJpYkc5amF5QmxibVJpYkc5amF5QmxiSE5sSUdGMWRHOWxjMk5oY0dVZ1pXNWtZWFYwYjJWelkyRndaU0JqYzNKbVgzUnZhMlZ1SUdWdGNIUjVJR1ZzYVdZZ1pXNWtkMmwwYUNCemRHRjBhV01nZEhKaGJuTWdZbXh2WTJ0MGNtRnVjeUJsYm1SaWJHOWphM1J5WVc1eklHZGxkRjl6ZEdGMGFXTmZjSEpsWm1sNElHZGxkRjl0WldScFlWOXdjbVZtYVhnZ2NHeDFjbUZzSUdkbGRGOWpkWEp5Wlc1MFgyeGhibWQxWVdkbElHeGhibWQxWVdkbElHZGxkRjloZG1GcGJHRmliR1ZmYkdGdVozVmhaMlZ6SUdkbGRGOWpkWEp5Wlc1MFgyeGhibWQxWVdkbFgySnBaR2tnWjJWMFgyeGhibWQxWVdkbFgybHVabThnWjJWMFgyeGhibWQxWVdkbFgybHVabTlmYkdsemRDQnNiMk5oYkdsNlpTQmxibVJzYjJOaGJHbDZaU0JzYjJOaGJIUnBiV1VnWlc1a2JHOWpZV3gwYVcxbElIUnBiV1Y2YjI1bElHVnVaSFJwYldWNmIyNWxJR2RsZEY5amRYSnlaVzUwWDNScGJXVjZiMjVsSUhabGNtSmhkR2x0WENJc1l6cGJaVjE5TEh0alRqcGNJblpoY21saFlteGxYQ0lzWWpvdlhGeDdYRng3THl4bE9pOTlmUzhzWXpwYlpWMTlYWDE5S1R0b2JHcHpMbkpsWjJsemRHVnlUR0Z1WjNWaFoyVW9YQ0p6WTJobGJXVmNJaXhtZFc1amRHbHZiaWhsS1h0MllYSWdkRDFjSWx0ZVhGeGNYQ2hjWEZ4Y0tWeGNYRnhiWEZ4Y1hGMWNYRnhjZTF4Y1hGeDlYRnhjSWl3bllEc2pmRnhjWEZ4Y1hGeGNYRnhjWEhOZEsxd2lMSEk5WENJb1hGeGNYQzE4WEZ4Y1hDc3BQMXhjWEZ4a0t5aGJMaTlkWEZ4Y1hHUXJLVDljSWl4cFBYSXJYQ0piSzF4Y1hGd3RYVndpSzNJclhDSnBYQ0lzWVQxN1luVnBiSFJmYVc0NlhDSmpZWE5sTFd4aGJXSmtZU0JqWVd4c0wyTmpJR05zWVhOeklHUmxabWx1WlMxamJHRnpjeUJsZUdsMExXaGhibVJzWlhJZ1ptbGxiR1FnYVcxd2IzSjBJR2x1YUdWeWFYUWdhVzVwZEMxbWFXVnNaQ0JwYm5SbGNtWmhZMlVnYkdWMEtpMTJZV3gxWlhNZ2JHVjBMWFpoYkhWbGN5QnNaWFF2WldNZ2JXbDRhVzRnYjNCMExXeGhiV0prWVNCdmRtVnljbWxrWlNCd2NtOTBaV04wSUhCeWIzWnBaR1VnY0hWaWJHbGpJSEpsYm1GdFpTQnlaWEYxYVhKbElISmxjWFZwY21VdFptOXlMWE41Ym5SaGVDQnplVzUwWVhnZ2MzbHVkR0Y0TFdOaGMyVWdjM2x1ZEdGNExXVnljbTl5SUhWdWFYUXZjMmxuSUhWdWJHVnpjeUIzYUdWdUlIZHBkR2d0YzNsdWRHRjRJR0Z1WkNCaVpXZHBiaUJqWVd4c0xYZHBkR2d0WTNWeWNtVnVkQzFqYjI1MGFXNTFZWFJwYjI0Z1kyRnNiQzEzYVhSb0xXbHVjSFYwTFdacGJHVWdZMkZzYkMxM2FYUm9MVzkxZEhCMWRDMW1hV3hsSUdOaGMyVWdZMjl1WkNCa1pXWnBibVVnWkdWbWFXNWxMWE41Ym5SaGVDQmtaV3hoZVNCa2J5QmtlVzVoYldsakxYZHBibVFnWld4elpTQm1iM0l0WldGamFDQnBaaUJzWVcxaVpHRWdiR1YwSUd4bGRDb2diR1YwTFhONWJuUmhlQ0JzWlhSeVpXTWdiR1YwY21WakxYTjViblJoZUNCdFlYQWdiM0lnYzNsdWRHRjRMWEoxYkdWeklDY2dLaUFySUN3Z0xFQWdMU0F1TGk0Z0x5QTdJRHdnUEQwZ1BTQTlQaUErSUQ0OUlHQWdZV0p6SUdGamIzTWdZVzVuYkdVZ1lYQndaVzVrSUdGd2NHeDVJR0Z6YVc0Z1lYTnpiMk1nWVhOemNTQmhjM04ySUdGMFlXNGdZbTl2YkdWaGJqOGdZMkZoY2lCallXUnlJR05oYkd3dGQybDBhQzFwYm5CMWRDMW1hV3hsSUdOaGJHd3RkMmwwYUMxdmRYUndkWFF0Wm1sc1pTQmpZV3hzTFhkcGRHZ3RkbUZzZFdWeklHTmhjaUJqWkdSa1lYSWdZMlJrWkdSeUlHTmtjaUJqWldsc2FXNW5JR05vWVhJdFBtbHVkR1ZuWlhJZ1kyaGhjaTFoYkhCb1lXSmxkR2xqUHlCamFHRnlMV05wUEQwL0lHTm9ZWEl0WTJrOFB5QmphR0Z5TFdOcFBUOGdZMmhoY2kxamFUNDlQeUJqYUdGeUxXTnBQajhnWTJoaGNpMWtiM2R1WTJGelpTQmphR0Z5TFd4dmQyVnlMV05oYzJVL0lHTm9ZWEl0Ym5WdFpYSnBZejhnWTJoaGNpMXlaV0ZrZVQ4Z1kyaGhjaTExY0dOaGMyVWdZMmhoY2kxMWNIQmxjaTFqWVhObFB5QmphR0Z5TFhkb2FYUmxjM0JoWTJVL0lHTm9ZWEk4UFQ4Z1kyaGhjancvSUdOb1lYSTlQeUJqYUdGeVBqMC9JR05vWVhJK1B5QmphR0Z5UHlCamJHOXpaUzFwYm5CMWRDMXdiM0owSUdOc2IzTmxMVzkxZEhCMWRDMXdiM0owSUdOdmJYQnNaWGcvSUdOdmJuTWdZMjl6SUdOMWNuSmxiblF0YVc1d2RYUXRjRzl5ZENCamRYSnlaVzUwTFc5MWRIQjFkQzF3YjNKMElHUmxibTl0YVc1aGRHOXlJR1JwYzNCc1lYa2daVzltTFc5aWFtVmpkRDhnWlhFL0lHVnhkV0ZzUHlCbGNYWS9JR1YyWVd3Z1pYWmxiajhnWlhoaFkzUXRQbWx1WlhoaFkzUWdaWGhoWTNRL0lHVjRjQ0JsZUhCMElHWnNiMjl5SUdadmNtTmxJR2RqWkNCcGJXRm5MWEJoY25RZ2FXNWxlR0ZqZEMwK1pYaGhZM1FnYVc1bGVHRmpkRDhnYVc1d2RYUXRjRzl5ZEQ4Z2FXNTBaV2RsY2kwK1kyaGhjaUJwYm5SbFoyVnlQeUJwYm5SbGNtRmpkR2x2YmkxbGJuWnBjbTl1YldWdWRDQnNZMjBnYkdWdVozUm9JR3hwYzNRZ2JHbHpkQzArYzNSeWFXNW5JR3hwYzNRdFBuWmxZM1J2Y2lCc2FYTjBMWEpsWmlCc2FYTjBMWFJoYVd3Z2JHbHpkRDhnYkc5aFpDQnNiMmNnYldGbmJtbDBkV1JsSUcxaGEyVXRjRzlzWVhJZ2JXRnJaUzF5WldOMFlXNW5kV3hoY2lCdFlXdGxMWE4wY21sdVp5QnRZV3RsTFhabFkzUnZjaUJ0WVhnZ2JXVnRZbVZ5SUcxbGJYRWdiV1Z0ZGlCdGFXNGdiVzlrZFd4dklHNWxaMkYwYVhabFB5QnVaWGRzYVc1bElHNXZkQ0J1ZFd4c0xXVnVkbWx5YjI1dFpXNTBJRzUxYkd3L0lHNTFiV0psY2kwK2MzUnlhVzVuSUc1MWJXSmxjajhnYm5WdFpYSmhkRzl5SUc5a1pEOGdiM0JsYmkxcGJuQjFkQzFtYVd4bElHOXdaVzR0YjNWMGNIVjBMV1pwYkdVZ2IzVjBjSFYwTFhCdmNuUS9JSEJoYVhJL0lIQmxaV3N0WTJoaGNpQndiM0owUHlCd2IzTnBkR2wyWlQ4Z2NISnZZMlZrZFhKbFB5QnhkV0Z6YVhGMWIzUmxJSEYxYjNSbElIRjFiM1JwWlc1MElISmhkR2x2Ym1Gc1B5QnlZWFJwYjI1aGJHbDZaU0J5WldGa0lISmxZV1F0WTJoaGNpQnlaV0ZzTFhCaGNuUWdjbVZoYkQ4Z2NtVnRZV2x1WkdWeUlISmxkbVZ5YzJVZ2NtOTFibVFnYzJOb1pXMWxMWEpsY0c5eWRDMWxiblpwY205dWJXVnVkQ0J6WlhRaElITmxkQzFqWVhJaElITmxkQzFqWkhJaElITnBiaUJ6Y1hKMElITjBjbWx1WnlCemRISnBibWN0UG14cGMzUWdjM1J5YVc1bkxUNXVkVzFpWlhJZ2MzUnlhVzVuTFQ1emVXMWliMndnYzNSeWFXNW5MV0Z3Y0dWdVpDQnpkSEpwYm1jdFkyazhQVDhnYzNSeWFXNW5MV05wUEQ4Z2MzUnlhVzVuTFdOcFBUOGdjM1J5YVc1bkxXTnBQajAvSUhOMGNtbHVaeTFqYVQ0L0lITjBjbWx1WnkxamIzQjVJSE4wY21sdVp5MW1hV3hzSVNCemRISnBibWN0YkdWdVozUm9JSE4wY21sdVp5MXlaV1lnYzNSeWFXNW5MWE5sZENFZ2MzUnlhVzVuUEQwL0lITjBjbWx1Wnp3L0lITjBjbWx1WnowL0lITjBjbWx1Wno0OVB5QnpkSEpwYm1jK1B5QnpkSEpwYm1jL0lITjFZbk4wY21sdVp5QnplVzFpYjJ3dFBuTjBjbWx1WnlCemVXMWliMncvSUhSaGJpQjBjbUZ1YzJOeWFYQjBMVzltWmlCMGNtRnVjMk55YVhCMExXOXVJSFJ5ZFc1allYUmxJSFpoYkhWbGN5QjJaV04wYjNJZ2RtVmpkRzl5TFQ1c2FYTjBJSFpsWTNSdmNpMW1hV3hzSVNCMlpXTjBiM0l0YkdWdVozUm9JSFpsWTNSdmNpMXlaV1lnZG1WamRHOXlMWE5sZENFZ2QybDBhQzFwYm5CMWRDMW1jbTl0TFdacGJHVWdkMmwwYUMxdmRYUndkWFF0ZEc4dFptbHNaU0IzY21sMFpTQjNjbWwwWlMxamFHRnlJSHBsY204L1hDSjlMRzQ5ZTJOT09sd2ljMmhsWW1GdVoxd2lMR0k2WENKZUl5RmNJaXhsT2x3aUpGd2lmU3hqUFh0alRqcGNJbXhwZEdWeVlXeGNJaXhpT2x3aUtDTjBmQ05tZkNOY1hGeGNYRnhjWEZ3aUszUXJYQ0o4STF4Y1hGeGNYRnhjTGlsY0luMHNiRDE3WTA0NlhDSnVkVzFpWlhKY0lpeDJPbHQ3WWpweUxISTZNSDBzZTJJNmFTeHlPakI5TEh0aU9sd2lJMkpiTUMweFhTc29MMXN3TFRGZEt5ay9YQ0o5TEh0aU9sd2lJMjliTUMwM1hTc29MMXN3TFRkZEt5ay9YQ0o5TEh0aU9sd2lJM2hiTUMwNVlTMW1YU3NvTDFzd0xUbGhMV1pkS3lrL1hDSjlYWDBzY3oxbExsRlRUU3h2UFh0alRqcGNJbU52YlcxbGJuUmNJaXgyT2x0N1lqcGNJanRjSWl4bE9sd2lKRndpTEhJNk1IMHNlMkk2WENJalhGeGNYSHhjSWl4bE9sd2lYRnhjWEh3alhDSjlYWDBzZFQxN1lqcDBMSEk2TUgwc2NEMTdZMDQ2WENKMllYSnBZV0pzWlZ3aUxHSTZYQ0luWENJcmRIMHNaRDE3WlZjNklUQXNjam93ZlN4blBYdGpUanBjSW14cGMzUmNJaXgyT2x0N1lqcGNJbHhjWEZ3b1hDSXNaVHBjSWx4Y1hGd3BYQ0o5TEh0aU9sd2lYRnhjWEZ0Y0lpeGxPbHdpWEZ4Y1hGMWNJbjFkTEdNNlczdGpUanBjSW10bGVYZHZjbVJjSWl4aU9uUXNiRHAwTEdzNllYMHNaRjE5TzNKbGRIVnliaUJrTG1NOVcyTXNiQ3h6TEc4c2RTeHdMR2RkTEh0cE9pOWNYRk12TEdNNlcyNHNiQ3h6TEc4c2NDeG5YWDE5S1R0b2JHcHpMbkpsWjJsemRHVnlUR0Z1WjNWaFoyVW9YQ0p2WTJGdGJGd2lMR1oxYm1OMGFXOXVLR1VwZTNKbGRIVnlibnRoYkdsaGMyVnpPbHRjSW0xc1hDSmRMR3M2ZTJ0bGVYZHZjbVE2WENKaGJtUWdZWE1nWVhOelpYSjBJR0Z6Y2lCaVpXZHBiaUJqYkdGemN5QmpiMjV6ZEhKaGFXNTBJR1J2SUdSdmJtVWdaRzkzYm5SdklHVnNjMlVnWlc1a0lHVjRZMlZ3ZEdsdmJpQmxlSFJsY201aGJDQm1iM0lnWm5WdUlHWjFibU4wYVc5dUlHWjFibU4wYjNJZ2FXWWdhVzRnYVc1amJIVmtaU0JwYm1obGNtbDBJU0JwYm1obGNtbDBJR2x1YVhScFlXeHBlbVZ5SUd4aGJtUWdiR0Y2ZVNCc1pYUWdiRzl5SUd4emJDQnNjM0lnYkhodmNpQnRZWFJqYUNCdFpYUm9iMlFoZkRFd0lHMWxkR2h2WkNCdGIyUWdiVzlrZFd4bElHMTFkR0ZpYkdVZ2JtVjNJRzlpYW1WamRDQnZaaUJ2Y0dWdUlTQnZjR1Z1SUc5eUlIQnlhWFpoZEdVZ2NtVmpJSE5wWnlCemRISjFZM1FnZEdobGJpQjBieUIwY25rZ2RIbHdaU0IyWVd3aElIWmhiQ0IyYVhKMGRXRnNJSGRvWlc0Z2QyaHBiR1VnZDJsMGFDQndZWEp6WlhJZ2RtRnNkV1ZjSWl4aWRXbHNkRjlwYmpwY0ltRnljbUY1SUdKdmIyd2dZbmwwWlhNZ1kyaGhjaUJsZUc1OE5TQm1iRzloZENCcGJuUWdhVzUwTXpJZ2FXNTBOalFnYkdsemRDQnNZWHA1WDNSOE5TQnVZWFJwZG1WcGJuUjhOU0J6ZEhKcGJtY2dkVzVwZENCcGJsOWphR0Z1Ym1Wc0lHOTFkRjlqYUdGdWJtVnNJSEpsWmx3aUxHeHBkR1Z5WVd3NlhDSjBjblZsSUdaaGJITmxYQ0o5TEdrNkwxeGNMMXhjTDN3K1BpOHNiRHBjSWx0aExYcGZYVnhjWEZ4M0tpRS9YQ0lzWXpwYmUyTk9PbHdpYkdsMFpYSmhiRndpTEdJNlhDSmNYRnhjV3loY1hGeGNmRnhjWEZ4OEtUOWNYRnhjWFh4Y1hGeGNLRnhjWEZ3cFhDSjlMSHRqVGpwY0ltTnZiVzFsYm5SY0lpeGlPbHdpWEZ4Y1hDaGNYRnhjS2x3aUxHVTZYQ0pjWEZ4Y0tseGNYRndwWENJc1l6cGJYQ0p6Wld4bVhDSmRmU3g3WTA0NlhDSnplVzFpYjJ4Y0lpeGlPbHdpSjF0QkxWcGhMWHBmWFNnL0lTY3BXMXhjWEZ4M0oxMHFYQ0o5TEh0alRqcGNJblJoWjF3aUxHSTZYQ0pnVzBFdFdsMWJYRnhjWEhjblhTcGNJbjBzZTJOT09sd2lkSGx3WlZ3aUxHSTZYQ0pjWEZ4Y1lsdEJMVnBkVzF4Y1hGeDNKMTBxWENJc2Nqb3dmU3g3WWpwY0lsdGhMWHBmWFZ4Y1hGeDNLaWRiWEZ4Y1hIY25YU3BjSW4wc1pTNXBibWhsY21sMEtHVXVRVk5OTEh0alRqcGNJbU5vWVhKY0lpeHlPakI5S1N4bExtbHVhR1Z5YVhRb1pTNVJVMDBzZTJrNmJuVnNiSDBwTEh0alRqcGNJbTUxYldKbGNsd2lMR0k2WENKY1hGeGNZaWd3VzNoWVhWdGhMV1pCTFVZd0xUbGZYU3RiVEd4dVhUOThNRnR2VDExYk1DMDNYMTByVzB4c2JsMC9mREJiWWtKZFd6QXhYMTByVzB4c2JsMC9mRnN3TFRsZFd6QXRPVjlkS2loYlRHeHVYWHdvWEZ4Y1hDNWJNQzA1WDEwcUtUOG9XMlZGWFZzdEsxMC9XekF0T1Y5ZEt5ay9LVDhwWENJc2Nqb3dmU3g3WWpvdld5MDlYVDR2ZlYxOWZTazdhR3hxY3k1eVpXZHBjM1JsY2t4aGJtZDFZV2RsS0Z3aWNIbDBhRzl1WENJc1puVnVZM1JwYjI0b1pTbDdkbUZ5SUhJOWUyTk9PbHdpY0hKdmJYQjBYQ0lzWWpvdlhpZytQajU4WEZ3dVhGd3VYRnd1S1NBdmZTeGlQWHRqVGpwY0luTjBjbWx1WjF3aUxHTTZXMlV1UWtWZExIWTZXM3RpT2k4b2RYeGlLVDl5UHljbkp5OHNaVG92Snljbkx5eGpPbHR5WFN4eU9qRXdmU3g3WWpvdktIVjhZaWsvY2o5Y0lsd2lYQ0l2TEdVNkwxd2lYQ0pjSWk4c1l6cGJjbDBzY2pveE1IMHNlMkk2THloMWZISjhkWElwSnk4c1pUb3ZKeThzY2pveE1IMHNlMkk2THloMWZISjhkWElwWENJdkxHVTZMMXdpTHl4eU9qRXdmU3g3WWpvdktHSjhZbklwSnk4c1pUb3ZKeTk5TEh0aU9pOG9ZbnhpY2lsY0lpOHNaVG92WENJdmZTeGxMa0ZUVFN4bExsRlRUVjE5TEd3OWUyTk9PbHdpYm5WdFltVnlYQ0lzY2pvd0xIWTZXM3RpT21VdVFrNVNLMXdpVzJ4TWFrcGRQMXdpZlN4N1lqcGNJbHhjWEZ4aUtEQnZXekF0TjEwcktWdHNUR3BLWFQ5Y0luMHNlMkk2WlM1RFRsSXJYQ0piYkV4cVNsMC9YQ0o5WFgwc1l6MTdZMDQ2WENKd1lYSmhiWE5jSWl4aU9pOWNYQ2d2TEdVNkwxeGNLUzhzWXpwYlhDSnpaV3htWENJc2NpeHNMR0pkZlR0eVpYUjFjbTU3WVd4cFlYTmxjenBiWENKd2VWd2lMRndpWjNsd1hDSmRMR3M2ZTJ0bGVYZHZjbVE2WENKaGJtUWdaV3hwWmlCcGN5Qm5iRzlpWVd3Z1lYTWdhVzRnYVdZZ1puSnZiU0J5WVdselpTQm1iM0lnWlhoalpYQjBJR1pwYm1Gc2JIa2djSEpwYm5RZ2FXMXdiM0owSUhCaGMzTWdjbVYwZFhKdUlHVjRaV01nWld4elpTQmljbVZoYXlCdWIzUWdkMmwwYUNCamJHRnpjeUJoYzNObGNuUWdlV2xsYkdRZ2RISjVJSGRvYVd4bElHTnZiblJwYm5WbElHUmxiQ0J2Y2lCa1pXWWdiR0Z0WW1SaElHNXZibXh2WTJGc2ZERXdJRTV2Ym1VZ1ZISjFaU0JHWVd4elpWd2lMR0oxYVd4MFgybHVPbHdpUld4c2FYQnphWE1nVG05MFNXMXdiR1Z0Wlc1MFpXUmNJbjBzYVRvdktEeGNYQzk4TFQ1OFhGdy9LUzhzWXpwYmNpeHNMR0lzWlM1SVEwMHNlM1k2VzN0alRqcGNJbVoxYm1OMGFXOXVYQ0lzWWtzNlhDSmtaV1pjSWl4eU9qRXdmU3g3WTA0NlhDSmpiR0Z6YzF3aUxHSkxPbHdpWTJ4aGMzTmNJbjFkTEdVNkx6b3ZMR2s2TDFza2V6MDdYRnh1WFM4c1l6cGJaUzVWVkUwc1kxMTlMSHRqVGpwY0ltUmxZMjl5WVhSdmNsd2lMR0k2TDBBdkxHVTZMeVF2ZlN4N1lqb3ZYRnhpS0hCeWFXNTBmR1Y0WldNcFhGd29MMzFkZlgwcE8yaHNhbk11Y21WbmFYTjBaWEpNWVc1bmRXRm5aU2hjSW1Gd2NHeGxjMk55YVhCMFhDSXNablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTlaUzVwYm1obGNtbDBLR1V1VVZOTkxIdHBPbHdpWENKOUtTeHlQWHRqVGpwY0luQmhjbUZ0YzF3aUxHSTZYQ0pjWEZ4Y0tGd2lMR1U2WENKY1hGeGNLVndpTEdNNlcxd2ljMlZzWmx3aUxHVXVRMDVOTEhSZGZTeHZQVnQ3WTA0NlhDSmpiMjF0Wlc1MFhDSXNZanBjSWkwdFhDSXNaVHBjSWlSY0luMHNlMk5PT2x3aVkyOXRiV1Z1ZEZ3aUxHSTZYQ0pjWEZ4Y0tGeGNYRndxWENJc1pUcGNJbHhjWEZ3cVhGeGNYQ2xjSWl4ak9sdGNJbk5sYkdaY0lpeDdZanBjSWkwdFhDSXNaVHBjSWlSY0luMWRmU3hsTGtoRFRWMDdjbVYwZFhKdWUyRnNhV0Z6WlhNNlcxd2liM05oYzJOeWFYQjBYQ0pkTEdzNmUydGxlWGR2Y21RNlhDSmhZbTkxZENCaFltOTJaU0JoWm5SbGNpQmhaMkZwYm5OMElHRnVaQ0JoY205MWJtUWdZWE1nWVhRZ1ltRmpheUJpWldadmNtVWdZbVZuYVc1dWFXNW5JR0psYUdsdVpDQmlaV3h2ZHlCaVpXNWxZWFJvSUdKbGMybGtaU0JpWlhSM1pXVnVJR0oxZENCaWVTQmpiMjV6YVdSbGNtbHVaeUJqYjI1MFlXbHVJR052Ym5SaGFXNXpJR052Ym5ScGJuVmxJR052Y0hrZ1pHbDJJR1J2WlhNZ1pXbG5hSFJvSUdWc2MyVWdaVzVrSUdWeGRXRnNJR1Z4ZFdGc2N5Qmxjbkp2Y2lCbGRtVnllU0JsZUdsMElHWnBablJvSUdacGNuTjBJR1p2Y2lCbWIzVnlkR2dnWm5KdmJTQm1jbTl1ZENCblpYUWdaMmwyWlc0Z1oyeHZZbUZzSUdsbUlHbG5ibTl5YVc1bklHbHVJR2x1ZEc4Z2FYTWdhWFFnYVhSeklHeGhjM1FnYkc5allXd2diV1VnYldsa1pHeGxJRzF2WkNCdGVTQnVhVzUwYUNCdWIzUWdiMllnYjI0Z2IyNTBieUJ2Y2lCdmRtVnlJSEJ5YjNBZ2NISnZjR1Z5ZEhrZ2NIVjBJSEpsWmlCeVpXWmxjbVZ1WTJVZ2NtVndaV0YwSUhKbGRIVnlibWx1WnlCelkzSnBjSFFnYzJWamIyNWtJSE5sZENCelpYWmxiblJvSUhOcGJtTmxJSE5wZUhSb0lITnZiV1VnZEdWc2JDQjBaVzUwYUNCMGFHRjBJSFJvWlh3d0lIUm9aVzRnZEdocGNtUWdkR2h5YjNWbmFDQjBhSEoxSUhScGJXVnZkWFFnZEdsdFpYTWdkRzhnZEhKaGJuTmhZM1JwYjI0Z2RISjVJSFZ1ZEdsc0lIZG9aWEpsSUhkb2FXeGxJSGRvYjNObElIZHBkR2dnZDJsMGFHOTFkRndpTEdOdmJuTjBZVzUwT2x3aVFYQndiR1ZUWTNKcGNIUWdabUZzYzJVZ2JHbHVaV1psWldRZ2NtVjBkWEp1SUhCcElIRjFiM1JsSUhKbGMzVnNkQ0J6Y0dGalpTQjBZV0lnZEhKMVpWd2lMSFI1Y0dVNlhDSmhiR2xoY3lCaGNIQnNhV05oZEdsdmJpQmliMjlzWldGdUlHTnNZWE56SUdOdmJuTjBZVzUwSUdSaGRHVWdabWxzWlNCcGJuUmxaMlZ5SUd4cGMzUWdiblZ0WW1WeUlISmxZV3dnY21WamIzSmtJSE4wY21sdVp5QjBaWGgwWENJc1kyOXRiV0Z1WkRwY0ltRmpkR2wyWVhSbElHSmxaWEFnWTI5MWJuUWdaR1ZzWVhrZ2JHRjFibU5vSUd4dlp5QnZabVp6WlhRZ2NtVmhaQ0J5YjNWdVpDQnlkVzRnYzJGNUlITjFiVzFoY21sNlpTQjNjbWwwWlZ3aUxIQnliM0JsY25SNU9sd2lZMmhoY21GamRHVnlJR05vWVhKaFkzUmxjbk1nWTI5dWRHVnVkSE1nWkdGNUlHWnliMjUwYlc5emRDQnBaQ0JwZEdWdElHeGxibWQwYUNCdGIyNTBhQ0J1WVcxbElIQmhjbUZuY21Gd2FDQndZWEpoWjNKaGNHaHpJSEpsYzNRZ2NtVjJaWEp6WlNCeWRXNXVhVzVuSUhScGJXVWdkbVZ5YzJsdmJpQjNaV1ZyWkdGNUlIZHZjbVFnZDI5eVpITWdlV1ZoY2x3aWZTeGpPbHQwTEdVdVEwNU5MSHRqVGpwY0luUjVjR1ZjSWl4aU9sd2lYRnhjWEdKUVQxTkpXQ0JtYVd4bFhGeGNYR0pjSW4wc2UyTk9PbHdpWTI5dGJXRnVaRndpTEdJNlhDSmNYRnhjWWloamJHbHdZbTloY21RZ2FXNW1iM3gwYUdVZ1kyeHBjR0p2WVhKa2ZHbHVabThnWm05eWZHeHBjM1FnS0dScGMydHpmR1p2YkdSbGNpbDhiVzkxYm5RZ2RtOXNkVzFsZkhCaGRHZ2dkRzk4S0dOc2IzTmxmRzl3Wlc0Z1ptOXlLU0JoWTJObGMzTjhLR2RsZEh4elpYUXBJR1Z2Wm54amRYSnlaVzUwSUdSaGRHVjhaRzhnYzJobGJHd2djMk55YVhCMGZHZGxkQ0IyYjJ4MWJXVWdjMlYwZEdsdVozTjhjbUZ1Wkc5dElHNTFiV0psY254elpYUWdkbTlzZFcxbGZITjVjM1JsYlNCaGRIUnlhV0oxZEdWOGMzbHpkR1Z0SUdsdVptOThkR2x0WlNCMGJ5QkhUVlI4S0d4dllXUjhjblZ1ZkhOMGIzSmxLU0J6WTNKcGNIUjhjMk55YVhCMGFXNW5JR052YlhCdmJtVnVkSE44UVZORFNVa2dLR05vWVhKaFkzUmxjbnh1ZFcxaVpYSXBmR3h2WTJGc2FYcGxaQ0J6ZEhKcGJtZDhZMmh2YjNObElDaGhjSEJzYVdOaGRHbHZibnhqYjJ4dmNueG1hV3hsZkdacGJHVWdibUZ0Wlh4bWIyeGtaWEo4Wm5KdmJTQnNhWE4wZkhKbGJXOTBaU0JoY0hCc2FXTmhkR2x2Ym54VlVrd3BmR1JwYzNCc1lYa2dLR0ZzWlhKMGZHUnBZV3h2WnlrcFhGeGNYR0o4WGx4Y1hGeHpLbkpsZEhWeWJseGNYRnhpWENKOUxIdGpUanBjSW1OdmJuTjBZVzUwWENJc1lqcGNJbHhjWEZ4aUtIUmxlSFFnYVhSbGJTQmtaV3hwYldsMFpYSnpmR04xY25KbGJuUWdZWEJ3YkdsallYUnBiMjU4YldsemMybHVaeUIyWVd4MVpTbGNYRnhjWWx3aWZTeDdZMDQ2WENKclpYbDNiM0prWENJc1lqcGNJbHhjWEZ4aUtHRndZWEowSUdaeWIyMThZWE5wWkdVZ1puSnZiWHhwYm5OMFpXRmtJRzltZkc5MWRDQnZabnhuY21WaGRHVnlJSFJvWVc1OGFYTnVKM1I4S0dSdlpYTnVKM1I4Wkc5bGN5QnViM1FwSUNobGNYVmhiSHhqYjIxbElHSmxabTl5Wlh4amIyMWxJR0ZtZEdWeWZHTnZiblJoYVc0cGZDaG5jbVZoZEdWeWZHeGxjM01wSUhSb1lXNG9JRzl5SUdWeGRXRnNLVDk4S0hOMFlYSjBjejk4Wlc1a2MzeGlaV2RwYm5NL0tTQjNhWFJvZkdOdmJuUmhhVzVsWkNCaWVYeGpiMjFsY3lBb1ltVm1iM0psZkdGbWRHVnlLWHhoSUNoeVpXWjhjbVZtWlhKbGJtTmxLU2xjWEZ4Y1lsd2lmU3g3WTA0NlhDSndjbTl3WlhKMGVWd2lMR0k2WENKY1hGeGNZaWhRVDFOSldDQndZWFJvZkNoa1lYUmxmSFJwYldVcElITjBjbWx1WjN4eGRXOTBaV1FnWm05eWJTbGNYRnhjWWx3aWZTeDdZMDQ2WENKbWRXNWpkR2x2Ymw5emRHRnlkRndpTEdKTE9sd2liMjVjSWl4cE9sd2lXeVI3UFR0Y1hGeGNibDFjSWl4ak9sdGxMbFZVVFN4eVhYMWRMbU52Ym1OaGRDaHZLU3hwT2x3aUx5OThMVDU4UFQ1Y0luMTlLVHRjYmpzZ1luSnZkM05sY21sbWVWOXphR2x0WDE5a1pXWnBibVZmWDIxdlpIVnNaVjlmWlhod2IzSjBYMThvZEhsd1pXOW1JR2hzYW5NZ0lUMGdYQ0oxYm1SbFptbHVaV1JjSWlBL0lHaHNhbk1nT2lCM2FXNWtiM2N1YUd4cWN5azdYRzVjYm4wcExtTmhiR3dvWjJ4dlltRnNMQ0IxYm1SbFptbHVaV1FzSUhWdVpHVm1hVzVsWkN3Z2RXNWtaV1pwYm1Wa0xDQjFibVJsWm1sdVpXUXNJR1oxYm1OMGFXOXVJR1JsWm1sdVpVVjRjRzl5ZENobGVDa2dleUJ0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1Y0T3lCOUtUdGNiaUpkZlE9PSIsIihmdW5jdGlvbiAoZ2xvYmFsKXtcbjsgdmFyIF9fYnJvd3NlcmlmeV9zaGltX3JlcXVpcmVfXz1yZXF1aXJlOyhmdW5jdGlvbiBicm93c2VyaWZ5U2hpbShtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUsIGRlZmluZSwgYnJvd3NlcmlmeV9zaGltX19kZWZpbmVfX21vZHVsZV9fZXhwb3J0X18pIHtcbi8vICAgICBaZXB0by5qc1xuLy8gICAgIChjKSAyMDEwLTIwMTQgVGhvbWFzIEZ1Y2hzXG4vLyAgICAgWmVwdG8uanMgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbnZhciBaZXB0byA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVuZGVmaW5lZCwga2V5LCAkLCBjbGFzc0xpc3QsIGVtcHR5QXJyYXkgPSBbXSwgY29uY2F0ID0gZW1wdHlBcnJheS5jb25jYXQsIGZpbHRlciA9IGVtcHR5QXJyYXkuZmlsdGVyLCBzbGljZSA9IGVtcHR5QXJyYXkuc2xpY2UsXG4gICAgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQsXG4gICAgZWxlbWVudERpc3BsYXkgPSB7fSwgY2xhc3NDYWNoZSA9IHt9LFxuICAgIGNzc051bWJlciA9IHsgJ2NvbHVtbi1jb3VudCc6IDEsICdjb2x1bW5zJzogMSwgJ2ZvbnQtd2VpZ2h0JzogMSwgJ2xpbmUtaGVpZ2h0JzogMSwnb3BhY2l0eSc6IDEsICd6LWluZGV4JzogMSwgJ3pvb20nOiAxIH0sXG4gICAgZnJhZ21lbnRSRSA9IC9eXFxzKjwoXFx3K3whKVtePl0qPi8sXG4gICAgc2luZ2xlVGFnUkUgPSAvXjwoXFx3KylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8sXG4gICAgdGFnRXhwYW5kZXJSRSA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6XSspW14+XSopXFwvPi9pZyxcbiAgICByb290Tm9kZVJFID0gL14oPzpib2R5fGh0bWwpJC9pLFxuICAgIGNhcGl0YWxSRSA9IC8oW0EtWl0pL2csXG5cbiAgICAvLyBzcGVjaWFsIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgZ2V0L3NldCB2aWEgbWV0aG9kIGNhbGxzXG4gICAgbWV0aG9kQXR0cmlidXRlcyA9IFsndmFsJywgJ2NzcycsICdodG1sJywgJ3RleHQnLCAnZGF0YScsICd3aWR0aCcsICdoZWlnaHQnLCAnb2Zmc2V0J10sXG5cbiAgICBhZGphY2VuY3lPcGVyYXRvcnMgPSBbICdhZnRlcicsICdwcmVwZW5kJywgJ2JlZm9yZScsICdhcHBlbmQnIF0sXG4gICAgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpLFxuICAgIHRhYmxlUm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKSxcbiAgICBjb250YWluZXJzID0ge1xuICAgICAgJ3RyJzogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGJvZHknKSxcbiAgICAgICd0Ym9keSc6IHRhYmxlLCAndGhlYWQnOiB0YWJsZSwgJ3Rmb290JzogdGFibGUsXG4gICAgICAndGQnOiB0YWJsZVJvdywgJ3RoJzogdGFibGVSb3csXG4gICAgICAnKic6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfSxcbiAgICByZWFkeVJFID0gL2NvbXBsZXRlfGxvYWRlZHxpbnRlcmFjdGl2ZS8sXG4gICAgc2ltcGxlU2VsZWN0b3JSRSA9IC9eW1xcdy1dKiQvLFxuICAgIGNsYXNzMnR5cGUgPSB7fSxcbiAgICB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmcsXG4gICAgemVwdG8gPSB7fSxcbiAgICBjYW1lbGl6ZSwgdW5pcSxcbiAgICB0ZW1wUGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgcHJvcE1hcCA9IHtcbiAgICAgICd0YWJpbmRleCc6ICd0YWJJbmRleCcsXG4gICAgICAncmVhZG9ubHknOiAncmVhZE9ubHknLFxuICAgICAgJ2Zvcic6ICdodG1sRm9yJyxcbiAgICAgICdjbGFzcyc6ICdjbGFzc05hbWUnLFxuICAgICAgJ21heGxlbmd0aCc6ICdtYXhMZW5ndGgnLFxuICAgICAgJ2NlbGxzcGFjaW5nJzogJ2NlbGxTcGFjaW5nJyxcbiAgICAgICdjZWxscGFkZGluZyc6ICdjZWxsUGFkZGluZycsXG4gICAgICAncm93c3Bhbic6ICdyb3dTcGFuJyxcbiAgICAgICdjb2xzcGFuJzogJ2NvbFNwYW4nLFxuICAgICAgJ3VzZW1hcCc6ICd1c2VNYXAnLFxuICAgICAgJ2ZyYW1lYm9yZGVyJzogJ2ZyYW1lQm9yZGVyJyxcbiAgICAgICdjb250ZW50ZWRpdGFibGUnOiAnY29udGVudEVkaXRhYmxlJ1xuICAgIH0sXG4gICAgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHxcbiAgICAgIGZ1bmN0aW9uKG9iamVjdCl7IHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiBBcnJheSB9XG5cbiAgemVwdG8ubWF0Y2hlcyA9IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgaWYgKCFzZWxlY3RvciB8fCAhZWxlbWVudCB8fCBlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSByZXR1cm4gZmFsc2VcbiAgICB2YXIgbWF0Y2hlc1NlbGVjdG9yID0gZWxlbWVudC53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZWxlbWVudC5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5vTWF0Y2hlc1NlbGVjdG9yIHx8IGVsZW1lbnQubWF0Y2hlc1NlbGVjdG9yXG4gICAgaWYgKG1hdGNoZXNTZWxlY3RvcikgcmV0dXJuIG1hdGNoZXNTZWxlY3Rvci5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKVxuICAgIC8vIGZhbGwgYmFjayB0byBwZXJmb3JtaW5nIGEgc2VsZWN0b3I6XG4gICAgdmFyIG1hdGNoLCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGUsIHRlbXAgPSAhcGFyZW50XG4gICAgaWYgKHRlbXApIChwYXJlbnQgPSB0ZW1wUGFyZW50KS5hcHBlbmRDaGlsZChlbGVtZW50KVxuICAgIG1hdGNoID0gfnplcHRvLnFzYShwYXJlbnQsIHNlbGVjdG9yKS5pbmRleE9mKGVsZW1lbnQpXG4gICAgdGVtcCAmJiB0ZW1wUGFyZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpXG4gICAgcmV0dXJuIG1hdGNoXG4gIH1cblxuICBmdW5jdGlvbiB0eXBlKG9iaikge1xuICAgIHJldHVybiBvYmogPT0gbnVsbCA/IFN0cmluZyhvYmopIDpcbiAgICAgIGNsYXNzMnR5cGVbdG9TdHJpbmcuY2FsbChvYmopXSB8fCBcIm9iamVjdFwiXG4gIH1cblxuICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB0eXBlKHZhbHVlKSA9PSBcImZ1bmN0aW9uXCIgfVxuICBmdW5jdGlvbiBpc1dpbmRvdyhvYmopICAgICB7IHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT0gb2JqLndpbmRvdyB9XG4gIGZ1bmN0aW9uIGlzRG9jdW1lbnQob2JqKSAgIHsgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iai5ub2RlVHlwZSA9PSBvYmouRE9DVU1FTlRfTk9ERSB9XG4gIGZ1bmN0aW9uIGlzT2JqZWN0KG9iaikgICAgIHsgcmV0dXJuIHR5cGUob2JqKSA9PSBcIm9iamVjdFwiIH1cbiAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiAhaXNXaW5kb3cob2JqKSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PSBPYmplY3QucHJvdG90eXBlXG4gIH1cbiAgZnVuY3Rpb24gbGlrZUFycmF5KG9iaikgeyByZXR1cm4gdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcicgfVxuXG4gIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHsgcmV0dXJuIGZpbHRlci5jYWxsKGFycmF5LCBmdW5jdGlvbihpdGVtKXsgcmV0dXJuIGl0ZW0gIT0gbnVsbCB9KSB9XG4gIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHsgcmV0dXJuIGFycmF5Lmxlbmd0aCA+IDAgPyAkLmZuLmNvbmNhdC5hcHBseShbXSwgYXJyYXkpIDogYXJyYXkgfVxuICBjYW1lbGl6ZSA9IGZ1bmN0aW9uKHN0cil7IHJldHVybiBzdHIucmVwbGFjZSgvLSsoLik/L2csIGZ1bmN0aW9uKG1hdGNoLCBjaHIpeyByZXR1cm4gY2hyID8gY2hyLnRvVXBwZXJDYXNlKCkgOiAnJyB9KSB9XG4gIGZ1bmN0aW9uIGRhc2hlcml6ZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLzo6L2csICcvJylcbiAgICAgICAgICAgLnJlcGxhY2UoLyhbQS1aXSspKFtBLVpdW2Etel0pL2csICckMV8kMicpXG4gICAgICAgICAgIC5yZXBsYWNlKC8oW2EtelxcZF0pKFtBLVpdKS9nLCAnJDFfJDInKVxuICAgICAgICAgICAucmVwbGFjZSgvXy9nLCAnLScpXG4gICAgICAgICAgIC50b0xvd2VyQ2FzZSgpXG4gIH1cbiAgdW5pcSA9IGZ1bmN0aW9uKGFycmF5KXsgcmV0dXJuIGZpbHRlci5jYWxsKGFycmF5LCBmdW5jdGlvbihpdGVtLCBpZHgpeyByZXR1cm4gYXJyYXkuaW5kZXhPZihpdGVtKSA9PSBpZHggfSkgfVxuXG4gIGZ1bmN0aW9uIGNsYXNzUkUobmFtZSkge1xuICAgIHJldHVybiBuYW1lIGluIGNsYXNzQ2FjaGUgP1xuICAgICAgY2xhc3NDYWNoZVtuYW1lXSA6IChjbGFzc0NhY2hlW25hbWVdID0gbmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIG5hbWUgKyAnKFxcXFxzfCQpJykpXG4gIH1cblxuICBmdW5jdGlvbiBtYXliZUFkZFB4KG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgdmFsdWUgPT0gXCJudW1iZXJcIiAmJiAhY3NzTnVtYmVyW2Rhc2hlcml6ZShuYW1lKV0pID8gdmFsdWUgKyBcInB4XCIgOiB2YWx1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdERpc3BsYXkobm9kZU5hbWUpIHtcbiAgICB2YXIgZWxlbWVudCwgZGlzcGxheVxuICAgIGlmICghZWxlbWVudERpc3BsYXlbbm9kZU5hbWVdKSB7XG4gICAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChub2RlTmFtZSlcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudClcbiAgICAgIGRpc3BsYXkgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsICcnKS5nZXRQcm9wZXJ0eVZhbHVlKFwiZGlzcGxheVwiKVxuICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpXG4gICAgICBkaXNwbGF5ID09IFwibm9uZVwiICYmIChkaXNwbGF5ID0gXCJibG9ja1wiKVxuICAgICAgZWxlbWVudERpc3BsYXlbbm9kZU5hbWVdID0gZGlzcGxheVxuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudERpc3BsYXlbbm9kZU5hbWVdXG4gIH1cblxuICBmdW5jdGlvbiBjaGlsZHJlbihlbGVtZW50KSB7XG4gICAgcmV0dXJuICdjaGlsZHJlbicgaW4gZWxlbWVudCA/XG4gICAgICBzbGljZS5jYWxsKGVsZW1lbnQuY2hpbGRyZW4pIDpcbiAgICAgICQubWFwKGVsZW1lbnQuY2hpbGROb2RlcywgZnVuY3Rpb24obm9kZSl7IGlmIChub2RlLm5vZGVUeXBlID09IDEpIHJldHVybiBub2RlIH0pXG4gIH1cblxuICBmdW5jdGlvbiBaKGRvbSwgc2VsZWN0b3IpIHtcbiAgICB2YXIgaSwgbGVuID0gZG9tID8gZG9tLmxlbmd0aCA6IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHRoaXNbaV0gPSBkb21baV1cbiAgICB0aGlzLmxlbmd0aCA9IGxlblxuICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvciB8fCAnJ1xuICB9XG5cbiAgLy8gYCQuemVwdG8uZnJhZ21lbnRgIHRha2VzIGEgaHRtbCBzdHJpbmcgYW5kIGFuIG9wdGlvbmFsIHRhZyBuYW1lXG4gIC8vIHRvIGdlbmVyYXRlIERPTSBub2RlcyBub2RlcyBmcm9tIHRoZSBnaXZlbiBodG1sIHN0cmluZy5cbiAgLy8gVGhlIGdlbmVyYXRlZCBET00gbm9kZXMgYXJlIHJldHVybmVkIGFzIGFuIGFycmF5LlxuICAvLyBUaGlzIGZ1bmN0aW9uIGNhbiBiZSBvdmVycmlkZW4gaW4gcGx1Z2lucyBmb3IgZXhhbXBsZSB0byBtYWtlXG4gIC8vIGl0IGNvbXBhdGlibGUgd2l0aCBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgdGhlIERPTSBmdWxseS5cbiAgemVwdG8uZnJhZ21lbnQgPSBmdW5jdGlvbihodG1sLCBuYW1lLCBwcm9wZXJ0aWVzKSB7XG4gICAgdmFyIGRvbSwgbm9kZXMsIGNvbnRhaW5lclxuXG4gICAgLy8gQSBzcGVjaWFsIGNhc2Ugb3B0aW1pemF0aW9uIGZvciBhIHNpbmdsZSB0YWdcbiAgICBpZiAoc2luZ2xlVGFnUkUudGVzdChodG1sKSkgZG9tID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFJlZ0V4cC4kMSkpXG5cbiAgICBpZiAoIWRvbSkge1xuICAgICAgaWYgKGh0bWwucmVwbGFjZSkgaHRtbCA9IGh0bWwucmVwbGFjZSh0YWdFeHBhbmRlclJFLCBcIjwkMT48LyQyPlwiKVxuICAgICAgaWYgKG5hbWUgPT09IHVuZGVmaW5lZCkgbmFtZSA9IGZyYWdtZW50UkUudGVzdChodG1sKSAmJiBSZWdFeHAuJDFcbiAgICAgIGlmICghKG5hbWUgaW4gY29udGFpbmVycykpIG5hbWUgPSAnKidcblxuICAgICAgY29udGFpbmVyID0gY29udGFpbmVyc1tuYW1lXVxuICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnICsgaHRtbFxuICAgICAgZG9tID0gJC5lYWNoKHNsaWNlLmNhbGwoY29udGFpbmVyLmNoaWxkTm9kZXMpLCBmdW5jdGlvbigpe1xuICAgICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcylcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKGlzUGxhaW5PYmplY3QocHJvcGVydGllcykpIHtcbiAgICAgIG5vZGVzID0gJChkb20pXG4gICAgICAkLmVhY2gocHJvcGVydGllcywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAobWV0aG9kQXR0cmlidXRlcy5pbmRleE9mKGtleSkgPiAtMSkgbm9kZXNba2V5XSh2YWx1ZSlcbiAgICAgICAgZWxzZSBub2Rlcy5hdHRyKGtleSwgdmFsdWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiBkb21cbiAgfVxuXG4gIC8vIGAkLnplcHRvLlpgIHN3YXBzIG91dCB0aGUgcHJvdG90eXBlIG9mIHRoZSBnaXZlbiBgZG9tYCBhcnJheVxuICAvLyBvZiBub2RlcyB3aXRoIGAkLmZuYCBhbmQgdGh1cyBzdXBwbHlpbmcgYWxsIHRoZSBaZXB0byBmdW5jdGlvbnNcbiAgLy8gdG8gdGhlIGFycmF5LiBUaGlzIG1ldGhvZCBjYW4gYmUgb3ZlcnJpZGVuIGluIHBsdWdpbnMuXG4gIHplcHRvLlogPSBmdW5jdGlvbihkb20sIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIG5ldyBaKGRvbSwgc2VsZWN0b3IpXG4gIH1cblxuICAvLyBgJC56ZXB0by5pc1pgIHNob3VsZCByZXR1cm4gYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaXMgYSBaZXB0b1xuICAvLyBjb2xsZWN0aW9uLiBUaGlzIG1ldGhvZCBjYW4gYmUgb3ZlcnJpZGVuIGluIHBsdWdpbnMuXG4gIHplcHRvLmlzWiA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiB6ZXB0by5aXG4gIH1cblxuICAvLyBgJC56ZXB0by5pbml0YCBpcyBaZXB0bydzIGNvdW50ZXJwYXJ0IHRvIGpRdWVyeSdzIGAkLmZuLmluaXRgIGFuZFxuICAvLyB0YWtlcyBhIENTUyBzZWxlY3RvciBhbmQgYW4gb3B0aW9uYWwgY29udGV4dCAoYW5kIGhhbmRsZXMgdmFyaW91c1xuICAvLyBzcGVjaWFsIGNhc2VzKS5cbiAgLy8gVGhpcyBtZXRob2QgY2FuIGJlIG92ZXJyaWRlbiBpbiBwbHVnaW5zLlxuICB6ZXB0by5pbml0ID0gZnVuY3Rpb24oc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICB2YXIgZG9tXG4gICAgLy8gSWYgbm90aGluZyBnaXZlbiwgcmV0dXJuIGFuIGVtcHR5IFplcHRvIGNvbGxlY3Rpb25cbiAgICBpZiAoIXNlbGVjdG9yKSByZXR1cm4gemVwdG8uWigpXG4gICAgLy8gT3B0aW1pemUgZm9yIHN0cmluZyBzZWxlY3RvcnNcbiAgICBlbHNlIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT0gJ3N0cmluZycpIHtcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IudHJpbSgpXG4gICAgICAvLyBJZiBpdCdzIGEgaHRtbCBmcmFnbWVudCwgY3JlYXRlIG5vZGVzIGZyb20gaXRcbiAgICAgIC8vIE5vdGU6IEluIGJvdGggQ2hyb21lIDIxIGFuZCBGaXJlZm94IDE1LCBET00gZXJyb3IgMTJcbiAgICAgIC8vIGlzIHRocm93biBpZiB0aGUgZnJhZ21lbnQgZG9lc24ndCBiZWdpbiB3aXRoIDxcbiAgICAgIGlmIChzZWxlY3RvclswXSA9PSAnPCcgJiYgZnJhZ21lbnRSRS50ZXN0KHNlbGVjdG9yKSlcbiAgICAgICAgZG9tID0gemVwdG8uZnJhZ21lbnQoc2VsZWN0b3IsIFJlZ0V4cC4kMSwgY29udGV4dCksIHNlbGVjdG9yID0gbnVsbFxuICAgICAgLy8gSWYgdGhlcmUncyBhIGNvbnRleHQsIGNyZWF0ZSBhIGNvbGxlY3Rpb24gb24gdGhhdCBjb250ZXh0IGZpcnN0LCBhbmQgc2VsZWN0XG4gICAgICAvLyBub2RlcyBmcm9tIHRoZXJlXG4gICAgICBlbHNlIGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQpIHJldHVybiAkKGNvbnRleHQpLmZpbmQoc2VsZWN0b3IpXG4gICAgICAvLyBJZiBpdCdzIGEgQ1NTIHNlbGVjdG9yLCB1c2UgaXQgdG8gc2VsZWN0IG5vZGVzLlxuICAgICAgZWxzZSBkb20gPSB6ZXB0by5xc2EoZG9jdW1lbnQsIHNlbGVjdG9yKVxuICAgIH1cbiAgICAvLyBJZiBhIGZ1bmN0aW9uIGlzIGdpdmVuLCBjYWxsIGl0IHdoZW4gdGhlIERPTSBpcyByZWFkeVxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oc2VsZWN0b3IpKSByZXR1cm4gJChkb2N1bWVudCkucmVhZHkoc2VsZWN0b3IpXG4gICAgLy8gSWYgYSBaZXB0byBjb2xsZWN0aW9uIGlzIGdpdmVuLCBqdXN0IHJldHVybiBpdFxuICAgIGVsc2UgaWYgKHplcHRvLmlzWihzZWxlY3RvcikpIHJldHVybiBzZWxlY3RvclxuICAgIGVsc2Uge1xuICAgICAgLy8gbm9ybWFsaXplIGFycmF5IGlmIGFuIGFycmF5IG9mIG5vZGVzIGlzIGdpdmVuXG4gICAgICBpZiAoaXNBcnJheShzZWxlY3RvcikpIGRvbSA9IGNvbXBhY3Qoc2VsZWN0b3IpXG4gICAgICAvLyBXcmFwIERPTSBub2Rlcy5cbiAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNlbGVjdG9yKSlcbiAgICAgICAgZG9tID0gW3NlbGVjdG9yXSwgc2VsZWN0b3IgPSBudWxsXG4gICAgICAvLyBJZiBpdCdzIGEgaHRtbCBmcmFnbWVudCwgY3JlYXRlIG5vZGVzIGZyb20gaXRcbiAgICAgIGVsc2UgaWYgKGZyYWdtZW50UkUudGVzdChzZWxlY3RvcikpXG4gICAgICAgIGRvbSA9IHplcHRvLmZyYWdtZW50KHNlbGVjdG9yLnRyaW0oKSwgUmVnRXhwLiQxLCBjb250ZXh0KSwgc2VsZWN0b3IgPSBudWxsXG4gICAgICAvLyBJZiB0aGVyZSdzIGEgY29udGV4dCwgY3JlYXRlIGEgY29sbGVjdGlvbiBvbiB0aGF0IGNvbnRleHQgZmlyc3QsIGFuZCBzZWxlY3RcbiAgICAgIC8vIG5vZGVzIGZyb20gdGhlcmVcbiAgICAgIGVsc2UgaWYgKGNvbnRleHQgIT09IHVuZGVmaW5lZCkgcmV0dXJuICQoY29udGV4dCkuZmluZChzZWxlY3RvcilcbiAgICAgIC8vIEFuZCBsYXN0IGJ1dCBubyBsZWFzdCwgaWYgaXQncyBhIENTUyBzZWxlY3RvciwgdXNlIGl0IHRvIHNlbGVjdCBub2Rlcy5cbiAgICAgIGVsc2UgZG9tID0gemVwdG8ucXNhKGRvY3VtZW50LCBzZWxlY3RvcilcbiAgICB9XG4gICAgLy8gY3JlYXRlIGEgbmV3IFplcHRvIGNvbGxlY3Rpb24gZnJvbSB0aGUgbm9kZXMgZm91bmRcbiAgICByZXR1cm4gemVwdG8uWihkb20sIHNlbGVjdG9yKVxuICB9XG5cbiAgLy8gYCRgIHdpbGwgYmUgdGhlIGJhc2UgYFplcHRvYCBvYmplY3QuIFdoZW4gY2FsbGluZyB0aGlzXG4gIC8vIGZ1bmN0aW9uIGp1c3QgY2FsbCBgJC56ZXB0by5pbml0LCB3aGljaCBtYWtlcyB0aGUgaW1wbGVtZW50YXRpb25cbiAgLy8gZGV0YWlscyBvZiBzZWxlY3Rpbmcgbm9kZXMgYW5kIGNyZWF0aW5nIFplcHRvIGNvbGxlY3Rpb25zXG4gIC8vIHBhdGNoYWJsZSBpbiBwbHVnaW5zLlxuICAkID0gZnVuY3Rpb24oc2VsZWN0b3IsIGNvbnRleHQpe1xuICAgIHJldHVybiB6ZXB0by5pbml0KHNlbGVjdG9yLCBjb250ZXh0KVxuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc291cmNlLCBkZWVwKSB7XG4gICAgZm9yIChrZXkgaW4gc291cmNlKVxuICAgICAgaWYgKGRlZXAgJiYgKGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pIHx8IGlzQXJyYXkoc291cmNlW2tleV0pKSkge1xuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgJiYgIWlzUGxhaW5PYmplY3QodGFyZ2V0W2tleV0pKVxuICAgICAgICAgIHRhcmdldFtrZXldID0ge31cbiAgICAgICAgaWYgKGlzQXJyYXkoc291cmNlW2tleV0pICYmICFpc0FycmF5KHRhcmdldFtrZXldKSlcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IFtdXG4gICAgICAgIGV4dGVuZCh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIGRlZXApXG4gICAgICB9XG4gICAgICBlbHNlIGlmIChzb3VyY2Vba2V5XSAhPT0gdW5kZWZpbmVkKSB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldXG4gIH1cblxuICAvLyBDb3B5IGFsbCBidXQgdW5kZWZpbmVkIHByb3BlcnRpZXMgZnJvbSBvbmUgb3IgbW9yZVxuICAvLyBvYmplY3RzIHRvIHRoZSBgdGFyZ2V0YCBvYmplY3QuXG4gICQuZXh0ZW5kID0gZnVuY3Rpb24odGFyZ2V0KXtcbiAgICB2YXIgZGVlcCwgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxuICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09ICdib29sZWFuJykge1xuICAgICAgZGVlcCA9IHRhcmdldFxuICAgICAgdGFyZ2V0ID0gYXJncy5zaGlmdCgpXG4gICAgfVxuICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbihhcmcpeyBleHRlbmQodGFyZ2V0LCBhcmcsIGRlZXApIH0pXG4gICAgcmV0dXJuIHRhcmdldFxuICB9XG5cbiAgLy8gYCQuemVwdG8ucXNhYCBpcyBaZXB0bydzIENTUyBzZWxlY3RvciBpbXBsZW1lbnRhdGlvbiB3aGljaFxuICAvLyB1c2VzIGBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsYCBhbmQgb3B0aW1pemVzIGZvciBzb21lIHNwZWNpYWwgY2FzZXMsIGxpa2UgYCNpZGAuXG4gIC8vIFRoaXMgbWV0aG9kIGNhbiBiZSBvdmVycmlkZW4gaW4gcGx1Z2lucy5cbiAgemVwdG8ucXNhID0gZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3Ipe1xuICAgIHZhciBmb3VuZCxcbiAgICAgICAgbWF5YmVJRCA9IHNlbGVjdG9yWzBdID09ICcjJyxcbiAgICAgICAgbWF5YmVDbGFzcyA9ICFtYXliZUlEICYmIHNlbGVjdG9yWzBdID09ICcuJyxcbiAgICAgICAgbmFtZU9ubHkgPSBtYXliZUlEIHx8IG1heWJlQ2xhc3MgPyBzZWxlY3Rvci5zbGljZSgxKSA6IHNlbGVjdG9yLCAvLyBFbnN1cmUgdGhhdCBhIDEgY2hhciB0YWcgbmFtZSBzdGlsbCBnZXRzIGNoZWNrZWRcbiAgICAgICAgaXNTaW1wbGUgPSBzaW1wbGVTZWxlY3RvclJFLnRlc3QobmFtZU9ubHkpXG4gICAgcmV0dXJuIChlbGVtZW50LmdldEVsZW1lbnRCeUlkICYmIGlzU2ltcGxlICYmIG1heWJlSUQpID8gLy8gU2FmYXJpIERvY3VtZW50RnJhZ21lbnQgZG9lc24ndCBoYXZlIGdldEVsZW1lbnRCeUlkXG4gICAgICAoIChmb3VuZCA9IGVsZW1lbnQuZ2V0RWxlbWVudEJ5SWQobmFtZU9ubHkpKSA/IFtmb3VuZF0gOiBbXSApIDpcbiAgICAgIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxICYmIGVsZW1lbnQubm9kZVR5cGUgIT09IDkgJiYgZWxlbWVudC5ub2RlVHlwZSAhPT0gMTEpID8gW10gOlxuICAgICAgc2xpY2UuY2FsbChcbiAgICAgICAgaXNTaW1wbGUgJiYgIW1heWJlSUQgJiYgZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID8gLy8gRG9jdW1lbnRGcmFnbWVudCBkb2Vzbid0IGhhdmUgZ2V0RWxlbWVudHNCeUNsYXNzTmFtZS9UYWdOYW1lXG4gICAgICAgICAgbWF5YmVDbGFzcyA/IGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShuYW1lT25seSkgOiAvLyBJZiBpdCdzIHNpbXBsZSwgaXQgY291bGQgYmUgYSBjbGFzc1xuICAgICAgICAgIGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoc2VsZWN0b3IpIDogLy8gT3IgYSB0YWdcbiAgICAgICAgICBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpIC8vIE9yIGl0J3Mgbm90IHNpbXBsZSwgYW5kIHdlIG5lZWQgdG8gcXVlcnkgYWxsXG4gICAgICApXG4gIH1cblxuICBmdW5jdGlvbiBmaWx0ZXJlZChub2Rlcywgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/ICQobm9kZXMpIDogJChub2RlcykuZmlsdGVyKHNlbGVjdG9yKVxuICB9XG5cbiAgJC5jb250YWlucyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyA/XG4gICAgZnVuY3Rpb24ocGFyZW50LCBub2RlKSB7XG4gICAgICByZXR1cm4gcGFyZW50ICE9PSBub2RlICYmIHBhcmVudC5jb250YWlucyhub2RlKVxuICAgIH0gOlxuICAgIGZ1bmN0aW9uKHBhcmVudCwgbm9kZSkge1xuICAgICAgd2hpbGUgKG5vZGUgJiYgKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKVxuICAgICAgICBpZiAobm9kZSA9PT0gcGFyZW50KSByZXR1cm4gdHJ1ZVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gIGZ1bmN0aW9uIGZ1bmNBcmcoY29udGV4dCwgYXJnLCBpZHgsIHBheWxvYWQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihhcmcpID8gYXJnLmNhbGwoY29udGV4dCwgaWR4LCBwYXlsb2FkKSA6IGFyZ1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0QXR0cmlidXRlKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFsdWUgPT0gbnVsbCA/IG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpIDogbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpXG4gIH1cblxuICAvLyBhY2Nlc3MgY2xhc3NOYW1lIHByb3BlcnR5IHdoaWxlIHJlc3BlY3RpbmcgU1ZHQW5pbWF0ZWRTdHJpbmdcbiAgZnVuY3Rpb24gY2xhc3NOYW1lKG5vZGUsIHZhbHVlKXtcbiAgICB2YXIga2xhc3MgPSBub2RlLmNsYXNzTmFtZSB8fCAnJyxcbiAgICAgICAgc3ZnICAgPSBrbGFzcyAmJiBrbGFzcy5iYXNlVmFsICE9PSB1bmRlZmluZWRcblxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gc3ZnID8ga2xhc3MuYmFzZVZhbCA6IGtsYXNzXG4gICAgc3ZnID8gKGtsYXNzLmJhc2VWYWwgPSB2YWx1ZSkgOiAobm9kZS5jbGFzc05hbWUgPSB2YWx1ZSlcbiAgfVxuXG4gIC8vIFwidHJ1ZVwiICA9PiB0cnVlXG4gIC8vIFwiZmFsc2VcIiA9PiBmYWxzZVxuICAvLyBcIm51bGxcIiAgPT4gbnVsbFxuICAvLyBcIjQyXCIgICAgPT4gNDJcbiAgLy8gXCI0Mi41XCIgID0+IDQyLjVcbiAgLy8gXCIwOFwiICAgID0+IFwiMDhcIlxuICAvLyBKU09OICAgID0+IHBhcnNlIGlmIHZhbGlkXG4gIC8vIFN0cmluZyAgPT4gc2VsZlxuICBmdW5jdGlvbiBkZXNlcmlhbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB2YWx1ZSA/XG4gICAgICAgIHZhbHVlID09IFwidHJ1ZVwiIHx8XG4gICAgICAgICggdmFsdWUgPT0gXCJmYWxzZVwiID8gZmFsc2UgOlxuICAgICAgICAgIHZhbHVlID09IFwibnVsbFwiID8gbnVsbCA6XG4gICAgICAgICAgK3ZhbHVlICsgXCJcIiA9PSB2YWx1ZSA/ICt2YWx1ZSA6XG4gICAgICAgICAgL15bXFxbXFx7XS8udGVzdCh2YWx1ZSkgPyAkLnBhcnNlSlNPTih2YWx1ZSkgOlxuICAgICAgICAgIHZhbHVlIClcbiAgICAgICAgOiB2YWx1ZVxuICAgIH0gY2F0Y2goZSkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuICB9XG5cbiAgJC50eXBlID0gdHlwZVxuICAkLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uXG4gICQuaXNXaW5kb3cgPSBpc1dpbmRvd1xuICAkLmlzQXJyYXkgPSBpc0FycmF5XG4gICQuaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3RcblxuICAkLmlzRW1wdHlPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgbmFtZVxuICAgIGZvciAobmFtZSBpbiBvYmopIHJldHVybiBmYWxzZVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAkLmluQXJyYXkgPSBmdW5jdGlvbihlbGVtLCBhcnJheSwgaSl7XG4gICAgcmV0dXJuIGVtcHR5QXJyYXkuaW5kZXhPZi5jYWxsKGFycmF5LCBlbGVtLCBpKVxuICB9XG5cbiAgJC5jYW1lbENhc2UgPSBjYW1lbGl6ZVxuICAkLnRyaW0gPSBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gc3RyID09IG51bGwgPyBcIlwiIDogU3RyaW5nLnByb3RvdHlwZS50cmltLmNhbGwoc3RyKVxuICB9XG5cbiAgLy8gcGx1Z2luIGNvbXBhdGliaWxpdHlcbiAgJC51dWlkID0gMFxuICAkLnN1cHBvcnQgPSB7IH1cbiAgJC5leHByID0geyB9XG4gICQubm9vcCA9IGZ1bmN0aW9uKCkge31cblxuICAkLm1hcCA9IGZ1bmN0aW9uKGVsZW1lbnRzLCBjYWxsYmFjayl7XG4gICAgdmFyIHZhbHVlLCB2YWx1ZXMgPSBbXSwgaSwga2V5XG4gICAgaWYgKGxpa2VBcnJheShlbGVtZW50cykpXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBjYWxsYmFjayhlbGVtZW50c1tpXSwgaSlcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHZhbHVlcy5wdXNoKHZhbHVlKVxuICAgICAgfVxuICAgIGVsc2VcbiAgICAgIGZvciAoa2V5IGluIGVsZW1lbnRzKSB7XG4gICAgICAgIHZhbHVlID0gY2FsbGJhY2soZWxlbWVudHNba2V5XSwga2V5KVxuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkgdmFsdWVzLnB1c2godmFsdWUpXG4gICAgICB9XG4gICAgcmV0dXJuIGZsYXR0ZW4odmFsdWVzKVxuICB9XG5cbiAgJC5lYWNoID0gZnVuY3Rpb24oZWxlbWVudHMsIGNhbGxiYWNrKXtcbiAgICB2YXIgaSwga2V5XG4gICAgaWYgKGxpa2VBcnJheShlbGVtZW50cykpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwoZWxlbWVudHNbaV0sIGksIGVsZW1lbnRzW2ldKSA9PT0gZmFsc2UpIHJldHVybiBlbGVtZW50c1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGtleSBpbiBlbGVtZW50cylcbiAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwoZWxlbWVudHNba2V5XSwga2V5LCBlbGVtZW50c1trZXldKSA9PT0gZmFsc2UpIHJldHVybiBlbGVtZW50c1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50c1xuICB9XG5cbiAgJC5ncmVwID0gZnVuY3Rpb24oZWxlbWVudHMsIGNhbGxiYWNrKXtcbiAgICByZXR1cm4gZmlsdGVyLmNhbGwoZWxlbWVudHMsIGNhbGxiYWNrKVxuICB9XG5cbiAgaWYgKHdpbmRvdy5KU09OKSAkLnBhcnNlSlNPTiA9IEpTT04ucGFyc2VcblxuICAvLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbiAgJC5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvclwiLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24oaSwgbmFtZSkge1xuICAgIGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpXG4gIH0pXG5cbiAgLy8gRGVmaW5lIG1ldGhvZHMgdGhhdCB3aWxsIGJlIGF2YWlsYWJsZSBvbiBhbGxcbiAgLy8gWmVwdG8gY29sbGVjdGlvbnNcbiAgJC5mbiA9IHtcbiAgICBjb25zdHJ1Y3RvcjogemVwdG8uWixcbiAgICBsZW5ndGg6IDAsXG5cbiAgICAvLyBCZWNhdXNlIGEgY29sbGVjdGlvbiBhY3RzIGxpa2UgYW4gYXJyYXlcbiAgICAvLyBjb3B5IG92ZXIgdGhlc2UgdXNlZnVsIGFycmF5IGZ1bmN0aW9ucy5cbiAgICBmb3JFYWNoOiBlbXB0eUFycmF5LmZvckVhY2gsXG4gICAgcmVkdWNlOiBlbXB0eUFycmF5LnJlZHVjZSxcbiAgICBwdXNoOiBlbXB0eUFycmF5LnB1c2gsXG4gICAgc29ydDogZW1wdHlBcnJheS5zb3J0LFxuICAgIHNwbGljZTogZW1wdHlBcnJheS5zcGxpY2UsXG4gICAgaW5kZXhPZjogZW1wdHlBcnJheS5pbmRleE9mLFxuICAgIGNvbmNhdDogZnVuY3Rpb24oKXtcbiAgICAgIHZhciBpLCB2YWx1ZSwgYXJncyA9IFtdXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gYXJndW1lbnRzW2ldXG4gICAgICAgIGFyZ3NbaV0gPSB6ZXB0by5pc1oodmFsdWUpID8gdmFsdWUudG9BcnJheSgpIDogdmFsdWVcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb25jYXQuYXBwbHkoemVwdG8uaXNaKHRoaXMpID8gdGhpcy50b0FycmF5KCkgOiB0aGlzLCBhcmdzKVxuICAgIH0sXG5cbiAgICAvLyBgbWFwYCBhbmQgYHNsaWNlYCBpbiB0aGUgalF1ZXJ5IEFQSSB3b3JrIGRpZmZlcmVudGx5XG4gICAgLy8gZnJvbSB0aGVpciBhcnJheSBjb3VudGVycGFydHNcbiAgICBtYXA6IGZ1bmN0aW9uKGZuKXtcbiAgICAgIHJldHVybiAkKCQubWFwKHRoaXMsIGZ1bmN0aW9uKGVsLCBpKXsgcmV0dXJuIGZuLmNhbGwoZWwsIGksIGVsKSB9KSlcbiAgICB9LFxuICAgIHNsaWNlOiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuICQoc2xpY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKSlcbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKGNhbGxiYWNrKXtcbiAgICAgIC8vIG5lZWQgdG8gY2hlY2sgaWYgZG9jdW1lbnQuYm9keSBleGlzdHMgZm9yIElFIGFzIHRoYXQgYnJvd3NlciByZXBvcnRzXG4gICAgICAvLyBkb2N1bWVudCByZWFkeSB3aGVuIGl0IGhhc24ndCB5ZXQgY3JlYXRlZCB0aGUgYm9keSBlbGVtZW50XG4gICAgICBpZiAocmVhZHlSRS50ZXN0KGRvY3VtZW50LnJlYWR5U3RhdGUpICYmIGRvY3VtZW50LmJvZHkpIGNhbGxiYWNrKCQpXG4gICAgICBlbHNlIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpeyBjYWxsYmFjaygkKSB9LCBmYWxzZSlcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uKGlkeCl7XG4gICAgICByZXR1cm4gaWR4ID09PSB1bmRlZmluZWQgPyBzbGljZS5jYWxsKHRoaXMpIDogdGhpc1tpZHggPj0gMCA/IGlkeCA6IGlkeCArIHRoaXMubGVuZ3RoXVxuICAgIH0sXG4gICAgdG9BcnJheTogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMuZ2V0KCkgfSxcbiAgICBzaXplOiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoXG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudE5vZGUgIT0gbnVsbClcbiAgICAgICAgICB0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcylcbiAgICAgIH0pXG4gICAgfSxcbiAgICBlYWNoOiBmdW5jdGlvbihjYWxsYmFjayl7XG4gICAgICBlbXB0eUFycmF5LmV2ZXJ5LmNhbGwodGhpcywgZnVuY3Rpb24oZWwsIGlkeCl7XG4gICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKGVsLCBpZHgsIGVsKSAhPT0gZmFsc2VcbiAgICAgIH0pXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbihzZWxlY3Rvcil7XG4gICAgICBpZiAoaXNGdW5jdGlvbihzZWxlY3RvcikpIHJldHVybiB0aGlzLm5vdCh0aGlzLm5vdChzZWxlY3RvcikpXG4gICAgICByZXR1cm4gJChmaWx0ZXIuY2FsbCh0aGlzLCBmdW5jdGlvbihlbGVtZW50KXtcbiAgICAgICAgcmV0dXJuIHplcHRvLm1hdGNoZXMoZWxlbWVudCwgc2VsZWN0b3IpXG4gICAgICB9KSlcbiAgICB9LFxuICAgIGFkZDogZnVuY3Rpb24oc2VsZWN0b3IsY29udGV4dCl7XG4gICAgICByZXR1cm4gJCh1bmlxKHRoaXMuY29uY2F0KCQoc2VsZWN0b3IsY29udGV4dCkpKSlcbiAgICB9LFxuICAgIGlzOiBmdW5jdGlvbihzZWxlY3Rvcil7XG4gICAgICByZXR1cm4gdGhpcy5sZW5ndGggPiAwICYmIHplcHRvLm1hdGNoZXModGhpc1swXSwgc2VsZWN0b3IpXG4gICAgfSxcbiAgICBub3Q6IGZ1bmN0aW9uKHNlbGVjdG9yKXtcbiAgICAgIHZhciBub2Rlcz1bXVxuICAgICAgaWYgKGlzRnVuY3Rpb24oc2VsZWN0b3IpICYmIHNlbGVjdG9yLmNhbGwgIT09IHVuZGVmaW5lZClcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgICAgaWYgKCFzZWxlY3Rvci5jYWxsKHRoaXMsaWR4KSkgbm9kZXMucHVzaCh0aGlzKVxuICAgICAgICB9KVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBleGNsdWRlcyA9IHR5cGVvZiBzZWxlY3RvciA9PSAnc3RyaW5nJyA/IHRoaXMuZmlsdGVyKHNlbGVjdG9yKSA6XG4gICAgICAgICAgKGxpa2VBcnJheShzZWxlY3RvcikgJiYgaXNGdW5jdGlvbihzZWxlY3Rvci5pdGVtKSkgPyBzbGljZS5jYWxsKHNlbGVjdG9yKSA6ICQoc2VsZWN0b3IpXG4gICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbihlbCl7XG4gICAgICAgICAgaWYgKGV4Y2x1ZGVzLmluZGV4T2YoZWwpIDwgMCkgbm9kZXMucHVzaChlbClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHJldHVybiAkKG5vZGVzKVxuICAgIH0sXG4gICAgaGFzOiBmdW5jdGlvbihzZWxlY3Rvcil7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHNlbGVjdG9yKSA/XG4gICAgICAgICAgJC5jb250YWlucyh0aGlzLCBzZWxlY3RvcikgOlxuICAgICAgICAgICQodGhpcykuZmluZChzZWxlY3Rvcikuc2l6ZSgpXG4gICAgICB9KVxuICAgIH0sXG4gICAgZXE6IGZ1bmN0aW9uKGlkeCl7XG4gICAgICByZXR1cm4gaWR4ID09PSAtMSA/IHRoaXMuc2xpY2UoaWR4KSA6IHRoaXMuc2xpY2UoaWR4LCArIGlkeCArIDEpXG4gICAgfSxcbiAgICBmaXJzdDogZnVuY3Rpb24oKXtcbiAgICAgIHZhciBlbCA9IHRoaXNbMF1cbiAgICAgIHJldHVybiBlbCAmJiAhaXNPYmplY3QoZWwpID8gZWwgOiAkKGVsKVxuICAgIH0sXG4gICAgbGFzdDogZnVuY3Rpb24oKXtcbiAgICAgIHZhciBlbCA9IHRoaXNbdGhpcy5sZW5ndGggLSAxXVxuICAgICAgcmV0dXJuIGVsICYmICFpc09iamVjdChlbCkgPyBlbCA6ICQoZWwpXG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbihzZWxlY3Rvcil7XG4gICAgICB2YXIgcmVzdWx0LCAkdGhpcyA9IHRoaXNcbiAgICAgIGlmICghc2VsZWN0b3IpIHJlc3VsdCA9ICQoKVxuICAgICAgZWxzZSBpZiAodHlwZW9mIHNlbGVjdG9yID09ICdvYmplY3QnKVxuICAgICAgICByZXN1bHQgPSAkKHNlbGVjdG9yKS5maWx0ZXIoZnVuY3Rpb24oKXtcbiAgICAgICAgICB2YXIgbm9kZSA9IHRoaXNcbiAgICAgICAgICByZXR1cm4gZW1wdHlBcnJheS5zb21lLmNhbGwoJHRoaXMsIGZ1bmN0aW9uKHBhcmVudCl7XG4gICAgICAgICAgICByZXR1cm4gJC5jb250YWlucyhwYXJlbnQsIG5vZGUpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIGVsc2UgaWYgKHRoaXMubGVuZ3RoID09IDEpIHJlc3VsdCA9ICQoemVwdG8ucXNhKHRoaXNbMF0sIHNlbGVjdG9yKSlcbiAgICAgIGVsc2UgcmVzdWx0ID0gdGhpcy5tYXAoZnVuY3Rpb24oKXsgcmV0dXJuIHplcHRvLnFzYSh0aGlzLCBzZWxlY3RvcikgfSlcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9LFxuICAgIGNsb3Nlc3Q6IGZ1bmN0aW9uKHNlbGVjdG9yLCBjb250ZXh0KXtcbiAgICAgIHZhciBub2RlID0gdGhpc1swXSwgY29sbGVjdGlvbiA9IGZhbHNlXG4gICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09ICdvYmplY3QnKSBjb2xsZWN0aW9uID0gJChzZWxlY3RvcilcbiAgICAgIHdoaWxlIChub2RlICYmICEoY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24uaW5kZXhPZihub2RlKSA+PSAwIDogemVwdG8ubWF0Y2hlcyhub2RlLCBzZWxlY3RvcikpKVxuICAgICAgICBub2RlID0gbm9kZSAhPT0gY29udGV4dCAmJiAhaXNEb2N1bWVudChub2RlKSAmJiBub2RlLnBhcmVudE5vZGVcbiAgICAgIHJldHVybiAkKG5vZGUpXG4gICAgfSxcbiAgICBwYXJlbnRzOiBmdW5jdGlvbihzZWxlY3Rvcil7XG4gICAgICB2YXIgYW5jZXN0b3JzID0gW10sIG5vZGVzID0gdGhpc1xuICAgICAgd2hpbGUgKG5vZGVzLmxlbmd0aCA+IDApXG4gICAgICAgIG5vZGVzID0gJC5tYXAobm9kZXMsIGZ1bmN0aW9uKG5vZGUpe1xuICAgICAgICAgIGlmICgobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkgJiYgIWlzRG9jdW1lbnQobm9kZSkgJiYgYW5jZXN0b3JzLmluZGV4T2Yobm9kZSkgPCAwKSB7XG4gICAgICAgICAgICBhbmNlc3RvcnMucHVzaChub2RlKVxuICAgICAgICAgICAgcmV0dXJuIG5vZGVcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICByZXR1cm4gZmlsdGVyZWQoYW5jZXN0b3JzLCBzZWxlY3RvcilcbiAgICB9LFxuICAgIHBhcmVudDogZnVuY3Rpb24oc2VsZWN0b3Ipe1xuICAgICAgcmV0dXJuIGZpbHRlcmVkKHVuaXEodGhpcy5wbHVjaygncGFyZW50Tm9kZScpKSwgc2VsZWN0b3IpXG4gICAgfSxcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24oc2VsZWN0b3Ipe1xuICAgICAgcmV0dXJuIGZpbHRlcmVkKHRoaXMubWFwKGZ1bmN0aW9uKCl7IHJldHVybiBjaGlsZHJlbih0aGlzKSB9KSwgc2VsZWN0b3IpXG4gICAgfSxcbiAgICBjb250ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmNvbnRlbnREb2N1bWVudCB8fCBzbGljZS5jYWxsKHRoaXMuY2hpbGROb2RlcykgfSlcbiAgICB9LFxuICAgIHNpYmxpbmdzOiBmdW5jdGlvbihzZWxlY3Rvcil7XG4gICAgICByZXR1cm4gZmlsdGVyZWQodGhpcy5tYXAoZnVuY3Rpb24oaSwgZWwpe1xuICAgICAgICByZXR1cm4gZmlsdGVyLmNhbGwoY2hpbGRyZW4oZWwucGFyZW50Tm9kZSksIGZ1bmN0aW9uKGNoaWxkKXsgcmV0dXJuIGNoaWxkIT09ZWwgfSlcbiAgICAgIH0pLCBzZWxlY3RvcilcbiAgICB9LFxuICAgIGVtcHR5OiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyB0aGlzLmlubmVySFRNTCA9ICcnIH0pXG4gICAgfSxcbiAgICAvLyBgcGx1Y2tgIGlzIGJvcnJvd2VkIGZyb20gUHJvdG90eXBlLmpzXG4gICAgcGx1Y2s6IGZ1bmN0aW9uKHByb3BlcnR5KXtcbiAgICAgIHJldHVybiAkLm1hcCh0aGlzLCBmdW5jdGlvbihlbCl7IHJldHVybiBlbFtwcm9wZXJ0eV0gfSlcbiAgICB9LFxuICAgIHNob3c6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9PSBcIm5vbmVcIiAmJiAodGhpcy5zdHlsZS5kaXNwbGF5ID0gJycpXG4gICAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKHRoaXMsICcnKS5nZXRQcm9wZXJ0eVZhbHVlKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIilcbiAgICAgICAgICB0aGlzLnN0eWxlLmRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheSh0aGlzLm5vZGVOYW1lKVxuICAgICAgfSlcbiAgICB9LFxuICAgIHJlcGxhY2VXaXRoOiBmdW5jdGlvbihuZXdDb250ZW50KXtcbiAgICAgIHJldHVybiB0aGlzLmJlZm9yZShuZXdDb250ZW50KS5yZW1vdmUoKVxuICAgIH0sXG4gICAgd3JhcDogZnVuY3Rpb24oc3RydWN0dXJlKXtcbiAgICAgIHZhciBmdW5jID0gaXNGdW5jdGlvbihzdHJ1Y3R1cmUpXG4gICAgICBpZiAodGhpc1swXSAmJiAhZnVuYylcbiAgICAgICAgdmFyIGRvbSAgID0gJChzdHJ1Y3R1cmUpLmdldCgwKSxcbiAgICAgICAgICAgIGNsb25lID0gZG9tLnBhcmVudE5vZGUgfHwgdGhpcy5sZW5ndGggPiAxXG5cbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaW5kZXgpe1xuICAgICAgICAkKHRoaXMpLndyYXBBbGwoXG4gICAgICAgICAgZnVuYyA/IHN0cnVjdHVyZS5jYWxsKHRoaXMsIGluZGV4KSA6XG4gICAgICAgICAgICBjbG9uZSA/IGRvbS5jbG9uZU5vZGUodHJ1ZSkgOiBkb21cbiAgICAgICAgKVxuICAgICAgfSlcbiAgICB9LFxuICAgIHdyYXBBbGw6IGZ1bmN0aW9uKHN0cnVjdHVyZSl7XG4gICAgICBpZiAodGhpc1swXSkge1xuICAgICAgICAkKHRoaXNbMF0pLmJlZm9yZShzdHJ1Y3R1cmUgPSAkKHN0cnVjdHVyZSkpXG4gICAgICAgIHZhciBjaGlsZHJlblxuICAgICAgICAvLyBkcmlsbCBkb3duIHRvIHRoZSBpbm1vc3QgZWxlbWVudFxuICAgICAgICB3aGlsZSAoKGNoaWxkcmVuID0gc3RydWN0dXJlLmNoaWxkcmVuKCkpLmxlbmd0aCkgc3RydWN0dXJlID0gY2hpbGRyZW4uZmlyc3QoKVxuICAgICAgICAkKHN0cnVjdHVyZSkuYXBwZW5kKHRoaXMpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG4gICAgd3JhcElubmVyOiBmdW5jdGlvbihzdHJ1Y3R1cmUpe1xuICAgICAgdmFyIGZ1bmMgPSBpc0Z1bmN0aW9uKHN0cnVjdHVyZSlcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaW5kZXgpe1xuICAgICAgICB2YXIgc2VsZiA9ICQodGhpcyksIGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpLFxuICAgICAgICAgICAgZG9tICA9IGZ1bmMgPyBzdHJ1Y3R1cmUuY2FsbCh0aGlzLCBpbmRleCkgOiBzdHJ1Y3R1cmVcbiAgICAgICAgY29udGVudHMubGVuZ3RoID8gY29udGVudHMud3JhcEFsbChkb20pIDogc2VsZi5hcHBlbmQoZG9tKVxuICAgICAgfSlcbiAgICB9LFxuICAgIHVud3JhcDogZnVuY3Rpb24oKXtcbiAgICAgIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAkKHRoaXMpLnJlcGxhY2VXaXRoKCQodGhpcykuY2hpbGRyZW4oKSlcbiAgICAgIH0pXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG4gICAgY2xvbmU6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMuY2xvbmVOb2RlKHRydWUpIH0pXG4gICAgfSxcbiAgICBoaWRlOiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIilcbiAgICB9LFxuICAgIHRvZ2dsZTogZnVuY3Rpb24oc2V0dGluZyl7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBlbCA9ICQodGhpcylcbiAgICAgICAgOyhzZXR0aW5nID09PSB1bmRlZmluZWQgPyBlbC5jc3MoXCJkaXNwbGF5XCIpID09IFwibm9uZVwiIDogc2V0dGluZykgPyBlbC5zaG93KCkgOiBlbC5oaWRlKClcbiAgICAgIH0pXG4gICAgfSxcbiAgICBwcmV2OiBmdW5jdGlvbihzZWxlY3Rvcil7IHJldHVybiAkKHRoaXMucGx1Y2soJ3ByZXZpb3VzRWxlbWVudFNpYmxpbmcnKSkuZmlsdGVyKHNlbGVjdG9yIHx8ICcqJykgfSxcbiAgICBuZXh0OiBmdW5jdGlvbihzZWxlY3Rvcil7IHJldHVybiAkKHRoaXMucGx1Y2soJ25leHRFbGVtZW50U2libGluZycpKS5maWx0ZXIoc2VsZWN0b3IgfHwgJyonKSB9LFxuICAgIGh0bWw6IGZ1bmN0aW9uKGh0bWwpe1xuICAgICAgcmV0dXJuIDAgaW4gYXJndW1lbnRzID9cbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgICAgdmFyIG9yaWdpbkh0bWwgPSB0aGlzLmlubmVySFRNTFxuICAgICAgICAgICQodGhpcykuZW1wdHkoKS5hcHBlbmQoIGZ1bmNBcmcodGhpcywgaHRtbCwgaWR4LCBvcmlnaW5IdG1sKSApXG4gICAgICAgIH0pIDpcbiAgICAgICAgKDAgaW4gdGhpcyA/IHRoaXNbMF0uaW5uZXJIVE1MIDogbnVsbClcbiAgICB9LFxuICAgIHRleHQ6IGZ1bmN0aW9uKHRleHQpe1xuICAgICAgcmV0dXJuIDAgaW4gYXJndW1lbnRzID9cbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgICAgdmFyIG5ld1RleHQgPSBmdW5jQXJnKHRoaXMsIHRleHQsIGlkeCwgdGhpcy50ZXh0Q29udGVudClcbiAgICAgICAgICB0aGlzLnRleHRDb250ZW50ID0gbmV3VGV4dCA9PSBudWxsID8gJycgOiAnJytuZXdUZXh0XG4gICAgICAgIH0pIDpcbiAgICAgICAgKDAgaW4gdGhpcyA/IHRoaXNbMF0udGV4dENvbnRlbnQgOiBudWxsKVxuICAgIH0sXG4gICAgYXR0cjogZnVuY3Rpb24obmFtZSwgdmFsdWUpe1xuICAgICAgdmFyIHJlc3VsdFxuICAgICAgcmV0dXJuICh0eXBlb2YgbmFtZSA9PSAnc3RyaW5nJyAmJiAhKDEgaW4gYXJndW1lbnRzKSkgP1xuICAgICAgICAoIXRoaXMubGVuZ3RoIHx8IHRoaXNbMF0ubm9kZVR5cGUgIT09IDEgPyB1bmRlZmluZWQgOlxuICAgICAgICAgICghKHJlc3VsdCA9IHRoaXNbMF0uZ2V0QXR0cmlidXRlKG5hbWUpKSAmJiBuYW1lIGluIHRoaXNbMF0pID8gdGhpc1swXVtuYW1lXSA6IHJlc3VsdFxuICAgICAgICApIDpcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgICAgaWYgKHRoaXMubm9kZVR5cGUgIT09IDEpIHJldHVyblxuICAgICAgICAgIGlmIChpc09iamVjdChuYW1lKSkgZm9yIChrZXkgaW4gbmFtZSkgc2V0QXR0cmlidXRlKHRoaXMsIGtleSwgbmFtZVtrZXldKVxuICAgICAgICAgIGVsc2Ugc2V0QXR0cmlidXRlKHRoaXMsIG5hbWUsIGZ1bmNBcmcodGhpcywgdmFsdWUsIGlkeCwgdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSkpKVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgcmVtb3ZlQXR0cjogZnVuY3Rpb24obmFtZSl7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7IHRoaXMubm9kZVR5cGUgPT09IDEgJiYgbmFtZS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24oYXR0cmlidXRlKXtcbiAgICAgICAgc2V0QXR0cmlidXRlKHRoaXMsIGF0dHJpYnV0ZSlcbiAgICAgIH0sIHRoaXMpfSlcbiAgICB9LFxuICAgIHByb3A6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKXtcbiAgICAgIG5hbWUgPSBwcm9wTWFwW25hbWVdIHx8IG5hbWVcbiAgICAgIHJldHVybiAoMSBpbiBhcmd1bWVudHMpID9cbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgICAgdGhpc1tuYW1lXSA9IGZ1bmNBcmcodGhpcywgdmFsdWUsIGlkeCwgdGhpc1tuYW1lXSlcbiAgICAgICAgfSkgOlxuICAgICAgICAodGhpc1swXSAmJiB0aGlzWzBdW25hbWVdKVxuICAgIH0sXG4gICAgZGF0YTogZnVuY3Rpb24obmFtZSwgdmFsdWUpe1xuICAgICAgdmFyIGF0dHJOYW1lID0gJ2RhdGEtJyArIG5hbWUucmVwbGFjZShjYXBpdGFsUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG5cbiAgICAgIHZhciBkYXRhID0gKDEgaW4gYXJndW1lbnRzKSA/XG4gICAgICAgIHRoaXMuYXR0cihhdHRyTmFtZSwgdmFsdWUpIDpcbiAgICAgICAgdGhpcy5hdHRyKGF0dHJOYW1lKVxuXG4gICAgICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRlc2VyaWFsaXplVmFsdWUoZGF0YSkgOiB1bmRlZmluZWRcbiAgICB9LFxuICAgIHZhbDogZnVuY3Rpb24odmFsdWUpe1xuICAgICAgcmV0dXJuIDAgaW4gYXJndW1lbnRzID9cbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgICAgdGhpcy52YWx1ZSA9IGZ1bmNBcmcodGhpcywgdmFsdWUsIGlkeCwgdGhpcy52YWx1ZSlcbiAgICAgICAgfSkgOlxuICAgICAgICAodGhpc1swXSAmJiAodGhpc1swXS5tdWx0aXBsZSA/XG4gICAgICAgICAgICQodGhpc1swXSkuZmluZCgnb3B0aW9uJykuZmlsdGVyKGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLnNlbGVjdGVkIH0pLnBsdWNrKCd2YWx1ZScpIDpcbiAgICAgICAgICAgdGhpc1swXS52YWx1ZSlcbiAgICAgICAgKVxuICAgIH0sXG4gICAgb2Zmc2V0OiBmdW5jdGlvbihjb29yZGluYXRlcyl7XG4gICAgICBpZiAoY29vcmRpbmF0ZXMpIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaW5kZXgpe1xuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLFxuICAgICAgICAgICAgY29vcmRzID0gZnVuY0FyZyh0aGlzLCBjb29yZGluYXRlcywgaW5kZXgsICR0aGlzLm9mZnNldCgpKSxcbiAgICAgICAgICAgIHBhcmVudE9mZnNldCA9ICR0aGlzLm9mZnNldFBhcmVudCgpLm9mZnNldCgpLFxuICAgICAgICAgICAgcHJvcHMgPSB7XG4gICAgICAgICAgICAgIHRvcDogIGNvb3Jkcy50b3AgIC0gcGFyZW50T2Zmc2V0LnRvcCxcbiAgICAgICAgICAgICAgbGVmdDogY29vcmRzLmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdFxuICAgICAgICAgICAgfVxuXG4gICAgICAgIGlmICgkdGhpcy5jc3MoJ3Bvc2l0aW9uJykgPT0gJ3N0YXRpYycpIHByb3BzWydwb3NpdGlvbiddID0gJ3JlbGF0aXZlJ1xuICAgICAgICAkdGhpcy5jc3MocHJvcHMpXG4gICAgICB9KVxuICAgICAgaWYgKCF0aGlzLmxlbmd0aCkgcmV0dXJuIG51bGxcbiAgICAgIHZhciBvYmogPSB0aGlzWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBvYmoubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgICAgdG9wOiBvYmoudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0LFxuICAgICAgICB3aWR0aDogTWF0aC5yb3VuZChvYmoud2lkdGgpLFxuICAgICAgICBoZWlnaHQ6IE1hdGgucm91bmQob2JqLmhlaWdodClcbiAgICAgIH1cbiAgICB9LFxuICAgIGNzczogZnVuY3Rpb24ocHJvcGVydHksIHZhbHVlKXtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgICB2YXIgY29tcHV0ZWRTdHlsZSwgZWxlbWVudCA9IHRoaXNbMF1cbiAgICAgICAgaWYoIWVsZW1lbnQpIHJldHVyblxuICAgICAgICBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCAnJylcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PSAnc3RyaW5nJylcbiAgICAgICAgICByZXR1cm4gZWxlbWVudC5zdHlsZVtjYW1lbGl6ZShwcm9wZXJ0eSldIHx8IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSlcbiAgICAgICAgZWxzZSBpZiAoaXNBcnJheShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICB2YXIgcHJvcHMgPSB7fVxuICAgICAgICAgICQuZWFjaChwcm9wZXJ0eSwgZnVuY3Rpb24oXywgcHJvcCl7XG4gICAgICAgICAgICBwcm9wc1twcm9wXSA9IChlbGVtZW50LnN0eWxlW2NhbWVsaXplKHByb3ApXSB8fCBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcCkpXG4gICAgICAgICAgfSlcbiAgICAgICAgICByZXR1cm4gcHJvcHNcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgY3NzID0gJydcbiAgICAgIGlmICh0eXBlKHByb3BlcnR5KSA9PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKVxuICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpeyB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KGRhc2hlcml6ZShwcm9wZXJ0eSkpIH0pXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBjc3MgPSBkYXNoZXJpemUocHJvcGVydHkpICsgXCI6XCIgKyBtYXliZUFkZFB4KHByb3BlcnR5LCB2YWx1ZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoa2V5IGluIHByb3BlcnR5KVxuICAgICAgICAgIGlmICghcHJvcGVydHlba2V5XSAmJiBwcm9wZXJ0eVtrZXldICE9PSAwKVxuICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7IHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkoZGFzaGVyaXplKGtleSkpIH0pXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgY3NzICs9IGRhc2hlcml6ZShrZXkpICsgJzonICsgbWF5YmVBZGRQeChrZXksIHByb3BlcnR5W2tleV0pICsgJzsnXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXsgdGhpcy5zdHlsZS5jc3NUZXh0ICs9ICc7JyArIGNzcyB9KVxuICAgIH0sXG4gICAgaW5kZXg6IGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgcmV0dXJuIGVsZW1lbnQgPyB0aGlzLmluZGV4T2YoJChlbGVtZW50KVswXSkgOiB0aGlzLnBhcmVudCgpLmNoaWxkcmVuKCkuaW5kZXhPZih0aGlzWzBdKVxuICAgIH0sXG4gICAgaGFzQ2xhc3M6IGZ1bmN0aW9uKG5hbWUpe1xuICAgICAgaWYgKCFuYW1lKSByZXR1cm4gZmFsc2VcbiAgICAgIHJldHVybiBlbXB0eUFycmF5LnNvbWUuY2FsbCh0aGlzLCBmdW5jdGlvbihlbCl7XG4gICAgICAgIHJldHVybiB0aGlzLnRlc3QoY2xhc3NOYW1lKGVsKSlcbiAgICAgIH0sIGNsYXNzUkUobmFtZSkpXG4gICAgfSxcbiAgICBhZGRDbGFzczogZnVuY3Rpb24obmFtZSl7XG4gICAgICBpZiAoIW5hbWUpIHJldHVybiB0aGlzXG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgIGlmICghKCdjbGFzc05hbWUnIGluIHRoaXMpKSByZXR1cm5cbiAgICAgICAgY2xhc3NMaXN0ID0gW11cbiAgICAgICAgdmFyIGNscyA9IGNsYXNzTmFtZSh0aGlzKSwgbmV3TmFtZSA9IGZ1bmNBcmcodGhpcywgbmFtZSwgaWR4LCBjbHMpXG4gICAgICAgIG5ld05hbWUuc3BsaXQoL1xccysvZykuZm9yRWFjaChmdW5jdGlvbihrbGFzcyl7XG4gICAgICAgICAgaWYgKCEkKHRoaXMpLmhhc0NsYXNzKGtsYXNzKSkgY2xhc3NMaXN0LnB1c2goa2xhc3MpXG4gICAgICAgIH0sIHRoaXMpXG4gICAgICAgIGNsYXNzTGlzdC5sZW5ndGggJiYgY2xhc3NOYW1lKHRoaXMsIGNscyArIChjbHMgPyBcIiBcIiA6IFwiXCIpICsgY2xhc3NMaXN0LmpvaW4oXCIgXCIpKVxuICAgICAgfSlcbiAgICB9LFxuICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihuYW1lKXtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaWR4KXtcbiAgICAgICAgaWYgKCEoJ2NsYXNzTmFtZScgaW4gdGhpcykpIHJldHVyblxuICAgICAgICBpZiAobmFtZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gY2xhc3NOYW1lKHRoaXMsICcnKVxuICAgICAgICBjbGFzc0xpc3QgPSBjbGFzc05hbWUodGhpcylcbiAgICAgICAgZnVuY0FyZyh0aGlzLCBuYW1lLCBpZHgsIGNsYXNzTGlzdCkuc3BsaXQoL1xccysvZykuZm9yRWFjaChmdW5jdGlvbihrbGFzcyl7XG4gICAgICAgICAgY2xhc3NMaXN0ID0gY2xhc3NMaXN0LnJlcGxhY2UoY2xhc3NSRShrbGFzcyksIFwiIFwiKVxuICAgICAgICB9KVxuICAgICAgICBjbGFzc05hbWUodGhpcywgY2xhc3NMaXN0LnRyaW0oKSlcbiAgICAgIH0pXG4gICAgfSxcbiAgICB0b2dnbGVDbGFzczogZnVuY3Rpb24obmFtZSwgd2hlbil7XG4gICAgICBpZiAoIW5hbWUpIHJldHVybiB0aGlzXG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksIG5hbWVzID0gZnVuY0FyZyh0aGlzLCBuYW1lLCBpZHgsIGNsYXNzTmFtZSh0aGlzKSlcbiAgICAgICAgbmFtZXMuc3BsaXQoL1xccysvZykuZm9yRWFjaChmdW5jdGlvbihrbGFzcyl7XG4gICAgICAgICAgKHdoZW4gPT09IHVuZGVmaW5lZCA/ICEkdGhpcy5oYXNDbGFzcyhrbGFzcykgOiB3aGVuKSA/XG4gICAgICAgICAgICAkdGhpcy5hZGRDbGFzcyhrbGFzcykgOiAkdGhpcy5yZW1vdmVDbGFzcyhrbGFzcylcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSxcbiAgICBzY3JvbGxUb3A6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIGlmICghdGhpcy5sZW5ndGgpIHJldHVyblxuICAgICAgdmFyIGhhc1Njcm9sbFRvcCA9ICdzY3JvbGxUb3AnIGluIHRoaXNbMF1cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gaGFzU2Nyb2xsVG9wID8gdGhpc1swXS5zY3JvbGxUb3AgOiB0aGlzWzBdLnBhZ2VZT2Zmc2V0XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGhhc1Njcm9sbFRvcCA/XG4gICAgICAgIGZ1bmN0aW9uKCl7IHRoaXMuc2Nyb2xsVG9wID0gdmFsdWUgfSA6XG4gICAgICAgIGZ1bmN0aW9uKCl7IHRoaXMuc2Nyb2xsVG8odGhpcy5zY3JvbGxYLCB2YWx1ZSkgfSlcbiAgICB9LFxuICAgIHNjcm9sbExlZnQ6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIGlmICghdGhpcy5sZW5ndGgpIHJldHVyblxuICAgICAgdmFyIGhhc1Njcm9sbExlZnQgPSAnc2Nyb2xsTGVmdCcgaW4gdGhpc1swXVxuICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiBoYXNTY3JvbGxMZWZ0ID8gdGhpc1swXS5zY3JvbGxMZWZ0IDogdGhpc1swXS5wYWdlWE9mZnNldFxuICAgICAgcmV0dXJuIHRoaXMuZWFjaChoYXNTY3JvbGxMZWZ0ID9cbiAgICAgICAgZnVuY3Rpb24oKXsgdGhpcy5zY3JvbGxMZWZ0ID0gdmFsdWUgfSA6XG4gICAgICAgIGZ1bmN0aW9uKCl7IHRoaXMuc2Nyb2xsVG8odmFsdWUsIHRoaXMuc2Nyb2xsWSkgfSlcbiAgICB9LFxuICAgIHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5sZW5ndGgpIHJldHVyblxuXG4gICAgICB2YXIgZWxlbSA9IHRoaXNbMF0sXG4gICAgICAgIC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG4gICAgICAgIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCksXG4gICAgICAgIC8vIEdldCBjb3JyZWN0IG9mZnNldHNcbiAgICAgICAgb2Zmc2V0ICAgICAgID0gdGhpcy5vZmZzZXQoKSxcbiAgICAgICAgcGFyZW50T2Zmc2V0ID0gcm9vdE5vZGVSRS50ZXN0KG9mZnNldFBhcmVudFswXS5ub2RlTmFtZSkgPyB7IHRvcDogMCwgbGVmdDogMCB9IDogb2Zmc2V0UGFyZW50Lm9mZnNldCgpXG5cbiAgICAgIC8vIFN1YnRyYWN0IGVsZW1lbnQgbWFyZ2luc1xuICAgICAgLy8gbm90ZTogd2hlbiBhbiBlbGVtZW50IGhhcyBtYXJnaW46IGF1dG8gdGhlIG9mZnNldExlZnQgYW5kIG1hcmdpbkxlZnRcbiAgICAgIC8vIGFyZSB0aGUgc2FtZSBpbiBTYWZhcmkgY2F1c2luZyBvZmZzZXQubGVmdCB0byBpbmNvcnJlY3RseSBiZSAwXG4gICAgICBvZmZzZXQudG9wICAtPSBwYXJzZUZsb2F0KCAkKGVsZW0pLmNzcygnbWFyZ2luLXRvcCcpICkgfHwgMFxuICAgICAgb2Zmc2V0LmxlZnQgLT0gcGFyc2VGbG9hdCggJChlbGVtKS5jc3MoJ21hcmdpbi1sZWZ0JykgKSB8fCAwXG5cbiAgICAgIC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuICAgICAgcGFyZW50T2Zmc2V0LnRvcCAgKz0gcGFyc2VGbG9hdCggJChvZmZzZXRQYXJlbnRbMF0pLmNzcygnYm9yZGVyLXRvcC13aWR0aCcpICkgfHwgMFxuICAgICAgcGFyZW50T2Zmc2V0LmxlZnQgKz0gcGFyc2VGbG9hdCggJChvZmZzZXRQYXJlbnRbMF0pLmNzcygnYm9yZGVyLWxlZnQtd2lkdGgnKSApIHx8IDBcblxuICAgICAgLy8gU3VidHJhY3QgdGhlIHR3byBvZmZzZXRzXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6ICBvZmZzZXQudG9wICAtIHBhcmVudE9mZnNldC50b3AsXG4gICAgICAgIGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnRcbiAgICAgIH1cbiAgICB9LFxuICAgIG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50LmJvZHlcbiAgICAgICAgd2hpbGUgKHBhcmVudCAmJiAhcm9vdE5vZGVSRS50ZXN0KHBhcmVudC5ub2RlTmFtZSkgJiYgJChwYXJlbnQpLmNzcyhcInBvc2l0aW9uXCIpID09IFwic3RhdGljXCIpXG4gICAgICAgICAgcGFyZW50ID0gcGFyZW50Lm9mZnNldFBhcmVudFxuICAgICAgICByZXR1cm4gcGFyZW50XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8vIGZvciBub3dcbiAgJC5mbi5kZXRhY2ggPSAkLmZuLnJlbW92ZVxuXG4gIC8vIEdlbmVyYXRlIHRoZSBgd2lkdGhgIGFuZCBgaGVpZ2h0YCBmdW5jdGlvbnNcbiAgO1snd2lkdGgnLCAnaGVpZ2h0J10uZm9yRWFjaChmdW5jdGlvbihkaW1lbnNpb24pe1xuICAgIHZhciBkaW1lbnNpb25Qcm9wZXJ0eSA9XG4gICAgICBkaW1lbnNpb24ucmVwbGFjZSgvLi8sIGZ1bmN0aW9uKG0peyByZXR1cm4gbVswXS50b1VwcGVyQ2FzZSgpIH0pXG5cbiAgICAkLmZuW2RpbWVuc2lvbl0gPSBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICB2YXIgb2Zmc2V0LCBlbCA9IHRoaXNbMF1cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gaXNXaW5kb3coZWwpID8gZWxbJ2lubmVyJyArIGRpbWVuc2lvblByb3BlcnR5XSA6XG4gICAgICAgIGlzRG9jdW1lbnQoZWwpID8gZWwuZG9jdW1lbnRFbGVtZW50WydzY3JvbGwnICsgZGltZW5zaW9uUHJvcGVydHldIDpcbiAgICAgICAgKG9mZnNldCA9IHRoaXMub2Zmc2V0KCkpICYmIG9mZnNldFtkaW1lbnNpb25dXG4gICAgICBlbHNlIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaWR4KXtcbiAgICAgICAgZWwgPSAkKHRoaXMpXG4gICAgICAgIGVsLmNzcyhkaW1lbnNpb24sIGZ1bmNBcmcodGhpcywgdmFsdWUsIGlkeCwgZWxbZGltZW5zaW9uXSgpKSlcbiAgICAgIH0pXG4gICAgfVxuICB9KVxuXG4gIGZ1bmN0aW9uIHRyYXZlcnNlTm9kZShub2RlLCBmdW4pIHtcbiAgICBmdW4obm9kZSlcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKVxuICAgICAgdHJhdmVyc2VOb2RlKG5vZGUuY2hpbGROb2Rlc1tpXSwgZnVuKVxuICB9XG5cbiAgLy8gR2VuZXJhdGUgdGhlIGBhZnRlcmAsIGBwcmVwZW5kYCwgYGJlZm9yZWAsIGBhcHBlbmRgLFxuICAvLyBgaW5zZXJ0QWZ0ZXJgLCBgaW5zZXJ0QmVmb3JlYCwgYGFwcGVuZFRvYCwgYW5kIGBwcmVwZW5kVG9gIG1ldGhvZHMuXG4gIGFkamFjZW5jeU9wZXJhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uKG9wZXJhdG9yLCBvcGVyYXRvckluZGV4KSB7XG4gICAgdmFyIGluc2lkZSA9IG9wZXJhdG9ySW5kZXggJSAyIC8vPT4gcHJlcGVuZCwgYXBwZW5kXG5cbiAgICAkLmZuW29wZXJhdG9yXSA9IGZ1bmN0aW9uKCl7XG4gICAgICAvLyBhcmd1bWVudHMgY2FuIGJlIG5vZGVzLCBhcnJheXMgb2Ygbm9kZXMsIFplcHRvIG9iamVjdHMgYW5kIEhUTUwgc3RyaW5nc1xuICAgICAgdmFyIGFyZ1R5cGUsIG5vZGVzID0gJC5tYXAoYXJndW1lbnRzLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICAgIGFyZ1R5cGUgPSB0eXBlKGFyZylcbiAgICAgICAgICAgIHJldHVybiBhcmdUeXBlID09IFwib2JqZWN0XCIgfHwgYXJnVHlwZSA9PSBcImFycmF5XCIgfHwgYXJnID09IG51bGwgP1xuICAgICAgICAgICAgICBhcmcgOiB6ZXB0by5mcmFnbWVudChhcmcpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgcGFyZW50LCBjb3B5QnlDbG9uZSA9IHRoaXMubGVuZ3RoID4gMVxuICAgICAgaWYgKG5vZGVzLmxlbmd0aCA8IDEpIHJldHVybiB0aGlzXG5cbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oXywgdGFyZ2V0KXtcbiAgICAgICAgcGFyZW50ID0gaW5zaWRlID8gdGFyZ2V0IDogdGFyZ2V0LnBhcmVudE5vZGVcblxuICAgICAgICAvLyBjb252ZXJ0IGFsbCBtZXRob2RzIHRvIGEgXCJiZWZvcmVcIiBvcGVyYXRpb25cbiAgICAgICAgdGFyZ2V0ID0gb3BlcmF0b3JJbmRleCA9PSAwID8gdGFyZ2V0Lm5leHRTaWJsaW5nIDpcbiAgICAgICAgICAgICAgICAgb3BlcmF0b3JJbmRleCA9PSAxID8gdGFyZ2V0LmZpcnN0Q2hpbGQgOlxuICAgICAgICAgICAgICAgICBvcGVyYXRvckluZGV4ID09IDIgPyB0YXJnZXQgOlxuICAgICAgICAgICAgICAgICBudWxsXG5cbiAgICAgICAgdmFyIHBhcmVudEluRG9jdW1lbnQgPSAkLmNvbnRhaW5zKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgcGFyZW50KVxuXG4gICAgICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSl7XG4gICAgICAgICAgaWYgKGNvcHlCeUNsb25lKSBub2RlID0gbm9kZS5jbG9uZU5vZGUodHJ1ZSlcbiAgICAgICAgICBlbHNlIGlmICghcGFyZW50KSByZXR1cm4gJChub2RlKS5yZW1vdmUoKVxuXG4gICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCB0YXJnZXQpXG4gICAgICAgICAgaWYgKHBhcmVudEluRG9jdW1lbnQpIHRyYXZlcnNlTm9kZShub2RlLCBmdW5jdGlvbihlbCl7XG4gICAgICAgICAgICBpZiAoZWwubm9kZU5hbWUgIT0gbnVsbCAmJiBlbC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0NSSVBUJyAmJlxuICAgICAgICAgICAgICAgKCFlbC50eXBlIHx8IGVsLnR5cGUgPT09ICd0ZXh0L2phdmFzY3JpcHQnKSAmJiAhZWwuc3JjKVxuICAgICAgICAgICAgICB3aW5kb3dbJ2V2YWwnXS5jYWxsKHdpbmRvdywgZWwuaW5uZXJIVE1MKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIGFmdGVyICAgID0+IGluc2VydEFmdGVyXG4gICAgLy8gcHJlcGVuZCAgPT4gcHJlcGVuZFRvXG4gICAgLy8gYmVmb3JlICAgPT4gaW5zZXJ0QmVmb3JlXG4gICAgLy8gYXBwZW5kICAgPT4gYXBwZW5kVG9cbiAgICAkLmZuW2luc2lkZSA/IG9wZXJhdG9yKydUbycgOiAnaW5zZXJ0Jysob3BlcmF0b3JJbmRleCA/ICdCZWZvcmUnIDogJ0FmdGVyJyldID0gZnVuY3Rpb24oaHRtbCl7XG4gICAgICAkKGh0bWwpW29wZXJhdG9yXSh0aGlzKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gIH0pXG5cbiAgemVwdG8uWi5wcm90b3R5cGUgPSBaLnByb3RvdHlwZSA9ICQuZm5cblxuICAvLyBFeHBvcnQgaW50ZXJuYWwgQVBJIGZ1bmN0aW9ucyBpbiB0aGUgYCQuemVwdG9gIG5hbWVzcGFjZVxuICB6ZXB0by51bmlxID0gdW5pcVxuICB6ZXB0by5kZXNlcmlhbGl6ZVZhbHVlID0gZGVzZXJpYWxpemVWYWx1ZVxuICAkLnplcHRvID0gemVwdG9cblxuICByZXR1cm4gJFxufSkoKVxuXG4vLyBJZiBgJGAgaXMgbm90IHlldCBkZWZpbmVkLCBwb2ludCBpdCB0byBgWmVwdG9gXG53aW5kb3cuWmVwdG8gPSBaZXB0b1xud2luZG93LiQgPT09IHVuZGVmaW5lZCAmJiAod2luZG93LiQgPSBaZXB0bylcblxuLy8gICAgIFplcHRvLmpzXG4vLyAgICAgKGMpIDIwMTAtMjAxNCBUaG9tYXMgRnVjaHNcbi8vICAgICBaZXB0by5qcyBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cblxuOyhmdW5jdGlvbigkKXtcbiAgZnVuY3Rpb24gZGV0ZWN0KHVhLCBwbGF0Zm9ybSl7XG4gICAgdmFyIG9zID0gdGhpcy5vcyA9IHt9LCBicm93c2VyID0gdGhpcy5icm93c2VyID0ge30sXG4gICAgICB3ZWJraXQgPSB1YS5tYXRjaCgvV2ViW2tLXWl0W1xcL117MCwxfShbXFxkLl0rKS8pLFxuICAgICAgYW5kcm9pZCA9IHVhLm1hdGNoKC8oQW5kcm9pZCk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKSxcbiAgICAgIG9zeCA9ICEhdWEubWF0Y2goL1xcKE1hY2ludG9zaFxcOyBJbnRlbCAvKSxcbiAgICAgIGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pLFxuICAgICAgaXBvZCA9IHVhLm1hdGNoKC8oaVBvZCkoLipPU1xccyhbXFxkX10rKSk/LyksXG4gICAgICBpcGhvbmUgPSAhaXBhZCAmJiB1YS5tYXRjaCgvKGlQaG9uZVxcc09TKVxccyhbXFxkX10rKS8pLFxuICAgICAgd2Vib3MgPSB1YS5tYXRjaCgvKHdlYk9TfGhwd09TKVtcXHNcXC9dKFtcXGQuXSspLyksXG4gICAgICB3aW4gPSAvV2luXFxkezJ9fFdpbmRvd3MvLnRlc3QocGxhdGZvcm0pLFxuICAgICAgd3AgPSB1YS5tYXRjaCgvV2luZG93cyBQaG9uZSAoW1xcZC5dKykvKSxcbiAgICAgIHRvdWNocGFkID0gd2Vib3MgJiYgdWEubWF0Y2goL1RvdWNoUGFkLyksXG4gICAgICBraW5kbGUgPSB1YS5tYXRjaCgvS2luZGxlXFwvKFtcXGQuXSspLyksXG4gICAgICBzaWxrID0gdWEubWF0Y2goL1NpbGtcXC8oW1xcZC5fXSspLyksXG4gICAgICBibGFja2JlcnJ5ID0gdWEubWF0Y2goLyhCbGFja0JlcnJ5KS4qVmVyc2lvblxcLyhbXFxkLl0rKS8pLFxuICAgICAgYmIxMCA9IHVhLm1hdGNoKC8oQkIxMCkuKlZlcnNpb25cXC8oW1xcZC5dKykvKSxcbiAgICAgIHJpbXRhYmxldG9zID0gdWEubWF0Y2goLyhSSU1cXHNUYWJsZXRcXHNPUylcXHMoW1xcZC5dKykvKSxcbiAgICAgIHBsYXlib29rID0gdWEubWF0Y2goL1BsYXlCb29rLyksXG4gICAgICBjaHJvbWUgPSB1YS5tYXRjaCgvQ2hyb21lXFwvKFtcXGQuXSspLykgfHwgdWEubWF0Y2goL0NyaU9TXFwvKFtcXGQuXSspLyksXG4gICAgICBmaXJlZm94ID0gdWEubWF0Y2goL0ZpcmVmb3hcXC8oW1xcZC5dKykvKSxcbiAgICAgIGZpcmVmb3hvcyA9IHVhLm1hdGNoKC9cXCgoPzpNb2JpbGV8VGFibGV0KTsgcnY6KFtcXGQuXSspXFwpLipGaXJlZm94XFwvW1xcZC5dKy8pLFxuICAgICAgaWUgPSB1YS5tYXRjaCgvTVNJRVxccyhbXFxkLl0rKS8pIHx8IHVhLm1hdGNoKC9UcmlkZW50XFwvW1xcZF0oPz1bXlxcP10rKS4qcnY6KFswLTkuXS4pLyksXG4gICAgICB3ZWJ2aWV3ID0gIWNocm9tZSAmJiB1YS5tYXRjaCgvKGlQaG9uZXxpUG9kfGlQYWQpLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS8pLFxuICAgICAgc2FmYXJpID0gd2VidmlldyB8fCB1YS5tYXRjaCgvVmVyc2lvblxcLyhbXFxkLl0rKShbXlNdKFNhZmFyaSl8W15NXSooTW9iaWxlKVteU10qKFNhZmFyaSkpLylcblxuICAgIC8vIFRvZG86IGNsZWFuIHRoaXMgdXAgd2l0aCBhIGJldHRlciBPUy9icm93c2VyIHNlcGVyYXRpb246XG4gICAgLy8gLSBkaXNjZXJuIChtb3JlKSBiZXR3ZWVuIG11bHRpcGxlIGJyb3dzZXJzIG9uIGFuZHJvaWRcbiAgICAvLyAtIGRlY2lkZSBpZiBraW5kbGUgZmlyZSBpbiBzaWxrIG1vZGUgaXMgYW5kcm9pZCBvciBub3RcbiAgICAvLyAtIEZpcmVmb3ggb24gQW5kcm9pZCBkb2Vzbid0IHNwZWNpZnkgdGhlIEFuZHJvaWQgdmVyc2lvblxuICAgIC8vIC0gcG9zc2libHkgZGV2aWRlIGluIG9zLCBkZXZpY2UgYW5kIGJyb3dzZXIgaGFzaGVzXG5cbiAgICBpZiAoYnJvd3Nlci53ZWJraXQgPSAhIXdlYmtpdCkgYnJvd3Nlci52ZXJzaW9uID0gd2Via2l0WzFdXG5cbiAgICBpZiAoYW5kcm9pZCkgb3MuYW5kcm9pZCA9IHRydWUsIG9zLnZlcnNpb24gPSBhbmRyb2lkWzJdXG4gICAgaWYgKGlwaG9uZSAmJiAhaXBvZCkgb3MuaW9zID0gb3MuaXBob25lID0gdHJ1ZSwgb3MudmVyc2lvbiA9IGlwaG9uZVsyXS5yZXBsYWNlKC9fL2csICcuJylcbiAgICBpZiAoaXBhZCkgb3MuaW9zID0gb3MuaXBhZCA9IHRydWUsIG9zLnZlcnNpb24gPSBpcGFkWzJdLnJlcGxhY2UoL18vZywgJy4nKVxuICAgIGlmIChpcG9kKSBvcy5pb3MgPSBvcy5pcG9kID0gdHJ1ZSwgb3MudmVyc2lvbiA9IGlwb2RbM10gPyBpcG9kWzNdLnJlcGxhY2UoL18vZywgJy4nKSA6IG51bGxcbiAgICBpZiAod3ApIG9zLndwID0gdHJ1ZSwgb3MudmVyc2lvbiA9IHdwWzFdXG4gICAgaWYgKHdlYm9zKSBvcy53ZWJvcyA9IHRydWUsIG9zLnZlcnNpb24gPSB3ZWJvc1syXVxuICAgIGlmICh0b3VjaHBhZCkgb3MudG91Y2hwYWQgPSB0cnVlXG4gICAgaWYgKGJsYWNrYmVycnkpIG9zLmJsYWNrYmVycnkgPSB0cnVlLCBvcy52ZXJzaW9uID0gYmxhY2tiZXJyeVsyXVxuICAgIGlmIChiYjEwKSBvcy5iYjEwID0gdHJ1ZSwgb3MudmVyc2lvbiA9IGJiMTBbMl1cbiAgICBpZiAocmltdGFibGV0b3MpIG9zLnJpbXRhYmxldG9zID0gdHJ1ZSwgb3MudmVyc2lvbiA9IHJpbXRhYmxldG9zWzJdXG4gICAgaWYgKHBsYXlib29rKSBicm93c2VyLnBsYXlib29rID0gdHJ1ZVxuICAgIGlmIChraW5kbGUpIG9zLmtpbmRsZSA9IHRydWUsIG9zLnZlcnNpb24gPSBraW5kbGVbMV1cbiAgICBpZiAoc2lsaykgYnJvd3Nlci5zaWxrID0gdHJ1ZSwgYnJvd3Nlci52ZXJzaW9uID0gc2lsa1sxXVxuICAgIGlmICghc2lsayAmJiBvcy5hbmRyb2lkICYmIHVhLm1hdGNoKC9LaW5kbGUgRmlyZS8pKSBicm93c2VyLnNpbGsgPSB0cnVlXG4gICAgaWYgKGNocm9tZSkgYnJvd3Nlci5jaHJvbWUgPSB0cnVlLCBicm93c2VyLnZlcnNpb24gPSBjaHJvbWVbMV1cbiAgICBpZiAoZmlyZWZveCkgYnJvd3Nlci5maXJlZm94ID0gdHJ1ZSwgYnJvd3Nlci52ZXJzaW9uID0gZmlyZWZveFsxXVxuICAgIGlmIChmaXJlZm94b3MpIG9zLmZpcmVmb3hvcyA9IHRydWUsIG9zLnZlcnNpb24gPSBmaXJlZm94b3NbMV1cbiAgICBpZiAoaWUpIGJyb3dzZXIuaWUgPSB0cnVlLCBicm93c2VyLnZlcnNpb24gPSBpZVsxXVxuICAgIGlmIChzYWZhcmkgJiYgKG9zeCB8fCBvcy5pb3MgfHwgd2luKSkge1xuICAgICAgYnJvd3Nlci5zYWZhcmkgPSB0cnVlXG4gICAgICBpZiAoIW9zLmlvcykgYnJvd3Nlci52ZXJzaW9uID0gc2FmYXJpWzFdXG4gICAgfVxuICAgIGlmICh3ZWJ2aWV3KSBicm93c2VyLndlYnZpZXcgPSB0cnVlXG5cbiAgICBvcy50YWJsZXQgPSAhIShpcGFkIHx8IHBsYXlib29rIHx8IChhbmRyb2lkICYmICF1YS5tYXRjaCgvTW9iaWxlLykpIHx8XG4gICAgICAoZmlyZWZveCAmJiB1YS5tYXRjaCgvVGFibGV0LykpIHx8IChpZSAmJiAhdWEubWF0Y2goL1Bob25lLykgJiYgdWEubWF0Y2goL1RvdWNoLykpKVxuICAgIG9zLnBob25lICA9ICEhKCFvcy50YWJsZXQgJiYgIW9zLmlwb2QgJiYgKGFuZHJvaWQgfHwgaXBob25lIHx8IHdlYm9zIHx8IGJsYWNrYmVycnkgfHwgYmIxMCB8fFxuICAgICAgKGNocm9tZSAmJiB1YS5tYXRjaCgvQW5kcm9pZC8pKSB8fCAoY2hyb21lICYmIHVhLm1hdGNoKC9DcmlPU1xcLyhbXFxkLl0rKS8pKSB8fFxuICAgICAgKGZpcmVmb3ggJiYgdWEubWF0Y2goL01vYmlsZS8pKSB8fCAoaWUgJiYgdWEubWF0Y2goL1RvdWNoLykpKSlcbiAgfVxuXG4gIGRldGVjdC5jYWxsKCQsIG5hdmlnYXRvci51c2VyQWdlbnQsIG5hdmlnYXRvci5wbGF0Zm9ybSlcbiAgLy8gbWFrZSBhdmFpbGFibGUgdG8gdW5pdCB0ZXN0c1xuICAkLl9fZGV0ZWN0ID0gZGV0ZWN0XG5cbn0pKFplcHRvKVxuXG4vLyAgICAgWmVwdG8uanNcbi8vICAgICAoYykgMjAxMC0yMDE0IFRob21hcyBGdWNoc1xuLy8gICAgIFplcHRvLmpzIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuXG47KGZ1bmN0aW9uKCQpe1xuICB2YXIgX3ppZCA9IDEsIHVuZGVmaW5lZCxcbiAgICAgIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLFxuICAgICAgaXNGdW5jdGlvbiA9ICQuaXNGdW5jdGlvbixcbiAgICAgIGlzU3RyaW5nID0gZnVuY3Rpb24ob2JqKXsgcmV0dXJuIHR5cGVvZiBvYmogPT0gJ3N0cmluZycgfSxcbiAgICAgIGhhbmRsZXJzID0ge30sXG4gICAgICBzcGVjaWFsRXZlbnRzPXt9LFxuICAgICAgZm9jdXNpblN1cHBvcnRlZCA9ICdvbmZvY3VzaW4nIGluIHdpbmRvdyxcbiAgICAgIGZvY3VzID0geyBmb2N1czogJ2ZvY3VzaW4nLCBibHVyOiAnZm9jdXNvdXQnIH0sXG4gICAgICBob3ZlciA9IHsgbW91c2VlbnRlcjogJ21vdXNlb3ZlcicsIG1vdXNlbGVhdmU6ICdtb3VzZW91dCcgfVxuXG4gIHNwZWNpYWxFdmVudHMuY2xpY2sgPSBzcGVjaWFsRXZlbnRzLm1vdXNlZG93biA9IHNwZWNpYWxFdmVudHMubW91c2V1cCA9IHNwZWNpYWxFdmVudHMubW91c2Vtb3ZlID0gJ01vdXNlRXZlbnRzJ1xuXG4gIGZ1bmN0aW9uIHppZChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuX3ppZCB8fCAoZWxlbWVudC5femlkID0gX3ppZCsrKVxuICB9XG4gIGZ1bmN0aW9uIGZpbmRIYW5kbGVycyhlbGVtZW50LCBldmVudCwgZm4sIHNlbGVjdG9yKSB7XG4gICAgZXZlbnQgPSBwYXJzZShldmVudClcbiAgICBpZiAoZXZlbnQubnMpIHZhciBtYXRjaGVyID0gbWF0Y2hlckZvcihldmVudC5ucylcbiAgICByZXR1cm4gKGhhbmRsZXJzW3ppZChlbGVtZW50KV0gfHwgW10pLmZpbHRlcihmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICByZXR1cm4gaGFuZGxlclxuICAgICAgICAmJiAoIWV2ZW50LmUgIHx8IGhhbmRsZXIuZSA9PSBldmVudC5lKVxuICAgICAgICAmJiAoIWV2ZW50Lm5zIHx8IG1hdGNoZXIudGVzdChoYW5kbGVyLm5zKSlcbiAgICAgICAgJiYgKCFmbiAgICAgICB8fCB6aWQoaGFuZGxlci5mbikgPT09IHppZChmbikpXG4gICAgICAgICYmICghc2VsZWN0b3IgfHwgaGFuZGxlci5zZWwgPT0gc2VsZWN0b3IpXG4gICAgfSlcbiAgfVxuICBmdW5jdGlvbiBwYXJzZShldmVudCkge1xuICAgIHZhciBwYXJ0cyA9ICgnJyArIGV2ZW50KS5zcGxpdCgnLicpXG4gICAgcmV0dXJuIHtlOiBwYXJ0c1swXSwgbnM6IHBhcnRzLnNsaWNlKDEpLnNvcnQoKS5qb2luKCcgJyl9XG4gIH1cbiAgZnVuY3Rpb24gbWF0Y2hlckZvcihucykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKCcoPzpefCApJyArIG5zLnJlcGxhY2UoJyAnLCAnIC4qID8nKSArICcoPzogfCQpJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGV2ZW50Q2FwdHVyZShoYW5kbGVyLCBjYXB0dXJlU2V0dGluZykge1xuICAgIHJldHVybiBoYW5kbGVyLmRlbCAmJlxuICAgICAgKCFmb2N1c2luU3VwcG9ydGVkICYmIChoYW5kbGVyLmUgaW4gZm9jdXMpKSB8fFxuICAgICAgISFjYXB0dXJlU2V0dGluZ1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhbEV2ZW50KHR5cGUpIHtcbiAgICByZXR1cm4gaG92ZXJbdHlwZV0gfHwgKGZvY3VzaW5TdXBwb3J0ZWQgJiYgZm9jdXNbdHlwZV0pIHx8IHR5cGVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZChlbGVtZW50LCBldmVudHMsIGZuLCBkYXRhLCBzZWxlY3RvciwgZGVsZWdhdG9yLCBjYXB0dXJlKXtcbiAgICB2YXIgaWQgPSB6aWQoZWxlbWVudCksIHNldCA9IChoYW5kbGVyc1tpZF0gfHwgKGhhbmRsZXJzW2lkXSA9IFtdKSlcbiAgICBldmVudHMuc3BsaXQoL1xccy8pLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgaWYgKGV2ZW50ID09ICdyZWFkeScpIHJldHVybiAkKGRvY3VtZW50KS5yZWFkeShmbilcbiAgICAgIHZhciBoYW5kbGVyICAgPSBwYXJzZShldmVudClcbiAgICAgIGhhbmRsZXIuZm4gICAgPSBmblxuICAgICAgaGFuZGxlci5zZWwgICA9IHNlbGVjdG9yXG4gICAgICAvLyBlbXVsYXRlIG1vdXNlZW50ZXIsIG1vdXNlbGVhdmVcbiAgICAgIGlmIChoYW5kbGVyLmUgaW4gaG92ZXIpIGZuID0gZnVuY3Rpb24oZSl7XG4gICAgICAgIHZhciByZWxhdGVkID0gZS5yZWxhdGVkVGFyZ2V0XG4gICAgICAgIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGhpcyAmJiAhJC5jb250YWlucyh0aGlzLCByZWxhdGVkKSkpXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZXIuZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgICAgaGFuZGxlci5kZWwgICA9IGRlbGVnYXRvclxuICAgICAgdmFyIGNhbGxiYWNrICA9IGRlbGVnYXRvciB8fCBmblxuICAgICAgaGFuZGxlci5wcm94eSA9IGZ1bmN0aW9uKGUpe1xuICAgICAgICBlID0gY29tcGF0aWJsZShlKVxuICAgICAgICBpZiAoZS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSByZXR1cm5cbiAgICAgICAgZS5kYXRhID0gZGF0YVxuICAgICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2suYXBwbHkoZWxlbWVudCwgZS5fYXJncyA9PSB1bmRlZmluZWQgPyBbZV0gOiBbZV0uY29uY2F0KGUuX2FyZ3MpKVxuICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkgZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH1cbiAgICAgIGhhbmRsZXIuaSA9IHNldC5sZW5ndGhcbiAgICAgIHNldC5wdXNoKGhhbmRsZXIpXG4gICAgICBpZiAoJ2FkZEV2ZW50TGlzdGVuZXInIGluIGVsZW1lbnQpXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihyZWFsRXZlbnQoaGFuZGxlci5lKSwgaGFuZGxlci5wcm94eSwgZXZlbnRDYXB0dXJlKGhhbmRsZXIsIGNhcHR1cmUpKVxuICAgIH0pXG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlKGVsZW1lbnQsIGV2ZW50cywgZm4sIHNlbGVjdG9yLCBjYXB0dXJlKXtcbiAgICB2YXIgaWQgPSB6aWQoZWxlbWVudClcbiAgICA7KGV2ZW50cyB8fCAnJykuc3BsaXQoL1xccy8pLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgZmluZEhhbmRsZXJzKGVsZW1lbnQsIGV2ZW50LCBmbiwgc2VsZWN0b3IpLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcil7XG4gICAgICAgIGRlbGV0ZSBoYW5kbGVyc1tpZF1baGFuZGxlci5pXVxuICAgICAgaWYgKCdyZW1vdmVFdmVudExpc3RlbmVyJyBpbiBlbGVtZW50KVxuICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIocmVhbEV2ZW50KGhhbmRsZXIuZSksIGhhbmRsZXIucHJveHksIGV2ZW50Q2FwdHVyZShoYW5kbGVyLCBjYXB0dXJlKSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gICQuZXZlbnQgPSB7IGFkZDogYWRkLCByZW1vdmU6IHJlbW92ZSB9XG5cbiAgJC5wcm94eSA9IGZ1bmN0aW9uKGZuLCBjb250ZXh0KSB7XG4gICAgdmFyIGFyZ3MgPSAoMiBpbiBhcmd1bWVudHMpICYmIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKVxuICAgIGlmIChpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgdmFyIHByb3h5Rm4gPSBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkoY29udGV4dCwgYXJncyA/IGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkgOiBhcmd1bWVudHMpIH1cbiAgICAgIHByb3h5Rm4uX3ppZCA9IHppZChmbilcbiAgICAgIHJldHVybiBwcm94eUZuXG4gICAgfSBlbHNlIGlmIChpc1N0cmluZyhjb250ZXh0KSkge1xuICAgICAgaWYgKGFyZ3MpIHtcbiAgICAgICAgYXJncy51bnNoaWZ0KGZuW2NvbnRleHRdLCBmbilcbiAgICAgICAgcmV0dXJuICQucHJveHkuYXBwbHkobnVsbCwgYXJncylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAkLnByb3h5KGZuW2NvbnRleHRdLCBmbilcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImV4cGVjdGVkIGZ1bmN0aW9uXCIpXG4gICAgfVxuICB9XG5cbiAgJC5mbi5iaW5kID0gZnVuY3Rpb24oZXZlbnQsIGRhdGEsIGNhbGxiYWNrKXtcbiAgICByZXR1cm4gdGhpcy5vbihldmVudCwgZGF0YSwgY2FsbGJhY2spXG4gIH1cbiAgJC5mbi51bmJpbmQgPSBmdW5jdGlvbihldmVudCwgY2FsbGJhY2spe1xuICAgIHJldHVybiB0aGlzLm9mZihldmVudCwgY2FsbGJhY2spXG4gIH1cbiAgJC5mbi5vbmUgPSBmdW5jdGlvbihldmVudCwgc2VsZWN0b3IsIGRhdGEsIGNhbGxiYWNrKXtcbiAgICByZXR1cm4gdGhpcy5vbihldmVudCwgc2VsZWN0b3IsIGRhdGEsIGNhbGxiYWNrLCAxKVxuICB9XG5cbiAgdmFyIHJldHVyblRydWUgPSBmdW5jdGlvbigpe3JldHVybiB0cnVlfSxcbiAgICAgIHJldHVybkZhbHNlID0gZnVuY3Rpb24oKXtyZXR1cm4gZmFsc2V9LFxuICAgICAgaWdub3JlUHJvcGVydGllcyA9IC9eKFtBLVpdfHJldHVyblZhbHVlJHxsYXllcltYWV0kKS8sXG4gICAgICBldmVudE1ldGhvZHMgPSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0OiAnaXNEZWZhdWx0UHJldmVudGVkJyxcbiAgICAgICAgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiAnaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQnLFxuICAgICAgICBzdG9wUHJvcGFnYXRpb246ICdpc1Byb3BhZ2F0aW9uU3RvcHBlZCdcbiAgICAgIH1cblxuICBmdW5jdGlvbiBjb21wYXRpYmxlKGV2ZW50LCBzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlIHx8ICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHNvdXJjZSB8fCAoc291cmNlID0gZXZlbnQpXG5cbiAgICAgICQuZWFjaChldmVudE1ldGhvZHMsIGZ1bmN0aW9uKG5hbWUsIHByZWRpY2F0ZSkge1xuICAgICAgICB2YXIgc291cmNlTWV0aG9kID0gc291cmNlW25hbWVdXG4gICAgICAgIGV2ZW50W25hbWVdID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICB0aGlzW3ByZWRpY2F0ZV0gPSByZXR1cm5UcnVlXG4gICAgICAgICAgcmV0dXJuIHNvdXJjZU1ldGhvZCAmJiBzb3VyY2VNZXRob2QuYXBwbHkoc291cmNlLCBhcmd1bWVudHMpXG4gICAgICAgIH1cbiAgICAgICAgZXZlbnRbcHJlZGljYXRlXSA9IHJldHVybkZhbHNlXG4gICAgICB9KVxuXG4gICAgICBpZiAoc291cmNlLmRlZmF1bHRQcmV2ZW50ZWQgIT09IHVuZGVmaW5lZCA/IHNvdXJjZS5kZWZhdWx0UHJldmVudGVkIDpcbiAgICAgICAgICAncmV0dXJuVmFsdWUnIGluIHNvdXJjZSA/IHNvdXJjZS5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgOlxuICAgICAgICAgIHNvdXJjZS5nZXRQcmV2ZW50RGVmYXVsdCAmJiBzb3VyY2UuZ2V0UHJldmVudERlZmF1bHQoKSlcbiAgICAgICAgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZXZlbnRcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVByb3h5KGV2ZW50KSB7XG4gICAgdmFyIGtleSwgcHJveHkgPSB7IG9yaWdpbmFsRXZlbnQ6IGV2ZW50IH1cbiAgICBmb3IgKGtleSBpbiBldmVudClcbiAgICAgIGlmICghaWdub3JlUHJvcGVydGllcy50ZXN0KGtleSkgJiYgZXZlbnRba2V5XSAhPT0gdW5kZWZpbmVkKSBwcm94eVtrZXldID0gZXZlbnRba2V5XVxuXG4gICAgcmV0dXJuIGNvbXBhdGlibGUocHJveHksIGV2ZW50KVxuICB9XG5cbiAgJC5mbi5kZWxlZ2F0ZSA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBldmVudCwgY2FsbGJhY2spe1xuICAgIHJldHVybiB0aGlzLm9uKGV2ZW50LCBzZWxlY3RvciwgY2FsbGJhY2spXG4gIH1cbiAgJC5mbi51bmRlbGVnYXRlID0gZnVuY3Rpb24oc2VsZWN0b3IsIGV2ZW50LCBjYWxsYmFjayl7XG4gICAgcmV0dXJuIHRoaXMub2ZmKGV2ZW50LCBzZWxlY3RvciwgY2FsbGJhY2spXG4gIH1cblxuICAkLmZuLmxpdmUgPSBmdW5jdGlvbihldmVudCwgY2FsbGJhY2spe1xuICAgICQoZG9jdW1lbnQuYm9keSkuZGVsZWdhdGUodGhpcy5zZWxlY3RvciwgZXZlbnQsIGNhbGxiYWNrKVxuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgJC5mbi5kaWUgPSBmdW5jdGlvbihldmVudCwgY2FsbGJhY2spe1xuICAgICQoZG9jdW1lbnQuYm9keSkudW5kZWxlZ2F0ZSh0aGlzLnNlbGVjdG9yLCBldmVudCwgY2FsbGJhY2spXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gICQuZm4ub24gPSBmdW5jdGlvbihldmVudCwgc2VsZWN0b3IsIGRhdGEsIGNhbGxiYWNrLCBvbmUpe1xuICAgIHZhciBhdXRvUmVtb3ZlLCBkZWxlZ2F0b3IsICR0aGlzID0gdGhpc1xuICAgIGlmIChldmVudCAmJiAhaXNTdHJpbmcoZXZlbnQpKSB7XG4gICAgICAkLmVhY2goZXZlbnQsIGZ1bmN0aW9uKHR5cGUsIGZuKXtcbiAgICAgICAgJHRoaXMub24odHlwZSwgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUpXG4gICAgICB9KVxuICAgICAgcmV0dXJuICR0aGlzXG4gICAgfVxuXG4gICAgaWYgKCFpc1N0cmluZyhzZWxlY3RvcikgJiYgIWlzRnVuY3Rpb24oY2FsbGJhY2spICYmIGNhbGxiYWNrICE9PSBmYWxzZSlcbiAgICAgIGNhbGxiYWNrID0gZGF0YSwgZGF0YSA9IHNlbGVjdG9yLCBzZWxlY3RvciA9IHVuZGVmaW5lZFxuICAgIGlmIChpc0Z1bmN0aW9uKGRhdGEpIHx8IGRhdGEgPT09IGZhbHNlKVxuICAgICAgY2FsbGJhY2sgPSBkYXRhLCBkYXRhID0gdW5kZWZpbmVkXG5cbiAgICBpZiAoY2FsbGJhY2sgPT09IGZhbHNlKSBjYWxsYmFjayA9IHJldHVybkZhbHNlXG5cbiAgICByZXR1cm4gJHRoaXMuZWFjaChmdW5jdGlvbihfLCBlbGVtZW50KXtcbiAgICAgIGlmIChvbmUpIGF1dG9SZW1vdmUgPSBmdW5jdGlvbihlKXtcbiAgICAgICAgcmVtb3ZlKGVsZW1lbnQsIGUudHlwZSwgY2FsbGJhY2spXG4gICAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3RvcikgZGVsZWdhdG9yID0gZnVuY3Rpb24oZSl7XG4gICAgICAgIHZhciBldnQsIG1hdGNoID0gJChlLnRhcmdldCkuY2xvc2VzdChzZWxlY3RvciwgZWxlbWVudCkuZ2V0KDApXG4gICAgICAgIGlmIChtYXRjaCAmJiBtYXRjaCAhPT0gZWxlbWVudCkge1xuICAgICAgICAgIGV2dCA9ICQuZXh0ZW5kKGNyZWF0ZVByb3h5KGUpLCB7Y3VycmVudFRhcmdldDogbWF0Y2gsIGxpdmVGaXJlZDogZWxlbWVudH0pXG4gICAgICAgICAgcmV0dXJuIChhdXRvUmVtb3ZlIHx8IGNhbGxiYWNrKS5hcHBseShtYXRjaCwgW2V2dF0uY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYWRkKGVsZW1lbnQsIGV2ZW50LCBjYWxsYmFjaywgZGF0YSwgc2VsZWN0b3IsIGRlbGVnYXRvciB8fCBhdXRvUmVtb3ZlKVxuICAgIH0pXG4gIH1cbiAgJC5mbi5vZmYgPSBmdW5jdGlvbihldmVudCwgc2VsZWN0b3IsIGNhbGxiYWNrKXtcbiAgICB2YXIgJHRoaXMgPSB0aGlzXG4gICAgaWYgKGV2ZW50ICYmICFpc1N0cmluZyhldmVudCkpIHtcbiAgICAgICQuZWFjaChldmVudCwgZnVuY3Rpb24odHlwZSwgZm4pe1xuICAgICAgICAkdGhpcy5vZmYodHlwZSwgc2VsZWN0b3IsIGZuKVxuICAgICAgfSlcbiAgICAgIHJldHVybiAkdGhpc1xuICAgIH1cblxuICAgIGlmICghaXNTdHJpbmcoc2VsZWN0b3IpICYmICFpc0Z1bmN0aW9uKGNhbGxiYWNrKSAmJiBjYWxsYmFjayAhPT0gZmFsc2UpXG4gICAgICBjYWxsYmFjayA9IHNlbGVjdG9yLCBzZWxlY3RvciA9IHVuZGVmaW5lZFxuXG4gICAgaWYgKGNhbGxiYWNrID09PSBmYWxzZSkgY2FsbGJhY2sgPSByZXR1cm5GYWxzZVxuXG4gICAgcmV0dXJuICR0aGlzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgIHJlbW92ZSh0aGlzLCBldmVudCwgY2FsbGJhY2ssIHNlbGVjdG9yKVxuICAgIH0pXG4gIH1cblxuICAkLmZuLnRyaWdnZXIgPSBmdW5jdGlvbihldmVudCwgYXJncyl7XG4gICAgZXZlbnQgPSAoaXNTdHJpbmcoZXZlbnQpIHx8ICQuaXNQbGFpbk9iamVjdChldmVudCkpID8gJC5FdmVudChldmVudCkgOiBjb21wYXRpYmxlKGV2ZW50KVxuICAgIGV2ZW50Ll9hcmdzID0gYXJnc1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgIC8vIGhhbmRsZSBmb2N1cygpLCBibHVyKCkgYnkgY2FsbGluZyB0aGVtIGRpcmVjdGx5XG4gICAgICBpZiAoZXZlbnQudHlwZSBpbiBmb2N1cyAmJiB0eXBlb2YgdGhpc1tldmVudC50eXBlXSA9PSBcImZ1bmN0aW9uXCIpIHRoaXNbZXZlbnQudHlwZV0oKVxuICAgICAgLy8gaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb24gbWlnaHQgbm90IGJlIERPTSBlbGVtZW50c1xuICAgICAgZWxzZSBpZiAoJ2Rpc3BhdGNoRXZlbnQnIGluIHRoaXMpIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudClcbiAgICAgIGVsc2UgJCh0aGlzKS50cmlnZ2VySGFuZGxlcihldmVudCwgYXJncylcbiAgICB9KVxuICB9XG5cbiAgLy8gdHJpZ2dlcnMgZXZlbnQgaGFuZGxlcnMgb24gY3VycmVudCBlbGVtZW50IGp1c3QgYXMgaWYgYW4gZXZlbnQgb2NjdXJyZWQsXG4gIC8vIGRvZXNuJ3QgdHJpZ2dlciBhbiBhY3R1YWwgZXZlbnQsIGRvZXNuJ3QgYnViYmxlXG4gICQuZm4udHJpZ2dlckhhbmRsZXIgPSBmdW5jdGlvbihldmVudCwgYXJncyl7XG4gICAgdmFyIGUsIHJlc3VsdFxuICAgIHRoaXMuZWFjaChmdW5jdGlvbihpLCBlbGVtZW50KXtcbiAgICAgIGUgPSBjcmVhdGVQcm94eShpc1N0cmluZyhldmVudCkgPyAkLkV2ZW50KGV2ZW50KSA6IGV2ZW50KVxuICAgICAgZS5fYXJncyA9IGFyZ3NcbiAgICAgIGUudGFyZ2V0ID0gZWxlbWVudFxuICAgICAgJC5lYWNoKGZpbmRIYW5kbGVycyhlbGVtZW50LCBldmVudC50eXBlIHx8IGV2ZW50KSwgZnVuY3Rpb24oaSwgaGFuZGxlcil7XG4gICAgICAgIHJlc3VsdCA9IGhhbmRsZXIucHJveHkoZSlcbiAgICAgICAgaWYgKGUuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSkgcmV0dXJuIGZhbHNlXG4gICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLy8gc2hvcnRjdXQgbWV0aG9kcyBmb3IgYC5iaW5kKGV2ZW50LCBmbilgIGZvciBlYWNoIGV2ZW50IHR5cGVcbiAgOygnZm9jdXNpbiBmb2N1c291dCBmb2N1cyBibHVyIGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgJytcbiAgJ21vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlICcrXG4gICdjaGFuZ2Ugc2VsZWN0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3InKS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAkLmZuW2V2ZW50XSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gKDAgaW4gYXJndW1lbnRzKSA/XG4gICAgICAgIHRoaXMuYmluZChldmVudCwgY2FsbGJhY2spIDpcbiAgICAgICAgdGhpcy50cmlnZ2VyKGV2ZW50KVxuICAgIH1cbiAgfSlcblxuICAkLkV2ZW50ID0gZnVuY3Rpb24odHlwZSwgcHJvcHMpIHtcbiAgICBpZiAoIWlzU3RyaW5nKHR5cGUpKSBwcm9wcyA9IHR5cGUsIHR5cGUgPSBwcm9wcy50eXBlXG4gICAgdmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoc3BlY2lhbEV2ZW50c1t0eXBlXSB8fCAnRXZlbnRzJyksIGJ1YmJsZXMgPSB0cnVlXG4gICAgaWYgKHByb3BzKSBmb3IgKHZhciBuYW1lIGluIHByb3BzKSAobmFtZSA9PSAnYnViYmxlcycpID8gKGJ1YmJsZXMgPSAhIXByb3BzW25hbWVdKSA6IChldmVudFtuYW1lXSA9IHByb3BzW25hbWVdKVxuICAgIGV2ZW50LmluaXRFdmVudCh0eXBlLCBidWJibGVzLCB0cnVlKVxuICAgIHJldHVybiBjb21wYXRpYmxlKGV2ZW50KVxuICB9XG5cbn0pKFplcHRvKVxuXG4vLyAgICAgWmVwdG8uanNcbi8vICAgICAoYykgMjAxMC0yMDE0IFRob21hcyBGdWNoc1xuLy8gICAgIFplcHRvLmpzIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuXG47KGZ1bmN0aW9uKCQsIHVuZGVmaW5lZCl7XG4gIHZhciBwcmVmaXggPSAnJywgZXZlbnRQcmVmaXgsIGVuZEV2ZW50TmFtZSwgZW5kQW5pbWF0aW9uTmFtZSxcbiAgICB2ZW5kb3JzID0geyBXZWJraXQ6ICd3ZWJraXQnLCBNb3o6ICcnLCBPOiAnbycgfSxcbiAgICBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCwgdGVzdEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgc3VwcG9ydGVkVHJhbnNmb3JtcyA9IC9eKCh0cmFuc2xhdGV8cm90YXRlfHNjYWxlKShYfFl8WnwzZCk/fG1hdHJpeCgzZCk/fHBlcnNwZWN0aXZlfHNrZXcoWHxZKT8pJC9pLFxuICAgIHRyYW5zZm9ybSxcbiAgICB0cmFuc2l0aW9uUHJvcGVydHksIHRyYW5zaXRpb25EdXJhdGlvbiwgdHJhbnNpdGlvblRpbWluZywgdHJhbnNpdGlvbkRlbGF5LFxuICAgIGFuaW1hdGlvbk5hbWUsIGFuaW1hdGlvbkR1cmF0aW9uLCBhbmltYXRpb25UaW1pbmcsIGFuaW1hdGlvbkRlbGF5LFxuICAgIGNzc1Jlc2V0ID0ge31cblxuICBmdW5jdGlvbiBkYXNoZXJpemUoc3RyKSB7IHJldHVybiBzdHIucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpIH1cbiAgZnVuY3Rpb24gbm9ybWFsaXplRXZlbnQobmFtZSkgeyByZXR1cm4gZXZlbnRQcmVmaXggPyBldmVudFByZWZpeCArIG5hbWUgOiBuYW1lLnRvTG93ZXJDYXNlKCkgfVxuXG4gICQuZWFjaCh2ZW5kb3JzLCBmdW5jdGlvbih2ZW5kb3IsIGV2ZW50KXtcbiAgICBpZiAodGVzdEVsLnN0eWxlW3ZlbmRvciArICdUcmFuc2l0aW9uUHJvcGVydHknXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcmVmaXggPSAnLScgKyB2ZW5kb3IudG9Mb3dlckNhc2UoKSArICctJ1xuICAgICAgZXZlbnRQcmVmaXggPSBldmVudFxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9KVxuXG4gIHRyYW5zZm9ybSA9IHByZWZpeCArICd0cmFuc2Zvcm0nXG4gIGNzc1Jlc2V0W3RyYW5zaXRpb25Qcm9wZXJ0eSA9IHByZWZpeCArICd0cmFuc2l0aW9uLXByb3BlcnR5J10gPVxuICBjc3NSZXNldFt0cmFuc2l0aW9uRHVyYXRpb24gPSBwcmVmaXggKyAndHJhbnNpdGlvbi1kdXJhdGlvbiddID1cbiAgY3NzUmVzZXRbdHJhbnNpdGlvbkRlbGF5ICAgID0gcHJlZml4ICsgJ3RyYW5zaXRpb24tZGVsYXknXSA9XG4gIGNzc1Jlc2V0W3RyYW5zaXRpb25UaW1pbmcgICA9IHByZWZpeCArICd0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbiddID1cbiAgY3NzUmVzZXRbYW5pbWF0aW9uTmFtZSAgICAgID0gcHJlZml4ICsgJ2FuaW1hdGlvbi1uYW1lJ10gPVxuICBjc3NSZXNldFthbmltYXRpb25EdXJhdGlvbiAgPSBwcmVmaXggKyAnYW5pbWF0aW9uLWR1cmF0aW9uJ10gPVxuICBjc3NSZXNldFthbmltYXRpb25EZWxheSAgICAgPSBwcmVmaXggKyAnYW5pbWF0aW9uLWRlbGF5J10gPVxuICBjc3NSZXNldFthbmltYXRpb25UaW1pbmcgICAgPSBwcmVmaXggKyAnYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbiddID0gJydcblxuICAkLmZ4ID0ge1xuICAgIG9mZjogKGV2ZW50UHJlZml4ID09PSB1bmRlZmluZWQgJiYgdGVzdEVsLnN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eSA9PT0gdW5kZWZpbmVkKSxcbiAgICBzcGVlZHM6IHsgX2RlZmF1bHQ6IDQwMCwgZmFzdDogMjAwLCBzbG93OiA2MDAgfSxcbiAgICBjc3NQcmVmaXg6IHByZWZpeCxcbiAgICB0cmFuc2l0aW9uRW5kOiBub3JtYWxpemVFdmVudCgnVHJhbnNpdGlvbkVuZCcpLFxuICAgIGFuaW1hdGlvbkVuZDogbm9ybWFsaXplRXZlbnQoJ0FuaW1hdGlvbkVuZCcpXG4gIH1cblxuICAkLmZuLmFuaW1hdGUgPSBmdW5jdGlvbihwcm9wZXJ0aWVzLCBkdXJhdGlvbiwgZWFzZSwgY2FsbGJhY2ssIGRlbGF5KXtcbiAgICBpZiAoJC5pc0Z1bmN0aW9uKGR1cmF0aW9uKSlcbiAgICAgIGNhbGxiYWNrID0gZHVyYXRpb24sIGVhc2UgPSB1bmRlZmluZWQsIGR1cmF0aW9uID0gdW5kZWZpbmVkXG4gICAgaWYgKCQuaXNGdW5jdGlvbihlYXNlKSlcbiAgICAgIGNhbGxiYWNrID0gZWFzZSwgZWFzZSA9IHVuZGVmaW5lZFxuICAgIGlmICgkLmlzUGxhaW5PYmplY3QoZHVyYXRpb24pKVxuICAgICAgZWFzZSA9IGR1cmF0aW9uLmVhc2luZywgY2FsbGJhY2sgPSBkdXJhdGlvbi5jb21wbGV0ZSwgZGVsYXkgPSBkdXJhdGlvbi5kZWxheSwgZHVyYXRpb24gPSBkdXJhdGlvbi5kdXJhdGlvblxuICAgIGlmIChkdXJhdGlvbikgZHVyYXRpb24gPSAodHlwZW9mIGR1cmF0aW9uID09ICdudW1iZXInID8gZHVyYXRpb24gOlxuICAgICAgICAgICAgICAgICAgICAoJC5meC5zcGVlZHNbZHVyYXRpb25dIHx8ICQuZnguc3BlZWRzLl9kZWZhdWx0KSkgLyAxMDAwXG4gICAgaWYgKGRlbGF5KSBkZWxheSA9IHBhcnNlRmxvYXQoZGVsYXkpIC8gMTAwMFxuICAgIHJldHVybiB0aGlzLmFuaW0ocHJvcGVydGllcywgZHVyYXRpb24sIGVhc2UsIGNhbGxiYWNrLCBkZWxheSlcbiAgfVxuXG4gICQuZm4uYW5pbSA9IGZ1bmN0aW9uKHByb3BlcnRpZXMsIGR1cmF0aW9uLCBlYXNlLCBjYWxsYmFjaywgZGVsYXkpe1xuICAgIHZhciBrZXksIGNzc1ZhbHVlcyA9IHt9LCBjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1zID0gJycsXG4gICAgICAgIHRoYXQgPSB0aGlzLCB3cmFwcGVkQ2FsbGJhY2ssIGVuZEV2ZW50ID0gJC5meC50cmFuc2l0aW9uRW5kLFxuICAgICAgICBmaXJlZCA9IGZhbHNlXG5cbiAgICBpZiAoZHVyYXRpb24gPT09IHVuZGVmaW5lZCkgZHVyYXRpb24gPSAkLmZ4LnNwZWVkcy5fZGVmYXVsdCAvIDEwMDBcbiAgICBpZiAoZGVsYXkgPT09IHVuZGVmaW5lZCkgZGVsYXkgPSAwXG4gICAgaWYgKCQuZngub2ZmKSBkdXJhdGlvbiA9IDBcblxuICAgIGlmICh0eXBlb2YgcHJvcGVydGllcyA9PSAnc3RyaW5nJykge1xuICAgICAgLy8ga2V5ZnJhbWUgYW5pbWF0aW9uXG4gICAgICBjc3NWYWx1ZXNbYW5pbWF0aW9uTmFtZV0gPSBwcm9wZXJ0aWVzXG4gICAgICBjc3NWYWx1ZXNbYW5pbWF0aW9uRHVyYXRpb25dID0gZHVyYXRpb24gKyAncydcbiAgICAgIGNzc1ZhbHVlc1thbmltYXRpb25EZWxheV0gPSBkZWxheSArICdzJ1xuICAgICAgY3NzVmFsdWVzW2FuaW1hdGlvblRpbWluZ10gPSAoZWFzZSB8fCAnbGluZWFyJylcbiAgICAgIGVuZEV2ZW50ID0gJC5meC5hbmltYXRpb25FbmRcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzUHJvcGVydGllcyA9IFtdXG4gICAgICAvLyBDU1MgdHJhbnNpdGlvbnNcbiAgICAgIGZvciAoa2V5IGluIHByb3BlcnRpZXMpXG4gICAgICAgIGlmIChzdXBwb3J0ZWRUcmFuc2Zvcm1zLnRlc3Qoa2V5KSkgdHJhbnNmb3JtcyArPSBrZXkgKyAnKCcgKyBwcm9wZXJ0aWVzW2tleV0gKyAnKSAnXG4gICAgICAgIGVsc2UgY3NzVmFsdWVzW2tleV0gPSBwcm9wZXJ0aWVzW2tleV0sIGNzc1Byb3BlcnRpZXMucHVzaChkYXNoZXJpemUoa2V5KSlcblxuICAgICAgaWYgKHRyYW5zZm9ybXMpIGNzc1ZhbHVlc1t0cmFuc2Zvcm1dID0gdHJhbnNmb3JtcywgY3NzUHJvcGVydGllcy5wdXNoKHRyYW5zZm9ybSlcbiAgICAgIGlmIChkdXJhdGlvbiA+IDAgJiYgdHlwZW9mIHByb3BlcnRpZXMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGNzc1ZhbHVlc1t0cmFuc2l0aW9uUHJvcGVydHldID0gY3NzUHJvcGVydGllcy5qb2luKCcsICcpXG4gICAgICAgIGNzc1ZhbHVlc1t0cmFuc2l0aW9uRHVyYXRpb25dID0gZHVyYXRpb24gKyAncydcbiAgICAgICAgY3NzVmFsdWVzW3RyYW5zaXRpb25EZWxheV0gPSBkZWxheSArICdzJ1xuICAgICAgICBjc3NWYWx1ZXNbdHJhbnNpdGlvblRpbWluZ10gPSAoZWFzZSB8fCAnbGluZWFyJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3cmFwcGVkQ2FsbGJhY2sgPSBmdW5jdGlvbihldmVudCl7XG4gICAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBldmVudC5jdXJyZW50VGFyZ2V0KSByZXR1cm4gLy8gbWFrZXMgc3VyZSB0aGUgZXZlbnQgZGlkbid0IGJ1YmJsZSBmcm9tIFwiYmVsb3dcIlxuICAgICAgICAkKGV2ZW50LnRhcmdldCkudW5iaW5kKGVuZEV2ZW50LCB3cmFwcGVkQ2FsbGJhY2spXG4gICAgICB9IGVsc2VcbiAgICAgICAgJCh0aGlzKS51bmJpbmQoZW5kRXZlbnQsIHdyYXBwZWRDYWxsYmFjaykgLy8gdHJpZ2dlcmVkIGJ5IHNldFRpbWVvdXRcblxuICAgICAgZmlyZWQgPSB0cnVlXG4gICAgICAkKHRoaXMpLmNzcyhjc3NSZXNldClcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwodGhpcylcbiAgICB9XG4gICAgaWYgKGR1cmF0aW9uID4gMCl7XG4gICAgICB0aGlzLmJpbmQoZW5kRXZlbnQsIHdyYXBwZWRDYWxsYmFjaylcbiAgICAgIC8vIHRyYW5zaXRpb25FbmQgaXMgbm90IGFsd2F5cyBmaXJpbmcgb24gb2xkZXIgQW5kcm9pZCBwaG9uZXNcbiAgICAgIC8vIHNvIG1ha2Ugc3VyZSBpdCBnZXRzIGZpcmVkXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmIChmaXJlZCkgcmV0dXJuXG4gICAgICAgIHdyYXBwZWRDYWxsYmFjay5jYWxsKHRoYXQpXG4gICAgICB9LCAoKGR1cmF0aW9uICsgZGVsYXkpICogMTAwMCkgKyAyNSlcbiAgICB9XG5cbiAgICAvLyB0cmlnZ2VyIHBhZ2UgcmVmbG93IHNvIG5ldyBlbGVtZW50cyBjYW4gYW5pbWF0ZVxuICAgIHRoaXMuc2l6ZSgpICYmIHRoaXMuZ2V0KDApLmNsaWVudExlZnRcblxuICAgIHRoaXMuY3NzKGNzc1ZhbHVlcylcblxuICAgIGlmIChkdXJhdGlvbiA8PSAwKSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgdGhhdC5lYWNoKGZ1bmN0aW9uKCl7IHdyYXBwZWRDYWxsYmFjay5jYWxsKHRoaXMpIH0pXG4gICAgfSwgMClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB0ZXN0RWwgPSBudWxsXG59KShaZXB0bylcblxuLy8gICAgIFplcHRvLmpzXG4vLyAgICAgKGMpIDIwMTAtMjAxNCBUaG9tYXMgRnVjaHNcbi8vICAgICBaZXB0by5qcyBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cblxuOyhmdW5jdGlvbigpe1xuICAvLyBnZXRDb21wdXRlZFN0eWxlIHNob3VsZG4ndCBmcmVhayBvdXQgd2hlbiBjYWxsZWRcbiAgLy8gd2l0aG91dCBhIHZhbGlkIGVsZW1lbnQgYXMgYXJndW1lbnRcbiAgdHJ5IHtcbiAgICBnZXRDb21wdXRlZFN0eWxlKHVuZGVmaW5lZClcbiAgfSBjYXRjaChlKSB7XG4gICAgdmFyIG5hdGl2ZUdldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlO1xuICAgIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlID0gZnVuY3Rpb24oZWxlbWVudCl7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gbmF0aXZlR2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVxuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgfVxuICB9XG59KSgpXG5cbi8vICAgICBaZXB0by5qc1xuLy8gICAgIChjKSAyMDEwLTIwMTQgVGhvbWFzIEZ1Y2hzXG4vLyAgICAgWmVwdG8uanMgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbjsoZnVuY3Rpb24oJCl7XG4gIHZhciB0b3VjaCA9IHt9LFxuICAgIHRvdWNoVGltZW91dCwgdGFwVGltZW91dCwgc3dpcGVUaW1lb3V0LCBsb25nVGFwVGltZW91dCxcbiAgICBsb25nVGFwRGVsYXkgPSA3NTAsXG4gICAgZ2VzdHVyZVxuXG4gIGZ1bmN0aW9uIHN3aXBlRGlyZWN0aW9uKHgxLCB4MiwgeTEsIHkyKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHgxIC0geDIpID49XG4gICAgICBNYXRoLmFicyh5MSAtIHkyKSA/ICh4MSAtIHgyID4gMCA/ICdMZWZ0JyA6ICdSaWdodCcpIDogKHkxIC0geTIgPiAwID8gJ1VwJyA6ICdEb3duJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvbmdUYXAoKSB7XG4gICAgbG9uZ1RhcFRpbWVvdXQgPSBudWxsXG4gICAgaWYgKHRvdWNoLmxhc3QpIHtcbiAgICAgIHRvdWNoLmVsLnRyaWdnZXIoJ2xvbmdUYXAnKVxuICAgICAgdG91Y2ggPSB7fVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbExvbmdUYXAoKSB7XG4gICAgaWYgKGxvbmdUYXBUaW1lb3V0KSBjbGVhclRpbWVvdXQobG9uZ1RhcFRpbWVvdXQpXG4gICAgbG9uZ1RhcFRpbWVvdXQgPSBudWxsXG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWxBbGwoKSB7XG4gICAgaWYgKHRvdWNoVGltZW91dCkgY2xlYXJUaW1lb3V0KHRvdWNoVGltZW91dClcbiAgICBpZiAodGFwVGltZW91dCkgY2xlYXJUaW1lb3V0KHRhcFRpbWVvdXQpXG4gICAgaWYgKHN3aXBlVGltZW91dCkgY2xlYXJUaW1lb3V0KHN3aXBlVGltZW91dClcbiAgICBpZiAobG9uZ1RhcFRpbWVvdXQpIGNsZWFyVGltZW91dChsb25nVGFwVGltZW91dClcbiAgICB0b3VjaFRpbWVvdXQgPSB0YXBUaW1lb3V0ID0gc3dpcGVUaW1lb3V0ID0gbG9uZ1RhcFRpbWVvdXQgPSBudWxsXG4gICAgdG91Y2ggPSB7fVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQcmltYXJ5VG91Y2goZXZlbnQpe1xuICAgIHJldHVybiAoZXZlbnQucG9pbnRlclR5cGUgPT0gJ3RvdWNoJyB8fFxuICAgICAgZXZlbnQucG9pbnRlclR5cGUgPT0gZXZlbnQuTVNQT0lOVEVSX1RZUEVfVE9VQ0gpXG4gICAgICAmJiBldmVudC5pc1ByaW1hcnlcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUG9pbnRlckV2ZW50VHlwZShlLCB0eXBlKXtcbiAgICByZXR1cm4gKGUudHlwZSA9PSAncG9pbnRlcicrdHlwZSB8fFxuICAgICAgZS50eXBlLnRvTG93ZXJDYXNlKCkgPT0gJ21zcG9pbnRlcicrdHlwZSlcbiAgfVxuXG4gICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7XG4gICAgdmFyIG5vdywgZGVsdGEsIGRlbHRhWCA9IDAsIGRlbHRhWSA9IDAsIGZpcnN0VG91Y2gsIF9pc1BvaW50ZXJUeXBlXG5cbiAgICBpZiAoJ01TR2VzdHVyZScgaW4gd2luZG93KSB7XG4gICAgICBnZXN0dXJlID0gbmV3IE1TR2VzdHVyZSgpXG4gICAgICBnZXN0dXJlLnRhcmdldCA9IGRvY3VtZW50LmJvZHlcbiAgICB9XG5cbiAgICAkKGRvY3VtZW50KVxuICAgICAgLmJpbmQoJ01TR2VzdHVyZUVuZCcsIGZ1bmN0aW9uKGUpe1xuICAgICAgICB2YXIgc3dpcGVEaXJlY3Rpb25Gcm9tVmVsb2NpdHkgPVxuICAgICAgICAgIGUudmVsb2NpdHlYID4gMSA/ICdSaWdodCcgOiBlLnZlbG9jaXR5WCA8IC0xID8gJ0xlZnQnIDogZS52ZWxvY2l0eVkgPiAxID8gJ0Rvd24nIDogZS52ZWxvY2l0eVkgPCAtMSA/ICdVcCcgOiBudWxsO1xuICAgICAgICBpZiAoc3dpcGVEaXJlY3Rpb25Gcm9tVmVsb2NpdHkpIHtcbiAgICAgICAgICB0b3VjaC5lbC50cmlnZ2VyKCdzd2lwZScpXG4gICAgICAgICAgdG91Y2guZWwudHJpZ2dlcignc3dpcGUnKyBzd2lwZURpcmVjdGlvbkZyb21WZWxvY2l0eSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5vbigndG91Y2hzdGFydCBNU1BvaW50ZXJEb3duIHBvaW50ZXJkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgIGlmKChfaXNQb2ludGVyVHlwZSA9IGlzUG9pbnRlckV2ZW50VHlwZShlLCAnZG93bicpKSAmJlxuICAgICAgICAgICFpc1ByaW1hcnlUb3VjaChlKSkgcmV0dXJuXG4gICAgICAgIGZpcnN0VG91Y2ggPSBfaXNQb2ludGVyVHlwZSA/IGUgOiBlLnRvdWNoZXNbMF1cbiAgICAgICAgaWYgKGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoID09PSAxICYmIHRvdWNoLngyKSB7XG4gICAgICAgICAgLy8gQ2xlYXIgb3V0IHRvdWNoIG1vdmVtZW50IGRhdGEgaWYgd2UgaGF2ZSBpdCBzdGlja2luZyBhcm91bmRcbiAgICAgICAgICAvLyBUaGlzIGNhbiBvY2N1ciBpZiB0b3VjaGNhbmNlbCBkb2Vzbid0IGZpcmUgZHVlIHRvIHByZXZlbnREZWZhdWx0LCBldGMuXG4gICAgICAgICAgdG91Y2gueDIgPSB1bmRlZmluZWRcbiAgICAgICAgICB0b3VjaC55MiA9IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICAgIG5vdyA9IERhdGUubm93KClcbiAgICAgICAgZGVsdGEgPSBub3cgLSAodG91Y2gubGFzdCB8fCBub3cpXG4gICAgICAgIHRvdWNoLmVsID0gJCgndGFnTmFtZScgaW4gZmlyc3RUb3VjaC50YXJnZXQgP1xuICAgICAgICAgIGZpcnN0VG91Y2gudGFyZ2V0IDogZmlyc3RUb3VjaC50YXJnZXQucGFyZW50Tm9kZSlcbiAgICAgICAgdG91Y2hUaW1lb3V0ICYmIGNsZWFyVGltZW91dCh0b3VjaFRpbWVvdXQpXG4gICAgICAgIHRvdWNoLngxID0gZmlyc3RUb3VjaC5wYWdlWFxuICAgICAgICB0b3VjaC55MSA9IGZpcnN0VG91Y2gucGFnZVlcbiAgICAgICAgaWYgKGRlbHRhID4gMCAmJiBkZWx0YSA8PSAyNTApIHRvdWNoLmlzRG91YmxlVGFwID0gdHJ1ZVxuICAgICAgICB0b3VjaC5sYXN0ID0gbm93XG4gICAgICAgIGxvbmdUYXBUaW1lb3V0ID0gc2V0VGltZW91dChsb25nVGFwLCBsb25nVGFwRGVsYXkpXG4gICAgICAgIC8vIGFkZHMgdGhlIGN1cnJlbnQgdG91Y2ggY29udGFjdCBmb3IgSUUgZ2VzdHVyZSByZWNvZ25pdGlvblxuICAgICAgICBpZiAoZ2VzdHVyZSAmJiBfaXNQb2ludGVyVHlwZSkgZ2VzdHVyZS5hZGRQb2ludGVyKGUucG9pbnRlcklkKTtcbiAgICAgIH0pXG4gICAgICAub24oJ3RvdWNobW92ZSBNU1BvaW50ZXJNb3ZlIHBvaW50ZXJtb3ZlJywgZnVuY3Rpb24oZSl7XG4gICAgICAgIGlmKChfaXNQb2ludGVyVHlwZSA9IGlzUG9pbnRlckV2ZW50VHlwZShlLCAnbW92ZScpKSAmJlxuICAgICAgICAgICFpc1ByaW1hcnlUb3VjaChlKSkgcmV0dXJuXG4gICAgICAgIGZpcnN0VG91Y2ggPSBfaXNQb2ludGVyVHlwZSA/IGUgOiBlLnRvdWNoZXNbMF1cbiAgICAgICAgY2FuY2VsTG9uZ1RhcCgpXG4gICAgICAgIHRvdWNoLngyID0gZmlyc3RUb3VjaC5wYWdlWFxuICAgICAgICB0b3VjaC55MiA9IGZpcnN0VG91Y2gucGFnZVlcblxuICAgICAgICBkZWx0YVggKz0gTWF0aC5hYnModG91Y2gueDEgLSB0b3VjaC54MilcbiAgICAgICAgZGVsdGFZICs9IE1hdGguYWJzKHRvdWNoLnkxIC0gdG91Y2gueTIpXG4gICAgICB9KVxuICAgICAgLm9uKCd0b3VjaGVuZCBNU1BvaW50ZXJVcCBwb2ludGVydXAnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgaWYoKF9pc1BvaW50ZXJUeXBlID0gaXNQb2ludGVyRXZlbnRUeXBlKGUsICd1cCcpKSAmJlxuICAgICAgICAgICFpc1ByaW1hcnlUb3VjaChlKSkgcmV0dXJuXG4gICAgICAgIGNhbmNlbExvbmdUYXAoKVxuXG4gICAgICAgIC8vIHN3aXBlXG4gICAgICAgIGlmICgodG91Y2gueDIgJiYgTWF0aC5hYnModG91Y2gueDEgLSB0b3VjaC54MikgPiAzMCkgfHxcbiAgICAgICAgICAgICh0b3VjaC55MiAmJiBNYXRoLmFicyh0b3VjaC55MSAtIHRvdWNoLnkyKSA+IDMwKSlcblxuICAgICAgICAgIHN3aXBlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0b3VjaC5lbC50cmlnZ2VyKCdzd2lwZScpXG4gICAgICAgICAgICB0b3VjaC5lbC50cmlnZ2VyKCdzd2lwZScgKyAoc3dpcGVEaXJlY3Rpb24odG91Y2gueDEsIHRvdWNoLngyLCB0b3VjaC55MSwgdG91Y2gueTIpKSlcbiAgICAgICAgICAgIHRvdWNoID0ge31cbiAgICAgICAgICB9LCAwKVxuXG4gICAgICAgIC8vIG5vcm1hbCB0YXBcbiAgICAgICAgZWxzZSBpZiAoJ2xhc3QnIGluIHRvdWNoKVxuICAgICAgICAgIC8vIGRvbid0IGZpcmUgdGFwIHdoZW4gZGVsdGEgcG9zaXRpb24gY2hhbmdlZCBieSBtb3JlIHRoYW4gMzAgcGl4ZWxzLFxuICAgICAgICAgIC8vIGZvciBpbnN0YW5jZSB3aGVuIG1vdmluZyB0byBhIHBvaW50IGFuZCBiYWNrIHRvIG9yaWdpblxuICAgICAgICAgIGlmIChkZWx0YVggPCAzMCAmJiBkZWx0YVkgPCAzMCkge1xuICAgICAgICAgICAgLy8gZGVsYXkgYnkgb25lIHRpY2sgc28gd2UgY2FuIGNhbmNlbCB0aGUgJ3RhcCcgZXZlbnQgaWYgJ3Njcm9sbCcgZmlyZXNcbiAgICAgICAgICAgIC8vICgndGFwJyBmaXJlcyBiZWZvcmUgJ3Njcm9sbCcpXG4gICAgICAgICAgICB0YXBUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAvLyB0cmlnZ2VyIHVuaXZlcnNhbCAndGFwJyB3aXRoIHRoZSBvcHRpb24gdG8gY2FuY2VsVG91Y2goKVxuICAgICAgICAgICAgICAvLyAoY2FuY2VsVG91Y2ggY2FuY2VscyBwcm9jZXNzaW5nIG9mIHNpbmdsZSB2cyBkb3VibGUgdGFwcyBmb3IgZmFzdGVyICd0YXAnIHJlc3BvbnNlKVxuICAgICAgICAgICAgICB2YXIgZXZlbnQgPSAkLkV2ZW50KCd0YXAnKVxuICAgICAgICAgICAgICBldmVudC5jYW5jZWxUb3VjaCA9IGNhbmNlbEFsbFxuICAgICAgICAgICAgICB0b3VjaC5lbC50cmlnZ2VyKGV2ZW50KVxuXG4gICAgICAgICAgICAgIC8vIHRyaWdnZXIgZG91YmxlIHRhcCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICBpZiAodG91Y2guaXNEb3VibGVUYXApIHtcbiAgICAgICAgICAgICAgICBpZiAodG91Y2guZWwpIHRvdWNoLmVsLnRyaWdnZXIoJ2RvdWJsZVRhcCcpXG4gICAgICAgICAgICAgICAgdG91Y2ggPSB7fVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gdHJpZ2dlciBzaW5nbGUgdGFwIGFmdGVyIDI1MG1zIG9mIGluYWN0aXZpdHlcbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdG91Y2hUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgdG91Y2hUaW1lb3V0ID0gbnVsbFxuICAgICAgICAgICAgICAgICAgaWYgKHRvdWNoLmVsKSB0b3VjaC5lbC50cmlnZ2VyKCdzaW5nbGVUYXAnKVxuICAgICAgICAgICAgICAgICAgdG91Y2ggPSB7fVxuICAgICAgICAgICAgICAgIH0sIDI1MClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG91Y2ggPSB7fVxuICAgICAgICAgIH1cbiAgICAgICAgICBkZWx0YVggPSBkZWx0YVkgPSAwXG5cbiAgICAgIH0pXG4gICAgICAvLyB3aGVuIHRoZSBicm93c2VyIHdpbmRvdyBsb3NlcyBmb2N1cyxcbiAgICAgIC8vIGZvciBleGFtcGxlIHdoZW4gYSBtb2RhbCBkaWFsb2cgaXMgc2hvd24sXG4gICAgICAvLyBjYW5jZWwgYWxsIG9uZ29pbmcgZXZlbnRzXG4gICAgICAub24oJ3RvdWNoY2FuY2VsIE1TUG9pbnRlckNhbmNlbCBwb2ludGVyY2FuY2VsJywgY2FuY2VsQWxsKVxuXG4gICAgLy8gc2Nyb2xsaW5nIHRoZSB3aW5kb3cgaW5kaWNhdGVzIGludGVudGlvbiBvZiB0aGUgdXNlclxuICAgIC8vIHRvIHNjcm9sbCwgbm90IHRhcCBvciBzd2lwZSwgc28gY2FuY2VsIGFsbCBvbmdvaW5nIGV2ZW50c1xuICAgICQod2luZG93KS5vbignc2Nyb2xsJywgY2FuY2VsQWxsKVxuICB9KVxuXG4gIDtbJ3N3aXBlJywgJ3N3aXBlTGVmdCcsICdzd2lwZVJpZ2h0JywgJ3N3aXBlVXAnLCAnc3dpcGVEb3duJyxcbiAgICAnZG91YmxlVGFwJywgJ3RhcCcsICdzaW5nbGVUYXAnLCAnbG9uZ1RhcCddLmZvckVhY2goZnVuY3Rpb24oZXZlbnROYW1lKXtcbiAgICAkLmZuW2V2ZW50TmFtZV0gPSBmdW5jdGlvbihjYWxsYmFjayl7IHJldHVybiB0aGlzLm9uKGV2ZW50TmFtZSwgY2FsbGJhY2spIH1cbiAgfSlcbn0pKFplcHRvKVxuXG47IGJyb3dzZXJpZnlfc2hpbV9fZGVmaW5lX19tb2R1bGVfX2V4cG9ydF9fKHR5cGVvZiAkICE9IFwidW5kZWZpbmVkXCIgPyAkIDogd2luZG93LiQpO1xuXG59KS5jYWxsKGdsb2JhbCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbiBkZWZpbmVFeHBvcnQoZXgpIHsgbW9kdWxlLmV4cG9ydHMgPSBleDsgfSk7XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW14cFlpOTZaWEIwYjJwekwzcGxjSFJ2TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklqc2dkbUZ5SUY5ZlluSnZkM05sY21sbWVWOXphR2x0WDNKbGNYVnBjbVZmWHoxeVpYRjFhWEpsT3lobWRXNWpkR2x2YmlCaWNtOTNjMlZ5YVdaNVUyaHBiU2h0YjJSMWJHVXNJR1Y0Y0c5eWRITXNJSEpsY1hWcGNtVXNJR1JsWm1sdVpTd2dZbkp2ZDNObGNtbG1lVjl6YUdsdFgxOWtaV1pwYm1WZlgyMXZaSFZzWlY5ZlpYaHdiM0owWDE4cElIdGNiaTh2SUNBZ0lDQmFaWEIwYnk1cWMxeHVMeThnSUNBZ0lDaGpLU0F5TURFd0xUSXdNVFFnVkdodmJXRnpJRVoxWTJoelhHNHZMeUFnSUNBZ1dtVndkRzh1YW5NZ2JXRjVJR0psSUdaeVpXVnNlU0JrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RVbFVJR3hwWTJWdWMyVXVYRzVjYm5aaGNpQmFaWEIwYnlBOUlDaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ2RtRnlJSFZ1WkdWbWFXNWxaQ3dnYTJWNUxDQWtMQ0JqYkdGemMweHBjM1FzSUdWdGNIUjVRWEp5WVhrZ1BTQmJYU3dnWTI5dVkyRjBJRDBnWlcxd2RIbEJjbkpoZVM1amIyNWpZWFFzSUdacGJIUmxjaUE5SUdWdGNIUjVRWEp5WVhrdVptbHNkR1Z5TENCemJHbGpaU0E5SUdWdGNIUjVRWEp5WVhrdWMyeHBZMlVzWEc0Z0lDQWdaRzlqZFcxbGJuUWdQU0IzYVc1a2IzY3VaRzlqZFcxbGJuUXNYRzRnSUNBZ1pXeGxiV1Z1ZEVScGMzQnNZWGtnUFNCN2ZTd2dZMnhoYzNORFlXTm9aU0E5SUh0OUxGeHVJQ0FnSUdOemMwNTFiV0psY2lBOUlIc2dKMk52YkhWdGJpMWpiM1Z1ZENjNklERXNJQ2RqYjJ4MWJXNXpKem9nTVN3Z0oyWnZiblF0ZDJWcFoyaDBKem9nTVN3Z0oyeHBibVV0YUdWcFoyaDBKem9nTVN3bmIzQmhZMmwwZVNjNklERXNJQ2Q2TFdsdVpHVjRKem9nTVN3Z0ozcHZiMjBuT2lBeElIMHNYRzRnSUNBZ1puSmhaMjFsYm5SU1JTQTlJQzllWEZ4ektqd29YRngzSzN3aEtWdGVQbDBxUGk4c1hHNGdJQ0FnYzJsdVoyeGxWR0ZuVWtVZ1BTQXZYandvWEZ4M0t5bGNYSE1xWEZ3dlB6NG9Qem84WEZ3dlhGd3hQbndwSkM4c1hHNGdJQ0FnZEdGblJYaHdZVzVrWlhKU1JTQTlJQzg4S0Q4aFlYSmxZWHhpY254amIyeDhaVzFpWldSOGFISjhhVzFuZkdsdWNIVjBmR3hwYm10OGJXVjBZWHh3WVhKaGJTa29LRnRjWEhjNlhTc3BXMTQrWFNvcFhGd3ZQaTlwWnl4Y2JpQWdJQ0J5YjI5MFRtOWtaVkpGSUQwZ0wxNG9QenBpYjJSNWZHaDBiV3dwSkM5cExGeHVJQ0FnSUdOaGNHbDBZV3hTUlNBOUlDOG9XMEV0V2wwcEwyY3NYRzVjYmlBZ0lDQXZMeUJ6Y0dWamFXRnNJR0YwZEhKcFluVjBaWE1nZEdoaGRDQnphRzkxYkdRZ1ltVWdaMlYwTDNObGRDQjJhV0VnYldWMGFHOWtJR05oYkd4elhHNGdJQ0FnYldWMGFHOWtRWFIwY21saWRYUmxjeUE5SUZzbmRtRnNKeXdnSjJOemN5Y3NJQ2RvZEcxc0p5d2dKM1JsZUhRbkxDQW5aR0YwWVNjc0lDZDNhV1IwYUNjc0lDZG9aV2xuYUhRbkxDQW5iMlptYzJWMEoxMHNYRzVjYmlBZ0lDQmhaR3BoWTJWdVkzbFBjR1Z5WVhSdmNuTWdQU0JiSUNkaFpuUmxjaWNzSUNkd2NtVndaVzVrSnl3Z0oySmxabTl5WlNjc0lDZGhjSEJsYm1RbklGMHNYRzRnSUNBZ2RHRmliR1VnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2QwWVdKc1pTY3BMRnh1SUNBZ0lIUmhZbXhsVW05M0lEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnbmRISW5LU3hjYmlBZ0lDQmpiMjUwWVdsdVpYSnpJRDBnZTF4dUlDQWdJQ0FnSjNSeUp6b2daRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnbmRHSnZaSGtuS1N4Y2JpQWdJQ0FnSUNkMFltOWtlU2M2SUhSaFlteGxMQ0FuZEdobFlXUW5PaUIwWVdKc1pTd2dKM1JtYjI5MEp6b2dkR0ZpYkdVc1hHNGdJQ0FnSUNBbmRHUW5PaUIwWVdKc1pWSnZkeXdnSjNSb0p6b2dkR0ZpYkdWU2IzY3NYRzRnSUNBZ0lDQW5LaWM2SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcFhHNGdJQ0FnZlN4Y2JpQWdJQ0J5WldGa2VWSkZJRDBnTDJOdmJYQnNaWFJsZkd4dllXUmxaSHhwYm5SbGNtRmpkR2wyWlM4c1hHNGdJQ0FnYzJsdGNHeGxVMlZzWldOMGIzSlNSU0E5SUM5ZVcxeGNkeTFkS2lRdkxGeHVJQ0FnSUdOc1lYTnpNblI1Y0dVZ1BTQjdmU3hjYmlBZ0lDQjBiMU4wY21sdVp5QTlJR05zWVhOek1uUjVjR1V1ZEc5VGRISnBibWNzWEc0Z0lDQWdlbVZ3ZEc4Z1BTQjdmU3hjYmlBZ0lDQmpZVzFsYkdsNlpTd2dkVzVwY1N4Y2JpQWdJQ0IwWlcxd1VHRnlaVzUwSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWkdsMkp5a3NYRzRnSUNBZ2NISnZjRTFoY0NBOUlIdGNiaUFnSUNBZ0lDZDBZV0pwYm1SbGVDYzZJQ2QwWVdKSmJtUmxlQ2NzWEc0Z0lDQWdJQ0FuY21WaFpHOXViSGtuT2lBbmNtVmhaRTl1YkhrbkxGeHVJQ0FnSUNBZ0oyWnZjaWM2SUNkb2RHMXNSbTl5Snl4Y2JpQWdJQ0FnSUNkamJHRnpjeWM2SUNkamJHRnpjMDVoYldVbkxGeHVJQ0FnSUNBZ0oyMWhlR3hsYm1kMGFDYzZJQ2R0WVhoTVpXNW5kR2duTEZ4dUlDQWdJQ0FnSjJObGJHeHpjR0ZqYVc1bkp6b2dKMk5sYkd4VGNHRmphVzVuSnl4Y2JpQWdJQ0FnSUNkalpXeHNjR0ZrWkdsdVp5YzZJQ2RqWld4c1VHRmtaR2x1Wnljc1hHNGdJQ0FnSUNBbmNtOTNjM0JoYmljNklDZHliM2RUY0dGdUp5eGNiaUFnSUNBZ0lDZGpiMnh6Y0dGdUp6b2dKMk52YkZOd1lXNG5MRnh1SUNBZ0lDQWdKM1Z6WlcxaGNDYzZJQ2QxYzJWTllYQW5MRnh1SUNBZ0lDQWdKMlp5WVcxbFltOXlaR1Z5SnpvZ0oyWnlZVzFsUW05eVpHVnlKeXhjYmlBZ0lDQWdJQ2RqYjI1MFpXNTBaV1JwZEdGaWJHVW5PaUFuWTI5dWRHVnVkRVZrYVhSaFlteGxKMXh1SUNBZ0lIMHNYRzRnSUNBZ2FYTkJjbkpoZVNBOUlFRnljbUY1TG1selFYSnlZWGtnZkh4Y2JpQWdJQ0FnSUdaMWJtTjBhVzl1S0c5aWFtVmpkQ2w3SUhKbGRIVnliaUJ2WW1wbFkzUWdhVzV6ZEdGdVkyVnZaaUJCY25KaGVTQjlYRzVjYmlBZ2VtVndkRzh1YldGMFkyaGxjeUE5SUdaMWJtTjBhVzl1S0dWc1pXMWxiblFzSUhObGJHVmpkRzl5S1NCN1hHNGdJQ0FnYVdZZ0tDRnpaV3hsWTNSdmNpQjhmQ0FoWld4bGJXVnVkQ0I4ZkNCbGJHVnRaVzUwTG01dlpHVlVlWEJsSUNFOVBTQXhLU0J5WlhSMWNtNGdabUZzYzJWY2JpQWdJQ0IyWVhJZ2JXRjBZMmhsYzFObGJHVmpkRzl5SUQwZ1pXeGxiV1Z1ZEM1M1pXSnJhWFJOWVhSamFHVnpVMlZzWldOMGIzSWdmSHdnWld4bGJXVnVkQzV0YjNwTllYUmphR1Z6VTJWc1pXTjBiM0lnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1dlRXRjBZMmhsYzFObGJHVmpkRzl5SUh4OElHVnNaVzFsYm5RdWJXRjBZMmhsYzFObGJHVmpkRzl5WEc0Z0lDQWdhV1lnS0cxaGRHTm9aWE5UWld4bFkzUnZjaWtnY21WMGRYSnVJRzFoZEdOb1pYTlRaV3hsWTNSdmNpNWpZV3hzS0dWc1pXMWxiblFzSUhObGJHVmpkRzl5S1Z4dUlDQWdJQzh2SUdaaGJHd2dZbUZqYXlCMGJ5QndaWEptYjNKdGFXNW5JR0VnYzJWc1pXTjBiM0k2WEc0Z0lDQWdkbUZ5SUcxaGRHTm9MQ0J3WVhKbGJuUWdQU0JsYkdWdFpXNTBMbkJoY21WdWRFNXZaR1VzSUhSbGJYQWdQU0FoY0dGeVpXNTBYRzRnSUNBZ2FXWWdLSFJsYlhBcElDaHdZWEpsYm5RZ1BTQjBaVzF3VUdGeVpXNTBLUzVoY0hCbGJtUkRhR2xzWkNobGJHVnRaVzUwS1Z4dUlDQWdJRzFoZEdOb0lEMGdmbnBsY0hSdkxuRnpZU2h3WVhKbGJuUXNJSE5sYkdWamRHOXlLUzVwYm1SbGVFOW1LR1ZzWlcxbGJuUXBYRzRnSUNBZ2RHVnRjQ0FtSmlCMFpXMXdVR0Z5Wlc1MExuSmxiVzkyWlVOb2FXeGtLR1ZzWlcxbGJuUXBYRzRnSUNBZ2NtVjBkWEp1SUcxaGRHTm9YRzRnSUgxY2JseHVJQ0JtZFc1amRHbHZiaUIwZVhCbEtHOWlhaWtnZTF4dUlDQWdJSEpsZEhWeWJpQnZZbW9nUFQwZ2JuVnNiQ0EvSUZOMGNtbHVaeWh2WW1vcElEcGNiaUFnSUNBZ0lHTnNZWE56TW5SNWNHVmJkRzlUZEhKcGJtY3VZMkZzYkNodlltb3BYU0I4ZkNCY0ltOWlhbVZqZEZ3aVhHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQnBjMFoxYm1OMGFXOXVLSFpoYkhWbEtTQjdJSEpsZEhWeWJpQjBlWEJsS0haaGJIVmxLU0E5UFNCY0ltWjFibU4wYVc5dVhDSWdmVnh1SUNCbWRXNWpkR2x2YmlCcGMxZHBibVJ2ZHlodlltb3BJQ0FnSUNCN0lISmxkSFZ5YmlCdlltb2dJVDBnYm5Wc2JDQW1KaUJ2WW1vZ1BUMGdiMkpxTG5kcGJtUnZkeUI5WEc0Z0lHWjFibU4wYVc5dUlHbHpSRzlqZFcxbGJuUW9iMkpxS1NBZ0lIc2djbVYwZFhKdUlHOWlhaUFoUFNCdWRXeHNJQ1ltSUc5aWFpNXViMlJsVkhsd1pTQTlQU0J2WW1vdVJFOURWVTFGVGxSZlRrOUVSU0I5WEc0Z0lHWjFibU4wYVc5dUlHbHpUMkpxWldOMEtHOWlhaWtnSUNBZ0lIc2djbVYwZFhKdUlIUjVjR1VvYjJKcUtTQTlQU0JjSW05aWFtVmpkRndpSUgxY2JpQWdablZ1WTNScGIyNGdhWE5RYkdGcGJrOWlhbVZqZENodlltb3BJSHRjYmlBZ0lDQnlaWFIxY200Z2FYTlBZbXBsWTNRb2IySnFLU0FtSmlBaGFYTlhhVzVrYjNjb2IySnFLU0FtSmlCUFltcGxZM1F1WjJWMFVISnZkRzkwZVhCbFQyWW9iMkpxS1NBOVBTQlBZbXBsWTNRdWNISnZkRzkwZVhCbFhHNGdJSDFjYmlBZ1puVnVZM1JwYjI0Z2JHbHJaVUZ5Y21GNUtHOWlhaWtnZXlCeVpYUjFjbTRnZEhsd1pXOW1JRzlpYWk1c1pXNW5kR2dnUFQwZ0oyNTFiV0psY2ljZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUdOdmJYQmhZM1FvWVhKeVlYa3BJSHNnY21WMGRYSnVJR1pwYkhSbGNpNWpZV3hzS0dGeWNtRjVMQ0JtZFc1amRHbHZiaWhwZEdWdEtYc2djbVYwZFhKdUlHbDBaVzBnSVQwZ2JuVnNiQ0I5S1NCOVhHNGdJR1oxYm1OMGFXOXVJR1pzWVhSMFpXNG9ZWEp5WVhrcElIc2djbVYwZFhKdUlHRnljbUY1TG14bGJtZDBhQ0ErSURBZ1B5QWtMbVp1TG1OdmJtTmhkQzVoY0hCc2VTaGJYU3dnWVhKeVlYa3BJRG9nWVhKeVlYa2dmVnh1SUNCallXMWxiR2w2WlNBOUlHWjFibU4wYVc5dUtITjBjaWw3SUhKbGRIVnliaUJ6ZEhJdWNtVndiR0ZqWlNndkxTc29MaWsvTDJjc0lHWjFibU4wYVc5dUtHMWhkR05vTENCamFISXBleUJ5WlhSMWNtNGdZMmh5SUQ4Z1kyaHlMblJ2VlhCd1pYSkRZWE5sS0NrZ09pQW5KeUI5S1NCOVhHNGdJR1oxYm1OMGFXOXVJR1JoYzJobGNtbDZaU2h6ZEhJcElIdGNiaUFnSUNCeVpYUjFjbTRnYzNSeUxuSmxjR3hoWTJVb0x6bzZMMmNzSUNjdkp5bGNiaUFnSUNBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvTHloYlFTMWFYU3NwS0Z0QkxWcGRXMkV0ZWwwcEwyY3NJQ2NrTVY4a01pY3BYRzRnSUNBZ0lDQWdJQ0FnSUM1eVpYQnNZV05sS0M4b1cyRXRlbHhjWkYwcEtGdEJMVnBkS1M5bkxDQW5KREZmSkRJbktWeHVJQ0FnSUNBZ0lDQWdJQ0F1Y21Wd2JHRmpaU2d2WHk5bkxDQW5MU2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDNTBiMHh2ZDJWeVEyRnpaU2dwWEc0Z0lIMWNiaUFnZFc1cGNTQTlJR1oxYm1OMGFXOXVLR0Z5Y21GNUtYc2djbVYwZFhKdUlHWnBiSFJsY2k1allXeHNLR0Z5Y21GNUxDQm1kVzVqZEdsdmJpaHBkR1Z0TENCcFpIZ3BleUJ5WlhSMWNtNGdZWEp5WVhrdWFXNWtaWGhQWmlocGRHVnRLU0E5UFNCcFpIZ2dmU2tnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJR05zWVhOelVrVW9ibUZ0WlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WVcxbElHbHVJR05zWVhOelEyRmphR1VnUDF4dUlDQWdJQ0FnWTJ4aGMzTkRZV05vWlZ0dVlXMWxYU0E2SUNoamJHRnpjME5oWTJobFcyNWhiV1ZkSUQwZ2JtVjNJRkpsWjBWNGNDZ25LRjU4WEZ4Y1hITXBKeUFySUc1aGJXVWdLeUFuS0Z4Y1hGeHpmQ1FwSnlrcFhHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQnRZWGxpWlVGa1pGQjRLRzVoYldVc0lIWmhiSFZsS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2gwZVhCbGIyWWdkbUZzZFdVZ1BUMGdYQ0p1ZFcxaVpYSmNJaUFtSmlBaFkzTnpUblZ0WW1WeVcyUmhjMmhsY21sNlpTaHVZVzFsS1YwcElEOGdkbUZzZFdVZ0t5QmNJbkI0WENJZ09pQjJZV3gxWlZ4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z1pHVm1ZWFZzZEVScGMzQnNZWGtvYm05a1pVNWhiV1VwSUh0Y2JpQWdJQ0IyWVhJZ1pXeGxiV1Z1ZEN3Z1pHbHpjR3hoZVZ4dUlDQWdJR2xtSUNnaFpXeGxiV1Z1ZEVScGMzQnNZWGxiYm05a1pVNWhiV1ZkS1NCN1hHNGdJQ0FnSUNCbGJHVnRaVzUwSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2h1YjJSbFRtRnRaU2xjYmlBZ0lDQWdJR1J2WTNWdFpXNTBMbUp2WkhrdVlYQndaVzVrUTJocGJHUW9aV3hsYldWdWRDbGNiaUFnSUNBZ0lHUnBjM0JzWVhrZ1BTQm5aWFJEYjIxd2RYUmxaRk4wZVd4bEtHVnNaVzFsYm5Rc0lDY25LUzVuWlhSUWNtOXdaWEowZVZaaGJIVmxLRndpWkdsemNHeGhlVndpS1Z4dUlDQWdJQ0FnWld4bGJXVnVkQzV3WVhKbGJuUk9iMlJsTG5KbGJXOTJaVU5vYVd4a0tHVnNaVzFsYm5RcFhHNGdJQ0FnSUNCa2FYTndiR0Y1SUQwOUlGd2libTl1WlZ3aUlDWW1JQ2hrYVhOd2JHRjVJRDBnWENKaWJHOWphMXdpS1Z4dUlDQWdJQ0FnWld4bGJXVnVkRVJwYzNCc1lYbGJibTlrWlU1aGJXVmRJRDBnWkdsemNHeGhlVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWld4bGJXVnVkRVJwYzNCc1lYbGJibTlrWlU1aGJXVmRYRzRnSUgxY2JseHVJQ0JtZFc1amRHbHZiaUJqYUdsc1pISmxiaWhsYkdWdFpXNTBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlDZGphR2xzWkhKbGJpY2dhVzRnWld4bGJXVnVkQ0EvWEc0Z0lDQWdJQ0J6YkdsalpTNWpZV3hzS0dWc1pXMWxiblF1WTJocGJHUnlaVzRwSURwY2JpQWdJQ0FnSUNRdWJXRndLR1ZzWlcxbGJuUXVZMmhwYkdST2IyUmxjeXdnWm5WdVkzUnBiMjRvYm05a1pTbDdJR2xtSUNodWIyUmxMbTV2WkdWVWVYQmxJRDA5SURFcElISmxkSFZ5YmlCdWIyUmxJSDBwWEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCYUtHUnZiU3dnYzJWc1pXTjBiM0lwSUh0Y2JpQWdJQ0IyWVhJZ2FTd2diR1Z1SUQwZ1pHOXRJRDhnWkc5dExteGxibWQwYUNBNklEQmNiaUFnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnYkdWdU95QnBLeXNwSUhSb2FYTmJhVjBnUFNCa2IyMWJhVjFjYmlBZ0lDQjBhR2x6TG14bGJtZDBhQ0E5SUd4bGJseHVJQ0FnSUhSb2FYTXVjMlZzWldOMGIzSWdQU0J6Wld4bFkzUnZjaUI4ZkNBbkoxeHVJQ0I5WEc1Y2JpQWdMeThnWUNRdWVtVndkRzh1Wm5KaFoyMWxiblJnSUhSaGEyVnpJR0VnYUhSdGJDQnpkSEpwYm1jZ1lXNWtJR0Z1SUc5d2RHbHZibUZzSUhSaFp5QnVZVzFsWEc0Z0lDOHZJSFJ2SUdkbGJtVnlZWFJsSUVSUFRTQnViMlJsY3lCdWIyUmxjeUJtY205dElIUm9aU0JuYVhabGJpQm9kRzFzSUhOMGNtbHVaeTVjYmlBZ0x5OGdWR2hsSUdkbGJtVnlZWFJsWkNCRVQwMGdibTlrWlhNZ1lYSmxJSEpsZEhWeWJtVmtJR0Z6SUdGdUlHRnljbUY1TGx4dUlDQXZMeUJVYUdseklHWjFibU4wYVc5dUlHTmhiaUJpWlNCdmRtVnljbWxrWlc0Z2FXNGdjR3gxWjJsdWN5Qm1iM0lnWlhoaGJYQnNaU0IwYnlCdFlXdGxYRzRnSUM4dklHbDBJR052YlhCaGRHbGliR1VnZDJsMGFDQmljbTkzYzJWeWN5QjBhR0YwSUdSdmJpZDBJSE4xY0hCdmNuUWdkR2hsSUVSUFRTQm1kV3hzZVM1Y2JpQWdlbVZ3ZEc4dVpuSmhaMjFsYm5RZ1BTQm1kVzVqZEdsdmJpaG9kRzFzTENCdVlXMWxMQ0J3Y205d1pYSjBhV1Z6S1NCN1hHNGdJQ0FnZG1GeUlHUnZiU3dnYm05a1pYTXNJR052Ym5SaGFXNWxjbHh1WEc0Z0lDQWdMeThnUVNCemNHVmphV0ZzSUdOaGMyVWdiM0IwYVcxcGVtRjBhVzl1SUdadmNpQmhJSE5wYm1kc1pTQjBZV2RjYmlBZ0lDQnBaaUFvYzJsdVoyeGxWR0ZuVWtVdWRHVnpkQ2hvZEcxc0tTa2daRzl0SUQwZ0pDaGtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0ZKbFowVjRjQzRrTVNrcFhHNWNiaUFnSUNCcFppQW9JV1J2YlNrZ2UxeHVJQ0FnSUNBZ2FXWWdLR2gwYld3dWNtVndiR0ZqWlNrZ2FIUnRiQ0E5SUdoMGJXd3VjbVZ3YkdGalpTaDBZV2RGZUhCaGJtUmxjbEpGTENCY0lqd2tNVDQ4THlReVBsd2lLVnh1SUNBZ0lDQWdhV1lnS0c1aGJXVWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2JtRnRaU0E5SUdaeVlXZHRaVzUwVWtVdWRHVnpkQ2hvZEcxc0tTQW1KaUJTWldkRmVIQXVKREZjYmlBZ0lDQWdJR2xtSUNnaEtHNWhiV1VnYVc0Z1kyOXVkR0ZwYm1WeWN5a3BJRzVoYldVZ1BTQW5LaWRjYmx4dUlDQWdJQ0FnWTI5dWRHRnBibVZ5SUQwZ1kyOXVkR0ZwYm1WeWMxdHVZVzFsWFZ4dUlDQWdJQ0FnWTI5dWRHRnBibVZ5TG1sdWJtVnlTRlJOVENBOUlDY25JQ3NnYUhSdGJGeHVJQ0FnSUNBZ1pHOXRJRDBnSkM1bFlXTm9LSE5zYVdObExtTmhiR3dvWTI5dWRHRnBibVZ5TG1Ob2FXeGtUbTlrWlhNcExDQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWEl1Y21WdGIzWmxRMmhwYkdRb2RHaHBjeWxjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dselVHeGhhVzVQWW1wbFkzUW9jSEp2Y0dWeWRHbGxjeWtwSUh0Y2JpQWdJQ0FnSUc1dlpHVnpJRDBnSkNoa2IyMHBYRzRnSUNBZ0lDQWtMbVZoWTJnb2NISnZjR1Z5ZEdsbGN5d2dablZ1WTNScGIyNG9hMlY1TENCMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9iV1YwYUc5a1FYUjBjbWxpZFhSbGN5NXBibVJsZUU5bUtHdGxlU2tnUGlBdE1Ta2dibTlrWlhOYmEyVjVYU2gyWVd4MVpTbGNiaUFnSUNBZ0lDQWdaV3h6WlNCdWIyUmxjeTVoZEhSeUtHdGxlU3dnZG1Gc2RXVXBYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCa2IyMWNiaUFnZlZ4dVhHNGdJQzh2SUdBa0xucGxjSFJ2TGxwZ0lITjNZWEJ6SUc5MWRDQjBhR1VnY0hKdmRHOTBlWEJsSUc5bUlIUm9aU0JuYVhabGJpQmdaRzl0WUNCaGNuSmhlVnh1SUNBdkx5QnZaaUJ1YjJSbGN5QjNhWFJvSUdBa0xtWnVZQ0JoYm1RZ2RHaDFjeUJ6ZFhCd2JIbHBibWNnWVd4c0lIUm9aU0JhWlhCMGJ5Qm1kVzVqZEdsdmJuTmNiaUFnTHk4Z2RHOGdkR2hsSUdGeWNtRjVMaUJVYUdseklHMWxkR2h2WkNCallXNGdZbVVnYjNabGNuSnBaR1Z1SUdsdUlIQnNkV2RwYm5NdVhHNGdJSHBsY0hSdkxsb2dQU0JtZFc1amRHbHZiaWhrYjIwc0lITmxiR1ZqZEc5eUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QmFLR1J2YlN3Z2MyVnNaV04wYjNJcFhHNGdJSDFjYmx4dUlDQXZMeUJnSkM1NlpYQjBieTVwYzFwZ0lITm9iM1ZzWkNCeVpYUjFjbTRnWUhSeWRXVmdJR2xtSUhSb1pTQm5hWFpsYmlCdlltcGxZM1FnYVhNZ1lTQmFaWEIwYjF4dUlDQXZMeUJqYjJ4c1pXTjBhVzl1TGlCVWFHbHpJRzFsZEdodlpDQmpZVzRnWW1VZ2IzWmxjbkpwWkdWdUlHbHVJSEJzZFdkcGJuTXVYRzRnSUhwbGNIUnZMbWx6V2lBOUlHWjFibU4wYVc5dUtHOWlhbVZqZENrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ2WW1wbFkzUWdhVzV6ZEdGdVkyVnZaaUI2WlhCMGJ5NWFYRzRnSUgxY2JseHVJQ0F2THlCZ0pDNTZaWEIwYnk1cGJtbDBZQ0JwY3lCYVpYQjBieWR6SUdOdmRXNTBaWEp3WVhKMElIUnZJR3BSZFdWeWVTZHpJR0FrTG1adUxtbHVhWFJnSUdGdVpGeHVJQ0F2THlCMFlXdGxjeUJoSUVOVFV5QnpaV3hsWTNSdmNpQmhibVFnWVc0Z2IzQjBhVzl1WVd3Z1kyOXVkR1Y0ZENBb1lXNWtJR2hoYm1Sc1pYTWdkbUZ5YVc5MWMxeHVJQ0F2THlCemNHVmphV0ZzSUdOaGMyVnpLUzVjYmlBZ0x5OGdWR2hwY3lCdFpYUm9iMlFnWTJGdUlHSmxJRzkyWlhKeWFXUmxiaUJwYmlCd2JIVm5hVzV6TGx4dUlDQjZaWEIwYnk1cGJtbDBJRDBnWm5WdVkzUnBiMjRvYzJWc1pXTjBiM0lzSUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0IyWVhJZ1pHOXRYRzRnSUNBZ0x5OGdTV1lnYm05MGFHbHVaeUJuYVhabGJpd2djbVYwZFhKdUlHRnVJR1Z0Y0hSNUlGcGxjSFJ2SUdOdmJHeGxZM1JwYjI1Y2JpQWdJQ0JwWmlBb0lYTmxiR1ZqZEc5eUtTQnlaWFIxY200Z2VtVndkRzh1V2lncFhHNGdJQ0FnTHk4Z1QzQjBhVzFwZW1VZ1ptOXlJSE4wY21sdVp5QnpaV3hsWTNSdmNuTmNiaUFnSUNCbGJITmxJR2xtSUNoMGVYQmxiMllnYzJWc1pXTjBiM0lnUFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lITmxiR1ZqZEc5eUlEMGdjMlZzWldOMGIzSXVkSEpwYlNncFhHNGdJQ0FnSUNBdkx5QkpaaUJwZENkeklHRWdhSFJ0YkNCbWNtRm5iV1Z1ZEN3Z1kzSmxZWFJsSUc1dlpHVnpJR1p5YjIwZ2FYUmNiaUFnSUNBZ0lDOHZJRTV2ZEdVNklFbHVJR0p2ZEdnZ1EyaHliMjFsSURJeElHRnVaQ0JHYVhKbFptOTRJREUxTENCRVQwMGdaWEp5YjNJZ01USmNiaUFnSUNBZ0lDOHZJR2x6SUhSb2NtOTNiaUJwWmlCMGFHVWdabkpoWjIxbGJuUWdaRzlsYzI0bmRDQmlaV2RwYmlCM2FYUm9JRHhjYmlBZ0lDQWdJR2xtSUNoelpXeGxZM1J2Y2xzd1hTQTlQU0FuUENjZ0ppWWdabkpoWjIxbGJuUlNSUzUwWlhOMEtITmxiR1ZqZEc5eUtTbGNiaUFnSUNBZ0lDQWdaRzl0SUQwZ2VtVndkRzh1Wm5KaFoyMWxiblFvYzJWc1pXTjBiM0lzSUZKbFowVjRjQzRrTVN3Z1kyOXVkR1Y0ZENrc0lITmxiR1ZqZEc5eUlEMGdiblZzYkZ4dUlDQWdJQ0FnTHk4Z1NXWWdkR2hsY21VbmN5QmhJR052Ym5SbGVIUXNJR055WldGMFpTQmhJR052Ykd4bFkzUnBiMjRnYjI0Z2RHaGhkQ0JqYjI1MFpYaDBJR1pwY25OMExDQmhibVFnYzJWc1pXTjBYRzRnSUNBZ0lDQXZMeUJ1YjJSbGN5Qm1jbTl0SUhSb1pYSmxYRzRnSUNBZ0lDQmxiSE5sSUdsbUlDaGpiMjUwWlhoMElDRTlQU0IxYm1SbFptbHVaV1FwSUhKbGRIVnliaUFrS0dOdmJuUmxlSFFwTG1acGJtUW9jMlZzWldOMGIzSXBYRzRnSUNBZ0lDQXZMeUJKWmlCcGRDZHpJR0VnUTFOVElITmxiR1ZqZEc5eUxDQjFjMlVnYVhRZ2RHOGdjMlZzWldOMElHNXZaR1Z6TGx4dUlDQWdJQ0FnWld4elpTQmtiMjBnUFNCNlpYQjBieTV4YzJFb1pHOWpkVzFsYm5Rc0lITmxiR1ZqZEc5eUtWeHVJQ0FnSUgxY2JpQWdJQ0F2THlCSlppQmhJR1oxYm1OMGFXOXVJR2x6SUdkcGRtVnVMQ0JqWVd4c0lHbDBJSGRvWlc0Z2RHaGxJRVJQVFNCcGN5QnlaV0ZrZVZ4dUlDQWdJR1ZzYzJVZ2FXWWdLR2x6Um5WdVkzUnBiMjRvYzJWc1pXTjBiM0lwS1NCeVpYUjFjbTRnSkNoa2IyTjFiV1Z1ZENrdWNtVmhaSGtvYzJWc1pXTjBiM0lwWEc0Z0lDQWdMeThnU1dZZ1lTQmFaWEIwYnlCamIyeHNaV04wYVc5dUlHbHpJR2RwZG1WdUxDQnFkWE4wSUhKbGRIVnliaUJwZEZ4dUlDQWdJR1ZzYzJVZ2FXWWdLSHBsY0hSdkxtbHpXaWh6Wld4bFkzUnZjaWtwSUhKbGRIVnliaUJ6Wld4bFkzUnZjbHh1SUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnTHk4Z2JtOXliV0ZzYVhwbElHRnljbUY1SUdsbUlHRnVJR0Z5Y21GNUlHOW1JRzV2WkdWeklHbHpJR2RwZG1WdVhHNGdJQ0FnSUNCcFppQW9hWE5CY25KaGVTaHpaV3hsWTNSdmNpa3BJR1J2YlNBOUlHTnZiWEJoWTNRb2MyVnNaV04wYjNJcFhHNGdJQ0FnSUNBdkx5QlhjbUZ3SUVSUFRTQnViMlJsY3k1Y2JpQWdJQ0FnSUdWc2MyVWdhV1lnS0dselQySnFaV04wS0hObGJHVmpkRzl5S1NsY2JpQWdJQ0FnSUNBZ1pHOXRJRDBnVzNObGJHVmpkRzl5WFN3Z2MyVnNaV04wYjNJZ1BTQnVkV3hzWEc0Z0lDQWdJQ0F2THlCSlppQnBkQ2R6SUdFZ2FIUnRiQ0JtY21GbmJXVnVkQ3dnWTNKbFlYUmxJRzV2WkdWeklHWnliMjBnYVhSY2JpQWdJQ0FnSUdWc2MyVWdhV1lnS0daeVlXZHRaVzUwVWtVdWRHVnpkQ2h6Wld4bFkzUnZjaWtwWEc0Z0lDQWdJQ0FnSUdSdmJTQTlJSHBsY0hSdkxtWnlZV2R0Wlc1MEtITmxiR1ZqZEc5eUxuUnlhVzBvS1N3Z1VtVm5SWGh3TGlReExDQmpiMjUwWlhoMEtTd2djMlZzWldOMGIzSWdQU0J1ZFd4c1hHNGdJQ0FnSUNBdkx5QkpaaUIwYUdWeVpTZHpJR0VnWTI5dWRHVjRkQ3dnWTNKbFlYUmxJR0VnWTI5c2JHVmpkR2x2YmlCdmJpQjBhR0YwSUdOdmJuUmxlSFFnWm1seWMzUXNJR0Z1WkNCelpXeGxZM1JjYmlBZ0lDQWdJQzh2SUc1dlpHVnpJR1p5YjIwZ2RHaGxjbVZjYmlBZ0lDQWdJR1ZzYzJVZ2FXWWdLR052Ym5SbGVIUWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2NtVjBkWEp1SUNRb1kyOXVkR1Y0ZENrdVptbHVaQ2h6Wld4bFkzUnZjaWxjYmlBZ0lDQWdJQzh2SUVGdVpDQnNZWE4wSUdKMWRDQnVieUJzWldGemRDd2dhV1lnYVhRbmN5QmhJRU5UVXlCelpXeGxZM1J2Y2l3Z2RYTmxJR2wwSUhSdklITmxiR1ZqZENCdWIyUmxjeTVjYmlBZ0lDQWdJR1ZzYzJVZ1pHOXRJRDBnZW1Wd2RHOHVjWE5oS0dSdlkzVnRaVzUwTENCelpXeGxZM1J2Y2lsY2JpQWdJQ0I5WEc0Z0lDQWdMeThnWTNKbFlYUmxJR0VnYm1WM0lGcGxjSFJ2SUdOdmJHeGxZM1JwYjI0Z1puSnZiU0IwYUdVZ2JtOWtaWE1nWm05MWJtUmNiaUFnSUNCeVpYUjFjbTRnZW1Wd2RHOHVXaWhrYjIwc0lITmxiR1ZqZEc5eUtWeHVJQ0I5WEc1Y2JpQWdMeThnWUNSZ0lIZHBiR3dnWW1VZ2RHaGxJR0poYzJVZ1lGcGxjSFJ2WUNCdlltcGxZM1F1SUZkb1pXNGdZMkZzYkdsdVp5QjBhR2x6WEc0Z0lDOHZJR1oxYm1OMGFXOXVJR3AxYzNRZ1kyRnNiQ0JnSkM1NlpYQjBieTVwYm1sMExDQjNhR2xqYUNCdFlXdGxjeUIwYUdVZ2FXMXdiR1Z0Wlc1MFlYUnBiMjVjYmlBZ0x5OGdaR1YwWVdsc2N5QnZaaUJ6Wld4bFkzUnBibWNnYm05a1pYTWdZVzVrSUdOeVpXRjBhVzVuSUZwbGNIUnZJR052Ykd4bFkzUnBiMjV6WEc0Z0lDOHZJSEJoZEdOb1lXSnNaU0JwYmlCd2JIVm5hVzV6TGx4dUlDQWtJRDBnWm5WdVkzUnBiMjRvYzJWc1pXTjBiM0lzSUdOdmJuUmxlSFFwZTF4dUlDQWdJSEpsZEhWeWJpQjZaWEIwYnk1cGJtbDBLSE5sYkdWamRHOXlMQ0JqYjI1MFpYaDBLVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnWlhoMFpXNWtLSFJoY21kbGRDd2djMjkxY21ObExDQmtaV1Z3S1NCN1hHNGdJQ0FnWm05eUlDaHJaWGtnYVc0Z2MyOTFjbU5sS1Z4dUlDQWdJQ0FnYVdZZ0tHUmxaWEFnSmlZZ0tHbHpVR3hoYVc1UFltcGxZM1FvYzI5MWNtTmxXMnRsZVYwcElIeDhJR2x6UVhKeVlYa29jMjkxY21ObFcydGxlVjBwS1NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYVhOUWJHRnBiazlpYW1WamRDaHpiM1Z5WTJWYmEyVjVYU2tnSmlZZ0lXbHpVR3hoYVc1UFltcGxZM1FvZEdGeVoyVjBXMnRsZVYwcEtWeHVJQ0FnSUNBZ0lDQWdJSFJoY21kbGRGdHJaWGxkSUQwZ2UzMWNiaUFnSUNBZ0lDQWdhV1lnS0dselFYSnlZWGtvYzI5MWNtTmxXMnRsZVYwcElDWW1JQ0ZwYzBGeWNtRjVLSFJoY21kbGRGdHJaWGxkS1NsY2JpQWdJQ0FnSUNBZ0lDQjBZWEpuWlhSYmEyVjVYU0E5SUZ0ZFhHNGdJQ0FnSUNBZ0lHVjRkR1Z1WkNoMFlYSm5aWFJiYTJWNVhTd2djMjkxY21ObFcydGxlVjBzSUdSbFpYQXBYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmxiSE5sSUdsbUlDaHpiM1Z5WTJWYmEyVjVYU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjBZWEpuWlhSYmEyVjVYU0E5SUhOdmRYSmpaVnRyWlhsZFhHNGdJSDFjYmx4dUlDQXZMeUJEYjNCNUlHRnNiQ0JpZFhRZ2RXNWtaV1pwYm1Wa0lIQnliM0JsY25ScFpYTWdabkp2YlNCdmJtVWdiM0lnYlc5eVpWeHVJQ0F2THlCdlltcGxZM1J6SUhSdklIUm9aU0JnZEdGeVoyVjBZQ0J2WW1wbFkzUXVYRzRnSUNRdVpYaDBaVzVrSUQwZ1puVnVZM1JwYjI0b2RHRnlaMlYwS1h0Y2JpQWdJQ0IyWVhJZ1pHVmxjQ3dnWVhKbmN5QTlJSE5zYVdObExtTmhiR3dvWVhKbmRXMWxiblJ6TENBeEtWeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2RHRnlaMlYwSUQwOUlDZGliMjlzWldGdUp5a2dlMXh1SUNBZ0lDQWdaR1ZsY0NBOUlIUmhjbWRsZEZ4dUlDQWdJQ0FnZEdGeVoyVjBJRDBnWVhKbmN5NXphR2xtZENncFhHNGdJQ0FnZlZ4dUlDQWdJR0Z5WjNNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloaGNtY3BleUJsZUhSbGJtUW9kR0Z5WjJWMExDQmhjbWNzSUdSbFpYQXBJSDBwWEc0Z0lDQWdjbVYwZFhKdUlIUmhjbWRsZEZ4dUlDQjlYRzVjYmlBZ0x5OGdZQ1F1ZW1Wd2RHOHVjWE5oWUNCcGN5QmFaWEIwYnlkeklFTlRVeUJ6Wld4bFkzUnZjaUJwYlhCc1pXMWxiblJoZEdsdmJpQjNhR2xqYUZ4dUlDQXZMeUIxYzJWeklHQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c1lDQmhibVFnYjNCMGFXMXBlbVZ6SUdadmNpQnpiMjFsSUhOd1pXTnBZV3dnWTJGelpYTXNJR3hwYTJVZ1lDTnBaR0F1WEc0Z0lDOHZJRlJvYVhNZ2JXVjBhRzlrSUdOaGJpQmlaU0J2ZG1WeWNtbGtaVzRnYVc0Z2NHeDFaMmx1Y3k1Y2JpQWdlbVZ3ZEc4dWNYTmhJRDBnWm5WdVkzUnBiMjRvWld4bGJXVnVkQ3dnYzJWc1pXTjBiM0lwZTF4dUlDQWdJSFpoY2lCbWIzVnVaQ3hjYmlBZ0lDQWdJQ0FnYldGNVltVkpSQ0E5SUhObGJHVmpkRzl5V3pCZElEMDlJQ2NqSnl4Y2JpQWdJQ0FnSUNBZ2JXRjVZbVZEYkdGemN5QTlJQ0Z0WVhsaVpVbEVJQ1ltSUhObGJHVmpkRzl5V3pCZElEMDlJQ2N1Snl4Y2JpQWdJQ0FnSUNBZ2JtRnRaVTl1YkhrZ1BTQnRZWGxpWlVsRUlIeDhJRzFoZVdKbFEyeGhjM01nUHlCelpXeGxZM1J2Y2k1emJHbGpaU2d4S1NBNklITmxiR1ZqZEc5eUxDQXZMeUJGYm5OMWNtVWdkR2hoZENCaElERWdZMmhoY2lCMFlXY2dibUZ0WlNCemRHbHNiQ0JuWlhSeklHTm9aV05yWldSY2JpQWdJQ0FnSUNBZ2FYTlRhVzF3YkdVZ1BTQnphVzF3YkdWVFpXeGxZM1J2Y2xKRkxuUmxjM1FvYm1GdFpVOXViSGtwWEc0Z0lDQWdjbVYwZFhKdUlDaGxiR1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrSUNZbUlHbHpVMmx0Y0d4bElDWW1JRzFoZVdKbFNVUXBJRDhnTHk4Z1UyRm1ZWEpwSUVSdlkzVnRaVzUwUm5KaFoyMWxiblFnWkc5bGMyNG5kQ0JvWVhabElHZGxkRVZzWlcxbGJuUkNlVWxrWEc0Z0lDQWdJQ0FvSUNobWIzVnVaQ0E5SUdWc1pXMWxiblF1WjJWMFJXeGxiV1Z1ZEVKNVNXUW9ibUZ0WlU5dWJIa3BLU0EvSUZ0bWIzVnVaRjBnT2lCYlhTQXBJRHBjYmlBZ0lDQWdJQ2hsYkdWdFpXNTBMbTV2WkdWVWVYQmxJQ0U5UFNBeElDWW1JR1ZzWlcxbGJuUXVibTlrWlZSNWNHVWdJVDA5SURrZ0ppWWdaV3hsYldWdWRDNXViMlJsVkhsd1pTQWhQVDBnTVRFcElEOGdXMTBnT2x4dUlDQWdJQ0FnYzJ4cFkyVXVZMkZzYkNoY2JpQWdJQ0FnSUNBZ2FYTlRhVzF3YkdVZ0ppWWdJVzFoZVdKbFNVUWdKaVlnWld4bGJXVnVkQzVuWlhSRmJHVnRaVzUwYzBKNVEyeGhjM05PWVcxbElEOGdMeThnUkc5amRXMWxiblJHY21GbmJXVnVkQ0JrYjJWemJpZDBJR2hoZG1VZ1oyVjBSV3hsYldWdWRITkNlVU5zWVhOelRtRnRaUzlVWVdkT1lXMWxYRzRnSUNBZ0lDQWdJQ0FnYldGNVltVkRiR0Z6Y3lBL0lHVnNaVzFsYm5RdVoyVjBSV3hsYldWdWRITkNlVU5zWVhOelRtRnRaU2h1WVcxbFQyNXNlU2tnT2lBdkx5QkpaaUJwZENkeklITnBiWEJzWlN3Z2FYUWdZMjkxYkdRZ1ltVWdZU0JqYkdGemMxeHVJQ0FnSUNBZ0lDQWdJR1ZzWlcxbGJuUXVaMlYwUld4bGJXVnVkSE5DZVZSaFowNWhiV1VvYzJWc1pXTjBiM0lwSURvZ0x5OGdUM0lnWVNCMFlXZGNiaUFnSUNBZ0lDQWdJQ0JsYkdWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29jMlZzWldOMGIzSXBJQzh2SUU5eUlHbDBKM01nYm05MElITnBiWEJzWlN3Z1lXNWtJSGRsSUc1bFpXUWdkRzhnY1hWbGNua2dZV3hzWEc0Z0lDQWdJQ0FwWEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCbWFXeDBaWEpsWkNodWIyUmxjeXdnYzJWc1pXTjBiM0lwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjMlZzWldOMGIzSWdQVDBnYm5Wc2JDQS9JQ1FvYm05a1pYTXBJRG9nSkNodWIyUmxjeWt1Wm1sc2RHVnlLSE5sYkdWamRHOXlLVnh1SUNCOVhHNWNiaUFnSkM1amIyNTBZV2x1Y3lBOUlHUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFJXeGxiV1Z1ZEM1amIyNTBZV2x1Y3lBL1hHNGdJQ0FnWm5WdVkzUnBiMjRvY0dGeVpXNTBMQ0J1YjJSbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2NHRnlaVzUwSUNFOVBTQnViMlJsSUNZbUlIQmhjbVZ1ZEM1amIyNTBZV2x1Y3lodWIyUmxLVnh1SUNBZ0lIMGdPbHh1SUNBZ0lHWjFibU4wYVc5dUtIQmhjbVZ1ZEN3Z2JtOWtaU2tnZTF4dUlDQWdJQ0FnZDJocGJHVWdLRzV2WkdVZ0ppWWdLRzV2WkdVZ1BTQnViMlJsTG5CaGNtVnVkRTV2WkdVcEtWeHVJQ0FnSUNBZ0lDQnBaaUFvYm05a1pTQTlQVDBnY0dGeVpXNTBLU0J5WlhSMWNtNGdkSEoxWlZ4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObFhHNGdJQ0FnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJR1oxYm1OQmNtY29ZMjl1ZEdWNGRDd2dZWEpuTENCcFpIZ3NJSEJoZVd4dllXUXBJSHRjYmlBZ0lDQnlaWFIxY200Z2FYTkdkVzVqZEdsdmJpaGhjbWNwSUQ4Z1lYSm5MbU5oYkd3b1kyOXVkR1Y0ZEN3Z2FXUjRMQ0J3WVhsc2IyRmtLU0E2SUdGeVoxeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdjMlYwUVhSMGNtbGlkWFJsS0c1dlpHVXNJRzVoYldVc0lIWmhiSFZsS1NCN1hHNGdJQ0FnZG1Gc2RXVWdQVDBnYm5Wc2JDQS9JRzV2WkdVdWNtVnRiM1psUVhSMGNtbGlkWFJsS0c1aGJXVXBJRG9nYm05a1pTNXpaWFJCZEhSeWFXSjFkR1VvYm1GdFpTd2dkbUZzZFdVcFhHNGdJSDFjYmx4dUlDQXZMeUJoWTJObGMzTWdZMnhoYzNOT1lXMWxJSEJ5YjNCbGNuUjVJSGRvYVd4bElISmxjM0JsWTNScGJtY2dVMVpIUVc1cGJXRjBaV1JUZEhKcGJtZGNiaUFnWm5WdVkzUnBiMjRnWTJ4aGMzTk9ZVzFsS0c1dlpHVXNJSFpoYkhWbEtYdGNiaUFnSUNCMllYSWdhMnhoYzNNZ1BTQnViMlJsTG1Oc1lYTnpUbUZ0WlNCOGZDQW5KeXhjYmlBZ0lDQWdJQ0FnYzNabklDQWdQU0JyYkdGemN5QW1KaUJyYkdGemN5NWlZWE5sVm1Gc0lDRTlQU0IxYm1SbFptbHVaV1JjYmx4dUlDQWdJR2xtSUNoMllXeDFaU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQnlaWFIxY200Z2MzWm5JRDhnYTJ4aGMzTXVZbUZ6WlZaaGJDQTZJR3RzWVhOelhHNGdJQ0FnYzNabklEOGdLR3RzWVhOekxtSmhjMlZXWVd3Z1BTQjJZV3gxWlNrZ09pQW9ibTlrWlM1amJHRnpjMDVoYldVZ1BTQjJZV3gxWlNsY2JpQWdmVnh1WEc0Z0lDOHZJRndpZEhKMVpWd2lJQ0E5UGlCMGNuVmxYRzRnSUM4dklGd2labUZzYzJWY0lpQTlQaUJtWVd4elpWeHVJQ0F2THlCY0ltNTFiR3hjSWlBZ1BUNGdiblZzYkZ4dUlDQXZMeUJjSWpReVhDSWdJQ0FnUFQ0Z05ESmNiaUFnTHk4Z1hDSTBNaTQxWENJZ0lEMCtJRFF5TGpWY2JpQWdMeThnWENJd09Gd2lJQ0FnSUQwK0lGd2lNRGhjSWx4dUlDQXZMeUJLVTA5T0lDQWdJRDArSUhCaGNuTmxJR2xtSUhaaGJHbGtYRzRnSUM4dklGTjBjbWx1WnlBZ1BUNGdjMlZzWmx4dUlDQm1kVzVqZEdsdmJpQmtaWE5sY21saGJHbDZaVlpoYkhWbEtIWmhiSFZsS1NCN1hHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMllXeDFaU0EvWEc0Z0lDQWdJQ0FnSUhaaGJIVmxJRDA5SUZ3aWRISjFaVndpSUh4OFhHNGdJQ0FnSUNBZ0lDZ2dkbUZzZFdVZ1BUMGdYQ0ptWVd4elpWd2lJRDhnWm1Gc2MyVWdPbHh1SUNBZ0lDQWdJQ0FnSUhaaGJIVmxJRDA5SUZ3aWJuVnNiRndpSUQ4Z2JuVnNiQ0E2WEc0Z0lDQWdJQ0FnSUNBZ0szWmhiSFZsSUNzZ1hDSmNJaUE5UFNCMllXeDFaU0EvSUN0MllXeDFaU0E2WEc0Z0lDQWdJQ0FnSUNBZ0wxNWJYRnhiWEZ4N1hTOHVkR1Z6ZENoMllXeDFaU2tnUHlBa0xuQmhjbk5sU2xOUFRpaDJZV3gxWlNrZ09seHVJQ0FnSUNBZ0lDQWdJSFpoYkhWbElDbGNiaUFnSUNBZ0lDQWdPaUIyWVd4MVpWeHVJQ0FnSUgwZ1kyRjBZMmdvWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhaaGJIVmxYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdKQzUwZVhCbElEMGdkSGx3WlZ4dUlDQWtMbWx6Um5WdVkzUnBiMjRnUFNCcGMwWjFibU4wYVc5dVhHNGdJQ1F1YVhOWGFXNWtiM2NnUFNCcGMxZHBibVJ2ZDF4dUlDQWtMbWx6UVhKeVlYa2dQU0JwYzBGeWNtRjVYRzRnSUNRdWFYTlFiR0ZwYms5aWFtVmpkQ0E5SUdselVHeGhhVzVQWW1wbFkzUmNibHh1SUNBa0xtbHpSVzF3ZEhsUFltcGxZM1FnUFNCbWRXNWpkR2x2Ymlodlltb3BJSHRjYmlBZ0lDQjJZWElnYm1GdFpWeHVJQ0FnSUdadmNpQW9ibUZ0WlNCcGJpQnZZbW9wSUhKbGRIVnliaUJtWVd4elpWeHVJQ0FnSUhKbGRIVnliaUIwY25WbFhHNGdJSDFjYmx4dUlDQWtMbWx1UVhKeVlYa2dQU0JtZFc1amRHbHZiaWhsYkdWdExDQmhjbkpoZVN3Z2FTbDdYRzRnSUNBZ2NtVjBkWEp1SUdWdGNIUjVRWEp5WVhrdWFXNWtaWGhQWmk1allXeHNLR0Z5Y21GNUxDQmxiR1Z0TENCcEtWeHVJQ0I5WEc1Y2JpQWdKQzVqWVcxbGJFTmhjMlVnUFNCallXMWxiR2w2WlZ4dUlDQWtMblJ5YVcwZ1BTQm1kVzVqZEdsdmJpaHpkSElwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjM1J5SUQwOUlHNTFiR3dnUHlCY0lsd2lJRG9nVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzUwY21sdExtTmhiR3dvYzNSeUtWeHVJQ0I5WEc1Y2JpQWdMeThnY0d4MVoybHVJR052YlhCaGRHbGlhV3hwZEhsY2JpQWdKQzUxZFdsa0lEMGdNRnh1SUNBa0xuTjFjSEJ2Y25RZ1BTQjdJSDFjYmlBZ0pDNWxlSEJ5SUQwZ2V5QjlYRzRnSUNRdWJtOXZjQ0E5SUdaMWJtTjBhVzl1S0NrZ2UzMWNibHh1SUNBa0xtMWhjQ0E5SUdaMWJtTjBhVzl1S0dWc1pXMWxiblJ6TENCallXeHNZbUZqYXlsN1hHNGdJQ0FnZG1GeUlIWmhiSFZsTENCMllXeDFaWE1nUFNCYlhTd2dhU3dnYTJWNVhHNGdJQ0FnYVdZZ0tHeHBhMlZCY25KaGVTaGxiR1Z0Wlc1MGN5a3BYRzRnSUNBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z1pXeGxiV1Z1ZEhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0JqWVd4c1ltRmpheWhsYkdWdFpXNTBjMXRwWFN3Z2FTbGNiaUFnSUNBZ0lDQWdhV1lnS0haaGJIVmxJQ0U5SUc1MWJHd3BJSFpoYkhWbGN5NXdkWE5vS0haaGJIVmxLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lHVnNjMlZjYmlBZ0lDQWdJR1p2Y2lBb2EyVjVJR2x1SUdWc1pXMWxiblJ6S1NCN1hHNGdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ1kyRnNiR0poWTJzb1pXeGxiV1Z1ZEhOYmEyVjVYU3dnYTJWNUtWeHVJQ0FnSUNBZ0lDQnBaaUFvZG1Gc2RXVWdJVDBnYm5Wc2JDa2dkbUZzZFdWekxuQjFjMmdvZG1Gc2RXVXBYRzRnSUNBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdac1lYUjBaVzRvZG1Gc2RXVnpLVnh1SUNCOVhHNWNiaUFnSkM1bFlXTm9JRDBnWm5WdVkzUnBiMjRvWld4bGJXVnVkSE1zSUdOaGJHeGlZV05yS1h0Y2JpQWdJQ0IyWVhJZ2FTd2dhMlY1WEc0Z0lDQWdhV1lnS0d4cGEyVkJjbkpoZVNobGJHVnRaVzUwY3lrcElIdGNiaUFnSUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCbGJHVnRaVzUwY3k1c1pXNW5kR2c3SUdrckt5bGNiaUFnSUNBZ0lDQWdhV1lnS0dOaGJHeGlZV05yTG1OaGJHd29aV3hsYldWdWRITmJhVjBzSUdrc0lHVnNaVzFsYm5SelcybGRLU0E5UFQwZ1ptRnNjMlVwSUhKbGRIVnliaUJsYkdWdFpXNTBjMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCbWIzSWdLR3RsZVNCcGJpQmxiR1Z0Wlc1MGN5bGNiaUFnSUNBZ0lDQWdhV1lnS0dOaGJHeGlZV05yTG1OaGJHd29aV3hsYldWdWRITmJhMlY1WFN3Z2EyVjVMQ0JsYkdWdFpXNTBjMXRyWlhsZEtTQTlQVDBnWm1Gc2MyVXBJSEpsZEhWeWJpQmxiR1Z0Wlc1MGMxeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJsYkdWdFpXNTBjMXh1SUNCOVhHNWNiaUFnSkM1bmNtVndJRDBnWm5WdVkzUnBiMjRvWld4bGJXVnVkSE1zSUdOaGJHeGlZV05yS1h0Y2JpQWdJQ0J5WlhSMWNtNGdabWxzZEdWeUxtTmhiR3dvWld4bGJXVnVkSE1zSUdOaGJHeGlZV05yS1Z4dUlDQjlYRzVjYmlBZ2FXWWdLSGRwYm1SdmR5NUtVMDlPS1NBa0xuQmhjbk5sU2xOUFRpQTlJRXBUVDA0dWNHRnljMlZjYmx4dUlDQXZMeUJRYjNCMWJHRjBaU0IwYUdVZ1kyeGhjM015ZEhsd1pTQnRZWEJjYmlBZ0pDNWxZV05vS0Z3aVFtOXZiR1ZoYmlCT2RXMWlaWElnVTNSeWFXNW5JRVoxYm1OMGFXOXVJRUZ5Y21GNUlFUmhkR1VnVW1WblJYaHdJRTlpYW1WamRDQkZjbkp2Y2x3aUxuTndiR2wwS0Z3aUlGd2lLU3dnWm5WdVkzUnBiMjRvYVN3Z2JtRnRaU2tnZTF4dUlDQWdJR05zWVhOek1uUjVjR1ZiSUZ3aVcyOWlhbVZqZENCY0lpQXJJRzVoYldVZ0t5QmNJbDFjSWlCZElEMGdibUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BYRzRnSUgwcFhHNWNiaUFnTHk4Z1JHVm1hVzVsSUcxbGRHaHZaSE1nZEdoaGRDQjNhV3hzSUdKbElHRjJZV2xzWVdKc1pTQnZiaUJoYkd4Y2JpQWdMeThnV21Wd2RHOGdZMjlzYkdWamRHbHZibk5jYmlBZ0pDNW1iaUE5SUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2pvZ2VtVndkRzh1V2l4Y2JpQWdJQ0JzWlc1bmRHZzZJREFzWEc1Y2JpQWdJQ0F2THlCQ1pXTmhkWE5sSUdFZ1kyOXNiR1ZqZEdsdmJpQmhZM1J6SUd4cGEyVWdZVzRnWVhKeVlYbGNiaUFnSUNBdkx5QmpiM0I1SUc5MlpYSWdkR2hsYzJVZ2RYTmxablZzSUdGeWNtRjVJR1oxYm1OMGFXOXVjeTVjYmlBZ0lDQm1iM0pGWVdOb09pQmxiWEIwZVVGeWNtRjVMbVp2Y2tWaFkyZ3NYRzRnSUNBZ2NtVmtkV05sT2lCbGJYQjBlVUZ5Y21GNUxuSmxaSFZqWlN4Y2JpQWdJQ0J3ZFhOb09pQmxiWEIwZVVGeWNtRjVMbkIxYzJnc1hHNGdJQ0FnYzI5eWREb2daVzF3ZEhsQmNuSmhlUzV6YjNKMExGeHVJQ0FnSUhOd2JHbGpaVG9nWlcxd2RIbEJjbkpoZVM1emNHeHBZMlVzWEc0Z0lDQWdhVzVrWlhoUFpqb2daVzF3ZEhsQmNuSmhlUzVwYm1SbGVFOW1MRnh1SUNBZ0lHTnZibU5oZERvZ1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lIWmhjaUJwTENCMllXeDFaU3dnWVhKbmN5QTlJRnRkWEc0Z0lDQWdJQ0JtYjNJZ0tHa2dQU0F3T3lCcElEd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ1lYSm5kVzFsYm5SelcybGRYRzRnSUNBZ0lDQWdJR0Z5WjNOYmFWMGdQU0I2WlhCMGJ5NXBjMW9vZG1Gc2RXVXBJRDhnZG1Gc2RXVXVkRzlCY25KaGVTZ3BJRG9nZG1Gc2RXVmNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCamIyNWpZWFF1WVhCd2JIa29lbVZ3ZEc4dWFYTmFLSFJvYVhNcElEOGdkR2hwY3k1MGIwRnljbUY1S0NrZ09pQjBhR2x6TENCaGNtZHpLVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZMeUJnYldGd1lDQmhibVFnWUhOc2FXTmxZQ0JwYmlCMGFHVWdhbEYxWlhKNUlFRlFTU0IzYjNKcklHUnBabVpsY21WdWRHeDVYRzRnSUNBZ0x5OGdabkp2YlNCMGFHVnBjaUJoY25KaGVTQmpiM1Z1ZEdWeWNHRnlkSE5jYmlBZ0lDQnRZWEE2SUdaMWJtTjBhVzl1S0dadUtYdGNiaUFnSUNBZ0lISmxkSFZ5YmlBa0tDUXViV0Z3S0hSb2FYTXNJR1oxYm1OMGFXOXVLR1ZzTENCcEtYc2djbVYwZFhKdUlHWnVMbU5oYkd3b1pXd3NJR2tzSUdWc0tTQjlLU2xjYmlBZ0lDQjlMRnh1SUNBZ0lITnNhV05sT2lCbWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNRb2MyeHBZMlV1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektTbGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2NtVmhaSGs2SUdaMWJtTjBhVzl1S0dOaGJHeGlZV05yS1h0Y2JpQWdJQ0FnSUM4dklHNWxaV1FnZEc4Z1kyaGxZMnNnYVdZZ1pHOWpkVzFsYm5RdVltOWtlU0JsZUdsemRITWdabTl5SUVsRklHRnpJSFJvWVhRZ1luSnZkM05sY2lCeVpYQnZjblJ6WEc0Z0lDQWdJQ0F2THlCa2IyTjFiV1Z1ZENCeVpXRmtlU0IzYUdWdUlHbDBJR2hoYzI0bmRDQjVaWFFnWTNKbFlYUmxaQ0IwYUdVZ1ltOWtlU0JsYkdWdFpXNTBYRzRnSUNBZ0lDQnBaaUFvY21WaFpIbFNSUzUwWlhOMEtHUnZZM1Z0Wlc1MExuSmxZV1I1VTNSaGRHVXBJQ1ltSUdSdlkzVnRaVzUwTG1KdlpIa3BJR05oYkd4aVlXTnJLQ1FwWEc0Z0lDQWdJQ0JsYkhObElHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0owUlBUVU52Ym5SbGJuUk1iMkZrWldRbkxDQm1kVzVqZEdsdmJpZ3BleUJqWVd4c1ltRmpheWdrS1NCOUxDQm1ZV3h6WlNsY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdselhHNGdJQ0FnZlN4Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtHbGtlQ2w3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdhV1I0SUQwOVBTQjFibVJsWm1sdVpXUWdQeUJ6YkdsalpTNWpZV3hzS0hSb2FYTXBJRG9nZEdocGMxdHBaSGdnUGowZ01DQS9JR2xrZUNBNklHbGtlQ0FySUhSb2FYTXViR1Z1WjNSb1hWeHVJQ0FnSUgwc1hHNGdJQ0FnZEc5QmNuSmhlVG9nWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SUhSb2FYTXVaMlYwS0NrZ2ZTeGNiaUFnSUNCemFYcGxPaUJtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJHVnVaM1JvWEc0Z0lDQWdmU3hjYmlBZ0lDQnlaVzF2ZG1VNklHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVsWVdOb0tHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbkJoY21WdWRFNXZaR1VnSVQwZ2JuVnNiQ2xjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJoY21WdWRFNXZaR1V1Y21WdGIzWmxRMmhwYkdRb2RHaHBjeWxjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdmU3hjYmlBZ0lDQmxZV05vT2lCbWRXNWpkR2x2YmloallXeHNZbUZqYXlsN1hHNGdJQ0FnSUNCbGJYQjBlVUZ5Y21GNUxtVjJaWEo1TG1OaGJHd29kR2hwY3l3Z1puVnVZM1JwYjI0b1pXd3NJR2xrZUNsN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXeHNZbUZqYXk1allXeHNLR1ZzTENCcFpIZ3NJR1ZzS1NBaFBUMGdabUZzYzJWY2JpQWdJQ0FnSUgwcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGMxeHVJQ0FnSUgwc1hHNGdJQ0FnWm1sc2RHVnlPaUJtZFc1amRHbHZiaWh6Wld4bFkzUnZjaWw3WEc0Z0lDQWdJQ0JwWmlBb2FYTkdkVzVqZEdsdmJpaHpaV3hsWTNSdmNpa3BJSEpsZEhWeWJpQjBhR2x6TG01dmRDaDBhR2x6TG01dmRDaHpaV3hsWTNSdmNpa3BYRzRnSUNBZ0lDQnlaWFIxY200Z0pDaG1hV3gwWlhJdVkyRnNiQ2gwYUdsekxDQm1kVzVqZEdsdmJpaGxiR1Z0Wlc1MEtYdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIcGxjSFJ2TG0xaGRHTm9aWE1vWld4bGJXVnVkQ3dnYzJWc1pXTjBiM0lwWEc0Z0lDQWdJQ0I5S1NsY2JpQWdJQ0I5TEZ4dUlDQWdJR0ZrWkRvZ1puVnVZM1JwYjI0b2MyVnNaV04wYjNJc1kyOXVkR1Y0ZENsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnSkNoMWJtbHhLSFJvYVhNdVkyOXVZMkYwS0NRb2MyVnNaV04wYjNJc1kyOXVkR1Y0ZENrcEtTbGNiaUFnSUNCOUxGeHVJQ0FnSUdsek9pQm1kVzVqZEdsdmJpaHpaV3hsWTNSdmNpbDdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVzWlc1bmRHZ2dQaUF3SUNZbUlIcGxjSFJ2TG0xaGRHTm9aWE1vZEdocGMxc3dYU3dnYzJWc1pXTjBiM0lwWEc0Z0lDQWdmU3hjYmlBZ0lDQnViM1E2SUdaMWJtTjBhVzl1S0hObGJHVmpkRzl5S1h0Y2JpQWdJQ0FnSUhaaGNpQnViMlJsY3oxYlhWeHVJQ0FnSUNBZ2FXWWdLR2x6Um5WdVkzUnBiMjRvYzJWc1pXTjBiM0lwSUNZbUlITmxiR1ZqZEc5eUxtTmhiR3dnSVQwOUlIVnVaR1ZtYVc1bFpDbGNiaUFnSUNBZ0lDQWdkR2hwY3k1bFlXTm9LR1oxYm1OMGFXOXVLR2xrZUNsN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NGelpXeGxZM1J2Y2k1allXeHNLSFJvYVhNc2FXUjRLU2tnYm05a1pYTXVjSFZ6YUNoMGFHbHpLVnh1SUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCbGVHTnNkV1JsY3lBOUlIUjVjR1Z2WmlCelpXeGxZM1J2Y2lBOVBTQW5jM1J5YVc1bkp5QS9JSFJvYVhNdVptbHNkR1Z5S0hObGJHVmpkRzl5S1NBNlhHNGdJQ0FnSUNBZ0lDQWdLR3hwYTJWQmNuSmhlU2h6Wld4bFkzUnZjaWtnSmlZZ2FYTkdkVzVqZEdsdmJpaHpaV3hsWTNSdmNpNXBkR1Z0S1NrZ1B5QnpiR2xqWlM1allXeHNLSE5sYkdWamRHOXlLU0E2SUNRb2MyVnNaV04wYjNJcFhHNGdJQ0FnSUNBZ0lIUm9hWE11Wm05eVJXRmphQ2htZFc1amRHbHZiaWhsYkNsN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dWNFkyeDFaR1Z6TG1sdVpHVjRUMllvWld3cElEd2dNQ2tnYm05a1pYTXVjSFZ6YUNobGJDbGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQWtLRzV2WkdWektWeHVJQ0FnSUgwc1hHNGdJQ0FnYUdGek9pQm1kVzVqZEdsdmJpaHpaV3hsWTNSdmNpbDdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVtYVd4MFpYSW9ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2x6VDJKcVpXTjBLSE5sYkdWamRHOXlLU0EvWEc0Z0lDQWdJQ0FnSUNBZ0pDNWpiMjUwWVdsdWN5aDBhR2x6TENCelpXeGxZM1J2Y2lrZ09seHVJQ0FnSUNBZ0lDQWdJQ1FvZEdocGN5a3VabWx1WkNoelpXeGxZM1J2Y2lrdWMybDZaU2dwWEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJSDBzWEc0Z0lDQWdaWEU2SUdaMWJtTjBhVzl1S0dsa2VDbDdYRzRnSUNBZ0lDQnlaWFIxY200Z2FXUjRJRDA5UFNBdE1TQS9JSFJvYVhNdWMyeHBZMlVvYVdSNEtTQTZJSFJvYVhNdWMyeHBZMlVvYVdSNExDQXJJR2xrZUNBcklERXBYRzRnSUNBZ2ZTeGNiaUFnSUNCbWFYSnpkRG9nWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUhaaGNpQmxiQ0E5SUhSb2FYTmJNRjFjYmlBZ0lDQWdJSEpsZEhWeWJpQmxiQ0FtSmlBaGFYTlBZbXBsWTNRb1pXd3BJRDhnWld3Z09pQWtLR1ZzS1Z4dUlDQWdJSDBzWEc0Z0lDQWdiR0Z6ZERvZ1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lIWmhjaUJsYkNBOUlIUm9hWE5iZEdocGN5NXNaVzVuZEdnZ0xTQXhYVnh1SUNBZ0lDQWdjbVYwZFhKdUlHVnNJQ1ltSUNGcGMwOWlhbVZqZENobGJDa2dQeUJsYkNBNklDUW9aV3dwWEc0Z0lDQWdmU3hjYmlBZ0lDQm1hVzVrT2lCbWRXNWpkR2x2YmloelpXeGxZM1J2Y2lsN1hHNGdJQ0FnSUNCMllYSWdjbVZ6ZFd4MExDQWtkR2hwY3lBOUlIUm9hWE5jYmlBZ0lDQWdJR2xtSUNnaGMyVnNaV04wYjNJcElISmxjM1ZzZENBOUlDUW9LVnh1SUNBZ0lDQWdaV3h6WlNCcFppQW9kSGx3Wlc5bUlITmxiR1ZqZEc5eUlEMDlJQ2R2WW1wbFkzUW5LVnh1SUNBZ0lDQWdJQ0J5WlhOMWJIUWdQU0FrS0hObGJHVmpkRzl5S1M1bWFXeDBaWElvWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnYm05a1pTQTlJSFJvYVhOY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pXMXdkSGxCY25KaGVTNXpiMjFsTG1OaGJHd29KSFJvYVhNc0lHWjFibU4wYVc5dUtIQmhjbVZ1ZENsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdKQzVqYjI1MFlXbHVjeWh3WVhKbGJuUXNJRzV2WkdVcFhHNGdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUdWc2MyVWdhV1lnS0hSb2FYTXViR1Z1WjNSb0lEMDlJREVwSUhKbGMzVnNkQ0E5SUNRb2VtVndkRzh1Y1hOaEtIUm9hWE5iTUYwc0lITmxiR1ZqZEc5eUtTbGNiaUFnSUNBZ0lHVnNjMlVnY21WemRXeDBJRDBnZEdocGN5NXRZWEFvWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SUhwbGNIUnZMbkZ6WVNoMGFHbHpMQ0J6Wld4bFkzUnZjaWtnZlNsY2JpQWdJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUmNiaUFnSUNCOUxGeHVJQ0FnSUdOc2IzTmxjM1E2SUdaMWJtTjBhVzl1S0hObGJHVmpkRzl5TENCamIyNTBaWGgwS1h0Y2JpQWdJQ0FnSUhaaGNpQnViMlJsSUQwZ2RHaHBjMXN3WFN3Z1kyOXNiR1ZqZEdsdmJpQTlJR1poYkhObFhHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlITmxiR1ZqZEc5eUlEMDlJQ2R2WW1wbFkzUW5LU0JqYjJ4c1pXTjBhVzl1SUQwZ0pDaHpaV3hsWTNSdmNpbGNiaUFnSUNBZ0lIZG9hV3hsSUNodWIyUmxJQ1ltSUNFb1kyOXNiR1ZqZEdsdmJpQS9JR052Ykd4bFkzUnBiMjR1YVc1a1pYaFBaaWh1YjJSbEtTQStQU0F3SURvZ2VtVndkRzh1YldGMFkyaGxjeWh1YjJSbExDQnpaV3hsWTNSdmNpa3BLVnh1SUNBZ0lDQWdJQ0J1YjJSbElEMGdibTlrWlNBaFBUMGdZMjl1ZEdWNGRDQW1KaUFoYVhORWIyTjFiV1Z1ZENodWIyUmxLU0FtSmlCdWIyUmxMbkJoY21WdWRFNXZaR1ZjYmlBZ0lDQWdJSEpsZEhWeWJpQWtLRzV2WkdVcFhHNGdJQ0FnZlN4Y2JpQWdJQ0J3WVhKbGJuUnpPaUJtZFc1amRHbHZiaWh6Wld4bFkzUnZjaWw3WEc0Z0lDQWdJQ0IyWVhJZ1lXNWpaWE4wYjNKeklEMGdXMTBzSUc1dlpHVnpJRDBnZEdocGMxeHVJQ0FnSUNBZ2QyaHBiR1VnS0c1dlpHVnpMbXhsYm1kMGFDQStJREFwWEc0Z0lDQWdJQ0FnSUc1dlpHVnpJRDBnSkM1dFlYQW9ibTlrWlhNc0lHWjFibU4wYVc5dUtHNXZaR1VwZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2dvYm05a1pTQTlJRzV2WkdVdWNHRnlaVzUwVG05a1pTa2dKaVlnSVdselJHOWpkVzFsYm5Rb2JtOWtaU2tnSmlZZ1lXNWpaWE4wYjNKekxtbHVaR1Y0VDJZb2JtOWtaU2tnUENBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaGJtTmxjM1J2Y25NdWNIVnphQ2h1YjJSbEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzV2WkdWY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdabWxzZEdWeVpXUW9ZVzVqWlhOMGIzSnpMQ0J6Wld4bFkzUnZjaWxjYmlBZ0lDQjlMRnh1SUNBZ0lIQmhjbVZ1ZERvZ1puVnVZM1JwYjI0b2MyVnNaV04wYjNJcGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdacGJIUmxjbVZrS0hWdWFYRW9kR2hwY3k1d2JIVmpheWduY0dGeVpXNTBUbTlrWlNjcEtTd2djMlZzWldOMGIzSXBYRzRnSUNBZ2ZTeGNiaUFnSUNCamFHbHNaSEpsYmpvZ1puVnVZM1JwYjI0b2MyVnNaV04wYjNJcGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdacGJIUmxjbVZrS0hSb2FYTXViV0Z3S0daMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlCamFHbHNaSEpsYmloMGFHbHpLU0I5S1N3Z2MyVnNaV04wYjNJcFhHNGdJQ0FnZlN4Y2JpQWdJQ0JqYjI1MFpXNTBjem9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRZWEFvWm5WdVkzUnBiMjRvS1NCN0lISmxkSFZ5YmlCMGFHbHpMbU52Ym5SbGJuUkViMk4xYldWdWRDQjhmQ0J6YkdsalpTNWpZV3hzS0hSb2FYTXVZMmhwYkdST2IyUmxjeWtnZlNsY2JpQWdJQ0I5TEZ4dUlDQWdJSE5wWW14cGJtZHpPaUJtZFc1amRHbHZiaWh6Wld4bFkzUnZjaWw3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabWxzZEdWeVpXUW9kR2hwY3k1dFlYQW9ablZ1WTNScGIyNG9hU3dnWld3cGUxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptbHNkR1Z5TG1OaGJHd29ZMmhwYkdSeVpXNG9aV3d1Y0dGeVpXNTBUbTlrWlNrc0lHWjFibU4wYVc5dUtHTm9hV3hrS1hzZ2NtVjBkWEp1SUdOb2FXeGtJVDA5Wld3Z2ZTbGNiaUFnSUNBZ0lIMHBMQ0J6Wld4bFkzUnZjaWxjYmlBZ0lDQjlMRnh1SUNBZ0lHVnRjSFI1T2lCbWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaV0ZqYUNobWRXNWpkR2x2YmlncGV5QjBhR2x6TG1sdWJtVnlTRlJOVENBOUlDY25JSDBwWEc0Z0lDQWdmU3hjYmlBZ0lDQXZMeUJnY0d4MVkydGdJR2x6SUdKdmNuSnZkMlZrSUdaeWIyMGdVSEp2ZEc5MGVYQmxMbXB6WEc0Z0lDQWdjR3gxWTJzNklHWjFibU4wYVc5dUtIQnliM0JsY25SNUtYdGNiaUFnSUNBZ0lISmxkSFZ5YmlBa0xtMWhjQ2gwYUdsekxDQm1kVzVqZEdsdmJpaGxiQ2w3SUhKbGRIVnliaUJsYkZ0d2NtOXdaWEowZVYwZ2ZTbGNiaUFnSUNCOUxGeHVJQ0FnSUhOb2IzYzZJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bFlXTm9LR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1I1YkdVdVpHbHpjR3hoZVNBOVBTQmNJbTV2Ym1WY0lpQW1KaUFvZEdocGN5NXpkSGxzWlM1a2FYTndiR0Y1SUQwZ0p5Y3BYRzRnSUNBZ0lDQWdJR2xtSUNoblpYUkRiMjF3ZFhSbFpGTjBlV3hsS0hSb2FYTXNJQ2NuS1M1blpYUlFjbTl3WlhKMGVWWmhiSFZsS0Z3aVpHbHpjR3hoZVZ3aUtTQTlQU0JjSW01dmJtVmNJaWxjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQmtaV1poZFd4MFJHbHpjR3hoZVNoMGFHbHpMbTV2WkdWT1lXMWxLVnh1SUNBZ0lDQWdmU2xjYmlBZ0lDQjlMRnh1SUNBZ0lISmxjR3hoWTJWWGFYUm9PaUJtZFc1amRHbHZiaWh1WlhkRGIyNTBaVzUwS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtSmxabTl5WlNodVpYZERiMjUwWlc1MEtTNXlaVzF2ZG1Vb0tWeHVJQ0FnSUgwc1hHNGdJQ0FnZDNKaGNEb2dablZ1WTNScGIyNG9jM1J5ZFdOMGRYSmxLWHRjYmlBZ0lDQWdJSFpoY2lCbWRXNWpJRDBnYVhOR2RXNWpkR2x2YmloemRISjFZM1IxY21VcFhHNGdJQ0FnSUNCcFppQW9kR2hwYzFzd1hTQW1KaUFoWm5WdVl5bGNiaUFnSUNBZ0lDQWdkbUZ5SUdSdmJTQWdJRDBnSkNoemRISjFZM1IxY21VcExtZGxkQ2d3S1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR05zYjI1bElEMGdaRzl0TG5CaGNtVnVkRTV2WkdVZ2ZId2dkR2hwY3k1c1pXNW5kR2dnUGlBeFhHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVZoWTJnb1puVnVZM1JwYjI0b2FXNWtaWGdwZTF4dUlDQWdJQ0FnSUNBa0tIUm9hWE1wTG5keVlYQkJiR3dvWEc0Z0lDQWdJQ0FnSUNBZ1puVnVZeUEvSUhOMGNuVmpkSFZ5WlM1allXeHNLSFJvYVhNc0lHbHVaR1Y0S1NBNlhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkc5dVpTQS9JR1J2YlM1amJHOXVaVTV2WkdVb2RISjFaU2tnT2lCa2IyMWNiaUFnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdmU2xjYmlBZ0lDQjlMRnh1SUNBZ0lIZHlZWEJCYkd3NklHWjFibU4wYVc5dUtITjBjblZqZEhWeVpTbDdYRzRnSUNBZ0lDQnBaaUFvZEdocGMxc3dYU2tnZTF4dUlDQWdJQ0FnSUNBa0tIUm9hWE5iTUYwcExtSmxabTl5WlNoemRISjFZM1IxY21VZ1BTQWtLSE4wY25WamRIVnlaU2twWEc0Z0lDQWdJQ0FnSUhaaGNpQmphR2xzWkhKbGJseHVJQ0FnSUNBZ0lDQXZMeUJrY21sc2JDQmtiM2R1SUhSdklIUm9aU0JwYm0xdmMzUWdaV3hsYldWdWRGeHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb0tHTm9hV3hrY21WdUlEMGdjM1J5ZFdOMGRYSmxMbU5vYVd4a2NtVnVLQ2twTG14bGJtZDBhQ2tnYzNSeWRXTjBkWEpsSUQwZ1kyaHBiR1J5Wlc0dVptbHljM1FvS1Z4dUlDQWdJQ0FnSUNBa0tITjBjblZqZEhWeVpTa3VZWEJ3Wlc1a0tIUm9hWE1wWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwYzF4dUlDQWdJSDBzWEc0Z0lDQWdkM0poY0VsdWJtVnlPaUJtZFc1amRHbHZiaWh6ZEhKMVkzUjFjbVVwZTF4dUlDQWdJQ0FnZG1GeUlHWjFibU1nUFNCcGMwWjFibU4wYVc5dUtITjBjblZqZEhWeVpTbGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVZoWTJnb1puVnVZM1JwYjI0b2FXNWtaWGdwZTF4dUlDQWdJQ0FnSUNCMllYSWdjMlZzWmlBOUlDUW9kR2hwY3lrc0lHTnZiblJsYm5SeklEMGdjMlZzWmk1amIyNTBaVzUwY3lncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5dElDQTlJR1oxYm1NZ1B5QnpkSEoxWTNSMWNtVXVZMkZzYkNoMGFHbHpMQ0JwYm1SbGVDa2dPaUJ6ZEhKMVkzUjFjbVZjYmlBZ0lDQWdJQ0FnWTI5dWRHVnVkSE11YkdWdVozUm9JRDhnWTI5dWRHVnVkSE11ZDNKaGNFRnNiQ2hrYjIwcElEb2djMlZzWmk1aGNIQmxibVFvWkc5dEtWeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNCOUxGeHVJQ0FnSUhWdWQzSmhjRG9nWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUhSb2FYTXVjR0Z5Wlc1MEtDa3VaV0ZqYUNobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ0lDQWtLSFJvYVhNcExuSmxjR3hoWTJWWGFYUm9LQ1FvZEdocGN5a3VZMmhwYkdSeVpXNG9LU2xjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwYzF4dUlDQWdJSDBzWEc0Z0lDQWdZMnh2Ym1VNklHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV0WVhBb1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlIUm9hWE11WTJ4dmJtVk9iMlJsS0hSeWRXVXBJSDBwWEc0Z0lDQWdmU3hjYmlBZ0lDQm9hV1JsT2lCbWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZM056S0Z3aVpHbHpjR3hoZVZ3aUxDQmNJbTV2Ym1WY0lpbGNiaUFnSUNCOUxGeHVJQ0FnSUhSdloyZHNaVG9nWm5WdVkzUnBiMjRvYzJWMGRHbHVaeWw3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bFlXTm9LR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0FnSUhaaGNpQmxiQ0E5SUNRb2RHaHBjeWxjYmlBZ0lDQWdJQ0FnT3loelpYUjBhVzVuSUQwOVBTQjFibVJsWm1sdVpXUWdQeUJsYkM1amMzTW9YQ0prYVhOd2JHRjVYQ0lwSUQwOUlGd2libTl1WlZ3aUlEb2djMlYwZEdsdVp5a2dQeUJsYkM1emFHOTNLQ2tnT2lCbGJDNW9hV1JsS0NsY2JpQWdJQ0FnSUgwcFhHNGdJQ0FnZlN4Y2JpQWdJQ0J3Y21WMk9pQm1kVzVqZEdsdmJpaHpaV3hsWTNSdmNpbDdJSEpsZEhWeWJpQWtLSFJvYVhNdWNHeDFZMnNvSjNCeVpYWnBiM1Z6Uld4bGJXVnVkRk5wWW14cGJtY25LU2t1Wm1sc2RHVnlLSE5sYkdWamRHOXlJSHg4SUNjcUp5a2dmU3hjYmlBZ0lDQnVaWGgwT2lCbWRXNWpkR2x2YmloelpXeGxZM1J2Y2lsN0lISmxkSFZ5YmlBa0tIUm9hWE11Y0d4MVkyc29KMjVsZUhSRmJHVnRaVzUwVTJsaWJHbHVaeWNwS1M1bWFXeDBaWElvYzJWc1pXTjBiM0lnZkh3Z0p5b25LU0I5TEZ4dUlDQWdJR2gwYld3NklHWjFibU4wYVc5dUtHaDBiV3dwZTF4dUlDQWdJQ0FnY21WMGRYSnVJREFnYVc0Z1lYSm5kVzFsYm5SeklEOWNiaUFnSUNBZ0lDQWdkR2hwY3k1bFlXTm9LR1oxYm1OMGFXOXVLR2xrZUNsN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUc5eWFXZHBia2gwYld3Z1BTQjBhR2x6TG1sdWJtVnlTRlJOVEZ4dUlDQWdJQ0FnSUNBZ0lDUW9kR2hwY3lrdVpXMXdkSGtvS1M1aGNIQmxibVFvSUdaMWJtTkJjbWNvZEdocGN5d2dhSFJ0YkN3Z2FXUjRMQ0J2Y21sbmFXNUlkRzFzS1NBcFhHNGdJQ0FnSUNBZ0lIMHBJRHBjYmlBZ0lDQWdJQ0FnS0RBZ2FXNGdkR2hwY3lBL0lIUm9hWE5iTUYwdWFXNXVaWEpJVkUxTUlEb2diblZzYkNsY2JpQWdJQ0I5TEZ4dUlDQWdJSFJsZUhRNklHWjFibU4wYVc5dUtIUmxlSFFwZTF4dUlDQWdJQ0FnY21WMGRYSnVJREFnYVc0Z1lYSm5kVzFsYm5SeklEOWNiaUFnSUNBZ0lDQWdkR2hwY3k1bFlXTm9LR1oxYm1OMGFXOXVLR2xrZUNsN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUc1bGQxUmxlSFFnUFNCbWRXNWpRWEpuS0hSb2FYTXNJSFJsZUhRc0lHbGtlQ3dnZEdocGN5NTBaWGgwUTI5dWRHVnVkQ2xjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMblJsZUhSRGIyNTBaVzUwSUQwZ2JtVjNWR1Y0ZENBOVBTQnVkV3hzSUQ4Z0p5Y2dPaUFuSnl0dVpYZFVaWGgwWEc0Z0lDQWdJQ0FnSUgwcElEcGNiaUFnSUNBZ0lDQWdLREFnYVc0Z2RHaHBjeUEvSUhSb2FYTmJNRjB1ZEdWNGRFTnZiblJsYm5RZ09pQnVkV3hzS1Z4dUlDQWdJSDBzWEc0Z0lDQWdZWFIwY2pvZ1puVnVZM1JwYjI0b2JtRnRaU3dnZG1Gc2RXVXBlMXh1SUNBZ0lDQWdkbUZ5SUhKbGMzVnNkRnh1SUNBZ0lDQWdjbVYwZFhKdUlDaDBlWEJsYjJZZ2JtRnRaU0E5UFNBbmMzUnlhVzVuSnlBbUppQWhLREVnYVc0Z1lYSm5kVzFsYm5SektTa2dQMXh1SUNBZ0lDQWdJQ0FvSVhSb2FYTXViR1Z1WjNSb0lIeDhJSFJvYVhOYk1GMHVibTlrWlZSNWNHVWdJVDA5SURFZ1B5QjFibVJsWm1sdVpXUWdPbHh1SUNBZ0lDQWdJQ0FnSUNnaEtISmxjM1ZzZENBOUlIUm9hWE5iTUYwdVoyVjBRWFIwY21saWRYUmxLRzVoYldVcEtTQW1KaUJ1WVcxbElHbHVJSFJvYVhOYk1GMHBJRDhnZEdocGMxc3dYVnR1WVcxbFhTQTZJSEpsYzNWc2RGeHVJQ0FnSUNBZ0lDQXBJRHBjYmlBZ0lDQWdJQ0FnZEdocGN5NWxZV05vS0daMWJtTjBhVzl1S0dsa2VDbDdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Ym05a1pWUjVjR1VnSVQwOUlERXBJSEpsZEhWeWJseHVJQ0FnSUNBZ0lDQWdJR2xtSUNocGMwOWlhbVZqZENodVlXMWxLU2tnWm05eUlDaHJaWGtnYVc0Z2JtRnRaU2tnYzJWMFFYUjBjbWxpZFhSbEtIUm9hWE1zSUd0bGVTd2dibUZ0WlZ0clpYbGRLVnh1SUNBZ0lDQWdJQ0FnSUdWc2MyVWdjMlYwUVhSMGNtbGlkWFJsS0hSb2FYTXNJRzVoYldVc0lHWjFibU5CY21jb2RHaHBjeXdnZG1Gc2RXVXNJR2xrZUN3Z2RHaHBjeTVuWlhSQmRIUnlhV0oxZEdVb2JtRnRaU2twS1Z4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUgwc1hHNGdJQ0FnY21WdGIzWmxRWFIwY2pvZ1puVnVZM1JwYjI0b2JtRnRaU2w3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bFlXTm9LR1oxYm1OMGFXOXVLQ2w3SUhSb2FYTXVibTlrWlZSNWNHVWdQVDA5SURFZ0ppWWdibUZ0WlM1emNHeHBkQ2duSUNjcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1lYUjBjbWxpZFhSbEtYdGNiaUFnSUNBZ0lDQWdjMlYwUVhSMGNtbGlkWFJsS0hSb2FYTXNJR0YwZEhKcFluVjBaU2xjYmlBZ0lDQWdJSDBzSUhSb2FYTXBmU2xjYmlBZ0lDQjlMRnh1SUNBZ0lIQnliM0E2SUdaMWJtTjBhVzl1S0c1aGJXVXNJSFpoYkhWbEtYdGNiaUFnSUNBZ0lHNWhiV1VnUFNCd2NtOXdUV0Z3VzI1aGJXVmRJSHg4SUc1aGJXVmNiaUFnSUNBZ0lISmxkSFZ5YmlBb01TQnBiaUJoY21kMWJXVnVkSE1wSUQ5Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsWVdOb0tHWjFibU4wYVc5dUtHbGtlQ2w3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjMXR1WVcxbFhTQTlJR1oxYm1OQmNtY29kR2hwY3l3Z2RtRnNkV1VzSUdsa2VDd2dkR2hwYzF0dVlXMWxYU2xjYmlBZ0lDQWdJQ0FnZlNrZ09seHVJQ0FnSUNBZ0lDQW9kR2hwYzFzd1hTQW1KaUIwYUdseld6QmRXMjVoYldWZEtWeHVJQ0FnSUgwc1hHNGdJQ0FnWkdGMFlUb2dablZ1WTNScGIyNG9ibUZ0WlN3Z2RtRnNkV1VwZTF4dUlDQWdJQ0FnZG1GeUlHRjBkSEpPWVcxbElEMGdKMlJoZEdFdEp5QXJJRzVoYldVdWNtVndiR0ZqWlNoallYQnBkR0ZzVWtVc0lDY3RKREVuS1M1MGIweHZkMlZ5UTJGelpTZ3BYRzVjYmlBZ0lDQWdJSFpoY2lCa1lYUmhJRDBnS0RFZ2FXNGdZWEpuZFcxbGJuUnpLU0EvWEc0Z0lDQWdJQ0FnSUhSb2FYTXVZWFIwY2loaGRIUnlUbUZ0WlN3Z2RtRnNkV1VwSURwY2JpQWdJQ0FnSUNBZ2RHaHBjeTVoZEhSeUtHRjBkSEpPWVcxbEtWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z1pHRjBZU0FoUFQwZ2JuVnNiQ0EvSUdSbGMyVnlhV0ZzYVhwbFZtRnNkV1VvWkdGMFlTa2dPaUIxYm1SbFptbHVaV1JjYmlBZ0lDQjlMRnh1SUNBZ0lIWmhiRG9nWm5WdVkzUnBiMjRvZG1Gc2RXVXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlEQWdhVzRnWVhKbmRXMWxiblJ6SUQ5Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsWVdOb0tHWjFibU4wYVc5dUtHbGtlQ2w3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4MVpTQTlJR1oxYm1OQmNtY29kR2hwY3l3Z2RtRnNkV1VzSUdsa2VDd2dkR2hwY3k1MllXeDFaU2xjYmlBZ0lDQWdJQ0FnZlNrZ09seHVJQ0FnSUNBZ0lDQW9kR2hwYzFzd1hTQW1KaUFvZEdocGMxc3dYUzV0ZFd4MGFYQnNaU0EvWEc0Z0lDQWdJQ0FnSUNBZ0lDUW9kR2hwYzFzd1hTa3VabWx1WkNnbmIzQjBhVzl1SnlrdVptbHNkR1Z5S0daMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlCMGFHbHpMbk5sYkdWamRHVmtJSDBwTG5Cc2RXTnJLQ2QyWVd4MVpTY3BJRHBjYmlBZ0lDQWdJQ0FnSUNBZ2RHaHBjMXN3WFM1MllXeDFaU2xjYmlBZ0lDQWdJQ0FnS1Z4dUlDQWdJSDBzWEc0Z0lDQWdiMlptYzJWME9pQm1kVzVqZEdsdmJpaGpiMjl5WkdsdVlYUmxjeWw3WEc0Z0lDQWdJQ0JwWmlBb1kyOXZjbVJwYm1GMFpYTXBJSEpsZEhWeWJpQjBhR2x6TG1WaFkyZ29ablZ1WTNScGIyNG9hVzVrWlhncGUxeHVJQ0FnSUNBZ0lDQjJZWElnSkhSb2FYTWdQU0FrS0hSb2FYTXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXZjbVJ6SUQwZ1puVnVZMEZ5WnloMGFHbHpMQ0JqYjI5eVpHbHVZWFJsY3l3Z2FXNWtaWGdzSUNSMGFHbHpMbTltWm5ObGRDZ3BLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhjbVZ1ZEU5bVpuTmxkQ0E5SUNSMGFHbHpMbTltWm5ObGRGQmhjbVZ1ZENncExtOW1abk5sZENncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNITWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2Y0RvZ0lHTnZiM0prY3k1MGIzQWdJQzBnY0dGeVpXNTBUMlptYzJWMExuUnZjQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1ZtZERvZ1kyOXZjbVJ6TG14bFpuUWdMU0J3WVhKbGJuUlBabVp6WlhRdWJHVm1kRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNna2RHaHBjeTVqYzNNb0ozQnZjMmwwYVc5dUp5a2dQVDBnSjNOMFlYUnBZeWNwSUhCeWIzQnpXeWR3YjNOcGRHbHZiaWRkSUQwZ0ozSmxiR0YwYVhabEoxeHVJQ0FnSUNBZ0lDQWtkR2hwY3k1amMzTW9jSEp2Y0hNcFhHNGdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxteGxibWQwYUNrZ2NtVjBkWEp1SUc1MWJHeGNiaUFnSUNBZ0lIWmhjaUJ2WW1vZ1BTQjBhR2x6V3pCZExtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2dwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0JzWldaME9pQnZZbW91YkdWbWRDQXJJSGRwYm1SdmR5NXdZV2RsV0U5bVpuTmxkQ3hjYmlBZ0lDQWdJQ0FnZEc5d09pQnZZbW91ZEc5d0lDc2dkMmx1Wkc5M0xuQmhaMlZaVDJabWMyVjBMRnh1SUNBZ0lDQWdJQ0IzYVdSMGFEb2dUV0YwYUM1eWIzVnVaQ2h2WW1vdWQybGtkR2dwTEZ4dUlDQWdJQ0FnSUNCb1pXbG5hSFE2SUUxaGRHZ3VjbTkxYm1Rb2IySnFMbWhsYVdkb2RDbGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVJQ0FnSUdOemN6b2dablZ1WTNScGIyNG9jSEp2Y0dWeWRIa3NJSFpoYkhWbEtYdGNiaUFnSUNBZ0lHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JRHdnTWlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWTI5dGNIVjBaV1JUZEhsc1pTd2daV3hsYldWdWRDQTlJSFJvYVhOYk1GMWNiaUFnSUNBZ0lDQWdhV1lvSVdWc1pXMWxiblFwSUhKbGRIVnlibHh1SUNBZ0lDQWdJQ0JqYjIxd2RYUmxaRk4wZVd4bElEMGdaMlYwUTI5dGNIVjBaV1JUZEhsc1pTaGxiR1Z0Wlc1MExDQW5KeWxjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCd2NtOXdaWEowZVNBOVBTQW5jM1J5YVc1bkp5bGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaV3hsYldWdWRDNXpkSGxzWlZ0allXMWxiR2w2WlNod2NtOXdaWEowZVNsZElIeDhJR052YlhCMWRHVmtVM1I1YkdVdVoyVjBVSEp2Y0dWeWRIbFdZV3gxWlNod2NtOXdaWEowZVNsY2JpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2FYTkJjbkpoZVNod2NtOXdaWEowZVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2NISnZjSE1nUFNCN2ZWeHVJQ0FnSUNBZ0lDQWdJQ1F1WldGamFDaHdjbTl3WlhKMGVTd2dablZ1WTNScGIyNG9YeXdnY0hKdmNDbDdYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdjMXR3Y205d1hTQTlJQ2hsYkdWdFpXNTBMbk4wZVd4bFcyTmhiV1ZzYVhwbEtIQnliM0FwWFNCOGZDQmpiMjF3ZFhSbFpGTjBlV3hsTG1kbGRGQnliM0JsY25SNVZtRnNkV1VvY0hKdmNDa3BYRzRnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NISnZjSE5jYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCMllYSWdZM056SUQwZ0p5ZGNiaUFnSUNBZ0lHbG1JQ2gwZVhCbEtIQnliM0JsY25SNUtTQTlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFpoYkhWbElDWW1JSFpoYkhWbElDRTlQU0F3S1Z4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WldGamFDaG1kVzVqZEdsdmJpZ3BleUIwYUdsekxuTjBlV3hsTG5KbGJXOTJaVkJ5YjNCbGNuUjVLR1JoYzJobGNtbDZaU2h3Y205d1pYSjBlU2twSUgwcFhHNGdJQ0FnSUNBZ0lHVnNjMlZjYmlBZ0lDQWdJQ0FnSUNCamMzTWdQU0JrWVhOb1pYSnBlbVVvY0hKdmNHVnlkSGtwSUNzZ1hDSTZYQ0lnS3lCdFlYbGlaVUZrWkZCNEtIQnliM0JsY25SNUxDQjJZV3gxWlNsY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9hMlY1SUdsdUlIQnliM0JsY25SNUtWeHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaGNISnZjR1Z5ZEhsYmEyVjVYU0FtSmlCd2NtOXdaWEowZVZ0clpYbGRJQ0U5UFNBd0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxZV05vS0daMWJtTjBhVzl1S0NsN0lIUm9hWE11YzNSNWJHVXVjbVZ0YjNabFVISnZjR1Z5ZEhrb1pHRnphR1Z5YVhwbEtHdGxlU2twSUgwcFhHNGdJQ0FnSUNBZ0lDQWdaV3h6WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZM056SUNzOUlHUmhjMmhsY21sNlpTaHJaWGtwSUNzZ0p6b25JQ3NnYldGNVltVkJaR1JRZUNoclpYa3NJSEJ5YjNCbGNuUjVXMnRsZVYwcElDc2dKenNuWEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtVmhZMmdvWm5WdVkzUnBiMjRvS1hzZ2RHaHBjeTV6ZEhsc1pTNWpjM05VWlhoMElDczlJQ2M3SnlBcklHTnpjeUI5S1Z4dUlDQWdJSDBzWEc0Z0lDQWdhVzVrWlhnNklHWjFibU4wYVc5dUtHVnNaVzFsYm5RcGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdWc1pXMWxiblFnUHlCMGFHbHpMbWx1WkdWNFQyWW9KQ2hsYkdWdFpXNTBLVnN3WFNrZ09pQjBhR2x6TG5CaGNtVnVkQ2dwTG1Ob2FXeGtjbVZ1S0NrdWFXNWtaWGhQWmloMGFHbHpXekJkS1Z4dUlDQWdJSDBzWEc0Z0lDQWdhR0Z6UTJ4aGMzTTZJR1oxYm1OMGFXOXVLRzVoYldVcGUxeHVJQ0FnSUNBZ2FXWWdLQ0Z1WVcxbEtTQnlaWFIxY200Z1ptRnNjMlZjYmlBZ0lDQWdJSEpsZEhWeWJpQmxiWEIwZVVGeWNtRjVMbk52YldVdVkyRnNiQ2gwYUdsekxDQm1kVzVqZEdsdmJpaGxiQ2w3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuUmxjM1FvWTJ4aGMzTk9ZVzFsS0dWc0tTbGNiaUFnSUNBZ0lIMHNJR05zWVhOelVrVW9ibUZ0WlNrcFhHNGdJQ0FnZlN4Y2JpQWdJQ0JoWkdSRGJHRnpjem9nWm5WdVkzUnBiMjRvYm1GdFpTbDdYRzRnSUNBZ0lDQnBaaUFvSVc1aGJXVXBJSEpsZEhWeWJpQjBhR2x6WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bFlXTm9LR1oxYm1OMGFXOXVLR2xrZUNsN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doS0NkamJHRnpjMDVoYldVbklHbHVJSFJvYVhNcEtTQnlaWFIxY201Y2JpQWdJQ0FnSUNBZ1kyeGhjM05NYVhOMElEMGdXMTFjYmlBZ0lDQWdJQ0FnZG1GeUlHTnNjeUE5SUdOc1lYTnpUbUZ0WlNoMGFHbHpLU3dnYm1WM1RtRnRaU0E5SUdaMWJtTkJjbWNvZEdocGN5d2dibUZ0WlN3Z2FXUjRMQ0JqYkhNcFhHNGdJQ0FnSUNBZ0lHNWxkMDVoYldVdWMzQnNhWFFvTDF4Y2N5c3ZaeWt1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhyYkdGemN5bDdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRWtLSFJvYVhNcExtaGhjME5zWVhOektHdHNZWE56S1NrZ1kyeGhjM05NYVhOMExuQjFjMmdvYTJ4aGMzTXBYRzRnSUNBZ0lDQWdJSDBzSUhSb2FYTXBYRzRnSUNBZ0lDQWdJR05zWVhOelRHbHpkQzVzWlc1bmRHZ2dKaVlnWTJ4aGMzTk9ZVzFsS0hSb2FYTXNJR05zY3lBcklDaGpiSE1nUHlCY0lpQmNJaUE2SUZ3aVhDSXBJQ3NnWTJ4aGMzTk1hWE4wTG1wdmFXNG9YQ0lnWENJcEtWeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNCOUxGeHVJQ0FnSUhKbGJXOTJaVU5zWVhOek9pQm1kVzVqZEdsdmJpaHVZVzFsS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtVmhZMmdvWm5WdVkzUnBiMjRvYVdSNEtYdGNiaUFnSUNBZ0lDQWdhV1lnS0NFb0oyTnNZWE56VG1GdFpTY2dhVzRnZEdocGN5a3BJSEpsZEhWeWJseHVJQ0FnSUNBZ0lDQnBaaUFvYm1GdFpTQTlQVDBnZFc1a1pXWnBibVZrS1NCeVpYUjFjbTRnWTJ4aGMzTk9ZVzFsS0hSb2FYTXNJQ2NuS1Z4dUlDQWdJQ0FnSUNCamJHRnpjMHhwYzNRZ1BTQmpiR0Z6YzA1aGJXVW9kR2hwY3lsY2JpQWdJQ0FnSUNBZ1puVnVZMEZ5WnloMGFHbHpMQ0J1WVcxbExDQnBaSGdzSUdOc1lYTnpUR2x6ZENrdWMzQnNhWFFvTDF4Y2N5c3ZaeWt1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhyYkdGemN5bDdYRzRnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk1hWE4wSUQwZ1kyeGhjM05NYVhOMExuSmxjR3hoWTJVb1kyeGhjM05TUlNocmJHRnpjeWtzSUZ3aUlGd2lLVnh1SUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNCamJHRnpjMDVoYldVb2RHaHBjeXdnWTJ4aGMzTk1hWE4wTG5SeWFXMG9LU2xjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdmU3hjYmlBZ0lDQjBiMmRuYkdWRGJHRnpjem9nWm5WdVkzUnBiMjRvYm1GdFpTd2dkMmhsYmlsN1hHNGdJQ0FnSUNCcFppQW9JVzVoYldVcElISmxkSFZ5YmlCMGFHbHpYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVsWVdOb0tHWjFibU4wYVc5dUtHbGtlQ2w3WEc0Z0lDQWdJQ0FnSUhaaGNpQWtkR2hwY3lBOUlDUW9kR2hwY3lrc0lHNWhiV1Z6SUQwZ1puVnVZMEZ5WnloMGFHbHpMQ0J1WVcxbExDQnBaSGdzSUdOc1lYTnpUbUZ0WlNoMGFHbHpLU2xjYmlBZ0lDQWdJQ0FnYm1GdFpYTXVjM0JzYVhRb0wxeGNjeXN2WnlrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlocmJHRnpjeWw3WEc0Z0lDQWdJQ0FnSUNBZ0tIZG9aVzRnUFQwOUlIVnVaR1ZtYVc1bFpDQS9JQ0VrZEdocGN5NW9ZWE5EYkdGemN5aHJiR0Z6Y3lrZ09pQjNhR1Z1S1NBL1hHNGdJQ0FnSUNBZ0lDQWdJQ0FrZEdocGN5NWhaR1JEYkdGemN5aHJiR0Z6Y3lrZ09pQWtkR2hwY3k1eVpXMXZkbVZEYkdGemN5aHJiR0Z6Y3lsY2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lIMHBYRzRnSUNBZ2ZTeGNiaUFnSUNCelkzSnZiR3hVYjNBNklHWjFibU4wYVc5dUtIWmhiSFZsS1h0Y2JpQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1c1pXNW5kR2dwSUhKbGRIVnlibHh1SUNBZ0lDQWdkbUZ5SUdoaGMxTmpjbTlzYkZSdmNDQTlJQ2R6WTNKdmJHeFViM0FuSUdsdUlIUm9hWE5iTUYxY2JpQWdJQ0FnSUdsbUlDaDJZV3gxWlNBOVBUMGdkVzVrWldacGJtVmtLU0J5WlhSMWNtNGdhR0Z6VTJOeWIyeHNWRzl3SUQ4Z2RHaHBjMXN3WFM1elkzSnZiR3hVYjNBZ09pQjBhR2x6V3pCZExuQmhaMlZaVDJabWMyVjBYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVsWVdOb0tHaGhjMU5qY205c2JGUnZjQ0EvWEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1S0NsN0lIUm9hWE11YzJOeWIyeHNWRzl3SUQwZ2RtRnNkV1VnZlNBNlhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUtDbDdJSFJvYVhNdWMyTnliMnhzVkc4b2RHaHBjeTV6WTNKdmJHeFlMQ0IyWVd4MVpTa2dmU2xjYmlBZ0lDQjlMRnh1SUNBZ0lITmpjbTlzYkV4bFpuUTZJR1oxYm1OMGFXOXVLSFpoYkhWbEtYdGNiaUFnSUNBZ0lHbG1JQ2doZEdocGN5NXNaVzVuZEdncElISmxkSFZ5Ymx4dUlDQWdJQ0FnZG1GeUlHaGhjMU5qY205c2JFeGxablFnUFNBbmMyTnliMnhzVEdWbWRDY2dhVzRnZEdocGMxc3dYVnh1SUNBZ0lDQWdhV1lnS0haaGJIVmxJRDA5UFNCMWJtUmxabWx1WldRcElISmxkSFZ5YmlCb1lYTlRZM0p2Ykd4TVpXWjBJRDhnZEdocGMxc3dYUzV6WTNKdmJHeE1aV1owSURvZ2RHaHBjMXN3WFM1d1lXZGxXRTltWm5ObGRGeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaV0ZqYUNob1lYTlRZM0p2Ykd4TVpXWjBJRDljYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRvS1hzZ2RHaHBjeTV6WTNKdmJHeE1aV1owSUQwZ2RtRnNkV1VnZlNBNlhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUtDbDdJSFJvYVhNdWMyTnliMnhzVkc4b2RtRnNkV1VzSUhSb2FYTXVjMk55YjJ4c1dTa2dmU2xjYmlBZ0lDQjlMRnh1SUNBZ0lIQnZjMmwwYVc5dU9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJR2xtSUNnaGRHaHBjeTVzWlc1bmRHZ3BJSEpsZEhWeWJseHVYRzRnSUNBZ0lDQjJZWElnWld4bGJTQTlJSFJvYVhOYk1GMHNYRzRnSUNBZ0lDQWdJQzh2SUVkbGRDQXFjbVZoYkNvZ2IyWm1jMlYwVUdGeVpXNTBYRzRnSUNBZ0lDQWdJRzltWm5ObGRGQmhjbVZ1ZENBOUlIUm9hWE11YjJabWMyVjBVR0Z5Wlc1MEtDa3NYRzRnSUNBZ0lDQWdJQzh2SUVkbGRDQmpiM0p5WldOMElHOW1abk5sZEhOY2JpQWdJQ0FnSUNBZ2IyWm1jMlYwSUNBZ0lDQWdJRDBnZEdocGN5NXZabVp6WlhRb0tTeGNiaUFnSUNBZ0lDQWdjR0Z5Wlc1MFQyWm1jMlYwSUQwZ2NtOXZkRTV2WkdWU1JTNTBaWE4wS0c5bVpuTmxkRkJoY21WdWRGc3dYUzV1YjJSbFRtRnRaU2tnUHlCN0lIUnZjRG9nTUN3Z2JHVm1kRG9nTUNCOUlEb2diMlptYzJWMFVHRnlaVzUwTG05bVpuTmxkQ2dwWEc1Y2JpQWdJQ0FnSUM4dklGTjFZblJ5WVdOMElHVnNaVzFsYm5RZ2JXRnlaMmx1YzF4dUlDQWdJQ0FnTHk4Z2JtOTBaVG9nZDJobGJpQmhiaUJsYkdWdFpXNTBJR2hoY3lCdFlYSm5hVzQ2SUdGMWRHOGdkR2hsSUc5bVpuTmxkRXhsWm5RZ1lXNWtJRzFoY21kcGJreGxablJjYmlBZ0lDQWdJQzh2SUdGeVpTQjBhR1VnYzJGdFpTQnBiaUJUWVdaaGNta2dZMkYxYzJsdVp5QnZabVp6WlhRdWJHVm1kQ0IwYnlCcGJtTnZjbkpsWTNSc2VTQmlaU0F3WEc0Z0lDQWdJQ0J2Wm1aelpYUXVkRzl3SUNBdFBTQndZWEp6WlVac2IyRjBLQ0FrS0dWc1pXMHBMbU56Y3lnbmJXRnlaMmx1TFhSdmNDY3BJQ2tnZkh3Z01GeHVJQ0FnSUNBZ2IyWm1jMlYwTG14bFpuUWdMVDBnY0dGeWMyVkdiRzloZENnZ0pDaGxiR1Z0S1M1amMzTW9KMjFoY21kcGJpMXNaV1owSnlrZ0tTQjhmQ0F3WEc1Y2JpQWdJQ0FnSUM4dklFRmtaQ0J2Wm1aelpYUlFZWEpsYm5RZ1ltOXlaR1Z5YzF4dUlDQWdJQ0FnY0dGeVpXNTBUMlptYzJWMExuUnZjQ0FnS3owZ2NHRnljMlZHYkc5aGRDZ2dKQ2h2Wm1aelpYUlFZWEpsYm5SYk1GMHBMbU56Y3lnblltOXlaR1Z5TFhSdmNDMTNhV1IwYUNjcElDa2dmSHdnTUZ4dUlDQWdJQ0FnY0dGeVpXNTBUMlptYzJWMExteGxablFnS3owZ2NHRnljMlZHYkc5aGRDZ2dKQ2h2Wm1aelpYUlFZWEpsYm5SYk1GMHBMbU56Y3lnblltOXlaR1Z5TFd4bFpuUXRkMmxrZEdnbktTQXBJSHg4SURCY2JseHVJQ0FnSUNBZ0x5OGdVM1ZpZEhKaFkzUWdkR2hsSUhSM2J5QnZabVp6WlhSelhHNGdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCMGIzQTZJQ0J2Wm1aelpYUXVkRzl3SUNBdElIQmhjbVZ1ZEU5bVpuTmxkQzUwYjNBc1hHNGdJQ0FnSUNBZ0lHeGxablE2SUc5bVpuTmxkQzVzWldaMElDMGdjR0Z5Wlc1MFQyWm1jMlYwTG14bFpuUmNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVJQ0FnSUc5bVpuTmxkRkJoY21WdWREb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dFlYQW9ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQmhjbVZ1ZENBOUlIUm9hWE11YjJabWMyVjBVR0Z5Wlc1MElIeDhJR1J2WTNWdFpXNTBMbUp2WkhsY2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0hCaGNtVnVkQ0FtSmlBaGNtOXZkRTV2WkdWU1JTNTBaWE4wS0hCaGNtVnVkQzV1YjJSbFRtRnRaU2tnSmlZZ0pDaHdZWEpsYm5RcExtTnpjeWhjSW5CdmMybDBhVzl1WENJcElEMDlJRndpYzNSaGRHbGpYQ0lwWEc0Z0lDQWdJQ0FnSUNBZ2NHRnlaVzUwSUQwZ2NHRnlaVzUwTG05bVpuTmxkRkJoY21WdWRGeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NHRnlaVzUwWEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4dklHWnZjaUJ1YjNkY2JpQWdKQzVtYmk1a1pYUmhZMmdnUFNBa0xtWnVMbkpsYlc5MlpWeHVYRzRnSUM4dklFZGxibVZ5WVhSbElIUm9aU0JnZDJsa2RHaGdJR0Z1WkNCZ2FHVnBaMmgwWUNCbWRXNWpkR2x2Ym5OY2JpQWdPMXNuZDJsa2RHZ25MQ0FuYUdWcFoyaDBKMTB1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhrYVcxbGJuTnBiMjRwZTF4dUlDQWdJSFpoY2lCa2FXMWxibk5wYjI1UWNtOXdaWEowZVNBOVhHNGdJQ0FnSUNCa2FXMWxibk5wYjI0dWNtVndiR0ZqWlNndkxpOHNJR1oxYm1OMGFXOXVLRzBwZXlCeVpYUjFjbTRnYlZzd1hTNTBiMVZ3Y0dWeVEyRnpaU2dwSUgwcFhHNWNiaUFnSUNBa0xtWnVXMlJwYldWdWMybHZibDBnUFNCbWRXNWpkR2x2YmloMllXeDFaU2w3WEc0Z0lDQWdJQ0IyWVhJZ2IyWm1jMlYwTENCbGJDQTlJSFJvYVhOYk1GMWNiaUFnSUNBZ0lHbG1JQ2gyWVd4MVpTQTlQVDBnZFc1a1pXWnBibVZrS1NCeVpYUjFjbTRnYVhOWGFXNWtiM2NvWld3cElEOGdaV3hiSjJsdWJtVnlKeUFySUdScGJXVnVjMmx2YmxCeWIzQmxjblI1WFNBNlhHNGdJQ0FnSUNBZ0lHbHpSRzlqZFcxbGJuUW9aV3dwSUQ4Z1pXd3VaRzlqZFcxbGJuUkZiR1Z0Wlc1MFd5ZHpZM0p2Ykd3bklDc2daR2x0Wlc1emFXOXVVSEp2Y0dWeWRIbGRJRHBjYmlBZ0lDQWdJQ0FnS0c5bVpuTmxkQ0E5SUhSb2FYTXViMlptYzJWMEtDa3BJQ1ltSUc5bVpuTmxkRnRrYVcxbGJuTnBiMjVkWEc0Z0lDQWdJQ0JsYkhObElISmxkSFZ5YmlCMGFHbHpMbVZoWTJnb1puVnVZM1JwYjI0b2FXUjRLWHRjYmlBZ0lDQWdJQ0FnWld3Z1BTQWtLSFJvYVhNcFhHNGdJQ0FnSUNBZ0lHVnNMbU56Y3loa2FXMWxibk5wYjI0c0lHWjFibU5CY21jb2RHaHBjeXdnZG1Gc2RXVXNJR2xrZUN3Z1pXeGJaR2x0Wlc1emFXOXVYU2dwS1NsY2JpQWdJQ0FnSUgwcFhHNGdJQ0FnZlZ4dUlDQjlLVnh1WEc0Z0lHWjFibU4wYVc5dUlIUnlZWFpsY25ObFRtOWtaU2h1YjJSbExDQm1kVzRwSUh0Y2JpQWdJQ0JtZFc0b2JtOWtaU2xjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JHVnVJRDBnYm05a1pTNWphR2xzWkU1dlpHVnpMbXhsYm1kMGFEc2dhU0E4SUd4bGJqc2dhU3NyS1Z4dUlDQWdJQ0FnZEhKaGRtVnljMlZPYjJSbEtHNXZaR1V1WTJocGJHUk9iMlJsYzF0cFhTd2dablZ1S1Z4dUlDQjlYRzVjYmlBZ0x5OGdSMlZ1WlhKaGRHVWdkR2hsSUdCaFpuUmxjbUFzSUdCd2NtVndaVzVrWUN3Z1lHSmxabTl5WldBc0lHQmhjSEJsYm1SZ0xGeHVJQ0F2THlCZ2FXNXpaWEowUVdaMFpYSmdMQ0JnYVc1elpYSjBRbVZtYjNKbFlDd2dZR0Z3Y0dWdVpGUnZZQ3dnWVc1a0lHQndjbVZ3Wlc1a1ZHOWdJRzFsZEdodlpITXVYRzRnSUdGa2FtRmpaVzVqZVU5d1pYSmhkRzl5Y3k1bWIzSkZZV05vS0daMWJtTjBhVzl1S0c5d1pYSmhkRzl5TENCdmNHVnlZWFJ2Y2tsdVpHVjRLU0I3WEc0Z0lDQWdkbUZ5SUdsdWMybGtaU0E5SUc5d1pYSmhkRzl5U1c1a1pYZ2dKU0F5SUM4dlBUNGdjSEpsY0dWdVpDd2dZWEJ3Wlc1a1hHNWNiaUFnSUNBa0xtWnVXMjl3WlhKaGRHOXlYU0E5SUdaMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNBdkx5QmhjbWQxYldWdWRITWdZMkZ1SUdKbElHNXZaR1Z6TENCaGNuSmhlWE1nYjJZZ2JtOWtaWE1zSUZwbGNIUnZJRzlpYW1WamRITWdZVzVrSUVoVVRVd2djM1J5YVc1bmMxeHVJQ0FnSUNBZ2RtRnlJR0Z5WjFSNWNHVXNJRzV2WkdWeklEMGdKQzV0WVhBb1lYSm5kVzFsYm5SekxDQm1kVzVqZEdsdmJpaGhjbWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z5WjFSNWNHVWdQU0IwZVhCbEtHRnlaeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaGNtZFVlWEJsSUQwOUlGd2liMkpxWldOMFhDSWdmSHdnWVhKblZIbHdaU0E5UFNCY0ltRnljbUY1WENJZ2ZId2dZWEpuSUQwOUlHNTFiR3dnUDF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21jZ09pQjZaWEIwYnk1bWNtRm5iV1Z1ZENoaGNtY3BYRzRnSUNBZ0lDQWdJQ0FnZlNrc1hHNGdJQ0FnSUNBZ0lDQWdjR0Z5Wlc1MExDQmpiM0I1UW5sRGJHOXVaU0E5SUhSb2FYTXViR1Z1WjNSb0lENGdNVnh1SUNBZ0lDQWdhV1lnS0c1dlpHVnpMbXhsYm1kMGFDQThJREVwSUhKbGRIVnliaUIwYUdselhHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVZoWTJnb1puVnVZM1JwYjI0b1h5d2dkR0Z5WjJWMEtYdGNiaUFnSUNBZ0lDQWdjR0Z5Wlc1MElEMGdhVzV6YVdSbElEOGdkR0Z5WjJWMElEb2dkR0Z5WjJWMExuQmhjbVZ1ZEU1dlpHVmNibHh1SUNBZ0lDQWdJQ0F2THlCamIyNTJaWEowSUdGc2JDQnRaWFJvYjJSeklIUnZJR0VnWENKaVpXWnZjbVZjSWlCdmNHVnlZWFJwYjI1Y2JpQWdJQ0FnSUNBZ2RHRnlaMlYwSUQwZ2IzQmxjbUYwYjNKSmJtUmxlQ0E5UFNBd0lEOGdkR0Z5WjJWMExtNWxlSFJUYVdKc2FXNW5JRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNCbGNtRjBiM0pKYm1SbGVDQTlQU0F4SUQ4Z2RHRnlaMlYwTG1acGNuTjBRMmhwYkdRZ09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjR1Z5WVhSdmNrbHVaR1Y0SUQwOUlESWdQeUIwWVhKblpYUWdPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1ZFd4c1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhCaGNtVnVkRWx1Ukc5amRXMWxiblFnUFNBa0xtTnZiblJoYVc1ektHUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFJXeGxiV1Z1ZEN3Z2NHRnlaVzUwS1Z4dVhHNGdJQ0FnSUNBZ0lHNXZaR1Z6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvYm05a1pTbDdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHTnZjSGxDZVVOc2IyNWxLU0J1YjJSbElEMGdibTlrWlM1amJHOXVaVTV2WkdVb2RISjFaU2xjYmlBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNnaGNHRnlaVzUwS1NCeVpYUjFjbTRnSkNodWIyUmxLUzV5WlcxdmRtVW9LVnh1WEc0Z0lDQWdJQ0FnSUNBZ2NHRnlaVzUwTG1sdWMyVnlkRUpsWm05eVpTaHViMlJsTENCMFlYSm5aWFFwWEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSEJoY21WdWRFbHVSRzlqZFcxbGJuUXBJSFJ5WVhabGNuTmxUbTlrWlNodWIyUmxMQ0JtZFc1amRHbHZiaWhsYkNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pXd3VibTlrWlU1aGJXVWdJVDBnYm5Wc2JDQW1KaUJsYkM1dWIyUmxUbUZ0WlM1MGIxVndjR1Z5UTJGelpTZ3BJRDA5UFNBblUwTlNTVkJVSnlBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tDRmxiQzUwZVhCbElIeDhJR1ZzTG5SNWNHVWdQVDA5SUNkMFpYaDBMMnBoZG1GelkzSnBjSFFuS1NBbUppQWhaV3d1YzNKaktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXNWtiM2RiSjJWMllXd25YUzVqWVd4c0tIZHBibVJ2ZHl3Z1pXd3VhVzV1WlhKSVZFMU1LVnh1SUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJR0ZtZEdWeUlDQWdJRDArSUdsdWMyVnlkRUZtZEdWeVhHNGdJQ0FnTHk4Z2NISmxjR1Z1WkNBZ1BUNGdjSEpsY0dWdVpGUnZYRzRnSUNBZ0x5OGdZbVZtYjNKbElDQWdQVDRnYVc1elpYSjBRbVZtYjNKbFhHNGdJQ0FnTHk4Z1lYQndaVzVrSUNBZ1BUNGdZWEJ3Wlc1a1ZHOWNiaUFnSUNBa0xtWnVXMmx1YzJsa1pTQS9JRzl3WlhKaGRHOXlLeWRVYnljZ09pQW5hVzV6WlhKMEp5c29iM0JsY21GMGIzSkpibVJsZUNBL0lDZENaV1p2Y21VbklEb2dKMEZtZEdWeUp5bGRJRDBnWm5WdVkzUnBiMjRvYUhSdGJDbDdYRzRnSUNBZ0lDQWtLR2gwYld3cFcyOXdaWEpoZEc5eVhTaDBhR2x6S1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhOY2JpQWdJQ0I5WEc0Z0lIMHBYRzVjYmlBZ2VtVndkRzh1V2k1d2NtOTBiM1I1Y0dVZ1BTQmFMbkJ5YjNSdmRIbHdaU0E5SUNRdVptNWNibHh1SUNBdkx5QkZlSEJ2Y25RZ2FXNTBaWEp1WVd3Z1FWQkpJR1oxYm1OMGFXOXVjeUJwYmlCMGFHVWdZQ1F1ZW1Wd2RHOWdJRzVoYldWemNHRmpaVnh1SUNCNlpYQjBieTUxYm1seElEMGdkVzVwY1Z4dUlDQjZaWEIwYnk1a1pYTmxjbWxoYkdsNlpWWmhiSFZsSUQwZ1pHVnpaWEpwWVd4cGVtVldZV3gxWlZ4dUlDQWtMbnBsY0hSdklEMGdlbVZ3ZEc5Y2JseHVJQ0J5WlhSMWNtNGdKRnh1ZlNrb0tWeHVYRzR2THlCSlppQmdKR0FnYVhNZ2JtOTBJSGxsZENCa1pXWnBibVZrTENCd2IybHVkQ0JwZENCMGJ5QmdXbVZ3ZEc5Z1hHNTNhVzVrYjNjdVdtVndkRzhnUFNCYVpYQjBiMXh1ZDJsdVpHOTNMaVFnUFQwOUlIVnVaR1ZtYVc1bFpDQW1KaUFvZDJsdVpHOTNMaVFnUFNCYVpYQjBieWxjYmx4dUx5OGdJQ0FnSUZwbGNIUnZMbXB6WEc0dkx5QWdJQ0FnS0dNcElESXdNVEF0TWpBeE5DQlVhRzl0WVhNZ1JuVmphSE5jYmk4dklDQWdJQ0JhWlhCMGJ5NXFjeUJ0WVhrZ1ltVWdabkpsWld4NUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JOU1ZRZ2JHbGpaVzV6WlM1Y2JseHVPeWhtZFc1amRHbHZiaWdrS1h0Y2JpQWdablZ1WTNScGIyNGdaR1YwWldOMEtIVmhMQ0J3YkdGMFptOXliU2w3WEc0Z0lDQWdkbUZ5SUc5eklEMGdkR2hwY3k1dmN5QTlJSHQ5TENCaWNtOTNjMlZ5SUQwZ2RHaHBjeTVpY205M2MyVnlJRDBnZTMwc1hHNGdJQ0FnSUNCM1pXSnJhWFFnUFNCMVlTNXRZWFJqYUNndlYyVmlXMnRMWFdsMFcxeGNMMTE3TUN3eGZTaGJYRnhrTGwwcktTOHBMRnh1SUNBZ0lDQWdZVzVrY205cFpDQTlJSFZoTG0xaGRHTm9LQzhvUVc1a2NtOXBaQ2s3UDF0Y1hITmNYQzlkS3loYlhGeGtMbDByS1Q4dktTeGNiaUFnSUNBZ0lHOXplQ0E5SUNFaGRXRXViV0YwWTJnb0wxeGNLRTFoWTJsdWRHOXphRnhjT3lCSmJuUmxiQ0F2S1N4Y2JpQWdJQ0FnSUdsd1lXUWdQU0IxWVM1dFlYUmphQ2d2S0dsUVlXUXBMaXBQVTF4Y2N5aGJYRnhrWDEwcktTOHBMRnh1SUNBZ0lDQWdhWEJ2WkNBOUlIVmhMbTFoZEdOb0tDOG9hVkJ2WkNrb0xpcFBVMXhjY3loYlhGeGtYMTByS1NrL0x5a3NYRzRnSUNBZ0lDQnBjR2h2Ym1VZ1BTQWhhWEJoWkNBbUppQjFZUzV0WVhSamFDZ3ZLR2xRYUc5dVpWeGNjMDlUS1Z4Y2N5aGJYRnhrWDEwcktTOHBMRnh1SUNBZ0lDQWdkMlZpYjNNZ1BTQjFZUzV0WVhSamFDZ3ZLSGRsWWs5VGZHaHdkMDlUS1Z0Y1hITmNYQzlkS0Z0Y1hHUXVYU3NwTHlrc1hHNGdJQ0FnSUNCM2FXNGdQU0F2VjJsdVhGeGtleko5ZkZkcGJtUnZkM012TG5SbGMzUW9jR3hoZEdadmNtMHBMRnh1SUNBZ0lDQWdkM0FnUFNCMVlTNXRZWFJqYUNndlYybHVaRzkzY3lCUWFHOXVaU0FvVzF4Y1pDNWRLeWt2S1N4Y2JpQWdJQ0FnSUhSdmRXTm9jR0ZrSUQwZ2QyVmliM01nSmlZZ2RXRXViV0YwWTJnb0wxUnZkV05vVUdGa0x5a3NYRzRnSUNBZ0lDQnJhVzVrYkdVZ1BTQjFZUzV0WVhSamFDZ3ZTMmx1Wkd4bFhGd3ZLRnRjWEdRdVhTc3BMeWtzWEc0Z0lDQWdJQ0J6YVd4cklEMGdkV0V1YldGMFkyZ29MMU5wYkd0Y1hDOG9XMXhjWkM1ZlhTc3BMeWtzWEc0Z0lDQWdJQ0JpYkdGamEySmxjbko1SUQwZ2RXRXViV0YwWTJnb0x5aENiR0ZqYTBKbGNuSjVLUzRxVm1WeWMybHZibHhjTHloYlhGeGtMbDByS1M4cExGeHVJQ0FnSUNBZ1ltSXhNQ0E5SUhWaExtMWhkR05vS0M4b1FrSXhNQ2t1S2xabGNuTnBiMjVjWEM4b1cxeGNaQzVkS3lrdktTeGNiaUFnSUNBZ0lISnBiWFJoWW14bGRHOXpJRDBnZFdFdWJXRjBZMmdvTHloU1NVMWNYSE5VWVdKc1pYUmNYSE5QVXlsY1hITW9XMXhjWkM1ZEt5a3ZLU3hjYmlBZ0lDQWdJSEJzWVhsaWIyOXJJRDBnZFdFdWJXRjBZMmdvTDFCc1lYbENiMjlyTHlrc1hHNGdJQ0FnSUNCamFISnZiV1VnUFNCMVlTNXRZWFJqYUNndlEyaHliMjFsWEZ3dktGdGNYR1F1WFNzcEx5a2dmSHdnZFdFdWJXRjBZMmdvTDBOeWFVOVRYRnd2S0Z0Y1hHUXVYU3NwTHlrc1hHNGdJQ0FnSUNCbWFYSmxabTk0SUQwZ2RXRXViV0YwWTJnb0wwWnBjbVZtYjNoY1hDOG9XMXhjWkM1ZEt5a3ZLU3hjYmlBZ0lDQWdJR1pwY21WbWIzaHZjeUE5SUhWaExtMWhkR05vS0M5Y1hDZ29QenBOYjJKcGJHVjhWR0ZpYkdWMEtUc2djblk2S0Z0Y1hHUXVYU3NwWEZ3cExpcEdhWEpsWm05NFhGd3ZXMXhjWkM1ZEt5OHBMRnh1SUNBZ0lDQWdhV1VnUFNCMVlTNXRZWFJqYUNndlRWTkpSVnhjY3loYlhGeGtMbDByS1M4cElIeDhJSFZoTG0xaGRHTm9LQzlVY21sa1pXNTBYRnd2VzF4Y1pGMG9QejFiWGx4Y1AxMHJLUzRxY25ZNktGc3dMVGt1WFM0cEx5a3NYRzRnSUNBZ0lDQjNaV0oyYVdWM0lEMGdJV05vY205dFpTQW1KaUIxWVM1dFlYUmphQ2d2S0dsUWFHOXVaWHhwVUc5a2ZHbFFZV1FwTGlwQmNIQnNaVmRsWWt0cGRDZy9JUzRxVTJGbVlYSnBLUzhwTEZ4dUlDQWdJQ0FnYzJGbVlYSnBJRDBnZDJWaWRtbGxkeUI4ZkNCMVlTNXRZWFJqYUNndlZtVnljMmx2Ymx4Y0x5aGJYRnhrTGwwcktTaGJYbE5kS0ZOaFptRnlhU2w4VzE1TlhTb29UVzlpYVd4bEtWdGVVMTBxS0ZOaFptRnlhU2twTHlsY2JseHVJQ0FnSUM4dklGUnZaRzg2SUdOc1pXRnVJSFJvYVhNZ2RYQWdkMmwwYUNCaElHSmxkSFJsY2lCUFV5OWljbTkzYzJWeUlITmxjR1Z5WVhScGIyNDZYRzRnSUNBZ0x5OGdMU0JrYVhOalpYSnVJQ2h0YjNKbEtTQmlaWFIzWldWdUlHMTFiSFJwY0d4bElHSnliM2R6WlhKeklHOXVJR0Z1WkhKdmFXUmNiaUFnSUNBdkx5QXRJR1JsWTJsa1pTQnBaaUJyYVc1a2JHVWdabWx5WlNCcGJpQnphV3hySUcxdlpHVWdhWE1nWVc1a2NtOXBaQ0J2Y2lCdWIzUmNiaUFnSUNBdkx5QXRJRVpwY21WbWIzZ2diMjRnUVc1a2NtOXBaQ0JrYjJWemJpZDBJSE53WldOcFpua2dkR2hsSUVGdVpISnZhV1FnZG1WeWMybHZibHh1SUNBZ0lDOHZJQzBnY0c5emMybGliSGtnWkdWMmFXUmxJR2x1SUc5ekxDQmtaWFpwWTJVZ1lXNWtJR0p5YjNkelpYSWdhR0Z6YUdWelhHNWNiaUFnSUNCcFppQW9Zbkp2ZDNObGNpNTNaV0pyYVhRZ1BTQWhJWGRsWW10cGRDa2dZbkp2ZDNObGNpNTJaWEp6YVc5dUlEMGdkMlZpYTJsMFd6RmRYRzVjYmlBZ0lDQnBaaUFvWVc1a2NtOXBaQ2tnYjNNdVlXNWtjbTlwWkNBOUlIUnlkV1VzSUc5ekxuWmxjbk5wYjI0Z1BTQmhibVJ5YjJsa1d6SmRYRzRnSUNBZ2FXWWdLR2x3YUc5dVpTQW1KaUFoYVhCdlpDa2diM011YVc5eklEMGdiM011YVhCb2IyNWxJRDBnZEhKMVpTd2diM011ZG1WeWMybHZiaUE5SUdsd2FHOXVaVnN5WFM1eVpYQnNZV05sS0M5ZkwyY3NJQ2N1SnlsY2JpQWdJQ0JwWmlBb2FYQmhaQ2tnYjNNdWFXOXpJRDBnYjNNdWFYQmhaQ0E5SUhSeWRXVXNJRzl6TG5abGNuTnBiMjRnUFNCcGNHRmtXekpkTG5KbGNHeGhZMlVvTDE4dlp5d2dKeTRuS1Z4dUlDQWdJR2xtSUNocGNHOWtLU0J2Y3k1cGIzTWdQU0J2Y3k1cGNHOWtJRDBnZEhKMVpTd2diM011ZG1WeWMybHZiaUE5SUdsd2IyUmJNMTBnUHlCcGNHOWtXek5kTG5KbGNHeGhZMlVvTDE4dlp5d2dKeTRuS1NBNklHNTFiR3hjYmlBZ0lDQnBaaUFvZDNBcElHOXpMbmR3SUQwZ2RISjFaU3dnYjNNdWRtVnljMmx2YmlBOUlIZHdXekZkWEc0Z0lDQWdhV1lnS0hkbFltOXpLU0J2Y3k1M1pXSnZjeUE5SUhSeWRXVXNJRzl6TG5abGNuTnBiMjRnUFNCM1pXSnZjMXN5WFZ4dUlDQWdJR2xtSUNoMGIzVmphSEJoWkNrZ2IzTXVkRzkxWTJod1lXUWdQU0IwY25WbFhHNGdJQ0FnYVdZZ0tHSnNZV05yWW1WeWNua3BJRzl6TG1Kc1lXTnJZbVZ5Y25rZ1BTQjBjblZsTENCdmN5NTJaWEp6YVc5dUlEMGdZbXhoWTJ0aVpYSnllVnN5WFZ4dUlDQWdJR2xtSUNoaVlqRXdLU0J2Y3k1aVlqRXdJRDBnZEhKMVpTd2diM011ZG1WeWMybHZiaUE5SUdKaU1UQmJNbDFjYmlBZ0lDQnBaaUFvY21sdGRHRmliR1YwYjNNcElHOXpMbkpwYlhSaFlteGxkRzl6SUQwZ2RISjFaU3dnYjNNdWRtVnljMmx2YmlBOUlISnBiWFJoWW14bGRHOXpXekpkWEc0Z0lDQWdhV1lnS0hCc1lYbGliMjlyS1NCaWNtOTNjMlZ5TG5Cc1lYbGliMjlySUQwZ2RISjFaVnh1SUNBZ0lHbG1JQ2hyYVc1a2JHVXBJRzl6TG10cGJtUnNaU0E5SUhSeWRXVXNJRzl6TG5abGNuTnBiMjRnUFNCcmFXNWtiR1ZiTVYxY2JpQWdJQ0JwWmlBb2MybHNheWtnWW5KdmQzTmxjaTV6YVd4cklEMGdkSEoxWlN3Z1luSnZkM05sY2k1MlpYSnphVzl1SUQwZ2MybHNhMXN4WFZ4dUlDQWdJR2xtSUNnaGMybHNheUFtSmlCdmN5NWhibVJ5YjJsa0lDWW1JSFZoTG0xaGRHTm9LQzlMYVc1a2JHVWdSbWx5WlM4cEtTQmljbTkzYzJWeUxuTnBiR3NnUFNCMGNuVmxYRzRnSUNBZ2FXWWdLR05vY205dFpTa2dZbkp2ZDNObGNpNWphSEp2YldVZ1BTQjBjblZsTENCaWNtOTNjMlZ5TG5abGNuTnBiMjRnUFNCamFISnZiV1ZiTVYxY2JpQWdJQ0JwWmlBb1ptbHlaV1p2ZUNrZ1luSnZkM05sY2k1bWFYSmxabTk0SUQwZ2RISjFaU3dnWW5KdmQzTmxjaTUyWlhKemFXOXVJRDBnWm1seVpXWnZlRnN4WFZ4dUlDQWdJR2xtSUNobWFYSmxabTk0YjNNcElHOXpMbVpwY21WbWIzaHZjeUE5SUhSeWRXVXNJRzl6TG5abGNuTnBiMjRnUFNCbWFYSmxabTk0YjNOYk1WMWNiaUFnSUNCcFppQW9hV1VwSUdKeWIzZHpaWEl1YVdVZ1BTQjBjblZsTENCaWNtOTNjMlZ5TG5abGNuTnBiMjRnUFNCcFpWc3hYVnh1SUNBZ0lHbG1JQ2h6WVdaaGNta2dKaVlnS0c5emVDQjhmQ0J2Y3k1cGIzTWdmSHdnZDJsdUtTa2dlMXh1SUNBZ0lDQWdZbkp2ZDNObGNpNXpZV1poY21rZ1BTQjBjblZsWEc0Z0lDQWdJQ0JwWmlBb0lXOXpMbWx2Y3lrZ1luSnZkM05sY2k1MlpYSnphVzl1SUQwZ2MyRm1ZWEpwV3pGZFhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoM1pXSjJhV1YzS1NCaWNtOTNjMlZ5TG5kbFluWnBaWGNnUFNCMGNuVmxYRzVjYmlBZ0lDQnZjeTUwWVdKc1pYUWdQU0FoSVNocGNHRmtJSHg4SUhCc1lYbGliMjlySUh4OElDaGhibVJ5YjJsa0lDWW1JQ0YxWVM1dFlYUmphQ2d2VFc5aWFXeGxMeWtwSUh4OFhHNGdJQ0FnSUNBb1ptbHlaV1p2ZUNBbUppQjFZUzV0WVhSamFDZ3ZWR0ZpYkdWMEx5a3BJSHg4SUNocFpTQW1KaUFoZFdFdWJXRjBZMmdvTDFCb2IyNWxMeWtnSmlZZ2RXRXViV0YwWTJnb0wxUnZkV05vTHlrcEtWeHVJQ0FnSUc5ekxuQm9iMjVsSUNBOUlDRWhLQ0Z2Y3k1MFlXSnNaWFFnSmlZZ0lXOXpMbWx3YjJRZ0ppWWdLR0Z1WkhKdmFXUWdmSHdnYVhCb2IyNWxJSHg4SUhkbFltOXpJSHg4SUdKc1lXTnJZbVZ5Y25rZ2ZId2dZbUl4TUNCOGZGeHVJQ0FnSUNBZ0tHTm9jbTl0WlNBbUppQjFZUzV0WVhSamFDZ3ZRVzVrY205cFpDOHBLU0I4ZkNBb1kyaHliMjFsSUNZbUlIVmhMbTFoZEdOb0tDOURjbWxQVTF4Y0x5aGJYRnhrTGwwcktTOHBLU0I4ZkZ4dUlDQWdJQ0FnS0dacGNtVm1iM2dnSmlZZ2RXRXViV0YwWTJnb0wwMXZZbWxzWlM4cEtTQjhmQ0FvYVdVZ0ppWWdkV0V1YldGMFkyZ29MMVJ2ZFdOb0x5a3BLU2xjYmlBZ2ZWeHVYRzRnSUdSbGRHVmpkQzVqWVd4c0tDUXNJRzVoZG1sbllYUnZjaTUxYzJWeVFXZGxiblFzSUc1aGRtbG5ZWFJ2Y2k1d2JHRjBabTl5YlNsY2JpQWdMeThnYldGclpTQmhkbUZwYkdGaWJHVWdkRzhnZFc1cGRDQjBaWE4wYzF4dUlDQWtMbDlmWkdWMFpXTjBJRDBnWkdWMFpXTjBYRzVjYm4wcEtGcGxjSFJ2S1Z4dVhHNHZMeUFnSUNBZ1dtVndkRzh1YW5OY2JpOHZJQ0FnSUNBb1l5a2dNakF4TUMweU1ERTBJRlJvYjIxaGN5QkdkV05vYzF4dUx5OGdJQ0FnSUZwbGNIUnZMbXB6SUcxaGVTQmlaU0JtY21WbGJIa2daR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQnNhV05sYm5ObExseHVYRzQ3S0daMWJtTjBhVzl1S0NRcGUxeHVJQ0IyWVhJZ1gzcHBaQ0E5SURFc0lIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lITnNhV05sSUQwZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxMRnh1SUNBZ0lDQWdhWE5HZFc1amRHbHZiaUE5SUNRdWFYTkdkVzVqZEdsdmJpeGNiaUFnSUNBZ0lHbHpVM1J5YVc1bklEMGdablZ1WTNScGIyNG9iMkpxS1hzZ2NtVjBkWEp1SUhSNWNHVnZaaUJ2WW1vZ1BUMGdKM04wY21sdVp5Y2dmU3hjYmlBZ0lDQWdJR2hoYm1Sc1pYSnpJRDBnZTMwc1hHNGdJQ0FnSUNCemNHVmphV0ZzUlhabGJuUnpQWHQ5TEZ4dUlDQWdJQ0FnWm05amRYTnBibE4xY0hCdmNuUmxaQ0E5SUNkdmJtWnZZM1Z6YVc0bklHbHVJSGRwYm1SdmR5eGNiaUFnSUNBZ0lHWnZZM1Z6SUQwZ2V5Qm1iMk4xY3pvZ0oyWnZZM1Z6YVc0bkxDQmliSFZ5T2lBblptOWpkWE52ZFhRbklIMHNYRzRnSUNBZ0lDQm9iM1psY2lBOUlIc2diVzkxYzJWbGJuUmxjam9nSjIxdmRYTmxiM1psY2ljc0lHMXZkWE5sYkdWaGRtVTZJQ2R0YjNWelpXOTFkQ2NnZlZ4dVhHNGdJSE53WldOcFlXeEZkbVZ1ZEhNdVkyeHBZMnNnUFNCemNHVmphV0ZzUlhabGJuUnpMbTF2ZFhObFpHOTNiaUE5SUhOd1pXTnBZV3hGZG1WdWRITXViVzkxYzJWMWNDQTlJSE53WldOcFlXeEZkbVZ1ZEhNdWJXOTFjMlZ0YjNabElEMGdKMDF2ZFhObFJYWmxiblJ6SjF4dVhHNGdJR1oxYm1OMGFXOXVJSHBwWkNobGJHVnRaVzUwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1ZzWlcxbGJuUXVYM3BwWkNCOGZDQW9aV3hsYldWdWRDNWZlbWxrSUQwZ1gzcHBaQ3NyS1Z4dUlDQjlYRzRnSUdaMWJtTjBhVzl1SUdacGJtUklZVzVrYkdWeWN5aGxiR1Z0Wlc1MExDQmxkbVZ1ZEN3Z1ptNHNJSE5sYkdWamRHOXlLU0I3WEc0Z0lDQWdaWFpsYm5RZ1BTQndZWEp6WlNobGRtVnVkQ2xjYmlBZ0lDQnBaaUFvWlhabGJuUXVibk1wSUhaaGNpQnRZWFJqYUdWeUlEMGdiV0YwWTJobGNrWnZjaWhsZG1WdWRDNXVjeWxjYmlBZ0lDQnlaWFIxY200Z0tHaGhibVJzWlhKelczcHBaQ2hsYkdWdFpXNTBLVjBnZkh3Z1cxMHBMbVpwYkhSbGNpaG1kVzVqZEdsdmJpaG9ZVzVrYkdWeUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2FHRnVaR3hsY2x4dUlDQWdJQ0FnSUNBbUppQW9JV1YyWlc1MExtVWdJSHg4SUdoaGJtUnNaWEl1WlNBOVBTQmxkbVZ1ZEM1bEtWeHVJQ0FnSUNBZ0lDQW1KaUFvSVdWMlpXNTBMbTV6SUh4OElHMWhkR05vWlhJdWRHVnpkQ2hvWVc1a2JHVnlMbTV6S1NsY2JpQWdJQ0FnSUNBZ0ppWWdLQ0ZtYmlBZ0lDQWdJQ0I4ZkNCNmFXUW9hR0Z1Wkd4bGNpNW1iaWtnUFQwOUlIcHBaQ2htYmlrcFhHNGdJQ0FnSUNBZ0lDWW1JQ2doYzJWc1pXTjBiM0lnZkh3Z2FHRnVaR3hsY2k1elpXd2dQVDBnYzJWc1pXTjBiM0lwWEc0Z0lDQWdmU2xjYmlBZ2ZWeHVJQ0JtZFc1amRHbHZiaUJ3WVhKelpTaGxkbVZ1ZENrZ2UxeHVJQ0FnSUhaaGNpQndZWEowY3lBOUlDZ25KeUFySUdWMlpXNTBLUzV6Y0d4cGRDZ25MaWNwWEc0Z0lDQWdjbVYwZFhKdUlIdGxPaUJ3WVhKMGMxc3dYU3dnYm5NNklIQmhjblJ6TG5Oc2FXTmxLREVwTG5OdmNuUW9LUzVxYjJsdUtDY2dKeWw5WEc0Z0lIMWNiaUFnWm5WdVkzUnBiMjRnYldGMFkyaGxja1p2Y2lodWN5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVbVZuUlhod0tDY29QenBlZkNBcEp5QXJJRzV6TG5KbGNHeGhZMlVvSnlBbkxDQW5JQzRxSUQ4bktTQXJJQ2NvUHpvZ2ZDUXBKeWxjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUdWMlpXNTBRMkZ3ZEhWeVpTaG9ZVzVrYkdWeUxDQmpZWEIwZFhKbFUyVjBkR2x1WnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJvWVc1a2JHVnlMbVJsYkNBbUpseHVJQ0FnSUNBZ0tDRm1iMk4xYzJsdVUzVndjRzl5ZEdWa0lDWW1JQ2hvWVc1a2JHVnlMbVVnYVc0Z1ptOWpkWE1wS1NCOGZGeHVJQ0FnSUNBZ0lTRmpZWEIwZFhKbFUyVjBkR2x1WjF4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z2NtVmhiRVYyWlc1MEtIUjVjR1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdhRzkyWlhKYmRIbHdaVjBnZkh3Z0tHWnZZM1Z6YVc1VGRYQndiM0owWldRZ0ppWWdabTlqZFhOYmRIbHdaVjBwSUh4OElIUjVjR1ZjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUdGa1pDaGxiR1Z0Wlc1MExDQmxkbVZ1ZEhNc0lHWnVMQ0JrWVhSaExDQnpaV3hsWTNSdmNpd2daR1ZzWldkaGRHOXlMQ0JqWVhCMGRYSmxLWHRjYmlBZ0lDQjJZWElnYVdRZ1BTQjZhV1FvWld4bGJXVnVkQ2tzSUhObGRDQTlJQ2hvWVc1a2JHVnljMXRwWkYwZ2ZId2dLR2hoYm1Sc1pYSnpXMmxrWFNBOUlGdGRLU2xjYmlBZ0lDQmxkbVZ1ZEhNdWMzQnNhWFFvTDF4Y2N5OHBMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9aWFpsYm5RcGUxeHVJQ0FnSUNBZ2FXWWdLR1YyWlc1MElEMDlJQ2R5WldGa2VTY3BJSEpsZEhWeWJpQWtLR1J2WTNWdFpXNTBLUzV5WldGa2VTaG1iaWxjYmlBZ0lDQWdJSFpoY2lCb1lXNWtiR1Z5SUNBZ1BTQndZWEp6WlNobGRtVnVkQ2xjYmlBZ0lDQWdJR2hoYm1Sc1pYSXVabTRnSUNBZ1BTQm1ibHh1SUNBZ0lDQWdhR0Z1Wkd4bGNpNXpaV3dnSUNBOUlITmxiR1ZqZEc5eVhHNGdJQ0FnSUNBdkx5QmxiWFZzWVhSbElHMXZkWE5sWlc1MFpYSXNJRzF2ZFhObGJHVmhkbVZjYmlBZ0lDQWdJR2xtSUNob1lXNWtiR1Z5TG1VZ2FXNGdhRzkyWlhJcElHWnVJRDBnWm5WdVkzUnBiMjRvWlNsN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5Wld4aGRHVmtJRDBnWlM1eVpXeGhkR1ZrVkdGeVoyVjBYRzRnSUNBZ0lDQWdJR2xtSUNnaGNtVnNZWFJsWkNCOGZDQW9jbVZzWVhSbFpDQWhQVDBnZEdocGN5QW1KaUFoSkM1amIyNTBZV2x1Y3loMGFHbHpMQ0J5Wld4aGRHVmtLU2twWEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdoaGJtUnNaWEl1Wm00dVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhR0Z1Wkd4bGNpNWtaV3dnSUNBOUlHUmxiR1ZuWVhSdmNseHVJQ0FnSUNBZ2RtRnlJR05oYkd4aVlXTnJJQ0E5SUdSbGJHVm5ZWFJ2Y2lCOGZDQm1ibHh1SUNBZ0lDQWdhR0Z1Wkd4bGNpNXdjbTk0ZVNBOUlHWjFibU4wYVc5dUtHVXBlMXh1SUNBZ0lDQWdJQ0JsSUQwZ1kyOXRjR0YwYVdKc1pTaGxLVnh1SUNBZ0lDQWdJQ0JwWmlBb1pTNXBjMGx0YldWa2FXRjBaVkJ5YjNCaFoyRjBhVzl1VTNSdmNIQmxaQ2dwS1NCeVpYUjFjbTVjYmlBZ0lDQWdJQ0FnWlM1a1lYUmhJRDBnWkdGMFlWeHVJQ0FnSUNBZ0lDQjJZWElnY21WemRXeDBJRDBnWTJGc2JHSmhZMnN1WVhCd2JIa29aV3hsYldWdWRDd2daUzVmWVhKbmN5QTlQU0IxYm1SbFptbHVaV1FnUHlCYlpWMGdPaUJiWlYwdVkyOXVZMkYwS0dVdVgyRnlaM01wS1Z4dUlDQWdJQ0FnSUNCcFppQW9jbVZ6ZFd4MElEMDlQU0JtWVd4elpTa2daUzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BMQ0JsTG5OMGIzQlFjbTl3WVdkaGRHbHZiaWdwWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUmNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHaGhibVJzWlhJdWFTQTlJSE5sZEM1c1pXNW5kR2hjYmlBZ0lDQWdJSE5sZEM1d2RYTm9LR2hoYm1Sc1pYSXBYRzRnSUNBZ0lDQnBaaUFvSjJGa1pFVjJaVzUwVEdsemRHVnVaWEluSUdsdUlHVnNaVzFsYm5RcFhHNGdJQ0FnSUNBZ0lHVnNaVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2loeVpXRnNSWFpsYm5Rb2FHRnVaR3hsY2k1bEtTd2dhR0Z1Wkd4bGNpNXdjbTk0ZVN3Z1pYWmxiblJEWVhCMGRYSmxLR2hoYm1Sc1pYSXNJR05oY0hSMWNtVXBLVnh1SUNBZ0lIMHBYRzRnSUgxY2JpQWdablZ1WTNScGIyNGdjbVZ0YjNabEtHVnNaVzFsYm5Rc0lHVjJaVzUwY3l3Z1ptNHNJSE5sYkdWamRHOXlMQ0JqWVhCMGRYSmxLWHRjYmlBZ0lDQjJZWElnYVdRZ1BTQjZhV1FvWld4bGJXVnVkQ2xjYmlBZ0lDQTdLR1YyWlc1MGN5QjhmQ0FuSnlrdWMzQnNhWFFvTDF4Y2N5OHBMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9aWFpsYm5RcGUxeHVJQ0FnSUNBZ1ptbHVaRWhoYm1Sc1pYSnpLR1ZzWlcxbGJuUXNJR1YyWlc1MExDQm1iaXdnYzJWc1pXTjBiM0lwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvYUdGdVpHeGxjaWw3WEc0Z0lDQWdJQ0FnSUdSbGJHVjBaU0JvWVc1a2JHVnljMXRwWkYxYmFHRnVaR3hsY2k1cFhWeHVJQ0FnSUNBZ2FXWWdLQ2R5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5SnlCcGJpQmxiR1Z0Wlc1MEtWeHVJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9jbVZoYkVWMlpXNTBLR2hoYm1Sc1pYSXVaU2tzSUdoaGJtUnNaWEl1Y0hKdmVIa3NJR1YyWlc1MFEyRndkSFZ5WlNob1lXNWtiR1Z5TENCallYQjBkWEpsS1NsY2JpQWdJQ0FnSUgwcFhHNGdJQ0FnZlNsY2JpQWdmVnh1WEc0Z0lDUXVaWFpsYm5RZ1BTQjdJR0ZrWkRvZ1lXUmtMQ0J5WlcxdmRtVTZJSEpsYlc5MlpTQjlYRzVjYmlBZ0pDNXdjbTk0ZVNBOUlHWjFibU4wYVc5dUtHWnVMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdkbUZ5SUdGeVozTWdQU0FvTWlCcGJpQmhjbWQxYldWdWRITXBJQ1ltSUhOc2FXTmxMbU5oYkd3b1lYSm5kVzFsYm5SekxDQXlLVnh1SUNBZ0lHbG1JQ2hwYzBaMWJtTjBhVzl1S0dadUtTa2dlMXh1SUNBZ0lDQWdkbUZ5SUhCeWIzaDVSbTRnUFNCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z1ptNHVZWEJ3Ykhrb1kyOXVkR1Y0ZEN3Z1lYSm5jeUEvSUdGeVozTXVZMjl1WTJGMEtITnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpLU2tnT2lCaGNtZDFiV1Z1ZEhNcElIMWNiaUFnSUNBZ0lIQnliM2g1Um00dVgzcHBaQ0E5SUhwcFpDaG1iaWxjYmlBZ0lDQWdJSEpsZEhWeWJpQndjbTk0ZVVadVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNocGMxTjBjbWx1WnloamIyNTBaWGgwS1NrZ2UxeHVJQ0FnSUNBZ2FXWWdLR0Z5WjNNcElIdGNiaUFnSUNBZ0lDQWdZWEpuY3k1MWJuTm9hV1owS0dadVcyTnZiblJsZUhSZExDQm1iaWxjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ1F1Y0hKdmVIa3VZWEJ3Ykhrb2JuVnNiQ3dnWVhKbmN5bGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBa0xuQnliM2g1S0dadVcyTnZiblJsZUhSZExDQm1iaWxjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJbVY0Y0dWamRHVmtJR1oxYm1OMGFXOXVYQ0lwWEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnSkM1bWJpNWlhVzVrSUQwZ1puVnVZM1JwYjI0b1pYWmxiblFzSUdSaGRHRXNJR05oYkd4aVlXTnJLWHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV2YmlobGRtVnVkQ3dnWkdGMFlTd2dZMkZzYkdKaFkyc3BYRzRnSUgxY2JpQWdKQzVtYmk1MWJtSnBibVFnUFNCbWRXNWpkR2x2YmlobGRtVnVkQ3dnWTJGc2JHSmhZMnNwZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG05bVppaGxkbVZ1ZEN3Z1kyRnNiR0poWTJzcFhHNGdJSDFjYmlBZ0pDNW1iaTV2Ym1VZ1BTQm1kVzVqZEdsdmJpaGxkbVZ1ZEN3Z2MyVnNaV04wYjNJc0lHUmhkR0VzSUdOaGJHeGlZV05yS1h0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dmJpaGxkbVZ1ZEN3Z2MyVnNaV04wYjNJc0lHUmhkR0VzSUdOaGJHeGlZV05yTENBeEtWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUhKbGRIVnlibFJ5ZFdVZ1BTQm1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBjblZsZlN4Y2JpQWdJQ0FnSUhKbGRIVnlia1poYkhObElEMGdablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdabUZzYzJWOUxGeHVJQ0FnSUNBZ2FXZHViM0psVUhKdmNHVnlkR2xsY3lBOUlDOWVLRnRCTFZwZGZISmxkSFZ5YmxaaGJIVmxKSHhzWVhsbGNsdFlXVjBrS1M4c1hHNGdJQ0FnSUNCbGRtVnVkRTFsZEdodlpITWdQU0I3WEc0Z0lDQWdJQ0FnSUhCeVpYWmxiblJFWldaaGRXeDBPaUFuYVhORVpXWmhkV3gwVUhKbGRtVnVkR1ZrSnl4Y2JpQWdJQ0FnSUNBZ2MzUnZjRWx0YldWa2FXRjBaVkJ5YjNCaFoyRjBhVzl1T2lBbmFYTkpiVzFsWkdsaGRHVlFjbTl3WVdkaGRHbHZibE4wYjNCd1pXUW5MRnh1SUNBZ0lDQWdJQ0J6ZEc5d1VISnZjR0ZuWVhScGIyNDZJQ2RwYzFCeWIzQmhaMkYwYVc5dVUzUnZjSEJsWkNkY2JpQWdJQ0FnSUgxY2JseHVJQ0JtZFc1amRHbHZiaUJqYjIxd1lYUnBZbXhsS0dWMlpXNTBMQ0J6YjNWeVkyVXBJSHRjYmlBZ0lDQnBaaUFvYzI5MWNtTmxJSHg4SUNGbGRtVnVkQzVwYzBSbFptRjFiSFJRY21WMlpXNTBaV1FwSUh0Y2JpQWdJQ0FnSUhOdmRYSmpaU0I4ZkNBb2MyOTFjbU5sSUQwZ1pYWmxiblFwWEc1Y2JpQWdJQ0FnSUNRdVpXRmphQ2hsZG1WdWRFMWxkR2h2WkhNc0lHWjFibU4wYVc5dUtHNWhiV1VzSUhCeVpXUnBZMkYwWlNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYzI5MWNtTmxUV1YwYUc5a0lEMGdjMjkxY21ObFcyNWhiV1ZkWEc0Z0lDQWdJQ0FnSUdWMlpXNTBXMjVoYldWZElEMGdablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpXM0J5WldScFkyRjBaVjBnUFNCeVpYUjFjbTVVY25WbFhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlITnZkWEpqWlUxbGRHaHZaQ0FtSmlCemIzVnlZMlZOWlhSb2IyUXVZWEJ3Ykhrb2MyOTFjbU5sTENCaGNtZDFiV1Z1ZEhNcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaWFpsYm5SYmNISmxaR2xqWVhSbFhTQTlJSEpsZEhWeWJrWmhiSE5sWEc0Z0lDQWdJQ0I5S1Z4dVhHNGdJQ0FnSUNCcFppQW9jMjkxY21ObExtUmxabUYxYkhSUWNtVjJaVzUwWldRZ0lUMDlJSFZ1WkdWbWFXNWxaQ0EvSUhOdmRYSmpaUzVrWldaaGRXeDBVSEpsZG1WdWRHVmtJRHBjYmlBZ0lDQWdJQ0FnSUNBbmNtVjBkWEp1Vm1Gc2RXVW5JR2x1SUhOdmRYSmpaU0EvSUhOdmRYSmpaUzV5WlhSMWNtNVdZV3gxWlNBOVBUMGdabUZzYzJVZ09seHVJQ0FnSUNBZ0lDQWdJSE52ZFhKalpTNW5aWFJRY21WMlpXNTBSR1ZtWVhWc2RDQW1KaUJ6YjNWeVkyVXVaMlYwVUhKbGRtVnVkRVJsWm1GMWJIUW9LU2xjYmlBZ0lDQWdJQ0FnWlhabGJuUXVhWE5FWldaaGRXeDBVSEpsZG1WdWRHVmtJRDBnY21WMGRYSnVWSEoxWlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1pYWmxiblJjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUdOeVpXRjBaVkJ5YjNoNUtHVjJaVzUwS1NCN1hHNGdJQ0FnZG1GeUlHdGxlU3dnY0hKdmVIa2dQU0I3SUc5eWFXZHBibUZzUlhabGJuUTZJR1YyWlc1MElIMWNiaUFnSUNCbWIzSWdLR3RsZVNCcGJpQmxkbVZ1ZENsY2JpQWdJQ0FnSUdsbUlDZ2hhV2R1YjNKbFVISnZjR1Z5ZEdsbGN5NTBaWE4wS0d0bGVTa2dKaVlnWlhabGJuUmJhMlY1WFNBaFBUMGdkVzVrWldacGJtVmtLU0J3Y205NGVWdHJaWGxkSUQwZ1pYWmxiblJiYTJWNVhWeHVYRzRnSUNBZ2NtVjBkWEp1SUdOdmJYQmhkR2xpYkdVb2NISnZlSGtzSUdWMlpXNTBLVnh1SUNCOVhHNWNiaUFnSkM1bWJpNWtaV3hsWjJGMFpTQTlJR1oxYm1OMGFXOXVLSE5sYkdWamRHOXlMQ0JsZG1WdWRDd2dZMkZzYkdKaFkyc3BlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTl1S0dWMlpXNTBMQ0J6Wld4bFkzUnZjaXdnWTJGc2JHSmhZMnNwWEc0Z0lIMWNiaUFnSkM1bWJpNTFibVJsYkdWbllYUmxJRDBnWm5WdVkzUnBiMjRvYzJWc1pXTjBiM0lzSUdWMlpXNTBMQ0JqWVd4c1ltRmpheWw3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YjJabUtHVjJaVzUwTENCelpXeGxZM1J2Y2l3Z1kyRnNiR0poWTJzcFhHNGdJSDFjYmx4dUlDQWtMbVp1TG14cGRtVWdQU0JtZFc1amRHbHZiaWhsZG1WdWRDd2dZMkZzYkdKaFkyc3BlMXh1SUNBZ0lDUW9aRzlqZFcxbGJuUXVZbTlrZVNrdVpHVnNaV2RoZEdVb2RHaHBjeTV6Wld4bFkzUnZjaXdnWlhabGJuUXNJR05oYkd4aVlXTnJLVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpYRzRnSUgxY2JpQWdKQzVtYmk1a2FXVWdQU0JtZFc1amRHbHZiaWhsZG1WdWRDd2dZMkZzYkdKaFkyc3BlMXh1SUNBZ0lDUW9aRzlqZFcxbGJuUXVZbTlrZVNrdWRXNWtaV3hsWjJGMFpTaDBhR2x6TG5ObGJHVmpkRzl5TENCbGRtVnVkQ3dnWTJGc2JHSmhZMnNwWEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE5jYmlBZ2ZWeHVYRzRnSUNRdVptNHViMjRnUFNCbWRXNWpkR2x2YmlobGRtVnVkQ3dnYzJWc1pXTjBiM0lzSUdSaGRHRXNJR05oYkd4aVlXTnJMQ0J2Ym1VcGUxeHVJQ0FnSUhaaGNpQmhkWFJ2VW1WdGIzWmxMQ0JrWld4bFoyRjBiM0lzSUNSMGFHbHpJRDBnZEdocGMxeHVJQ0FnSUdsbUlDaGxkbVZ1ZENBbUppQWhhWE5UZEhKcGJtY29aWFpsYm5RcEtTQjdYRzRnSUNBZ0lDQWtMbVZoWTJnb1pYWmxiblFzSUdaMWJtTjBhVzl1S0hSNWNHVXNJR1p1S1h0Y2JpQWdJQ0FnSUNBZ0pIUm9hWE11YjI0b2RIbHdaU3dnYzJWc1pXTjBiM0lzSUdSaGRHRXNJR1p1TENCdmJtVXBYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdjbVYwZFhKdUlDUjBhR2x6WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0NGcGMxTjBjbWx1WnloelpXeGxZM1J2Y2lrZ0ppWWdJV2x6Um5WdVkzUnBiMjRvWTJGc2JHSmhZMnNwSUNZbUlHTmhiR3hpWVdOcklDRTlQU0JtWVd4elpTbGNiaUFnSUNBZ0lHTmhiR3hpWVdOcklEMGdaR0YwWVN3Z1pHRjBZU0E5SUhObGJHVmpkRzl5TENCelpXeGxZM1J2Y2lBOUlIVnVaR1ZtYVc1bFpGeHVJQ0FnSUdsbUlDaHBjMFoxYm1OMGFXOXVLR1JoZEdFcElIeDhJR1JoZEdFZ1BUMDlJR1poYkhObEtWeHVJQ0FnSUNBZ1kyRnNiR0poWTJzZ1BTQmtZWFJoTENCa1lYUmhJRDBnZFc1a1pXWnBibVZrWEc1Y2JpQWdJQ0JwWmlBb1kyRnNiR0poWTJzZ1BUMDlJR1poYkhObEtTQmpZV3hzWW1GamF5QTlJSEpsZEhWeWJrWmhiSE5sWEc1Y2JpQWdJQ0J5WlhSMWNtNGdKSFJvYVhNdVpXRmphQ2htZFc1amRHbHZiaWhmTENCbGJHVnRaVzUwS1h0Y2JpQWdJQ0FnSUdsbUlDaHZibVVwSUdGMWRHOVNaVzF2ZG1VZ1BTQm1kVzVqZEdsdmJpaGxLWHRjYmlBZ0lDQWdJQ0FnY21WdGIzWmxLR1ZzWlcxbGJuUXNJR1V1ZEhsd1pTd2dZMkZzYkdKaFkyc3BYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV3hzWW1GamF5NWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wWEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaHpaV3hsWTNSdmNpa2daR1ZzWldkaGRHOXlJRDBnWm5WdVkzUnBiMjRvWlNsN1hHNGdJQ0FnSUNBZ0lIWmhjaUJsZG5Rc0lHMWhkR05vSUQwZ0pDaGxMblJoY21kbGRDa3VZMnh2YzJWemRDaHpaV3hsWTNSdmNpd2daV3hsYldWdWRDa3VaMlYwS0RBcFhHNGdJQ0FnSUNBZ0lHbG1JQ2h0WVhSamFDQW1KaUJ0WVhSamFDQWhQVDBnWld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHVjJkQ0E5SUNRdVpYaDBaVzVrS0dOeVpXRjBaVkJ5YjNoNUtHVXBMQ0I3WTNWeWNtVnVkRlJoY21kbGREb2diV0YwWTJnc0lHeHBkbVZHYVhKbFpEb2daV3hsYldWdWRIMHBYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2hoZFhSdlVtVnRiM1psSUh4OElHTmhiR3hpWVdOcktTNWhjSEJzZVNodFlYUmphQ3dnVzJWMmRGMHVZMjl1WTJGMEtITnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpMQ0F4S1NrcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdZV1JrS0dWc1pXMWxiblFzSUdWMlpXNTBMQ0JqWVd4c1ltRmpheXdnWkdGMFlTd2djMlZzWldOMGIzSXNJR1JsYkdWbllYUnZjaUI4ZkNCaGRYUnZVbVZ0YjNabEtWeHVJQ0FnSUgwcFhHNGdJSDFjYmlBZ0pDNW1iaTV2Wm1ZZ1BTQm1kVzVqZEdsdmJpaGxkbVZ1ZEN3Z2MyVnNaV04wYjNJc0lHTmhiR3hpWVdOcktYdGNiaUFnSUNCMllYSWdKSFJvYVhNZ1BTQjBhR2x6WEc0Z0lDQWdhV1lnS0dWMlpXNTBJQ1ltSUNGcGMxTjBjbWx1WnlobGRtVnVkQ2twSUh0Y2JpQWdJQ0FnSUNRdVpXRmphQ2hsZG1WdWRDd2dablZ1WTNScGIyNG9kSGx3WlN3Z1ptNHBlMXh1SUNBZ0lDQWdJQ0FrZEdocGN5NXZabVlvZEhsd1pTd2djMlZzWldOMGIzSXNJR1p1S1Z4dUlDQWdJQ0FnZlNsY2JpQWdJQ0FnSUhKbGRIVnliaUFrZEdocGMxeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDZ2hhWE5UZEhKcGJtY29jMlZzWldOMGIzSXBJQ1ltSUNGcGMwWjFibU4wYVc5dUtHTmhiR3hpWVdOcktTQW1KaUJqWVd4c1ltRmpheUFoUFQwZ1ptRnNjMlVwWEc0Z0lDQWdJQ0JqWVd4c1ltRmpheUE5SUhObGJHVmpkRzl5TENCelpXeGxZM1J2Y2lBOUlIVnVaR1ZtYVc1bFpGeHVYRzRnSUNBZ2FXWWdLR05oYkd4aVlXTnJJRDA5UFNCbVlXeHpaU2tnWTJGc2JHSmhZMnNnUFNCeVpYUjFjbTVHWVd4elpWeHVYRzRnSUNBZ2NtVjBkWEp1SUNSMGFHbHpMbVZoWTJnb1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lISmxiVzkyWlNoMGFHbHpMQ0JsZG1WdWRDd2dZMkZzYkdKaFkyc3NJSE5sYkdWamRHOXlLVnh1SUNBZ0lIMHBYRzRnSUgxY2JseHVJQ0FrTG1adUxuUnlhV2RuWlhJZ1BTQm1kVzVqZEdsdmJpaGxkbVZ1ZEN3Z1lYSm5jeWw3WEc0Z0lDQWdaWFpsYm5RZ1BTQW9hWE5UZEhKcGJtY29aWFpsYm5RcElIeDhJQ1F1YVhOUWJHRnBiazlpYW1WamRDaGxkbVZ1ZENrcElEOGdKQzVGZG1WdWRDaGxkbVZ1ZENrZ09pQmpiMjF3WVhScFlteGxLR1YyWlc1MEtWeHVJQ0FnSUdWMlpXNTBMbDloY21keklEMGdZWEpuYzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1WaFkyZ29ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJQzh2SUdoaGJtUnNaU0JtYjJOMWN5Z3BMQ0JpYkhWeUtDa2dZbmtnWTJGc2JHbHVaeUIwYUdWdElHUnBjbVZqZEd4NVhHNGdJQ0FnSUNCcFppQW9aWFpsYm5RdWRIbHdaU0JwYmlCbWIyTjFjeUFtSmlCMGVYQmxiMllnZEdocGMxdGxkbVZ1ZEM1MGVYQmxYU0E5UFNCY0ltWjFibU4wYVc5dVhDSXBJSFJvYVhOYlpYWmxiblF1ZEhsd1pWMG9LVnh1SUNBZ0lDQWdMeThnYVhSbGJYTWdhVzRnZEdobElHTnZiR3hsWTNScGIyNGdiV2xuYUhRZ2JtOTBJR0psSUVSUFRTQmxiR1Z0Wlc1MGMxeHVJQ0FnSUNBZ1pXeHpaU0JwWmlBb0oyUnBjM0JoZEdOb1JYWmxiblFuSUdsdUlIUm9hWE1wSUhSb2FYTXVaR2x6Y0dGMFkyaEZkbVZ1ZENobGRtVnVkQ2xjYmlBZ0lDQWdJR1ZzYzJVZ0pDaDBhR2x6S1M1MGNtbG5aMlZ5U0dGdVpHeGxjaWhsZG1WdWRDd2dZWEpuY3lsY2JpQWdJQ0I5S1Z4dUlDQjlYRzVjYmlBZ0x5OGdkSEpwWjJkbGNuTWdaWFpsYm5RZ2FHRnVaR3hsY25NZ2IyNGdZM1Z5Y21WdWRDQmxiR1Z0Wlc1MElHcDFjM1FnWVhNZ2FXWWdZVzRnWlhabGJuUWdiMk5qZFhKeVpXUXNYRzRnSUM4dklHUnZaWE51SjNRZ2RISnBaMmRsY2lCaGJpQmhZM1IxWVd3Z1pYWmxiblFzSUdSdlpYTnVKM1FnWW5WaVlteGxYRzRnSUNRdVptNHVkSEpwWjJkbGNraGhibVJzWlhJZ1BTQm1kVzVqZEdsdmJpaGxkbVZ1ZEN3Z1lYSm5jeWw3WEc0Z0lDQWdkbUZ5SUdVc0lISmxjM1ZzZEZ4dUlDQWdJSFJvYVhNdVpXRmphQ2htZFc1amRHbHZiaWhwTENCbGJHVnRaVzUwS1h0Y2JpQWdJQ0FnSUdVZ1BTQmpjbVZoZEdWUWNtOTRlU2hwYzFOMGNtbHVaeWhsZG1WdWRDa2dQeUFrTGtWMlpXNTBLR1YyWlc1MEtTQTZJR1YyWlc1MEtWeHVJQ0FnSUNBZ1pTNWZZWEpuY3lBOUlHRnlaM05jYmlBZ0lDQWdJR1V1ZEdGeVoyVjBJRDBnWld4bGJXVnVkRnh1SUNBZ0lDQWdKQzVsWVdOb0tHWnBibVJJWVc1a2JHVnljeWhsYkdWdFpXNTBMQ0JsZG1WdWRDNTBlWEJsSUh4OElHVjJaVzUwS1N3Z1puVnVZM1JwYjI0b2FTd2dhR0Z1Wkd4bGNpbDdYRzRnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJR2hoYm1Sc1pYSXVjSEp2ZUhrb1pTbGNiaUFnSUNBZ0lDQWdhV1lnS0dVdWFYTkpiVzFsWkdsaGRHVlFjbTl3WVdkaGRHbHZibE4wYjNCd1pXUW9LU2tnY21WMGRYSnVJR1poYkhObFhHNGdJQ0FnSUNCOUtWeHVJQ0FnSUgwcFhHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2RGeHVJQ0I5WEc1Y2JpQWdMeThnYzJodmNuUmpkWFFnYldWMGFHOWtjeUJtYjNJZ1lDNWlhVzVrS0dWMlpXNTBMQ0JtYmlsZ0lHWnZjaUJsWVdOb0lHVjJaVzUwSUhSNWNHVmNiaUFnT3lnblptOWpkWE5wYmlCbWIyTjFjMjkxZENCbWIyTjFjeUJpYkhWeUlHeHZZV1FnY21WemFYcGxJSE5qY205c2JDQjFibXh2WVdRZ1kyeHBZMnNnWkdKc1kyeHBZMnNnSnl0Y2JpQWdKMjF2ZFhObFpHOTNiaUJ0YjNWelpYVndJRzF2ZFhObGJXOTJaU0J0YjNWelpXOTJaWElnYlc5MWMyVnZkWFFnYlc5MWMyVmxiblJsY2lCdGIzVnpaV3hsWVhabElDY3JYRzRnSUNkamFHRnVaMlVnYzJWc1pXTjBJR3RsZVdSdmQyNGdhMlY1Y0hKbGMzTWdhMlY1ZFhBZ1pYSnliM0luS1M1emNHeHBkQ2duSUNjcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1pYWmxiblFwSUh0Y2JpQWdJQ0FrTG1adVcyVjJaVzUwWFNBOUlHWjFibU4wYVc5dUtHTmhiR3hpWVdOcktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0tEQWdhVzRnWVhKbmRXMWxiblJ6S1NBL1hHNGdJQ0FnSUNBZ0lIUm9hWE11WW1sdVpDaGxkbVZ1ZEN3Z1kyRnNiR0poWTJzcElEcGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGNtbG5aMlZ5S0dWMlpXNTBLVnh1SUNBZ0lIMWNiaUFnZlNsY2JseHVJQ0FrTGtWMlpXNTBJRDBnWm5WdVkzUnBiMjRvZEhsd1pTd2djSEp2Y0hNcElIdGNiaUFnSUNCcFppQW9JV2x6VTNSeWFXNW5LSFI1Y0dVcEtTQndjbTl3Y3lBOUlIUjVjR1VzSUhSNWNHVWdQU0J3Y205d2N5NTBlWEJsWEc0Z0lDQWdkbUZ5SUdWMlpXNTBJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSWFpsYm5Rb2MzQmxZMmxoYkVWMlpXNTBjMXQwZVhCbFhTQjhmQ0FuUlhabGJuUnpKeWtzSUdKMVltSnNaWE1nUFNCMGNuVmxYRzRnSUNBZ2FXWWdLSEJ5YjNCektTQm1iM0lnS0haaGNpQnVZVzFsSUdsdUlIQnliM0J6S1NBb2JtRnRaU0E5UFNBblluVmlZbXhsY3ljcElEOGdLR0oxWW1Kc1pYTWdQU0FoSVhCeWIzQnpXMjVoYldWZEtTQTZJQ2hsZG1WdWRGdHVZVzFsWFNBOUlIQnliM0J6VzI1aGJXVmRLVnh1SUNBZ0lHVjJaVzUwTG1sdWFYUkZkbVZ1ZENoMGVYQmxMQ0JpZFdKaWJHVnpMQ0IwY25WbEtWeHVJQ0FnSUhKbGRIVnliaUJqYjIxd1lYUnBZbXhsS0dWMlpXNTBLVnh1SUNCOVhHNWNibjBwS0ZwbGNIUnZLVnh1WEc0dkx5QWdJQ0FnV21Wd2RHOHVhbk5jYmk4dklDQWdJQ0FvWXlrZ01qQXhNQzB5TURFMElGUm9iMjFoY3lCR2RXTm9jMXh1THk4Z0lDQWdJRnBsY0hSdkxtcHpJRzFoZVNCaVpTQm1jbVZsYkhrZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRTFKVkNCc2FXTmxibk5sTGx4dVhHNDdLR1oxYm1OMGFXOXVLQ1FzSUhWdVpHVm1hVzVsWkNsN1hHNGdJSFpoY2lCd2NtVm1hWGdnUFNBbkp5d2daWFpsYm5SUWNtVm1hWGdzSUdWdVpFVjJaVzUwVG1GdFpTd2daVzVrUVc1cGJXRjBhVzl1VG1GdFpTeGNiaUFnSUNCMlpXNWtiM0p6SUQwZ2V5QlhaV0pyYVhRNklDZDNaV0pyYVhRbkxDQk5iM282SUNjbkxDQlBPaUFuYnljZ2ZTeGNiaUFnSUNCa2IyTjFiV1Z1ZENBOUlIZHBibVJ2ZHk1a2IyTjFiV1Z1ZEN3Z2RHVnpkRVZzSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWkdsMkp5a3NYRzRnSUNBZ2MzVndjRzl5ZEdWa1ZISmhibk5tYjNKdGN5QTlJQzllS0NoMGNtRnVjMnhoZEdWOGNtOTBZWFJsZkhOallXeGxLU2hZZkZsOFdud3paQ2svZkcxaGRISnBlQ2d6WkNrL2ZIQmxjbk53WldOMGFYWmxmSE5yWlhjb1dIeFpLVDhwSkM5cExGeHVJQ0FnSUhSeVlXNXpabTl5YlN4Y2JpQWdJQ0IwY21GdWMybDBhVzl1VUhKdmNHVnlkSGtzSUhSeVlXNXphWFJwYjI1RWRYSmhkR2x2Yml3Z2RISmhibk5wZEdsdmJsUnBiV2x1Wnl3Z2RISmhibk5wZEdsdmJrUmxiR0Y1TEZ4dUlDQWdJR0Z1YVcxaGRHbHZiazVoYldVc0lHRnVhVzFoZEdsdmJrUjFjbUYwYVc5dUxDQmhibWx0WVhScGIyNVVhVzFwYm1jc0lHRnVhVzFoZEdsdmJrUmxiR0Y1TEZ4dUlDQWdJR056YzFKbGMyVjBJRDBnZTMxY2JseHVJQ0JtZFc1amRHbHZiaUJrWVhOb1pYSnBlbVVvYzNSeUtTQjdJSEpsZEhWeWJpQnpkSEl1Y21Wd2JHRmpaU2d2S0Z0aExYcGRLU2hiUVMxYVhTa3ZMQ0FuSkRFdEpESW5LUzUwYjB4dmQyVnlRMkZ6WlNncElIMWNiaUFnWm5WdVkzUnBiMjRnYm05eWJXRnNhWHBsUlhabGJuUW9ibUZ0WlNrZ2V5QnlaWFIxY200Z1pYWmxiblJRY21WbWFYZ2dQeUJsZG1WdWRGQnlaV1pwZUNBcklHNWhiV1VnT2lCdVlXMWxMblJ2VEc5M1pYSkRZWE5sS0NrZ2ZWeHVYRzRnSUNRdVpXRmphQ2gyWlc1a2IzSnpMQ0JtZFc1amRHbHZiaWgyWlc1a2IzSXNJR1YyWlc1MEtYdGNiaUFnSUNCcFppQW9kR1Z6ZEVWc0xuTjBlV3hsVzNabGJtUnZjaUFySUNkVWNtRnVjMmwwYVc5dVVISnZjR1Z5ZEhrblhTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNCd2NtVm1hWGdnUFNBbkxTY2dLeUIyWlc1a2IzSXVkRzlNYjNkbGNrTmhjMlVvS1NBcklDY3RKMXh1SUNBZ0lDQWdaWFpsYm5SUWNtVm1hWGdnUFNCbGRtVnVkRnh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sWEc0Z0lDQWdmVnh1SUNCOUtWeHVYRzRnSUhSeVlXNXpabTl5YlNBOUlIQnlaV1pwZUNBcklDZDBjbUZ1YzJadmNtMG5YRzRnSUdOemMxSmxjMlYwVzNSeVlXNXphWFJwYjI1UWNtOXdaWEowZVNBOUlIQnlaV1pwZUNBcklDZDBjbUZ1YzJsMGFXOXVMWEJ5YjNCbGNuUjVKMTBnUFZ4dUlDQmpjM05TWlhObGRGdDBjbUZ1YzJsMGFXOXVSSFZ5WVhScGIyNGdQU0J3Y21WbWFYZ2dLeUFuZEhKaGJuTnBkR2x2Ymkxa2RYSmhkR2x2YmlkZElEMWNiaUFnWTNOelVtVnpaWFJiZEhKaGJuTnBkR2x2YmtSbGJHRjVJQ0FnSUQwZ2NISmxabWw0SUNzZ0ozUnlZVzV6YVhScGIyNHRaR1ZzWVhrblhTQTlYRzRnSUdOemMxSmxjMlYwVzNSeVlXNXphWFJwYjI1VWFXMXBibWNnSUNBOUlIQnlaV1pwZUNBcklDZDBjbUZ1YzJsMGFXOXVMWFJwYldsdVp5MW1kVzVqZEdsdmJpZGRJRDFjYmlBZ1kzTnpVbVZ6WlhSYllXNXBiV0YwYVc5dVRtRnRaU0FnSUNBZ0lEMGdjSEpsWm1sNElDc2dKMkZ1YVcxaGRHbHZiaTF1WVcxbEoxMGdQVnh1SUNCamMzTlNaWE5sZEZ0aGJtbHRZWFJwYjI1RWRYSmhkR2x2YmlBZ1BTQndjbVZtYVhnZ0t5QW5ZVzVwYldGMGFXOXVMV1IxY21GMGFXOXVKMTBnUFZ4dUlDQmpjM05TWlhObGRGdGhibWx0WVhScGIyNUVaV3hoZVNBZ0lDQWdQU0J3Y21WbWFYZ2dLeUFuWVc1cGJXRjBhVzl1TFdSbGJHRjVKMTBnUFZ4dUlDQmpjM05TWlhObGRGdGhibWx0WVhScGIyNVVhVzFwYm1jZ0lDQWdQU0J3Y21WbWFYZ2dLeUFuWVc1cGJXRjBhVzl1TFhScGJXbHVaeTFtZFc1amRHbHZiaWRkSUQwZ0p5ZGNibHh1SUNBa0xtWjRJRDBnZTF4dUlDQWdJRzltWmpvZ0tHVjJaVzUwVUhKbFptbDRJRDA5UFNCMWJtUmxabWx1WldRZ0ppWWdkR1Z6ZEVWc0xuTjBlV3hsTG5SeVlXNXphWFJwYjI1UWNtOXdaWEowZVNBOVBUMGdkVzVrWldacGJtVmtLU3hjYmlBZ0lDQnpjR1ZsWkhNNklIc2dYMlJsWm1GMWJIUTZJRFF3TUN3Z1ptRnpkRG9nTWpBd0xDQnpiRzkzT2lBMk1EQWdmU3hjYmlBZ0lDQmpjM05RY21WbWFYZzZJSEJ5WldacGVDeGNiaUFnSUNCMGNtRnVjMmwwYVc5dVJXNWtPaUJ1YjNKdFlXeHBlbVZGZG1WdWRDZ25WSEpoYm5OcGRHbHZia1Z1WkNjcExGeHVJQ0FnSUdGdWFXMWhkR2x2YmtWdVpEb2dibTl5YldGc2FYcGxSWFpsYm5Rb0owRnVhVzFoZEdsdmJrVnVaQ2NwWEc0Z0lIMWNibHh1SUNBa0xtWnVMbUZ1YVcxaGRHVWdQU0JtZFc1amRHbHZiaWh3Y205d1pYSjBhV1Z6TENCa2RYSmhkR2x2Yml3Z1pXRnpaU3dnWTJGc2JHSmhZMnNzSUdSbGJHRjVLWHRjYmlBZ0lDQnBaaUFvSkM1cGMwWjFibU4wYVc5dUtHUjFjbUYwYVc5dUtTbGNiaUFnSUNBZ0lHTmhiR3hpWVdOcklEMGdaSFZ5WVhScGIyNHNJR1ZoYzJVZ1BTQjFibVJsWm1sdVpXUXNJR1IxY21GMGFXOXVJRDBnZFc1a1pXWnBibVZrWEc0Z0lDQWdhV1lnS0NRdWFYTkdkVzVqZEdsdmJpaGxZWE5sS1NsY2JpQWdJQ0FnSUdOaGJHeGlZV05ySUQwZ1pXRnpaU3dnWldGelpTQTlJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lHbG1JQ2drTG1selVHeGhhVzVQWW1wbFkzUW9aSFZ5WVhScGIyNHBLVnh1SUNBZ0lDQWdaV0Z6WlNBOUlHUjFjbUYwYVc5dUxtVmhjMmx1Wnl3Z1kyRnNiR0poWTJzZ1BTQmtkWEpoZEdsdmJpNWpiMjF3YkdWMFpTd2daR1ZzWVhrZ1BTQmtkWEpoZEdsdmJpNWtaV3hoZVN3Z1pIVnlZWFJwYjI0Z1BTQmtkWEpoZEdsdmJpNWtkWEpoZEdsdmJseHVJQ0FnSUdsbUlDaGtkWEpoZEdsdmJpa2daSFZ5WVhScGIyNGdQU0FvZEhsd1pXOW1JR1IxY21GMGFXOXVJRDA5SUNkdWRXMWlaWEluSUQ4Z1pIVnlZWFJwYjI0Z09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvSkM1bWVDNXpjR1ZsWkhOYlpIVnlZWFJwYjI1ZElIeDhJQ1F1Wm5ndWMzQmxaV1J6TGw5a1pXWmhkV3gwS1NrZ0x5QXhNREF3WEc0Z0lDQWdhV1lnS0dSbGJHRjVLU0JrWld4aGVTQTlJSEJoY25ObFJteHZZWFFvWkdWc1lYa3BJQzhnTVRBd01GeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtRnVhVzBvY0hKdmNHVnlkR2xsY3l3Z1pIVnlZWFJwYjI0c0lHVmhjMlVzSUdOaGJHeGlZV05yTENCa1pXeGhlU2xjYmlBZ2ZWeHVYRzRnSUNRdVptNHVZVzVwYlNBOUlHWjFibU4wYVc5dUtIQnliM0JsY25ScFpYTXNJR1IxY21GMGFXOXVMQ0JsWVhObExDQmpZV3hzWW1GamF5d2daR1ZzWVhrcGUxeHVJQ0FnSUhaaGNpQnJaWGtzSUdOemMxWmhiSFZsY3lBOUlIdDlMQ0JqYzNOUWNtOXdaWEowYVdWekxDQjBjbUZ1YzJadmNtMXpJRDBnSnljc1hHNGdJQ0FnSUNBZ0lIUm9ZWFFnUFNCMGFHbHpMQ0IzY21Gd2NHVmtRMkZzYkdKaFkyc3NJR1Z1WkVWMlpXNTBJRDBnSkM1bWVDNTBjbUZ1YzJsMGFXOXVSVzVrTEZ4dUlDQWdJQ0FnSUNCbWFYSmxaQ0E5SUdaaGJITmxYRzVjYmlBZ0lDQnBaaUFvWkhWeVlYUnBiMjRnUFQwOUlIVnVaR1ZtYVc1bFpDa2daSFZ5WVhScGIyNGdQU0FrTG1aNExuTndaV1ZrY3k1ZlpHVm1ZWFZzZENBdklERXdNREJjYmlBZ0lDQnBaaUFvWkdWc1lYa2dQVDA5SUhWdVpHVm1hVzVsWkNrZ1pHVnNZWGtnUFNBd1hHNGdJQ0FnYVdZZ0tDUXVabmd1YjJabUtTQmtkWEpoZEdsdmJpQTlJREJjYmx4dUlDQWdJR2xtSUNoMGVYQmxiMllnY0hKdmNHVnlkR2xsY3lBOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdMeThnYTJWNVpuSmhiV1VnWVc1cGJXRjBhVzl1WEc0Z0lDQWdJQ0JqYzNOV1lXeDFaWE5iWVc1cGJXRjBhVzl1VG1GdFpWMGdQU0J3Y205d1pYSjBhV1Z6WEc0Z0lDQWdJQ0JqYzNOV1lXeDFaWE5iWVc1cGJXRjBhVzl1UkhWeVlYUnBiMjVkSUQwZ1pIVnlZWFJwYjI0Z0t5QW5jeWRjYmlBZ0lDQWdJR056YzFaaGJIVmxjMXRoYm1sdFlYUnBiMjVFWld4aGVWMGdQU0JrWld4aGVTQXJJQ2R6SjF4dUlDQWdJQ0FnWTNOelZtRnNkV1Z6VzJGdWFXMWhkR2x2YmxScGJXbHVaMTBnUFNBb1pXRnpaU0I4ZkNBbmJHbHVaV0Z5SnlsY2JpQWdJQ0FnSUdWdVpFVjJaVzUwSUQwZ0pDNW1lQzVoYm1sdFlYUnBiMjVGYm1SY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdZM056VUhKdmNHVnlkR2xsY3lBOUlGdGRYRzRnSUNBZ0lDQXZMeUJEVTFNZ2RISmhibk5wZEdsdmJuTmNiaUFnSUNBZ0lHWnZjaUFvYTJWNUlHbHVJSEJ5YjNCbGNuUnBaWE1wWEc0Z0lDQWdJQ0FnSUdsbUlDaHpkWEJ3YjNKMFpXUlVjbUZ1YzJadmNtMXpMblJsYzNRb2EyVjVLU2tnZEhKaGJuTm1iM0p0Y3lBclBTQnJaWGtnS3lBbktDY2dLeUJ3Y205d1pYSjBhV1Z6VzJ0bGVWMGdLeUFuS1NBblhHNGdJQ0FnSUNBZ0lHVnNjMlVnWTNOelZtRnNkV1Z6VzJ0bGVWMGdQU0J3Y205d1pYSjBhV1Z6VzJ0bGVWMHNJR056YzFCeWIzQmxjblJwWlhNdWNIVnphQ2hrWVhOb1pYSnBlbVVvYTJWNUtTbGNibHh1SUNBZ0lDQWdhV1lnS0hSeVlXNXpabTl5YlhNcElHTnpjMVpoYkhWbGMxdDBjbUZ1YzJadmNtMWRJRDBnZEhKaGJuTm1iM0p0Y3l3Z1kzTnpVSEp2Y0dWeWRHbGxjeTV3ZFhOb0tIUnlZVzV6Wm05eWJTbGNiaUFnSUNBZ0lHbG1JQ2hrZFhKaGRHbHZiaUErSURBZ0ppWWdkSGx3Wlc5bUlIQnliM0JsY25ScFpYTWdQVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnSUNBZ0lHTnpjMVpoYkhWbGMxdDBjbUZ1YzJsMGFXOXVVSEp2Y0dWeWRIbGRJRDBnWTNOelVISnZjR1Z5ZEdsbGN5NXFiMmx1S0Njc0lDY3BYRzRnSUNBZ0lDQWdJR056YzFaaGJIVmxjMXQwY21GdWMybDBhVzl1UkhWeVlYUnBiMjVkSUQwZ1pIVnlZWFJwYjI0Z0t5QW5jeWRjYmlBZ0lDQWdJQ0FnWTNOelZtRnNkV1Z6VzNSeVlXNXphWFJwYjI1RVpXeGhlVjBnUFNCa1pXeGhlU0FySUNkekoxeHVJQ0FnSUNBZ0lDQmpjM05XWVd4MVpYTmJkSEpoYm5OcGRHbHZibFJwYldsdVoxMGdQU0FvWldGelpTQjhmQ0FuYkdsdVpXRnlKeWxjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQjNjbUZ3Y0dWa1EyRnNiR0poWTJzZ1BTQm1kVzVqZEdsdmJpaGxkbVZ1ZENsN1hHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHVjJaVzUwSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9aWFpsYm5RdWRHRnlaMlYwSUNFOVBTQmxkbVZ1ZEM1amRYSnlaVzUwVkdGeVoyVjBLU0J5WlhSMWNtNGdMeThnYldGclpYTWdjM1Z5WlNCMGFHVWdaWFpsYm5RZ1pHbGtiaWQwSUdKMVltSnNaU0JtY205dElGd2lZbVZzYjNkY0lseHVJQ0FnSUNBZ0lDQWtLR1YyWlc1MExuUmhjbWRsZENrdWRXNWlhVzVrS0dWdVpFVjJaVzUwTENCM2NtRndjR1ZrUTJGc2JHSmhZMnNwWEc0Z0lDQWdJQ0I5SUdWc2MyVmNiaUFnSUNBZ0lDQWdKQ2gwYUdsektTNTFibUpwYm1Rb1pXNWtSWFpsYm5Rc0lIZHlZWEJ3WldSRFlXeHNZbUZqYXlrZ0x5OGdkSEpwWjJkbGNtVmtJR0o1SUhObGRGUnBiV1Z2ZFhSY2JseHVJQ0FnSUNBZ1ptbHlaV1FnUFNCMGNuVmxYRzRnSUNBZ0lDQWtLSFJvYVhNcExtTnpjeWhqYzNOU1pYTmxkQ2xjYmlBZ0lDQWdJR05oYkd4aVlXTnJJQ1ltSUdOaGJHeGlZV05yTG1OaGJHd29kR2hwY3lsY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dSMWNtRjBhVzl1SUQ0Z01DbDdYRzRnSUNBZ0lDQjBhR2x6TG1KcGJtUW9aVzVrUlhabGJuUXNJSGR5WVhCd1pXUkRZV3hzWW1GamF5bGNiaUFnSUNBZ0lDOHZJSFJ5WVc1emFYUnBiMjVGYm1RZ2FYTWdibTkwSUdGc2QyRjVjeUJtYVhKcGJtY2diMjRnYjJ4a1pYSWdRVzVrY205cFpDQndhRzl1WlhOY2JpQWdJQ0FnSUM4dklITnZJRzFoYTJVZ2MzVnlaU0JwZENCblpYUnpJR1pwY21Wa1hHNGdJQ0FnSUNCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQWdJR2xtSUNobWFYSmxaQ2tnY21WMGRYSnVYRzRnSUNBZ0lDQWdJSGR5WVhCd1pXUkRZV3hzWW1GamF5NWpZV3hzS0hSb1lYUXBYRzRnSUNBZ0lDQjlMQ0FvS0dSMWNtRjBhVzl1SUNzZ1pHVnNZWGtwSUNvZ01UQXdNQ2tnS3lBeU5TbGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QjBjbWxuWjJWeUlIQmhaMlVnY21WbWJHOTNJSE52SUc1bGR5QmxiR1Z0Wlc1MGN5QmpZVzRnWVc1cGJXRjBaVnh1SUNBZ0lIUm9hWE11YzJsNlpTZ3BJQ1ltSUhSb2FYTXVaMlYwS0RBcExtTnNhV1Z1ZEV4bFpuUmNibHh1SUNBZ0lIUm9hWE11WTNOektHTnpjMVpoYkhWbGN5bGNibHh1SUNBZ0lHbG1JQ2hrZFhKaGRHbHZiaUE4UFNBd0tTQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnZEdoaGRDNWxZV05vS0daMWJtTjBhVzl1S0NsN0lIZHlZWEJ3WldSRFlXeHNZbUZqYXk1allXeHNLSFJvYVhNcElIMHBYRzRnSUNBZ2ZTd2dNQ2xjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6WEc0Z0lIMWNibHh1SUNCMFpYTjBSV3dnUFNCdWRXeHNYRzU5S1NoYVpYQjBieWxjYmx4dUx5OGdJQ0FnSUZwbGNIUnZMbXB6WEc0dkx5QWdJQ0FnS0dNcElESXdNVEF0TWpBeE5DQlVhRzl0WVhNZ1JuVmphSE5jYmk4dklDQWdJQ0JhWlhCMGJ5NXFjeUJ0WVhrZ1ltVWdabkpsWld4NUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JOU1ZRZ2JHbGpaVzV6WlM1Y2JseHVPeWhtZFc1amRHbHZiaWdwZTF4dUlDQXZMeUJuWlhSRGIyMXdkWFJsWkZOMGVXeGxJSE5vYjNWc1pHNG5kQ0JtY21WaGF5QnZkWFFnZDJobGJpQmpZV3hzWldSY2JpQWdMeThnZDJsMGFHOTFkQ0JoSUhaaGJHbGtJR1ZzWlcxbGJuUWdZWE1nWVhKbmRXMWxiblJjYmlBZ2RISjVJSHRjYmlBZ0lDQm5aWFJEYjIxd2RYUmxaRk4wZVd4bEtIVnVaR1ZtYVc1bFpDbGNiaUFnZlNCallYUmphQ2hsS1NCN1hHNGdJQ0FnZG1GeUlHNWhkR2wyWlVkbGRFTnZiWEIxZEdWa1UzUjViR1VnUFNCblpYUkRiMjF3ZFhSbFpGTjBlV3hsTzF4dUlDQWdJSGRwYm1SdmR5NW5aWFJEYjIxd2RYUmxaRk4wZVd4bElEMGdablZ1WTNScGIyNG9aV3hsYldWdWRDbDdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1GMGFYWmxSMlYwUTI5dGNIVjBaV1JUZEhsc1pTaGxiR1Z0Wlc1MEtWeHVJQ0FnSUNBZ2ZTQmpZWFJqYUNobEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNTlLU2dwWEc1Y2JpOHZJQ0FnSUNCYVpYQjBieTVxYzF4dUx5OGdJQ0FnSUNoaktTQXlNREV3TFRJd01UUWdWR2h2YldGeklFWjFZMmh6WEc0dkx5QWdJQ0FnV21Wd2RHOHVhbk1nYldGNUlHSmxJR1p5WldWc2VTQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVFVsVUlHeHBZMlZ1YzJVdVhHNWNianNvWm5WdVkzUnBiMjRvSkNsN1hHNGdJSFpoY2lCMGIzVmphQ0E5SUh0OUxGeHVJQ0FnSUhSdmRXTm9WR2x0Wlc5MWRDd2dkR0Z3VkdsdFpXOTFkQ3dnYzNkcGNHVlVhVzFsYjNWMExDQnNiMjVuVkdGd1ZHbHRaVzkxZEN4Y2JpQWdJQ0JzYjI1blZHRndSR1ZzWVhrZ1BTQTNOVEFzWEc0Z0lDQWdaMlZ6ZEhWeVpWeHVYRzRnSUdaMWJtTjBhVzl1SUhOM2FYQmxSR2x5WldOMGFXOXVLSGd4TENCNE1pd2dlVEVzSUhreUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VZV0p6S0hneElDMGdlRElwSUQ0OVhHNGdJQ0FnSUNCTllYUm9MbUZpY3loNU1TQXRJSGt5S1NBL0lDaDRNU0F0SUhneUlENGdNQ0EvSUNkTVpXWjBKeUE2SUNkU2FXZG9kQ2NwSURvZ0tIa3hJQzBnZVRJZ1BpQXdJRDhnSjFWd0p5QTZJQ2RFYjNkdUp5bGNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJR3h2Ym1kVVlYQW9LU0I3WEc0Z0lDQWdiRzl1WjFSaGNGUnBiV1Z2ZFhRZ1BTQnVkV3hzWEc0Z0lDQWdhV1lnS0hSdmRXTm9MbXhoYzNRcElIdGNiaUFnSUNBZ0lIUnZkV05vTG1Wc0xuUnlhV2RuWlhJb0oyeHZibWRVWVhBbktWeHVJQ0FnSUNBZ2RHOTFZMmdnUFNCN2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHTmhibU5sYkV4dmJtZFVZWEFvS1NCN1hHNGdJQ0FnYVdZZ0tHeHZibWRVWVhCVWFXMWxiM1YwS1NCamJHVmhjbFJwYldWdmRYUW9iRzl1WjFSaGNGUnBiV1Z2ZFhRcFhHNGdJQ0FnYkc5dVoxUmhjRlJwYldWdmRYUWdQU0J1ZFd4c1hHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQmpZVzVqWld4QmJHd29LU0I3WEc0Z0lDQWdhV1lnS0hSdmRXTm9WR2x0Wlc5MWRDa2dZMnhsWVhKVWFXMWxiM1YwS0hSdmRXTm9WR2x0Wlc5MWRDbGNiaUFnSUNCcFppQW9kR0Z3VkdsdFpXOTFkQ2tnWTJ4bFlYSlVhVzFsYjNWMEtIUmhjRlJwYldWdmRYUXBYRzRnSUNBZ2FXWWdLSE4zYVhCbFZHbHRaVzkxZENrZ1kyeGxZWEpVYVcxbGIzVjBLSE4zYVhCbFZHbHRaVzkxZENsY2JpQWdJQ0JwWmlBb2JHOXVaMVJoY0ZScGJXVnZkWFFwSUdOc1pXRnlWR2x0Wlc5MWRDaHNiMjVuVkdGd1ZHbHRaVzkxZENsY2JpQWdJQ0IwYjNWamFGUnBiV1Z2ZFhRZ1BTQjBZWEJVYVcxbGIzVjBJRDBnYzNkcGNHVlVhVzFsYjNWMElEMGdiRzl1WjFSaGNGUnBiV1Z2ZFhRZ1BTQnVkV3hzWEc0Z0lDQWdkRzkxWTJnZ1BTQjdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnYVhOUWNtbHRZWEo1Vkc5MVkyZ29aWFpsYm5RcGUxeHVJQ0FnSUhKbGRIVnliaUFvWlhabGJuUXVjRzlwYm5SbGNsUjVjR1VnUFQwZ0ozUnZkV05vSnlCOGZGeHVJQ0FnSUNBZ1pYWmxiblF1Y0c5cGJuUmxjbFI1Y0dVZ1BUMGdaWFpsYm5RdVRWTlFUMGxPVkVWU1gxUlpVRVZmVkU5VlEwZ3BYRzRnSUNBZ0lDQW1KaUJsZG1WdWRDNXBjMUJ5YVcxaGNubGNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJR2x6VUc5cGJuUmxja1YyWlc1MFZIbHdaU2hsTENCMGVYQmxLWHRjYmlBZ0lDQnlaWFIxY200Z0tHVXVkSGx3WlNBOVBTQW5jRzlwYm5SbGNpY3JkSGx3WlNCOGZGeHVJQ0FnSUNBZ1pTNTBlWEJsTG5SdlRHOTNaWEpEWVhObEtDa2dQVDBnSjIxemNHOXBiblJsY2ljcmRIbHdaU2xjYmlBZ2ZWeHVYRzRnSUNRb1pHOWpkVzFsYm5RcExuSmxZV1I1S0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnZG1GeUlHNXZkeXdnWkdWc2RHRXNJR1JsYkhSaFdDQTlJREFzSUdSbGJIUmhXU0E5SURBc0lHWnBjbk4wVkc5MVkyZ3NJRjlwYzFCdmFXNTBaWEpVZVhCbFhHNWNiaUFnSUNCcFppQW9KMDFUUjJWemRIVnlaU2NnYVc0Z2QybHVaRzkzS1NCN1hHNGdJQ0FnSUNCblpYTjBkWEpsSUQwZ2JtVjNJRTFUUjJWemRIVnlaU2dwWEc0Z0lDQWdJQ0JuWlhOMGRYSmxMblJoY21kbGRDQTlJR1J2WTNWdFpXNTBMbUp2WkhsY2JpQWdJQ0I5WEc1Y2JpQWdJQ0FrS0dSdlkzVnRaVzUwS1Z4dUlDQWdJQ0FnTG1KcGJtUW9KMDFUUjJWemRIVnlaVVZ1WkNjc0lHWjFibU4wYVc5dUtHVXBlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MzZHBjR1ZFYVhKbFkzUnBiMjVHY205dFZtVnNiMk5wZEhrZ1BWeHVJQ0FnSUNBZ0lDQWdJR1V1ZG1Wc2IyTnBkSGxZSUQ0Z01TQS9JQ2RTYVdkb2RDY2dPaUJsTG5abGJHOWphWFI1V0NBOElDMHhJRDhnSjB4bFpuUW5JRG9nWlM1MlpXeHZZMmwwZVZrZ1BpQXhJRDhnSjBSdmQyNG5JRG9nWlM1MlpXeHZZMmwwZVZrZ1BDQXRNU0EvSUNkVmNDY2dPaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQnBaaUFvYzNkcGNHVkVhWEpsWTNScGIyNUdjbTl0Vm1Wc2IyTnBkSGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBiM1ZqYUM1bGJDNTBjbWxuWjJWeUtDZHpkMmx3WlNjcFhHNGdJQ0FnSUNBZ0lDQWdkRzkxWTJndVpXd3VkSEpwWjJkbGNpZ25jM2RwY0dVbkt5QnpkMmx3WlVScGNtVmpkR2x2YmtaeWIyMVdaV3h2WTJsMGVTbGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQzV2YmlnbmRHOTFZMmh6ZEdGeWRDQk5VMUJ2YVc1MFpYSkViM2R1SUhCdmFXNTBaWEprYjNkdUp5d2dablZ1WTNScGIyNG9aU2w3WEc0Z0lDQWdJQ0FnSUdsbUtDaGZhWE5RYjJsdWRHVnlWSGx3WlNBOUlHbHpVRzlwYm5SbGNrVjJaVzUwVkhsd1pTaGxMQ0FuWkc5M2JpY3BLU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDRnBjMUJ5YVcxaGNubFViM1ZqYUNobEtTa2djbVYwZFhKdVhHNGdJQ0FnSUNBZ0lHWnBjbk4wVkc5MVkyZ2dQU0JmYVhOUWIybHVkR1Z5Vkhsd1pTQS9JR1VnT2lCbExuUnZkV05vWlhOYk1GMWNiaUFnSUNBZ0lDQWdhV1lnS0dVdWRHOTFZMmhsY3lBbUppQmxMblJ2ZFdOb1pYTXViR1Z1WjNSb0lEMDlQU0F4SUNZbUlIUnZkV05vTG5neUtTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1EyeGxZWElnYjNWMElIUnZkV05vSUcxdmRtVnRaVzUwSUdSaGRHRWdhV1lnZDJVZ2FHRjJaU0JwZENCemRHbGphMmx1WnlCaGNtOTFibVJjYmlBZ0lDQWdJQ0FnSUNBdkx5QlVhR2x6SUdOaGJpQnZZMk4xY2lCcFppQjBiM1ZqYUdOaGJtTmxiQ0JrYjJWemJpZDBJR1pwY21VZ1pIVmxJSFJ2SUhCeVpYWmxiblJFWldaaGRXeDBMQ0JsZEdNdVhHNGdJQ0FnSUNBZ0lDQWdkRzkxWTJndWVESWdQU0IxYm1SbFptbHVaV1JjYmlBZ0lDQWdJQ0FnSUNCMGIzVmphQzU1TWlBOUlIVnVaR1ZtYVc1bFpGeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRzV2ZHlBOUlFUmhkR1V1Ym05M0tDbGNiaUFnSUNBZ0lDQWdaR1ZzZEdFZ1BTQnViM2NnTFNBb2RHOTFZMmd1YkdGemRDQjhmQ0J1YjNjcFhHNGdJQ0FnSUNBZ0lIUnZkV05vTG1Wc0lEMGdKQ2duZEdGblRtRnRaU2NnYVc0Z1ptbHljM1JVYjNWamFDNTBZWEpuWlhRZ1AxeHVJQ0FnSUNBZ0lDQWdJR1pwY25OMFZHOTFZMmd1ZEdGeVoyVjBJRG9nWm1seWMzUlViM1ZqYUM1MFlYSm5aWFF1Y0dGeVpXNTBUbTlrWlNsY2JpQWdJQ0FnSUNBZ2RHOTFZMmhVYVcxbGIzVjBJQ1ltSUdOc1pXRnlWR2x0Wlc5MWRDaDBiM1ZqYUZScGJXVnZkWFFwWEc0Z0lDQWdJQ0FnSUhSdmRXTm9Mbmd4SUQwZ1ptbHljM1JVYjNWamFDNXdZV2RsV0Z4dUlDQWdJQ0FnSUNCMGIzVmphQzU1TVNBOUlHWnBjbk4wVkc5MVkyZ3VjR0ZuWlZsY2JpQWdJQ0FnSUNBZ2FXWWdLR1JsYkhSaElENGdNQ0FtSmlCa1pXeDBZU0E4UFNBeU5UQXBJSFJ2ZFdOb0xtbHpSRzkxWW14bFZHRndJRDBnZEhKMVpWeHVJQ0FnSUNBZ0lDQjBiM1ZqYUM1c1lYTjBJRDBnYm05M1hHNGdJQ0FnSUNBZ0lHeHZibWRVWVhCVWFXMWxiM1YwSUQwZ2MyVjBWR2x0Wlc5MWRDaHNiMjVuVkdGd0xDQnNiMjVuVkdGd1JHVnNZWGtwWEc0Z0lDQWdJQ0FnSUM4dklHRmtaSE1nZEdobElHTjFjbkpsYm5RZ2RHOTFZMmdnWTI5dWRHRmpkQ0JtYjNJZ1NVVWdaMlZ6ZEhWeVpTQnlaV052WjI1cGRHbHZibHh1SUNBZ0lDQWdJQ0JwWmlBb1oyVnpkSFZ5WlNBbUppQmZhWE5RYjJsdWRHVnlWSGx3WlNrZ1oyVnpkSFZ5WlM1aFpHUlFiMmx1ZEdWeUtHVXVjRzlwYm5SbGNrbGtLVHRjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0F1YjI0b0ozUnZkV05vYlc5MlpTQk5VMUJ2YVc1MFpYSk5iM1psSUhCdmFXNTBaWEp0YjNabEp5d2dablZ1WTNScGIyNG9aU2w3WEc0Z0lDQWdJQ0FnSUdsbUtDaGZhWE5RYjJsdWRHVnlWSGx3WlNBOUlHbHpVRzlwYm5SbGNrVjJaVzUwVkhsd1pTaGxMQ0FuYlc5MlpTY3BLU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDRnBjMUJ5YVcxaGNubFViM1ZqYUNobEtTa2djbVYwZFhKdVhHNGdJQ0FnSUNBZ0lHWnBjbk4wVkc5MVkyZ2dQU0JmYVhOUWIybHVkR1Z5Vkhsd1pTQS9JR1VnT2lCbExuUnZkV05vWlhOYk1GMWNiaUFnSUNBZ0lDQWdZMkZ1WTJWc1RHOXVaMVJoY0NncFhHNGdJQ0FnSUNBZ0lIUnZkV05vTG5neUlEMGdabWx5YzNSVWIzVmphQzV3WVdkbFdGeHVJQ0FnSUNBZ0lDQjBiM1ZqYUM1NU1pQTlJR1pwY25OMFZHOTFZMmd1Y0dGblpWbGNibHh1SUNBZ0lDQWdJQ0JrWld4MFlWZ2dLejBnVFdGMGFDNWhZbk1vZEc5MVkyZ3VlREVnTFNCMGIzVmphQzU0TWlsY2JpQWdJQ0FnSUNBZ1pHVnNkR0ZaSUNzOUlFMWhkR2d1WVdKektIUnZkV05vTG5reElDMGdkRzkxWTJndWVUSXBYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdMbTl1S0NkMGIzVmphR1Z1WkNCTlUxQnZhVzUwWlhKVmNDQndiMmx1ZEdWeWRYQW5MQ0JtZFc1amRHbHZiaWhsS1h0Y2JpQWdJQ0FnSUNBZ2FXWW9LRjlwYzFCdmFXNTBaWEpVZVhCbElEMGdhWE5RYjJsdWRHVnlSWFpsYm5SVWVYQmxLR1VzSUNkMWNDY3BLU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDRnBjMUJ5YVcxaGNubFViM1ZqYUNobEtTa2djbVYwZFhKdVhHNGdJQ0FnSUNBZ0lHTmhibU5sYkV4dmJtZFVZWEFvS1Z4dVhHNGdJQ0FnSUNBZ0lDOHZJSE4zYVhCbFhHNGdJQ0FnSUNBZ0lHbG1JQ2dvZEc5MVkyZ3VlRElnSmlZZ1RXRjBhQzVoWW5Nb2RHOTFZMmd1ZURFZ0xTQjBiM1ZqYUM1NE1pa2dQaUF6TUNrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNoMGIzVmphQzU1TWlBbUppQk5ZWFJvTG1GaWN5aDBiM1ZqYUM1NU1TQXRJSFJ2ZFdOb0xua3lLU0ErSURNd0tTbGNibHh1SUNBZ0lDQWdJQ0FnSUhOM2FYQmxWR2x0Wlc5MWRDQTlJSE5sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjNWamFDNWxiQzUwY21sbloyVnlLQ2R6ZDJsd1pTY3BYRzRnSUNBZ0lDQWdJQ0FnSUNCMGIzVmphQzVsYkM1MGNtbG5aMlZ5S0NkemQybHdaU2NnS3lBb2MzZHBjR1ZFYVhKbFkzUnBiMjRvZEc5MVkyZ3VlREVzSUhSdmRXTm9Mbmd5TENCMGIzVmphQzU1TVN3Z2RHOTFZMmd1ZVRJcEtTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhSdmRXTm9JRDBnZTMxY2JpQWdJQ0FnSUNBZ0lDQjlMQ0F3S1Z4dVhHNGdJQ0FnSUNBZ0lDOHZJRzV2Y20xaGJDQjBZWEJjYmlBZ0lDQWdJQ0FnWld4elpTQnBaaUFvSjJ4aGMzUW5JR2x1SUhSdmRXTm9LVnh1SUNBZ0lDQWdJQ0FnSUM4dklHUnZiaWQwSUdacGNtVWdkR0Z3SUhkb1pXNGdaR1ZzZEdFZ2NHOXphWFJwYjI0Z1kyaGhibWRsWkNCaWVTQnRiM0psSUhSb1lXNGdNekFnY0dsNFpXeHpMRnh1SUNBZ0lDQWdJQ0FnSUM4dklHWnZjaUJwYm5OMFlXNWpaU0IzYUdWdUlHMXZkbWx1WnlCMGJ5QmhJSEJ2YVc1MElHRnVaQ0JpWVdOcklIUnZJRzl5YVdkcGJseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoa1pXeDBZVmdnUENBek1DQW1KaUJrWld4MFlWa2dQQ0F6TUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1pHVnNZWGtnWW5rZ2IyNWxJSFJwWTJzZ2MyOGdkMlVnWTJGdUlHTmhibU5sYkNCMGFHVWdKM1JoY0NjZ1pYWmxiblFnYVdZZ0ozTmpjbTlzYkNjZ1ptbHlaWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ2duZEdGd0p5Qm1hWEpsY3lCaVpXWnZjbVVnSjNOamNtOXNiQ2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBZWEJVYVcxbGIzVjBJRDBnYzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlncElIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUIwY21sbloyVnlJSFZ1YVhabGNuTmhiQ0FuZEdGd0p5QjNhWFJvSUhSb1pTQnZjSFJwYjI0Z2RHOGdZMkZ1WTJWc1ZHOTFZMmdvS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlBb1kyRnVZMlZzVkc5MVkyZ2dZMkZ1WTJWc2N5QndjbTlqWlhOemFXNW5JRzltSUhOcGJtZHNaU0IyY3lCa2IzVmliR1VnZEdGd2N5Qm1iM0lnWm1GemRHVnlJQ2QwWVhBbklISmxjM0J2Ym5ObEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaWFpsYm5RZ1BTQWtMa1YyWlc1MEtDZDBZWEFuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWRDNWpZVzVqWld4VWIzVmphQ0E5SUdOaGJtTmxiRUZzYkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjNWamFDNWxiQzUwY21sbloyVnlLR1YyWlc1MEtWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJ5YVdkblpYSWdaRzkxWW14bElIUmhjQ0JwYlcxbFpHbGhkR1ZzZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHOTFZMmd1YVhORWIzVmliR1ZVWVhBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEc5MVkyZ3VaV3dwSUhSdmRXTm9MbVZzTG5SeWFXZG5aWElvSjJSdmRXSnNaVlJoY0NjcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOTFZMmdnUFNCN2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkSEpwWjJkbGNpQnphVzVuYkdVZ2RHRndJR0ZtZEdWeUlESTFNRzF6SUc5bUlHbHVZV04wYVhacGRIbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc5MVkyaFVhVzFsYjNWMElEMGdjMlYwVkdsdFpXOTFkQ2htZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOTFZMmhVYVcxbGIzVjBJRDBnYm5Wc2JGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSdmRXTm9MbVZzS1NCMGIzVmphQzVsYkM1MGNtbG5aMlZ5S0NkemFXNW5iR1ZVWVhBbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzkxWTJnZ1BTQjdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzSURJMU1DbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z01DbGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOTFZMmdnUFNCN2ZWeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCa1pXeDBZVmdnUFNCa1pXeDBZVmtnUFNBd1hHNWNiaUFnSUNBZ0lIMHBYRzRnSUNBZ0lDQXZMeUIzYUdWdUlIUm9aU0JpY205M2MyVnlJSGRwYm1SdmR5QnNiM05sY3lCbWIyTjFjeXhjYmlBZ0lDQWdJQzh2SUdadmNpQmxlR0Z0Y0d4bElIZG9aVzRnWVNCdGIyUmhiQ0JrYVdGc2IyY2dhWE1nYzJodmQyNHNYRzRnSUNBZ0lDQXZMeUJqWVc1alpXd2dZV3hzSUc5dVoyOXBibWNnWlhabGJuUnpYRzRnSUNBZ0lDQXViMjRvSjNSdmRXTm9ZMkZ1WTJWc0lFMVRVRzlwYm5SbGNrTmhibU5sYkNCd2IybHVkR1Z5WTJGdVkyVnNKeXdnWTJGdVkyVnNRV3hzS1Z4dVhHNGdJQ0FnTHk4Z2MyTnliMnhzYVc1bklIUm9aU0IzYVc1a2IzY2dhVzVrYVdOaGRHVnpJR2x1ZEdWdWRHbHZiaUJ2WmlCMGFHVWdkWE5sY2x4dUlDQWdJQzh2SUhSdklITmpjbTlzYkN3Z2JtOTBJSFJoY0NCdmNpQnpkMmx3WlN3Z2MyOGdZMkZ1WTJWc0lHRnNiQ0J2Ym1kdmFXNW5JR1YyWlc1MGMxeHVJQ0FnSUNRb2QybHVaRzkzS1M1dmJpZ25jMk55YjJ4c0p5d2dZMkZ1WTJWc1FXeHNLVnh1SUNCOUtWeHVYRzRnSUR0YkozTjNhWEJsSnl3Z0ozTjNhWEJsVEdWbWRDY3NJQ2R6ZDJsd1pWSnBaMmgwSnl3Z0ozTjNhWEJsVlhBbkxDQW5jM2RwY0dWRWIzZHVKeXhjYmlBZ0lDQW5aRzkxWW14bFZHRndKeXdnSjNSaGNDY3NJQ2R6YVc1bmJHVlVZWEFuTENBbmJHOXVaMVJoY0NkZExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1pYWmxiblJPWVcxbEtYdGNiaUFnSUNBa0xtWnVXMlYyWlc1MFRtRnRaVjBnUFNCbWRXNWpkR2x2YmloallXeHNZbUZqYXlsN0lISmxkSFZ5YmlCMGFHbHpMbTl1S0dWMlpXNTBUbUZ0WlN3Z1kyRnNiR0poWTJzcElIMWNiaUFnZlNsY2JuMHBLRnBsY0hSdktWeHVYRzQ3SUdKeWIzZHpaWEpwWm5sZmMyaHBiVjlmWkdWbWFXNWxYMTl0YjJSMWJHVmZYMlY0Y0c5eWRGOWZLSFI1Y0dWdlppQWtJQ0U5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdQeUFrSURvZ2QybHVaRzkzTGlRcE8xeHVYRzU5S1M1allXeHNLR2RzYjJKaGJDd2dkVzVrWldacGJtVmtMQ0IxYm1SbFptbHVaV1FzSUhWdVpHVm1hVzVsWkN3Z2RXNWtaV1pwYm1Wa0xDQm1kVzVqZEdsdmJpQmtaV1pwYm1WRmVIQnZjblFvWlhncElIc2diVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmxlRHNnZlNrN1hHNGlYWDA9IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG4gIGlmICghaXNOdW1iZXIobikgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCduIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIGlmICghdGhpcy5fZXZlbnRzLmVycm9yIHx8XG4gICAgICAgIChpc09iamVjdCh0aGlzLl9ldmVudHMuZXJyb3IpICYmICF0aGlzLl9ldmVudHMuZXJyb3IubGVuZ3RoKSkge1xuICAgICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICAgIH1cbiAgICAgIHRocm93IFR5cGVFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4nKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc1VuZGVmaW5lZChoYW5kbGVyKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIGZhc3QgY2FzZXNcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIHNsb3dlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChoYW5kbGVyKSkge1xuICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBtO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpXG4gICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgIGlzRnVuY3Rpb24obGlzdGVuZXIubGlzdGVuZXIpID9cbiAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gIGVsc2UgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZVxuICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTtcblxuICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSAmJiAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCkge1xuICAgIHZhciBtO1xuICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5fbWF4TGlzdGVuZXJzKSkge1xuICAgICAgbSA9IHRoaXMuX21heExpc3RlbmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICAgIH1cblxuICAgIGlmIChtICYmIG0gPiAwICYmIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGggPiBtKSB7XG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJyhub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5ICcgK1xuICAgICAgICAgICAgICAgICAgICAnbGVhayBkZXRlY3RlZC4gJWQgbGlzdGVuZXJzIGFkZGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGgpO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnRyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTBcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICB2YXIgZmlyZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnKCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgdGhpcy5vbih0eXBlLCBnKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGxpc3QsIHBvc2l0aW9uLCBsZW5ndGgsIGk7XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHBvc2l0aW9uID0gLTE7XG5cbiAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XG4gICAgICAoaXNGdW5jdGlvbihsaXN0Lmxpc3RlbmVyKSAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuXG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobGlzdCkpIHtcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAobGlzdFtpXS5saXN0ZW5lciAmJiBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBrZXksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gIGlmICghdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICBlbHNlIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgZm9yIChrZXkgaW4gdGhpcy5fZXZlbnRzKSB7XG4gICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVycykpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTElGTyBvcmRlclxuICAgIHdoaWxlIChsaXN0ZW5lcnMubGVuZ3RoKVxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgfVxuICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gW107XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSBbdGhpcy5fZXZlbnRzW3R5cGVdXTtcbiAgZWxzZVxuICAgIHJldCA9IHRoaXMuX2V2ZW50c1t0eXBlXS5zbGljZSgpO1xuICByZXR1cm4gcmV0O1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gMDtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbihlbWl0dGVyLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IDE7XG4gIGVsc2VcbiAgICByZXQgPSBlbWl0dGVyLl9ldmVudHNbdHlwZV0ubGVuZ3RoO1xuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5wcm9jZXNzLm5leHRUaWNrID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2FuU2V0SW1tZWRpYXRlID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAmJiB3aW5kb3cuc2V0SW1tZWRpYXRlO1xuICAgIHZhciBjYW5NdXRhdGlvbk9ic2VydmVyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAmJiB3aW5kb3cuTXV0YXRpb25PYnNlcnZlcjtcbiAgICB2YXIgY2FuUG9zdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnBvc3RNZXNzYWdlICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyXG4gICAgO1xuXG4gICAgaWYgKGNhblNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHdpbmRvdy5zZXRJbW1lZGlhdGUoZikgfTtcbiAgICB9XG5cbiAgICB2YXIgcXVldWUgPSBbXTtcblxuICAgIGlmIChjYW5NdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICAgIHZhciBoaWRkZW5EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcXVldWVMaXN0ID0gcXVldWUuc2xpY2UoKTtcbiAgICAgICAgICAgIHF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICBxdWV1ZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoaGlkZGVuRGl2LCB7IGF0dHJpYnV0ZXM6IHRydWUgfSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgICAgICBpZiAoIXF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGhpZGRlbkRpdi5zZXRBdHRyaWJ1dGUoJ3llcycsICdubycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcXVldWUucHVzaChmbik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGNhblBvc3QpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBldi5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoKHNvdXJjZSA9PT0gd2luZG93IHx8IHNvdXJjZSA9PT0gbnVsbCkgJiYgZXYuZGF0YSA9PT0gJ3Byb2Nlc3MtdGljaycpIHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgncHJvY2Vzcy10aWNrJywgJyonKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfTtcbn0pKCk7XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxuLy8gVE9ETyhzaHR5bG1hbilcbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpe1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xuZXhwb3J0cy5mb3JtYXQgPSBmdW5jdGlvbihmKSB7XG4gIGlmICghaXNTdHJpbmcoZikpIHtcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdHMuam9pbignICcpO1xuICB9XG5cbiAgdmFyIGkgPSAxO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcbiAgICBzd2l0Y2ggKHgpIHtcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclaic6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG4gIH0pO1xuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG4gICAgICBzdHIgKz0gJyAnICsgeDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbmV4cG9ydHMuZGVwcmVjYXRlID0gZnVuY3Rpb24oZm4sIG1zZykge1xuICAvLyBBbGxvdyBmb3IgZGVwcmVjYXRpbmcgdGhpbmdzIGluIHRoZSBwcm9jZXNzIG9mIHN0YXJ0aW5nIHVwLlxuICBpZiAoaXNVbmRlZmluZWQoZ2xvYmFsLnByb2Nlc3MpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVwcmVjYXRlKGZuLCBtc2cpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLm5vRGVwcmVjYXRpb24gPT09IHRydWUpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZpcm9uO1xuZXhwb3J0cy5kZWJ1Z2xvZyA9IGZ1bmN0aW9uKHNldCkge1xuICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSlcbiAgICBkZWJ1Z0Vudmlyb24gPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnO1xuICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTtcbiAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuICAgIGlmIChuZXcgUmVnRXhwKCdcXFxcYicgKyBzZXQgKyAnXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xuICAgICAgdmFyIHBpZCA9IHByb2Nlc3MucGlkO1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsIHNldCwgcGlkLCBtc2cpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHt9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVidWdzW3NldF07XG59O1xuXG5cbi8qKlxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuXG4gKi9cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBleHBvcnRzLl9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5leHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuXG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG5cbiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XG4gICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgfVxuXG4gIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcbiAgaWYgKGlzRXJyb3IodmFsdWUpXG4gICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7XG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xuICBpZiAoaXNCb29sZWFuKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTtcbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAoaXNOdWxsKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbiAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcbiAgfSwgMCk7XG5cbiAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArXG4gICAgICAgICAgIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcXG4gJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcbiAgJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBicmFjZXNbMV07XG4gIH1cblxuICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdO1xufVxuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZSgnLi9zdXBwb3J0L2lzQnVmZmVyJyk7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5MWRHbHNMM1YwYVd3dWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4dklFTnZjSGx5YVdkb2RDQktiM2xsYm5Rc0lFbHVZeTRnWVc1a0lHOTBhR1Z5SUU1dlpHVWdZMjl1ZEhKcFluVjBiM0p6TGx4dUx5OWNiaTh2SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoWEc0dkx5QmpiM0I1SUc5bUlIUm9hWE1nYzI5bWRIZGhjbVVnWVc1a0lHRnpjMjlqYVdGMFpXUWdaRzlqZFcxbGJuUmhkR2x2YmlCbWFXeGxjeUFvZEdobFhHNHZMeUJjSWxOdlpuUjNZWEpsWENJcExDQjBieUJrWldGc0lHbHVJSFJvWlNCVGIyWjBkMkZ5WlNCM2FYUm9iM1YwSUhKbGMzUnlhV04wYVc5dUxDQnBibU5zZFdScGJtZGNiaTh2SUhkcGRHaHZkWFFnYkdsdGFYUmhkR2x2YmlCMGFHVWdjbWxuYUhSeklIUnZJSFZ6WlN3Z1kyOXdlU3dnYlc5a2FXWjVMQ0J0WlhKblpTd2djSFZpYkdsemFDeGNiaTh2SUdScGMzUnlhV0oxZEdVc0lITjFZbXhwWTJWdWMyVXNJR0Z1WkM5dmNpQnpaV3hzSUdOdmNHbGxjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXNJR0Z1WkNCMGJ5QndaWEp0YVhSY2JpOHZJSEJsY25OdmJuTWdkRzhnZDJodmJTQjBhR1VnVTI5bWRIZGhjbVVnYVhNZ1puVnlibWx6YUdWa0lIUnZJR1J2SUhOdkxDQnpkV0pxWldOMElIUnZJSFJvWlZ4dUx5OGdabTlzYkc5M2FXNW5JR052Ym1ScGRHbHZibk02WEc0dkwxeHVMeThnVkdobElHRmliM1psSUdOdmNIbHlhV2RvZENCdWIzUnBZMlVnWVc1a0lIUm9hWE1nY0dWeWJXbHpjMmx2YmlCdWIzUnBZMlVnYzJoaGJHd2dZbVVnYVc1amJIVmtaV1JjYmk4dklHbHVJR0ZzYkNCamIzQnBaWE1nYjNJZ2MzVmljM1JoYm5ScFlXd2djRzl5ZEdsdmJuTWdiMllnZEdobElGTnZablIzWVhKbExseHVMeTljYmk4dklGUklSU0JUVDBaVVYwRlNSU0JKVXlCUVVrOVdTVVJGUkNCY0lrRlRJRWxUWENJc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkZrZ1QwWWdRVTVaSUV0SlRrUXNJRVZZVUZKRlUxTmNiaTh2SUU5U0lFbE5VRXhKUlVRc0lFbE9RMHhWUkVsT1J5QkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOGdWRWhGSUZkQlVsSkJUbFJKUlZNZ1QwWmNiaTh2SUUxRlVrTklRVTVVUVVKSlRFbFVXU3dnUmtsVVRrVlRVeUJHVDFJZ1FTQlFRVkpVU1VOVlRFRlNJRkJWVWxCUFUwVWdRVTVFSUU1UFRrbE9SbEpKVGtkRlRVVk9WQzRnU1U1Y2JpOHZJRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSU0JCVlZSSVQxSlRJRTlTSUVOUFVGbFNTVWRJVkNCSVQweEVSVkpUSUVKRklFeEpRVUpNUlNCR1QxSWdRVTVaSUVOTVFVbE5MRnh1THk4Z1JFRk5RVWRGVXlCUFVpQlBWRWhGVWlCTVNVRkNTVXhKVkZrc0lGZElSVlJJUlZJZ1NVNGdRVTRnUVVOVVNVOU9JRTlHSUVOUFRsUlNRVU5VTENCVVQxSlVJRTlTWEc0dkx5QlBWRWhGVWxkSlUwVXNJRUZTU1ZOSlRrY2dSbEpQVFN3Z1QxVlVJRTlHSUU5U0lFbE9JRU5QVGs1RlExUkpUMDRnVjBsVVNDQlVTRVVnVTA5R1ZGZEJVa1VnVDFJZ1ZFaEZYRzR2THlCVlUwVWdUMUlnVDFSSVJWSWdSRVZCVEVsT1IxTWdTVTRnVkVoRklGTlBSbFJYUVZKRkxseHVYRzUyWVhJZ1ptOXliV0YwVW1WblJYaHdJRDBnTHlWYmMyUnFKVjB2Wnp0Y2JtVjRjRzl5ZEhNdVptOXliV0YwSUQwZ1puVnVZM1JwYjI0b1ppa2dlMXh1SUNCcFppQW9JV2x6VTNSeWFXNW5LR1lwS1NCN1hHNGdJQ0FnZG1GeUlHOWlhbVZqZEhNZ1BTQmJYVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2IySnFaV04wY3k1d2RYTm9LR2x1YzNCbFkzUW9ZWEpuZFcxbGJuUnpXMmxkS1NrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnZZbXBsWTNSekxtcHZhVzRvSnlBbktUdGNiaUFnZlZ4dVhHNGdJSFpoY2lCcElEMGdNVHRjYmlBZ2RtRnlJR0Z5WjNNZ1BTQmhjbWQxYldWdWRITTdYRzRnSUhaaGNpQnNaVzRnUFNCaGNtZHpMbXhsYm1kMGFEdGNiaUFnZG1GeUlITjBjaUE5SUZOMGNtbHVaeWhtS1M1eVpYQnNZV05sS0dadmNtMWhkRkpsWjBWNGNDd2dablZ1WTNScGIyNG9lQ2tnZTF4dUlDQWdJR2xtSUNoNElEMDlQU0FuSlNVbktTQnlaWFIxY200Z0p5VW5PMXh1SUNBZ0lHbG1JQ2hwSUQ0OUlHeGxiaWtnY21WMGRYSnVJSGc3WEc0Z0lDQWdjM2RwZEdOb0lDaDRLU0I3WEc0Z0lDQWdJQ0JqWVhObElDY2xjeWM2SUhKbGRIVnliaUJUZEhKcGJtY29ZWEpuYzF0cEt5dGRLVHRjYmlBZ0lDQWdJR05oYzJVZ0p5VmtKem9nY21WMGRYSnVJRTUxYldKbGNpaGhjbWR6VzJrcksxMHBPMXh1SUNBZ0lDQWdZMkZ6WlNBbkpXb25PbHh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQktVMDlPTG5OMGNtbHVaMmxtZVNoaGNtZHpXMmtySzEwcE8xeHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGZLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNkYlEybHlZM1ZzWVhKZEp6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIZzdYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JpQWdabTl5SUNoMllYSWdlQ0E5SUdGeVozTmJhVjA3SUdrZ1BDQnNaVzQ3SUhnZ1BTQmhjbWR6V3lzcmFWMHBJSHRjYmlBZ0lDQnBaaUFvYVhOT2RXeHNLSGdwSUh4OElDRnBjMDlpYW1WamRDaDRLU2tnZTF4dUlDQWdJQ0FnYzNSeUlDczlJQ2NnSnlBcklIZzdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhOMGNpQXJQU0FuSUNjZ0t5QnBibk53WldOMEtIZ3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2MzUnlPMXh1ZlR0Y2JseHVYRzR2THlCTllYSnJJSFJvWVhRZ1lTQnRaWFJvYjJRZ2MyaHZkV3hrSUc1dmRDQmlaU0IxYzJWa0xseHVMeThnVW1WMGRYSnVjeUJoSUcxdlpHbG1hV1ZrSUdaMWJtTjBhVzl1SUhkb2FXTm9JSGRoY201eklHOXVZMlVnWW5rZ1pHVm1ZWFZzZEM1Y2JpOHZJRWxtSUMwdGJtOHRaR1Z3Y21WallYUnBiMjRnYVhNZ2MyVjBMQ0IwYUdWdUlHbDBJR2x6SUdFZ2JtOHRiM0F1WEc1bGVIQnZjblJ6TG1SbGNISmxZMkYwWlNBOUlHWjFibU4wYVc5dUtHWnVMQ0J0YzJjcElIdGNiaUFnTHk4Z1FXeHNiM2NnWm05eUlHUmxjSEpsWTJGMGFXNW5JSFJvYVc1bmN5QnBiaUIwYUdVZ2NISnZZMlZ6Y3lCdlppQnpkR0Z5ZEdsdVp5QjFjQzVjYmlBZ2FXWWdLR2x6Vlc1a1pXWnBibVZrS0dkc2IySmhiQzV3Y205alpYTnpLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmxlSEJ2Y25SekxtUmxjSEpsWTJGMFpTaG1iaXdnYlhObktTNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJSDA3WEc0Z0lIMWNibHh1SUNCcFppQW9jSEp2WTJWemN5NXViMFJsY0hKbFkyRjBhVzl1SUQwOVBTQjBjblZsS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1p1TzF4dUlDQjlYRzVjYmlBZ2RtRnlJSGRoY201bFpDQTlJR1poYkhObE8xeHVJQ0JtZFc1amRHbHZiaUJrWlhCeVpXTmhkR1ZrS0NrZ2UxeHVJQ0FnSUdsbUlDZ2hkMkZ5Ym1Wa0tTQjdYRzRnSUNBZ0lDQnBaaUFvY0hKdlkyVnpjeTUwYUhKdmQwUmxjSEpsWTJGMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWh0YzJjcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHdjbTlqWlhOekxuUnlZV05sUkdWd2NtVmpZWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNTBjbUZqWlNodGMyY3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lodGMyY3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkMkZ5Ym1Wa0lEMGdkSEoxWlR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHWnVMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z1pHVndjbVZqWVhSbFpEdGNibjA3WEc1Y2JseHVkbUZ5SUdSbFluVm5jeUE5SUh0OU8xeHVkbUZ5SUdSbFluVm5SVzUyYVhKdmJqdGNibVY0Y0c5eWRITXVaR1ZpZFdkc2IyY2dQU0JtZFc1amRHbHZiaWh6WlhRcElIdGNiaUFnYVdZZ0tHbHpWVzVrWldacGJtVmtLR1JsWW5WblJXNTJhWEp2YmlrcFhHNGdJQ0FnWkdWaWRXZEZiblpwY205dUlEMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUVSVUpWUnlCOGZDQW5KenRjYmlBZ2MyVjBJRDBnYzJWMExuUnZWWEJ3WlhKRFlYTmxLQ2s3WEc0Z0lHbG1JQ2doWkdWaWRXZHpXM05sZEYwcElIdGNiaUFnSUNCcFppQW9ibVYzSUZKbFowVjRjQ2duWEZ4Y1hHSW5JQ3NnYzJWMElDc2dKMXhjWEZ4aUp5d2dKMmtuS1M1MFpYTjBLR1JsWW5WblJXNTJhWEp2YmlrcElIdGNiaUFnSUNBZ0lIWmhjaUJ3YVdRZ1BTQndjbTlqWlhOekxuQnBaRHRjYmlBZ0lDQWdJR1JsWW5WbmMxdHpaWFJkSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdGMyY2dQU0JsZUhCdmNuUnpMbVp2Y20xaGRDNWhjSEJzZVNobGVIQnZjblJ6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NjbGN5QWxaRG9nSlhNbkxDQnpaWFFzSUhCcFpDd2diWE5uS1R0Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR1JsWW5WbmMxdHpaWFJkSUQwZ1puVnVZM1JwYjI0b0tTQjdmVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjbVYwZFhKdUlHUmxZblZuYzF0elpYUmRPMXh1ZlR0Y2JseHVYRzR2S2lwY2JpQXFJRVZqYUc5eklIUm9aU0IyWVd4MVpTQnZaaUJoSUhaaGJIVmxMaUJVY25seklIUnZJSEJ5YVc1MElIUm9aU0IyWVd4MVpTQnZkWFJjYmlBcUlHbHVJSFJvWlNCaVpYTjBJSGRoZVNCd2IzTnphV0pzWlNCbmFYWmxiaUIwYUdVZ1pHbG1abVZ5Wlc1MElIUjVjR1Z6TGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2WW1vZ1ZHaGxJRzlpYW1WamRDQjBieUJ3Y21sdWRDQnZkWFF1WEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBjeUJQY0hScGIyNWhiQ0J2Y0hScGIyNXpJRzlpYW1WamRDQjBhR0YwSUdGc2RHVnljeUIwYUdVZ2IzVjBjSFYwTGx4dUlDb3ZYRzR2S2lCc1pXZGhZM2s2SUc5aWFpd2djMmh2ZDBocFpHUmxiaXdnWkdWd2RHZ3NJR052Ykc5eWN5b3ZYRzVtZFc1amRHbHZiaUJwYm5Od1pXTjBLRzlpYWl3Z2IzQjBjeWtnZTF4dUlDQXZMeUJrWldaaGRXeDBJRzl3ZEdsdmJuTmNiaUFnZG1GeUlHTjBlQ0E5SUh0Y2JpQWdJQ0J6WldWdU9pQmJYU3hjYmlBZ0lDQnpkSGxzYVhwbE9pQnpkSGxzYVhwbFRtOURiMnh2Y2x4dUlDQjlPMXh1SUNBdkx5QnNaV2RoWTNrdUxpNWNiaUFnYVdZZ0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BqMGdNeWtnWTNSNExtUmxjSFJvSUQwZ1lYSm5kVzFsYm5Seld6SmRPMXh1SUNCcFppQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStQU0EwS1NCamRIZ3VZMjlzYjNKeklEMGdZWEpuZFcxbGJuUnpXek5kTzF4dUlDQnBaaUFvYVhOQ2IyOXNaV0Z1S0c5d2RITXBLU0I3WEc0Z0lDQWdMeThnYkdWbllXTjVMaTR1WEc0Z0lDQWdZM1I0TG5Ob2IzZElhV1JrWlc0Z1BTQnZjSFJ6TzF4dUlDQjlJR1ZzYzJVZ2FXWWdLRzl3ZEhNcElIdGNiaUFnSUNBdkx5Qm5iM1FnWVc0Z1hDSnZjSFJwYjI1elhDSWdiMkpxWldOMFhHNGdJQ0FnWlhod2IzSjBjeTVmWlhoMFpXNWtLR04wZUN3Z2IzQjBjeWs3WEc0Z0lIMWNiaUFnTHk4Z2MyVjBJR1JsWm1GMWJIUWdiM0IwYVc5dWMxeHVJQ0JwWmlBb2FYTlZibVJsWm1sdVpXUW9ZM1I0TG5Ob2IzZElhV1JrWlc0cEtTQmpkSGd1YzJodmQwaHBaR1JsYmlBOUlHWmhiSE5sTzF4dUlDQnBaaUFvYVhOVmJtUmxabWx1WldRb1kzUjRMbVJsY0hSb0tTa2dZM1I0TG1SbGNIUm9JRDBnTWp0Y2JpQWdhV1lnS0dselZXNWtaV1pwYm1Wa0tHTjBlQzVqYjJ4dmNuTXBLU0JqZEhndVkyOXNiM0p6SUQwZ1ptRnNjMlU3WEc0Z0lHbG1JQ2hwYzFWdVpHVm1hVzVsWkNoamRIZ3VZM1Z6ZEc5dFNXNXpjR1ZqZENrcElHTjBlQzVqZFhOMGIyMUpibk53WldOMElEMGdkSEoxWlR0Y2JpQWdhV1lnS0dOMGVDNWpiMnh2Y25NcElHTjBlQzV6ZEhsc2FYcGxJRDBnYzNSNWJHbDZaVmRwZEdoRGIyeHZjanRjYmlBZ2NtVjBkWEp1SUdadmNtMWhkRlpoYkhWbEtHTjBlQ3dnYjJKcUxDQmpkSGd1WkdWd2RHZ3BPMXh1ZlZ4dVpYaHdiM0owY3k1cGJuTndaV04wSUQwZ2FXNXpjR1ZqZER0Y2JseHVYRzR2THlCb2RIUndPaTh2Wlc0dWQybHJhWEJsWkdsaExtOXlaeTkzYVd0cEwwRk9VMGxmWlhOallYQmxYMk52WkdValozSmhjR2hwWTNOY2JtbHVjM0JsWTNRdVkyOXNiM0p6SUQwZ2UxeHVJQ0FuWW05c1pDY2dPaUJiTVN3Z01qSmRMRnh1SUNBbmFYUmhiR2xqSnlBNklGc3pMQ0F5TTEwc1hHNGdJQ2QxYm1SbGNteHBibVVuSURvZ1d6UXNJREkwWFN4Y2JpQWdKMmx1ZG1WeWMyVW5JRG9nV3pjc0lESTNYU3hjYmlBZ0ozZG9hWFJsSnlBNklGc3pOeXdnTXpsZExGeHVJQ0FuWjNKbGVTY2dPaUJiT1RBc0lETTVYU3hjYmlBZ0oySnNZV05ySnlBNklGc3pNQ3dnTXpsZExGeHVJQ0FuWW14MVpTY2dPaUJiTXpRc0lETTVYU3hjYmlBZ0oyTjVZVzRuSURvZ1d6TTJMQ0F6T1Ywc1hHNGdJQ2RuY21WbGJpY2dPaUJiTXpJc0lETTVYU3hjYmlBZ0oyMWhaMlZ1ZEdFbklEb2dXek0xTENBek9WMHNYRzRnSUNkeVpXUW5JRG9nV3pNeExDQXpPVjBzWEc0Z0lDZDVaV3hzYjNjbklEb2dXek16TENBek9WMWNibjA3WEc1Y2JpOHZJRVJ2YmlkMElIVnpaU0FuWW14MVpTY2dibTkwSUhacGMybGliR1VnYjI0Z1kyMWtMbVY0WlZ4dWFXNXpjR1ZqZEM1emRIbHNaWE1nUFNCN1hHNGdJQ2R6Y0dWamFXRnNKem9nSjJONVlXNG5MRnh1SUNBbmJuVnRZbVZ5SnpvZ0ozbGxiR3h2ZHljc1hHNGdJQ2RpYjI5c1pXRnVKem9nSjNsbGJHeHZkeWNzWEc0Z0lDZDFibVJsWm1sdVpXUW5PaUFuWjNKbGVTY3NYRzRnSUNkdWRXeHNKem9nSjJKdmJHUW5MRnh1SUNBbmMzUnlhVzVuSnpvZ0oyZHlaV1Z1Snl4Y2JpQWdKMlJoZEdVbk9pQW5iV0ZuWlc1MFlTY3NYRzRnSUM4dklGd2libUZ0WlZ3aU9pQnBiblJsYm5ScGIyNWhiR3g1SUc1dmRDQnpkSGxzYVc1blhHNGdJQ2R5WldkbGVIQW5PaUFuY21Wa0oxeHVmVHRjYmx4dVhHNW1kVzVqZEdsdmJpQnpkSGxzYVhwbFYybDBhRU52Ykc5eUtITjBjaXdnYzNSNWJHVlVlWEJsS1NCN1hHNGdJSFpoY2lCemRIbHNaU0E5SUdsdWMzQmxZM1F1YzNSNWJHVnpXM04wZVd4bFZIbHdaVjA3WEc1Y2JpQWdhV1lnS0hOMGVXeGxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlDZGNYSFV3TURGaVd5Y2dLeUJwYm5Od1pXTjBMbU52Ykc5eWMxdHpkSGxzWlYxYk1GMGdLeUFuYlNjZ0t5QnpkSElnSzF4dUlDQWdJQ0FnSUNBZ0lDQW5YRngxTURBeFlsc25JQ3NnYVc1emNHVmpkQzVqYjJ4dmNuTmJjM1I1YkdWZFd6RmRJQ3NnSjIwbk8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCemRISTdYRzRnSUgxY2JuMWNibHh1WEc1bWRXNWpkR2x2YmlCemRIbHNhWHBsVG05RGIyeHZjaWh6ZEhJc0lITjBlV3hsVkhsd1pTa2dlMXh1SUNCeVpYUjFjbTRnYzNSeU8xeHVmVnh1WEc1Y2JtWjFibU4wYVc5dUlHRnljbUY1Vkc5SVlYTm9LR0Z5Y21GNUtTQjdYRzRnSUhaaGNpQm9ZWE5vSUQwZ2UzMDdYRzVjYmlBZ1lYSnlZWGt1Wm05eVJXRmphQ2htZFc1amRHbHZiaWgyWVd3c0lHbGtlQ2tnZTF4dUlDQWdJR2hoYzJoYmRtRnNYU0E5SUhSeWRXVTdYRzRnSUgwcE8xeHVYRzRnSUhKbGRIVnliaUJvWVhOb08xeHVmVnh1WEc1Y2JtWjFibU4wYVc5dUlHWnZjbTFoZEZaaGJIVmxLR04wZUN3Z2RtRnNkV1VzSUhKbFkzVnljMlZVYVcxbGN5a2dlMXh1SUNBdkx5QlFjbTkyYVdSbElHRWdhRzl2YXlCbWIzSWdkWE5sY2kxemNHVmphV1pwWldRZ2FXNXpjR1ZqZENCbWRXNWpkR2x2Ym5NdVhHNGdJQzh2SUVOb1pXTnJJSFJvWVhRZ2RtRnNkV1VnYVhNZ1lXNGdiMkpxWldOMElIZHBkR2dnWVc0Z2FXNXpjR1ZqZENCbWRXNWpkR2x2YmlCdmJpQnBkRnh1SUNCcFppQW9ZM1I0TG1OMWMzUnZiVWx1YzNCbFkzUWdKaVpjYmlBZ0lDQWdJSFpoYkhWbElDWW1YRzRnSUNBZ0lDQnBjMFoxYm1OMGFXOXVLSFpoYkhWbExtbHVjM0JsWTNRcElDWW1YRzRnSUNBZ0lDQXZMeUJHYVd4MFpYSWdiM1YwSUhSb1pTQjFkR2xzSUcxdlpIVnNaU3dnYVhRbmN5QnBibk53WldOMElHWjFibU4wYVc5dUlHbHpJSE53WldOcFlXeGNiaUFnSUNBZ0lIWmhiSFZsTG1sdWMzQmxZM1FnSVQwOUlHVjRjRzl5ZEhNdWFXNXpjR1ZqZENBbUpseHVJQ0FnSUNBZ0x5OGdRV3h6YnlCbWFXeDBaWElnYjNWMElHRnVlU0J3Y205MGIzUjVjR1VnYjJKcVpXTjBjeUIxYzJsdVp5QjBhR1VnWTJseVkzVnNZWElnWTJobFkyc3VYRzRnSUNBZ0lDQWhLSFpoYkhWbExtTnZibk4wY25WamRHOXlJQ1ltSUhaaGJIVmxMbU52Ym5OMGNuVmpkRzl5TG5CeWIzUnZkSGx3WlNBOVBUMGdkbUZzZFdVcEtTQjdYRzRnSUNBZ2RtRnlJSEpsZENBOUlIWmhiSFZsTG1sdWMzQmxZM1FvY21WamRYSnpaVlJwYldWekxDQmpkSGdwTzF4dUlDQWdJR2xtSUNnaGFYTlRkSEpwYm1jb2NtVjBLU2tnZTF4dUlDQWdJQ0FnY21WMElEMGdabTl5YldGMFZtRnNkV1VvWTNSNExDQnlaWFFzSUhKbFkzVnljMlZVYVcxbGN5azdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ5WlhRN1hHNGdJSDFjYmx4dUlDQXZMeUJRY21sdGFYUnBkbVVnZEhsd1pYTWdZMkZ1Ym05MElHaGhkbVVnY0hKdmNHVnlkR2xsYzF4dUlDQjJZWElnY0hKcGJXbDBhWFpsSUQwZ1ptOXliV0YwVUhKcGJXbDBhWFpsS0dOMGVDd2dkbUZzZFdVcE8xeHVJQ0JwWmlBb2NISnBiV2wwYVhabEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCeWFXMXBkR2wyWlR0Y2JpQWdmVnh1WEc0Z0lDOHZJRXh2YjJzZ2RYQWdkR2hsSUd0bGVYTWdiMllnZEdobElHOWlhbVZqZEM1Y2JpQWdkbUZ5SUd0bGVYTWdQU0JQWW1wbFkzUXVhMlY1Y3loMllXeDFaU2s3WEc0Z0lIWmhjaUIyYVhOcFlteGxTMlY1Y3lBOUlHRnljbUY1Vkc5SVlYTm9LR3RsZVhNcE8xeHVYRzRnSUdsbUlDaGpkSGd1YzJodmQwaHBaR1JsYmlrZ2UxeHVJQ0FnSUd0bGVYTWdQU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWgyWVd4MVpTazdYRzRnSUgxY2JseHVJQ0F2THlCSlJTQmtiMlZ6YmlkMElHMWhhMlVnWlhKeWIzSWdabWxsYkdSeklHNXZiaTFsYm5WdFpYSmhZbXhsWEc0Z0lDOHZJR2gwZEhBNkx5OXRjMlJ1TG0xcFkzSnZjMjltZEM1amIyMHZaVzR0ZFhNdmJHbGljbUZ5ZVM5cFpTOWtkM2MxTW5OaWRDaDJQWFp6TGprMEtTNWhjM0I0WEc0Z0lHbG1JQ2hwYzBWeWNtOXlLSFpoYkhWbEtWeHVJQ0FnSUNBZ0ppWWdLR3RsZVhNdWFXNWtaWGhQWmlnbmJXVnpjMkZuWlNjcElENDlJREFnZkh3Z2EyVjVjeTVwYm1SbGVFOW1LQ2RrWlhOamNtbHdkR2x2YmljcElENDlJREFwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1p2Y20xaGRFVnljbTl5S0haaGJIVmxLVHRjYmlBZ2ZWeHVYRzRnSUM4dklGTnZiV1VnZEhsd1pTQnZaaUJ2WW1wbFkzUWdkMmwwYUc5MWRDQndjbTl3WlhKMGFXVnpJR05oYmlCaVpTQnphRzl5ZEdOMWRIUmxaQzVjYmlBZ2FXWWdLR3RsZVhNdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdhV1lnS0dselJuVnVZM1JwYjI0b2RtRnNkV1VwS1NCN1hHNGdJQ0FnSUNCMllYSWdibUZ0WlNBOUlIWmhiSFZsTG01aGJXVWdQeUFuT2lBbklDc2dkbUZzZFdVdWJtRnRaU0E2SUNjbk8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOMGVDNXpkSGxzYVhwbEtDZGJSblZ1WTNScGIyNG5JQ3NnYm1GdFpTQXJJQ2RkSnl3Z0ozTndaV05wWVd3bktUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHbHpVbVZuUlhod0tIWmhiSFZsS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOMGVDNXpkSGxzYVhwbEtGSmxaMFY0Y0M1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2gyWVd4MVpTa3NJQ2R5WldkbGVIQW5LVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR2x6UkdGMFpTaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCamRIZ3VjM1I1YkdsNlpTaEVZWFJsTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnk1allXeHNLSFpoYkhWbEtTd2dKMlJoZEdVbktUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHbHpSWEp5YjNJb2RtRnNkV1VwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm05eWJXRjBSWEp5YjNJb2RtRnNkV1VwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhaaGNpQmlZWE5sSUQwZ0p5Y3NJR0Z5Y21GNUlEMGdabUZzYzJVc0lHSnlZV05sY3lBOUlGc25leWNzSUNkOUoxMDdYRzVjYmlBZ0x5OGdUV0ZyWlNCQmNuSmhlU0J6WVhrZ2RHaGhkQ0IwYUdWNUlHRnlaU0JCY25KaGVWeHVJQ0JwWmlBb2FYTkJjbkpoZVNoMllXeDFaU2twSUh0Y2JpQWdJQ0JoY25KaGVTQTlJSFJ5ZFdVN1hHNGdJQ0FnWW5KaFkyVnpJRDBnV3lkYkp5d2dKMTBuWFR0Y2JpQWdmVnh1WEc0Z0lDOHZJRTFoYTJVZ1puVnVZM1JwYjI1eklITmhlU0IwYUdGMElIUm9aWGtnWVhKbElHWjFibU4wYVc5dWMxeHVJQ0JwWmlBb2FYTkdkVzVqZEdsdmJpaDJZV3gxWlNrcElIdGNiaUFnSUNCMllYSWdiaUE5SUhaaGJIVmxMbTVoYldVZ1B5QW5PaUFuSUNzZ2RtRnNkV1V1Ym1GdFpTQTZJQ2NuTzF4dUlDQWdJR0poYzJVZ1BTQW5JRnRHZFc1amRHbHZiaWNnS3lCdUlDc2dKMTBuTzF4dUlDQjlYRzVjYmlBZ0x5OGdUV0ZyWlNCU1pXZEZlSEJ6SUhOaGVTQjBhR0YwSUhSb1pYa2dZWEpsSUZKbFowVjRjSE5jYmlBZ2FXWWdLR2x6VW1WblJYaHdLSFpoYkhWbEtTa2dlMXh1SUNBZ0lHSmhjMlVnUFNBbklDY2dLeUJTWldkRmVIQXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5MbU5oYkd3b2RtRnNkV1VwTzF4dUlDQjlYRzVjYmlBZ0x5OGdUV0ZyWlNCa1lYUmxjeUIzYVhSb0lIQnliM0JsY25ScFpYTWdabWx5YzNRZ2MyRjVJSFJvWlNCa1lYUmxYRzRnSUdsbUlDaHBjMFJoZEdVb2RtRnNkV1VwS1NCN1hHNGdJQ0FnWW1GelpTQTlJQ2NnSnlBcklFUmhkR1V1Y0hKdmRHOTBlWEJsTG5SdlZWUkRVM1J5YVc1bkxtTmhiR3dvZG1Gc2RXVXBPMXh1SUNCOVhHNWNiaUFnTHk4Z1RXRnJaU0JsY25KdmNpQjNhWFJvSUcxbGMzTmhaMlVnWm1seWMzUWdjMkY1SUhSb1pTQmxjbkp2Y2x4dUlDQnBaaUFvYVhORmNuSnZjaWgyWVd4MVpTa3BJSHRjYmlBZ0lDQmlZWE5sSUQwZ0p5QW5JQ3NnWm05eWJXRjBSWEp5YjNJb2RtRnNkV1VwTzF4dUlDQjlYRzVjYmlBZ2FXWWdLR3RsZVhNdWJHVnVaM1JvSUQwOVBTQXdJQ1ltSUNnaFlYSnlZWGtnZkh3Z2RtRnNkV1V1YkdWdVozUm9JRDA5SURBcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdKeVlXTmxjMXN3WFNBcklHSmhjMlVnS3lCaWNtRmpaWE5iTVYwN1hHNGdJSDFjYmx4dUlDQnBaaUFvY21WamRYSnpaVlJwYldWeklEd2dNQ2tnZTF4dUlDQWdJR2xtSUNocGMxSmxaMFY0Y0NoMllXeDFaU2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJqZEhndWMzUjViR2w2WlNoU1pXZEZlSEF1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuTG1OaGJHd29kbUZzZFdVcExDQW5jbVZuWlhod0p5azdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJqZEhndWMzUjViR2w2WlNnblcwOWlhbVZqZEYwbkxDQW5jM0JsWTJsaGJDY3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR04wZUM1elpXVnVMbkIxYzJnb2RtRnNkV1VwTzF4dVhHNGdJSFpoY2lCdmRYUndkWFE3WEc0Z0lHbG1JQ2hoY25KaGVTa2dlMXh1SUNBZ0lHOTFkSEIxZENBOUlHWnZjbTFoZEVGeWNtRjVLR04wZUN3Z2RtRnNkV1VzSUhKbFkzVnljMlZVYVcxbGN5d2dkbWx6YVdKc1pVdGxlWE1zSUd0bGVYTXBPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJRzkxZEhCMWRDQTlJR3RsZVhNdWJXRndLR1oxYm1OMGFXOXVLR3RsZVNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdadmNtMWhkRkJ5YjNCbGNuUjVLR04wZUN3Z2RtRnNkV1VzSUhKbFkzVnljMlZVYVcxbGN5d2dkbWx6YVdKc1pVdGxlWE1zSUd0bGVTd2dZWEp5WVhrcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdZM1I0TG5ObFpXNHVjRzl3S0NrN1hHNWNiaUFnY21WMGRYSnVJSEpsWkhWalpWUnZVMmx1WjJ4bFUzUnlhVzVuS0c5MWRIQjFkQ3dnWW1GelpTd2dZbkpoWTJWektUdGNibjFjYmx4dVhHNW1kVzVqZEdsdmJpQm1iM0p0WVhSUWNtbHRhWFJwZG1Vb1kzUjRMQ0IyWVd4MVpTa2dlMXh1SUNCcFppQW9hWE5WYm1SbFptbHVaV1FvZG1Gc2RXVXBLVnh1SUNBZ0lISmxkSFZ5YmlCamRIZ3VjM1I1YkdsNlpTZ25kVzVrWldacGJtVmtKeXdnSjNWdVpHVm1hVzVsWkNjcE8xeHVJQ0JwWmlBb2FYTlRkSEpwYm1jb2RtRnNkV1VwS1NCN1hHNGdJQ0FnZG1GeUlITnBiWEJzWlNBOUlDZGNYQ2NuSUNzZ1NsTlBUaTV6ZEhKcGJtZHBabmtvZG1Gc2RXVXBMbkpsY0d4aFkyVW9MMTVjSW54Y0lpUXZaeXdnSnljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ3ZKeTluTENCY0lseGNYRnduWENJcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ3ZYRnhjWEZ3aUwyY3NJQ2RjSWljcElDc2dKMXhjSnljN1hHNGdJQ0FnY21WMGRYSnVJR04wZUM1emRIbHNhWHBsS0hOcGJYQnNaU3dnSjNOMGNtbHVaeWNwTzF4dUlDQjlYRzRnSUdsbUlDaHBjMDUxYldKbGNpaDJZV3gxWlNrcFhHNGdJQ0FnY21WMGRYSnVJR04wZUM1emRIbHNhWHBsS0NjbklDc2dkbUZzZFdVc0lDZHVkVzFpWlhJbktUdGNiaUFnYVdZZ0tHbHpRbTl2YkdWaGJpaDJZV3gxWlNrcFhHNGdJQ0FnY21WMGRYSnVJR04wZUM1emRIbHNhWHBsS0NjbklDc2dkbUZzZFdVc0lDZGliMjlzWldGdUp5azdYRzRnSUM4dklFWnZjaUJ6YjIxbElISmxZWE52YmlCMGVYQmxiMllnYm5Wc2JDQnBjeUJjSW05aWFtVmpkRndpTENCemJ5QnpjR1ZqYVdGc0lHTmhjMlVnYUdWeVpTNWNiaUFnYVdZZ0tHbHpUblZzYkNoMllXeDFaU2twWEc0Z0lDQWdjbVYwZFhKdUlHTjBlQzV6ZEhsc2FYcGxLQ2R1ZFd4c0p5d2dKMjUxYkd3bktUdGNibjFjYmx4dVhHNW1kVzVqZEdsdmJpQm1iM0p0WVhSRmNuSnZjaWgyWVd4MVpTa2dlMXh1SUNCeVpYUjFjbTRnSjFzbklDc2dSWEp5YjNJdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvZG1Gc2RXVXBJQ3NnSjEwbk8xeHVmVnh1WEc1Y2JtWjFibU4wYVc5dUlHWnZjbTFoZEVGeWNtRjVLR04wZUN3Z2RtRnNkV1VzSUhKbFkzVnljMlZVYVcxbGN5d2dkbWx6YVdKc1pVdGxlWE1zSUd0bGVYTXBJSHRjYmlBZ2RtRnlJRzkxZEhCMWRDQTlJRnRkTzF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJSFpoYkhWbExteGxibWQwYURzZ2FTQThJR3c3SUNzcmFTa2dlMXh1SUNBZ0lHbG1JQ2hvWVhOUGQyNVFjbTl3WlhKMGVTaDJZV3gxWlN3Z1UzUnlhVzVuS0drcEtTa2dlMXh1SUNBZ0lDQWdiM1YwY0hWMExuQjFjMmdvWm05eWJXRjBVSEp2Y0dWeWRIa29ZM1I0TENCMllXeDFaU3dnY21WamRYSnpaVlJwYldWekxDQjJhWE5wWW14bFMyVjVjeXhjYmlBZ0lDQWdJQ0FnSUNCVGRISnBibWNvYVNrc0lIUnlkV1VwS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdiM1YwY0hWMExuQjFjMmdvSnljcE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCclpYbHpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9hMlY1S1NCN1hHNGdJQ0FnYVdZZ0tDRnJaWGt1YldGMFkyZ29MMTVjWEdRckpDOHBLU0I3WEc0Z0lDQWdJQ0J2ZFhSd2RYUXVjSFZ6YUNobWIzSnRZWFJRY205d1pYSjBlU2hqZEhnc0lIWmhiSFZsTENCeVpXTjFjbk5sVkdsdFpYTXNJSFpwYzJsaWJHVkxaWGx6TEZ4dUlDQWdJQ0FnSUNBZ0lHdGxlU3dnZEhKMVpTa3BPMXh1SUNBZ0lIMWNiaUFnZlNrN1hHNGdJSEpsZEhWeWJpQnZkWFJ3ZFhRN1hHNTlYRzVjYmx4dVpuVnVZM1JwYjI0Z1ptOXliV0YwVUhKdmNHVnlkSGtvWTNSNExDQjJZV3gxWlN3Z2NtVmpkWEp6WlZScGJXVnpMQ0IyYVhOcFlteGxTMlY1Y3l3Z2EyVjVMQ0JoY25KaGVTa2dlMXh1SUNCMllYSWdibUZ0WlN3Z2MzUnlMQ0JrWlhOak8xeHVJQ0JrWlhOaklEMGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2loMllXeDFaU3dnYTJWNUtTQjhmQ0I3SUhaaGJIVmxPaUIyWVd4MVpWdHJaWGxkSUgwN1hHNGdJR2xtSUNoa1pYTmpMbWRsZENrZ2UxeHVJQ0FnSUdsbUlDaGtaWE5qTG5ObGRDa2dlMXh1SUNBZ0lDQWdjM1J5SUQwZ1kzUjRMbk4wZVd4cGVtVW9KMXRIWlhSMFpYSXZVMlYwZEdWeVhTY3NJQ2R6Y0dWamFXRnNKeWs3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lITjBjaUE5SUdOMGVDNXpkSGxzYVhwbEtDZGJSMlYwZEdWeVhTY3NJQ2R6Y0dWamFXRnNKeWs3WEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR2xtSUNoa1pYTmpMbk5sZENrZ2UxeHVJQ0FnSUNBZ2MzUnlJRDBnWTNSNExuTjBlV3hwZW1Vb0oxdFRaWFIwWlhKZEp5d2dKM053WldOcFlXd25LVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdhV1lnS0NGb1lYTlBkMjVRY205d1pYSjBlU2gyYVhOcFlteGxTMlY1Y3l3Z2EyVjVLU2tnZTF4dUlDQWdJRzVoYldVZ1BTQW5XeWNnS3lCclpYa2dLeUFuWFNjN1hHNGdJSDFjYmlBZ2FXWWdLQ0Z6ZEhJcElIdGNiaUFnSUNCcFppQW9ZM1I0TG5ObFpXNHVhVzVrWlhoUFppaGtaWE5qTG5aaGJIVmxLU0E4SURBcElIdGNiaUFnSUNBZ0lHbG1JQ2hwYzA1MWJHd29jbVZqZFhKelpWUnBiV1Z6S1NrZ2UxeHVJQ0FnSUNBZ0lDQnpkSElnUFNCbWIzSnRZWFJXWVd4MVpTaGpkSGdzSUdSbGMyTXVkbUZzZFdVc0lHNTFiR3dwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYzNSeUlEMGdabTl5YldGMFZtRnNkV1VvWTNSNExDQmtaWE5qTG5aaGJIVmxMQ0J5WldOMWNuTmxWR2x0WlhNZ0xTQXhLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoemRISXVhVzVrWlhoUFppZ25YRnh1SnlrZ1BpQXRNU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZWEp5WVhrcElIdGNiaUFnSUNBZ0lDQWdJQ0J6ZEhJZ1BTQnpkSEl1YzNCc2FYUW9KMXhjYmljcExtMWhjQ2htZFc1amRHbHZiaWhzYVc1bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnSnlBZ0p5QXJJR3hwYm1VN1hHNGdJQ0FnSUNBZ0lDQWdmU2t1YW05cGJpZ25YRnh1SnlrdWMzVmljM1J5S0RJcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSE4wY2lBOUlDZGNYRzRuSUNzZ2MzUnlMbk53YkdsMEtDZGNYRzRuS1M1dFlYQW9ablZ1WTNScGIyNG9iR2x1WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2NnSUNBbklDc2diR2x1WlR0Y2JpQWdJQ0FnSUNBZ0lDQjlLUzVxYjJsdUtDZGNYRzRuS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J6ZEhJZ1BTQmpkSGd1YzNSNWJHbDZaU2duVzBOcGNtTjFiR0Z5WFNjc0lDZHpjR1ZqYVdGc0p5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lHbG1JQ2hwYzFWdVpHVm1hVzVsWkNodVlXMWxLU2tnZTF4dUlDQWdJR2xtSUNoaGNuSmhlU0FtSmlCclpYa3ViV0YwWTJnb0wxNWNYR1FySkM4cEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2MzUnlPMXh1SUNBZ0lIMWNiaUFnSUNCdVlXMWxJRDBnU2xOUFRpNXpkSEpwYm1kcFpua29KeWNnS3lCclpYa3BPMXh1SUNBZ0lHbG1JQ2h1WVcxbExtMWhkR05vS0M5ZVhDSW9XMkV0ZWtFdFdsOWRXMkV0ZWtFdFdsOHdMVGxkS2lsY0lpUXZLU2tnZTF4dUlDQWdJQ0FnYm1GdFpTQTlJRzVoYldVdWMzVmljM1J5S0RFc0lHNWhiV1V1YkdWdVozUm9JQzBnTWlrN1hHNGdJQ0FnSUNCdVlXMWxJRDBnWTNSNExuTjBlV3hwZW1Vb2JtRnRaU3dnSjI1aGJXVW5LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2JtRnRaU0E5SUc1aGJXVXVjbVZ3YkdGalpTZ3ZKeTluTENCY0lseGNYRnduWENJcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNXlaWEJzWVdObEtDOWNYRnhjWENJdlp5d2dKMXdpSnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuSmxjR3hoWTJVb0x5aGVYQ0o4WENJa0tTOW5MQ0JjSWlkY0lpazdYRzRnSUNBZ0lDQnVZVzFsSUQwZ1kzUjRMbk4wZVd4cGVtVW9ibUZ0WlN3Z0ozTjBjbWx1WnljcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCdVlXMWxJQ3NnSnpvZ0p5QXJJSE4wY2p0Y2JuMWNibHh1WEc1bWRXNWpkR2x2YmlCeVpXUjFZMlZVYjFOcGJtZHNaVk4wY21sdVp5aHZkWFJ3ZFhRc0lHSmhjMlVzSUdKeVlXTmxjeWtnZTF4dUlDQjJZWElnYm5WdFRHbHVaWE5GYzNRZ1BTQXdPMXh1SUNCMllYSWdiR1Z1WjNSb0lEMGdiM1YwY0hWMExuSmxaSFZqWlNobWRXNWpkR2x2Ymlod2NtVjJMQ0JqZFhJcElIdGNiaUFnSUNCdWRXMU1hVzVsYzBWemRDc3JPMXh1SUNBZ0lHbG1JQ2hqZFhJdWFXNWtaWGhQWmlnblhGeHVKeWtnUGowZ01Da2diblZ0VEdsdVpYTkZjM1FyS3p0Y2JpQWdJQ0J5WlhSMWNtNGdjSEpsZGlBcklHTjFjaTV5WlhCc1lXTmxLQzljWEhVd01ERmlYRnhiWEZ4a1hGeGtQMjB2Wnl3Z0p5Y3BMbXhsYm1kMGFDQXJJREU3WEc0Z0lIMHNJREFwTzF4dVhHNGdJR2xtSUNoc1pXNW5kR2dnUGlBMk1Da2dlMXh1SUNBZ0lISmxkSFZ5YmlCaWNtRmpaWE5iTUYwZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FvWW1GelpTQTlQVDBnSnljZ1B5QW5KeUE2SUdKaGMyVWdLeUFuWEZ4dUlDY3BJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0p5QW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ2IzVjBjSFYwTG1wdmFXNG9KeXhjWEc0Z0lDY3BJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0p5QW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ1luSmhZMlZ6V3pGZE8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHSnlZV05sYzFzd1hTQXJJR0poYzJVZ0t5QW5JQ2NnS3lCdmRYUndkWFF1YW05cGJpZ25MQ0FuS1NBcklDY2dKeUFySUdKeVlXTmxjMXN4WFR0Y2JuMWNibHh1WEc0dkx5Qk9UMVJGT2lCVWFHVnpaU0IwZVhCbElHTm9aV05yYVc1bklHWjFibU4wYVc5dWN5QnBiblJsYm5ScGIyNWhiR3g1SUdSdmJpZDBJSFZ6WlNCZ2FXNXpkR0Z1WTJWdlptQmNiaTh2SUdKbFkyRjFjMlVnYVhRZ2FYTWdabkpoWjJsc1pTQmhibVFnWTJGdUlHSmxJR1ZoYzJsc2VTQm1ZV3RsWkNCM2FYUm9JR0JQWW1wbFkzUXVZM0psWVhSbEtDbGdMbHh1Wm5WdVkzUnBiMjRnYVhOQmNuSmhlU2hoY2lrZ2UxeHVJQ0J5WlhSMWNtNGdRWEp5WVhrdWFYTkJjbkpoZVNoaGNpazdYRzU5WEc1bGVIQnZjblJ6TG1selFYSnlZWGtnUFNCcGMwRnljbUY1TzF4dVhHNW1kVzVqZEdsdmJpQnBjMEp2YjJ4bFlXNG9ZWEpuS1NCN1hHNGdJSEpsZEhWeWJpQjBlWEJsYjJZZ1lYSm5JRDA5UFNBblltOXZiR1ZoYmljN1hHNTlYRzVsZUhCdmNuUnpMbWx6UW05dmJHVmhiaUE5SUdselFtOXZiR1ZoYmp0Y2JseHVablZ1WTNScGIyNGdhWE5PZFd4c0tHRnlaeWtnZTF4dUlDQnlaWFIxY200Z1lYSm5JRDA5UFNCdWRXeHNPMXh1ZlZ4dVpYaHdiM0owY3k1cGMwNTFiR3dnUFNCcGMwNTFiR3c3WEc1Y2JtWjFibU4wYVc5dUlHbHpUblZzYkU5eVZXNWtaV1pwYm1Wa0tHRnlaeWtnZTF4dUlDQnlaWFIxY200Z1lYSm5JRDA5SUc1MWJHdzdYRzU5WEc1bGVIQnZjblJ6TG1selRuVnNiRTl5Vlc1a1pXWnBibVZrSUQwZ2FYTk9kV3hzVDNKVmJtUmxabWx1WldRN1hHNWNibVoxYm1OMGFXOXVJR2x6VG5WdFltVnlLR0Z5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHRnlaeUE5UFQwZ0oyNTFiV0psY2ljN1hHNTlYRzVsZUhCdmNuUnpMbWx6VG5WdFltVnlJRDBnYVhOT2RXMWlaWEk3WEc1Y2JtWjFibU4wYVc5dUlHbHpVM1J5YVc1bktHRnlaeWtnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUdGeVp5QTlQVDBnSjNOMGNtbHVaeWM3WEc1OVhHNWxlSEJ2Y25SekxtbHpVM1J5YVc1bklEMGdhWE5UZEhKcGJtYzdYRzVjYm1aMWJtTjBhVzl1SUdselUzbHRZbTlzS0dGeVp5a2dlMXh1SUNCeVpYUjFjbTRnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKM041YldKdmJDYzdYRzU5WEc1bGVIQnZjblJ6TG1selUzbHRZbTlzSUQwZ2FYTlRlVzFpYjJ3N1hHNWNibVoxYm1OMGFXOXVJR2x6Vlc1a1pXWnBibVZrS0dGeVp5a2dlMXh1SUNCeVpYUjFjbTRnWVhKbklEMDlQU0IyYjJsa0lEQTdYRzU5WEc1bGVIQnZjblJ6TG1selZXNWtaV1pwYm1Wa0lEMGdhWE5WYm1SbFptbHVaV1E3WEc1Y2JtWjFibU4wYVc5dUlHbHpVbVZuUlhod0tISmxLU0I3WEc0Z0lISmxkSFZ5YmlCcGMwOWlhbVZqZENoeVpTa2dKaVlnYjJKcVpXTjBWRzlUZEhKcGJtY29jbVVwSUQwOVBTQW5XMjlpYW1WamRDQlNaV2RGZUhCZEp6dGNibjFjYm1WNGNHOXlkSE11YVhOU1pXZEZlSEFnUFNCcGMxSmxaMFY0Y0R0Y2JseHVablZ1WTNScGIyNGdhWE5QWW1wbFkzUW9ZWEpuS1NCN1hHNGdJSEpsZEhWeWJpQjBlWEJsYjJZZ1lYSm5JRDA5UFNBbmIySnFaV04wSnlBbUppQmhjbWNnSVQwOUlHNTFiR3c3WEc1OVhHNWxlSEJ2Y25SekxtbHpUMkpxWldOMElEMGdhWE5QWW1wbFkzUTdYRzVjYm1aMWJtTjBhVzl1SUdselJHRjBaU2hrS1NCN1hHNGdJSEpsZEhWeWJpQnBjMDlpYW1WamRDaGtLU0FtSmlCdlltcGxZM1JVYjFOMGNtbHVaeWhrS1NBOVBUMGdKMXR2WW1wbFkzUWdSR0YwWlYwbk8xeHVmVnh1Wlhod2IzSjBjeTVwYzBSaGRHVWdQU0JwYzBSaGRHVTdYRzVjYm1aMWJtTjBhVzl1SUdselJYSnliM0lvWlNrZ2UxeHVJQ0J5WlhSMWNtNGdhWE5QWW1wbFkzUW9aU2tnSmlaY2JpQWdJQ0FnSUNodlltcGxZM1JVYjFOMGNtbHVaeWhsS1NBOVBUMGdKMXR2WW1wbFkzUWdSWEp5YjNKZEp5QjhmQ0JsSUdsdWMzUmhibU5sYjJZZ1JYSnliM0lwTzF4dWZWeHVaWGh3YjNKMGN5NXBjMFZ5Y205eUlEMGdhWE5GY25KdmNqdGNibHh1Wm5WdVkzUnBiMjRnYVhOR2RXNWpkR2x2YmloaGNtY3BJSHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJoY21jZ1BUMDlJQ2RtZFc1amRHbHZiaWM3WEc1OVhHNWxlSEJ2Y25SekxtbHpSblZ1WTNScGIyNGdQU0JwYzBaMWJtTjBhVzl1TzF4dVhHNW1kVzVqZEdsdmJpQnBjMUJ5YVcxcGRHbDJaU2hoY21jcElIdGNiaUFnY21WMGRYSnVJR0Z5WnlBOVBUMGdiblZzYkNCOGZGeHVJQ0FnSUNBZ0lDQWdkSGx3Wlc5bUlHRnlaeUE5UFQwZ0oySnZiMnhsWVc0bklIeDhYRzRnSUNBZ0lDQWdJQ0IwZVhCbGIyWWdZWEpuSUQwOVBTQW5iblZ0WW1WeUp5QjhmRnh1SUNBZ0lDQWdJQ0FnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKM04wY21sdVp5Y2dmSHhjYmlBZ0lDQWdJQ0FnSUhSNWNHVnZaaUJoY21jZ1BUMDlJQ2R6ZVcxaWIyd25JSHg4SUNBdkx5QkZVellnYzNsdFltOXNYRzRnSUNBZ0lDQWdJQ0IwZVhCbGIyWWdZWEpuSUQwOVBTQW5kVzVrWldacGJtVmtKenRjYm4xY2JtVjRjRzl5ZEhNdWFYTlFjbWx0YVhScGRtVWdQU0JwYzFCeWFXMXBkR2wyWlR0Y2JseHVaWGh3YjNKMGN5NXBjMEoxWm1abGNpQTlJSEpsY1hWcGNtVW9KeTR2YzNWd2NHOXlkQzlwYzBKMVptWmxjaWNwTzF4dVhHNW1kVzVqZEdsdmJpQnZZbXBsWTNSVWIxTjBjbWx1WnlodktTQjdYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5MbU5oYkd3b2J5azdYRzU5WEc1Y2JseHVablZ1WTNScGIyNGdjR0ZrS0c0cElIdGNiaUFnY21WMGRYSnVJRzRnUENBeE1DQS9JQ2N3SnlBcklHNHVkRzlUZEhKcGJtY29NVEFwSURvZ2JpNTBiMU4wY21sdVp5Z3hNQ2s3WEc1OVhHNWNibHh1ZG1GeUlHMXZiblJvY3lBOUlGc25TbUZ1Snl3Z0owWmxZaWNzSUNkTllYSW5MQ0FuUVhCeUp5d2dKMDFoZVNjc0lDZEtkVzRuTENBblNuVnNKeXdnSjBGMVp5Y3NJQ2RUWlhBbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBblQyTjBKeXdnSjA1dmRpY3NJQ2RFWldNblhUdGNibHh1THk4Z01qWWdSbVZpSURFMk9qRTVPak0wWEc1bWRXNWpkR2x2YmlCMGFXMWxjM1JoYlhBb0tTQjdYRzRnSUhaaGNpQmtJRDBnYm1WM0lFUmhkR1VvS1R0Y2JpQWdkbUZ5SUhScGJXVWdQU0JiY0dGa0tHUXVaMlYwU0c5MWNuTW9LU2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEJoWkNoa0xtZGxkRTFwYm5WMFpYTW9LU2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEJoWkNoa0xtZGxkRk5sWTI5dVpITW9LU2xkTG1wdmFXNG9Kem9uS1R0Y2JpQWdjbVYwZFhKdUlGdGtMbWRsZEVSaGRHVW9LU3dnYlc5dWRHaHpXMlF1WjJWMFRXOXVkR2dvS1Ywc0lIUnBiV1ZkTG1wdmFXNG9KeUFuS1R0Y2JuMWNibHh1WEc0dkx5QnNiMmNnYVhNZ2FuVnpkQ0JoSUhSb2FXNGdkM0poY0hCbGNpQjBieUJqYjI1emIyeGxMbXh2WnlCMGFHRjBJSEJ5WlhCbGJtUnpJR0VnZEdsdFpYTjBZVzF3WEc1bGVIQnZjblJ6TG14dlp5QTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQmpiMjV6YjJ4bExteHZaeWduSlhNZ0xTQWxjeWNzSUhScGJXVnpkR0Z0Y0NncExDQmxlSEJ2Y25SekxtWnZjbTFoZEM1aGNIQnNlU2hsZUhCdmNuUnpMQ0JoY21kMWJXVnVkSE1wS1R0Y2JuMDdYRzVjYmx4dUx5b3FYRzRnS2lCSmJtaGxjbWwwSUhSb1pTQndjbTkwYjNSNWNHVWdiV1YwYUc5a2N5Qm1jbTl0SUc5dVpTQmpiMjV6ZEhKMVkzUnZjaUJwYm5SdklHRnViM1JvWlhJdVhHNGdLbHh1SUNvZ1ZHaGxJRVoxYm1OMGFXOXVMbkJ5YjNSdmRIbHdaUzVwYm1obGNtbDBjeUJtY205dElHeGhibWN1YW5NZ2NtVjNjbWwwZEdWdUlHRnpJR0VnYzNSaGJtUmhiRzl1WlZ4dUlDb2dablZ1WTNScGIyNGdLRzV2ZENCdmJpQkdkVzVqZEdsdmJpNXdjbTkwYjNSNWNHVXBMaUJPVDFSRk9pQkpaaUIwYUdseklHWnBiR1VnYVhNZ2RHOGdZbVVnYkc5aFpHVmtYRzRnS2lCa2RYSnBibWNnWW05dmRITjBjbUZ3Y0dsdVp5QjBhR2x6SUdaMWJtTjBhVzl1SUc1bFpXUnpJSFJ2SUdKbElISmxkM0pwZEhSbGJpQjFjMmx1WnlCemIyMWxJRzVoZEdsMlpWeHVJQ29nWm5WdVkzUnBiMjV6SUdGeklIQnliM1J2ZEhsd1pTQnpaWFIxY0NCMWMybHVaeUJ1YjNKdFlXd2dTbUYyWVZOamNtbHdkQ0JrYjJWeklHNXZkQ0IzYjNKcklHRnpYRzRnS2lCbGVIQmxZM1JsWkNCa2RYSnBibWNnWW05dmRITjBjbUZ3Y0dsdVp5QW9jMlZsSUcxcGNuSnZjaTVxY3lCcGJpQnlNVEUwT1RBektTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UyWjFibU4wYVc5dWZTQmpkRzl5SUVOdmJuTjBjblZqZEc5eUlHWjFibU4wYVc5dUlIZG9hV05vSUc1bFpXUnpJSFJ2SUdsdWFHVnlhWFFnZEdobFhHNGdLaUFnSUNBZ2NISnZkRzkwZVhCbExseHVJQ29nUUhCaGNtRnRJSHRtZFc1amRHbHZibjBnYzNWd1pYSkRkRzl5SUVOdmJuTjBjblZqZEc5eUlHWjFibU4wYVc5dUlIUnZJR2x1YUdWeWFYUWdjSEp2ZEc5MGVYQmxJR1p5YjIwdVhHNGdLaTljYm1WNGNHOXlkSE11YVc1b1pYSnBkSE1nUFNCeVpYRjFhWEpsS0NkcGJtaGxjbWwwY3ljcE8xeHVYRzVsZUhCdmNuUnpMbDlsZUhSbGJtUWdQU0JtZFc1amRHbHZiaWh2Y21sbmFXNHNJR0ZrWkNrZ2UxeHVJQ0F2THlCRWIyNG5kQ0JrYnlCaGJubDBhR2x1WnlCcFppQmhaR1FnYVhOdUozUWdZVzRnYjJKcVpXTjBYRzRnSUdsbUlDZ2hZV1JrSUh4OElDRnBjMDlpYW1WamRDaGhaR1FwS1NCeVpYUjFjbTRnYjNKcFoybHVPMXh1WEc0Z0lIWmhjaUJyWlhseklEMGdUMkpxWldOMExtdGxlWE1vWVdSa0tUdGNiaUFnZG1GeUlHa2dQU0JyWlhsekxteGxibWQwYUR0Y2JpQWdkMmhwYkdVZ0tHa3RMU2tnZTF4dUlDQWdJRzl5YVdkcGJsdHJaWGx6VzJsZFhTQTlJR0ZrWkZ0clpYbHpXMmxkWFR0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnYjNKcFoybHVPMXh1ZlR0Y2JseHVablZ1WTNScGIyNGdhR0Z6VDNkdVVISnZjR1Z5ZEhrb2IySnFMQ0J3Y205d0tTQjdYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYjJKcUxDQndjbTl3S1R0Y2JuMWNiaUpkZlE9PSIsIihmdW5jdGlvbiAoZ2xvYmFsKXtcbi8qKlxuICogbWFya2VkIC0gYSBtYXJrZG93biBwYXJzZXJcbiAqIENvcHlyaWdodCAoYykgMjAxMS0yMDE0LCBDaHJpc3RvcGhlciBKZWZmcmV5LiAoTUlUIExpY2Vuc2VkKVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NoamovbWFya2VkXG4gKi9cblxuOyhmdW5jdGlvbigpIHtcblxuLyoqXG4gKiBCbG9jay1MZXZlbCBHcmFtbWFyXG4gKi9cblxudmFyIGJsb2NrID0ge1xuICBuZXdsaW5lOiAvXlxcbisvLFxuICBjb2RlOiAvXiggezR9W15cXG5dK1xcbiopKy8sXG4gIGZlbmNlczogbm9vcCxcbiAgaHI6IC9eKCAqWy0qX10pezMsfSAqKD86XFxuK3wkKS8sXG4gIGhlYWRpbmc6IC9eICooI3sxLDZ9KSAqKFteXFxuXSs/KSAqIyogKig/Olxcbit8JCkvLFxuICBucHRhYmxlOiBub29wLFxuICBsaGVhZGluZzogL14oW15cXG5dKylcXG4gKig9fC0pezIsfSAqKD86XFxuK3wkKS8sXG4gIGJsb2NrcXVvdGU6IC9eKCAqPlteXFxuXSsoXFxuKD8hZGVmKVteXFxuXSspKlxcbiopKy8sXG4gIGxpc3Q6IC9eKCAqKShidWxsKSBbXFxzXFxTXSs/KD86aHJ8ZGVmfFxcbnsyLH0oPyEgKSg/IVxcMWJ1bGwgKVxcbip8XFxzKiQpLyxcbiAgaHRtbDogL14gKig/OmNvbW1lbnQgKig/OlxcbnxcXHMqJCl8Y2xvc2VkICooPzpcXG57Mix9fFxccyokKXxjbG9zaW5nICooPzpcXG57Mix9fFxccyokKSkvLFxuICBkZWY6IC9eICpcXFsoW15cXF1dKylcXF06ICo8PyhbXlxccz5dKyk+Pyg/OiArW1wiKF0oW15cXG5dKylbXCIpXSk/ICooPzpcXG4rfCQpLyxcbiAgdGFibGU6IG5vb3AsXG4gIHBhcmFncmFwaDogL14oKD86W15cXG5dK1xcbj8oPyFocnxoZWFkaW5nfGxoZWFkaW5nfGJsb2NrcXVvdGV8dGFnfGRlZikpKylcXG4qLyxcbiAgdGV4dDogL15bXlxcbl0rL1xufTtcblxuYmxvY2suYnVsbGV0ID0gLyg/OlsqKy1dfFxcZCtcXC4pLztcbmJsb2NrLml0ZW0gPSAvXiggKikoYnVsbCkgW15cXG5dKig/Olxcbig/IVxcMWJ1bGwgKVteXFxuXSopKi87XG5ibG9jay5pdGVtID0gcmVwbGFjZShibG9jay5pdGVtLCAnZ20nKVxuICAoL2J1bGwvZywgYmxvY2suYnVsbGV0KVxuICAoKTtcblxuYmxvY2subGlzdCA9IHJlcGxhY2UoYmxvY2subGlzdClcbiAgKC9idWxsL2csIGJsb2NrLmJ1bGxldClcbiAgKCdocicsICdcXFxcbisoPz1cXFxcMT8oPzpbLSpfXSAqKXszLH0oPzpcXFxcbit8JCkpJylcbiAgKCdkZWYnLCAnXFxcXG4rKD89JyArIGJsb2NrLmRlZi5zb3VyY2UgKyAnKScpXG4gICgpO1xuXG5ibG9jay5ibG9ja3F1b3RlID0gcmVwbGFjZShibG9jay5ibG9ja3F1b3RlKVxuICAoJ2RlZicsIGJsb2NrLmRlZilcbiAgKCk7XG5cbmJsb2NrLl90YWcgPSAnKD8hKD86J1xuICArICdhfGVtfHN0cm9uZ3xzbWFsbHxzfGNpdGV8cXxkZm58YWJicnxkYXRhfHRpbWV8Y29kZSdcbiAgKyAnfHZhcnxzYW1wfGtiZHxzdWJ8c3VwfGl8Ynx1fG1hcmt8cnVieXxydHxycHxiZGl8YmRvJ1xuICArICd8c3Bhbnxicnx3YnJ8aW5zfGRlbHxpbWcpXFxcXGIpXFxcXHcrKD8hOi98W15cXFxcd1xcXFxzQF0qQClcXFxcYic7XG5cbmJsb2NrLmh0bWwgPSByZXBsYWNlKGJsb2NrLmh0bWwpXG4gICgnY29tbWVudCcsIC88IS0tW1xcc1xcU10qPy0tPi8pXG4gICgnY2xvc2VkJywgLzwodGFnKVtcXHNcXFNdKz88XFwvXFwxPi8pXG4gICgnY2xvc2luZycsIC88dGFnKD86XCJbXlwiXSpcInwnW14nXSonfFteJ1wiPl0pKj8+LylcbiAgKC90YWcvZywgYmxvY2suX3RhZylcbiAgKCk7XG5cbmJsb2NrLnBhcmFncmFwaCA9IHJlcGxhY2UoYmxvY2sucGFyYWdyYXBoKVxuICAoJ2hyJywgYmxvY2suaHIpXG4gICgnaGVhZGluZycsIGJsb2NrLmhlYWRpbmcpXG4gICgnbGhlYWRpbmcnLCBibG9jay5saGVhZGluZylcbiAgKCdibG9ja3F1b3RlJywgYmxvY2suYmxvY2txdW90ZSlcbiAgKCd0YWcnLCAnPCcgKyBibG9jay5fdGFnKVxuICAoJ2RlZicsIGJsb2NrLmRlZilcbiAgKCk7XG5cbi8qKlxuICogTm9ybWFsIEJsb2NrIEdyYW1tYXJcbiAqL1xuXG5ibG9jay5ub3JtYWwgPSBtZXJnZSh7fSwgYmxvY2spO1xuXG4vKipcbiAqIEdGTSBCbG9jayBHcmFtbWFyXG4gKi9cblxuYmxvY2suZ2ZtID0gbWVyZ2Uoe30sIGJsb2NrLm5vcm1hbCwge1xuICBmZW5jZXM6IC9eICooYHszLH18fnszLH0pWyBcXC5dKihcXFMrKT8gKlxcbihbXFxzXFxTXSo/KVxccypcXDEgKig/Olxcbit8JCkvLFxuICBwYXJhZ3JhcGg6IC9eLyxcbiAgaGVhZGluZzogL14gKigjezEsNn0pICsoW15cXG5dKz8pICojKiAqKD86XFxuK3wkKS9cbn0pO1xuXG5ibG9jay5nZm0ucGFyYWdyYXBoID0gcmVwbGFjZShibG9jay5wYXJhZ3JhcGgpXG4gICgnKD8hJywgJyg/ISdcbiAgICArIGJsb2NrLmdmbS5mZW5jZXMuc291cmNlLnJlcGxhY2UoJ1xcXFwxJywgJ1xcXFwyJykgKyAnfCdcbiAgICArIGJsb2NrLmxpc3Quc291cmNlLnJlcGxhY2UoJ1xcXFwxJywgJ1xcXFwzJykgKyAnfCcpXG4gICgpO1xuXG4vKipcbiAqIEdGTSArIFRhYmxlcyBCbG9jayBHcmFtbWFyXG4gKi9cblxuYmxvY2sudGFibGVzID0gbWVyZ2Uoe30sIGJsb2NrLmdmbSwge1xuICBucHRhYmxlOiAvXiAqKFxcUy4qXFx8LiopXFxuICooWy06XSsgKlxcfFstfCA6XSopXFxuKCg/Oi4qXFx8LiooPzpcXG58JCkpKilcXG4qLyxcbiAgdGFibGU6IC9eICpcXHwoLispXFxuICpcXHwoICpbLTpdK1stfCA6XSopXFxuKCg/OiAqXFx8LiooPzpcXG58JCkpKilcXG4qL1xufSk7XG5cbi8qKlxuICogQmxvY2sgTGV4ZXJcbiAqL1xuXG5mdW5jdGlvbiBMZXhlcihvcHRpb25zKSB7XG4gIHRoaXMudG9rZW5zID0gW107XG4gIHRoaXMudG9rZW5zLmxpbmtzID0ge307XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgbWFya2VkLmRlZmF1bHRzO1xuICB0aGlzLnJ1bGVzID0gYmxvY2subm9ybWFsO1xuXG4gIGlmICh0aGlzLm9wdGlvbnMuZ2ZtKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy50YWJsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMgPSBibG9jay50YWJsZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucnVsZXMgPSBibG9jay5nZm07XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRXhwb3NlIEJsb2NrIFJ1bGVzXG4gKi9cblxuTGV4ZXIucnVsZXMgPSBibG9jaztcblxuLyoqXG4gKiBTdGF0aWMgTGV4IE1ldGhvZFxuICovXG5cbkxleGVyLmxleCA9IGZ1bmN0aW9uKHNyYywgb3B0aW9ucykge1xuICB2YXIgbGV4ZXIgPSBuZXcgTGV4ZXIob3B0aW9ucyk7XG4gIHJldHVybiBsZXhlci5sZXgoc3JjKTtcbn07XG5cbi8qKlxuICogUHJlcHJvY2Vzc2luZ1xuICovXG5cbkxleGVyLnByb3RvdHlwZS5sZXggPSBmdW5jdGlvbihzcmMpIHtcbiAgc3JjID0gc3JjXG4gICAgLnJlcGxhY2UoL1xcclxcbnxcXHIvZywgJ1xcbicpXG4gICAgLnJlcGxhY2UoL1xcdC9nLCAnICAgICcpXG4gICAgLnJlcGxhY2UoL1xcdTAwYTAvZywgJyAnKVxuICAgIC5yZXBsYWNlKC9cXHUyNDI0L2csICdcXG4nKTtcblxuICByZXR1cm4gdGhpcy50b2tlbihzcmMsIHRydWUpO1xufTtcblxuLyoqXG4gKiBMZXhpbmdcbiAqL1xuXG5MZXhlci5wcm90b3R5cGUudG9rZW4gPSBmdW5jdGlvbihzcmMsIHRvcCwgYnEpIHtcbiAgdmFyIHNyYyA9IHNyYy5yZXBsYWNlKC9eICskL2dtLCAnJylcbiAgICAsIG5leHRcbiAgICAsIGxvb3NlXG4gICAgLCBjYXBcbiAgICAsIGJ1bGxcbiAgICAsIGJcbiAgICAsIGl0ZW1cbiAgICAsIHNwYWNlXG4gICAgLCBpXG4gICAgLCBsO1xuXG4gIHdoaWxlIChzcmMpIHtcbiAgICAvLyBuZXdsaW5lXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMubmV3bGluZS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBpZiAoY2FwWzBdLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgICAgdHlwZTogJ3NwYWNlJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb2RlXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuY29kZS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBjYXAgPSBjYXBbMF0ucmVwbGFjZSgvXiB7NH0vZ20sICcnKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnY29kZScsXG4gICAgICAgIHRleHQ6ICF0aGlzLm9wdGlvbnMucGVkYW50aWNcbiAgICAgICAgICA/IGNhcC5yZXBsYWNlKC9cXG4rJC8sICcnKVxuICAgICAgICAgIDogY2FwXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGZlbmNlcyAoZ2ZtKVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmZlbmNlcy5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2NvZGUnLFxuICAgICAgICBsYW5nOiBjYXBbMl0sXG4gICAgICAgIHRleHQ6IGNhcFszXSB8fCAnJ1xuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBoZWFkaW5nXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuaGVhZGluZy5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2hlYWRpbmcnLFxuICAgICAgICBkZXB0aDogY2FwWzFdLmxlbmd0aCxcbiAgICAgICAgdGV4dDogY2FwWzJdXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRhYmxlIG5vIGxlYWRpbmcgcGlwZSAoZ2ZtKVxuICAgIGlmICh0b3AgJiYgKGNhcCA9IHRoaXMucnVsZXMubnB0YWJsZS5leGVjKHNyYykpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuXG4gICAgICBpdGVtID0ge1xuICAgICAgICB0eXBlOiAndGFibGUnLFxuICAgICAgICBoZWFkZXI6IGNhcFsxXS5yZXBsYWNlKC9eICp8ICpcXHwgKiQvZywgJycpLnNwbGl0KC8gKlxcfCAqLyksXG4gICAgICAgIGFsaWduOiBjYXBbMl0ucmVwbGFjZSgvXiAqfFxcfCAqJC9nLCAnJykuc3BsaXQoLyAqXFx8ICovKSxcbiAgICAgICAgY2VsbHM6IGNhcFszXS5yZXBsYWNlKC9cXG4kLywgJycpLnNwbGl0KCdcXG4nKVxuICAgICAgfTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW0uYWxpZ24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKC9eICotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ3JpZ2h0JztcbiAgICAgICAgfSBlbHNlIGlmICgvXiAqOi0rOiAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnY2VudGVyJztcbiAgICAgICAgfSBlbHNlIGlmICgvXiAqOi0rICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdsZWZ0JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtLmFsaWduW2ldID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgaXRlbS5jZWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVtLmNlbGxzW2ldID0gaXRlbS5jZWxsc1tpXS5zcGxpdCgvICpcXHwgKi8pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRva2Vucy5wdXNoKGl0ZW0pO1xuXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBsaGVhZGluZ1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmxoZWFkaW5nLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgICAgIGRlcHRoOiBjYXBbMl0gPT09ICc9JyA/IDEgOiAyLFxuICAgICAgICB0ZXh0OiBjYXBbMV1cbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gaHJcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5oci5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2hyJ1xuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBibG9ja3F1b3RlXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuYmxvY2txdW90ZS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnYmxvY2txdW90ZV9zdGFydCdcbiAgICAgIH0pO1xuXG4gICAgICBjYXAgPSBjYXBbMF0ucmVwbGFjZSgvXiAqPiA/L2dtLCAnJyk7XG5cbiAgICAgIC8vIFBhc3MgYHRvcGAgdG8ga2VlcCB0aGUgY3VycmVudFxuICAgICAgLy8gXCJ0b3BsZXZlbFwiIHN0YXRlLiBUaGlzIGlzIGV4YWN0bHlcbiAgICAgIC8vIGhvdyBtYXJrZG93bi5wbCB3b3Jrcy5cbiAgICAgIHRoaXMudG9rZW4oY2FwLCB0b3AsIHRydWUpO1xuXG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2Jsb2NrcXVvdGVfZW5kJ1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGxpc3RcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5saXN0LmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGJ1bGwgPSBjYXBbMl07XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnbGlzdF9zdGFydCcsXG4gICAgICAgIG9yZGVyZWQ6IGJ1bGwubGVuZ3RoID4gMVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEdldCBlYWNoIHRvcC1sZXZlbCBpdGVtLlxuICAgICAgY2FwID0gY2FwWzBdLm1hdGNoKHRoaXMucnVsZXMuaXRlbSk7XG5cbiAgICAgIG5leHQgPSBmYWxzZTtcbiAgICAgIGwgPSBjYXAubGVuZ3RoO1xuICAgICAgaSA9IDA7XG5cbiAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGl0ZW0gPSBjYXBbaV07XG5cbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBsaXN0IGl0ZW0ncyBidWxsZXRcbiAgICAgICAgLy8gc28gaXQgaXMgc2VlbiBhcyB0aGUgbmV4dCB0b2tlbi5cbiAgICAgICAgc3BhY2UgPSBpdGVtLmxlbmd0aDtcbiAgICAgICAgaXRlbSA9IGl0ZW0ucmVwbGFjZSgvXiAqKFsqKy1dfFxcZCtcXC4pICsvLCAnJyk7XG5cbiAgICAgICAgLy8gT3V0ZGVudCB3aGF0ZXZlciB0aGVcbiAgICAgICAgLy8gbGlzdCBpdGVtIGNvbnRhaW5zLiBIYWNreS5cbiAgICAgICAgaWYgKH5pdGVtLmluZGV4T2YoJ1xcbiAnKSkge1xuICAgICAgICAgIHNwYWNlIC09IGl0ZW0ubGVuZ3RoO1xuICAgICAgICAgIGl0ZW0gPSAhdGhpcy5vcHRpb25zLnBlZGFudGljXG4gICAgICAgICAgICA/IGl0ZW0ucmVwbGFjZShuZXcgUmVnRXhwKCdeIHsxLCcgKyBzcGFjZSArICd9JywgJ2dtJyksICcnKVxuICAgICAgICAgICAgOiBpdGVtLnJlcGxhY2UoL14gezEsNH0vZ20sICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERldGVybWluZSB3aGV0aGVyIHRoZSBuZXh0IGxpc3QgaXRlbSBiZWxvbmdzIGhlcmUuXG4gICAgICAgIC8vIEJhY2twZWRhbCBpZiBpdCBkb2VzIG5vdCBiZWxvbmcgaW4gdGhpcyBsaXN0LlxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNtYXJ0TGlzdHMgJiYgaSAhPT0gbCAtIDEpIHtcbiAgICAgICAgICBiID0gYmxvY2suYnVsbGV0LmV4ZWMoY2FwW2kgKyAxXSlbMF07XG4gICAgICAgICAgaWYgKGJ1bGwgIT09IGIgJiYgIShidWxsLmxlbmd0aCA+IDEgJiYgYi5sZW5ndGggPiAxKSkge1xuICAgICAgICAgICAgc3JjID0gY2FwLnNsaWNlKGkgKyAxKS5qb2luKCdcXG4nKSArIHNyYztcbiAgICAgICAgICAgIGkgPSBsIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZXRlcm1pbmUgd2hldGhlciBpdGVtIGlzIGxvb3NlIG9yIG5vdC5cbiAgICAgICAgLy8gVXNlOiAvKF58XFxuKSg/ISApW15cXG5dK1xcblxcbig/IVxccyokKS9cbiAgICAgICAgLy8gZm9yIGRpc2NvdW50IGJlaGF2aW9yLlxuICAgICAgICBsb29zZSA9IG5leHQgfHwgL1xcblxcbig/IVxccyokKS8udGVzdChpdGVtKTtcbiAgICAgICAgaWYgKGkgIT09IGwgLSAxKSB7XG4gICAgICAgICAgbmV4dCA9IGl0ZW0uY2hhckF0KGl0ZW0ubGVuZ3RoIC0gMSkgPT09ICdcXG4nO1xuICAgICAgICAgIGlmICghbG9vc2UpIGxvb3NlID0gbmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICAgIHR5cGU6IGxvb3NlXG4gICAgICAgICAgICA/ICdsb29zZV9pdGVtX3N0YXJ0J1xuICAgICAgICAgICAgOiAnbGlzdF9pdGVtX3N0YXJ0J1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBSZWN1cnNlLlxuICAgICAgICB0aGlzLnRva2VuKGl0ZW0sIGZhbHNlLCBicSk7XG5cbiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgICAgdHlwZTogJ2xpc3RfaXRlbV9lbmQnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2xpc3RfZW5kJ1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGh0bWxcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5odG1sLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiB0aGlzLm9wdGlvbnMuc2FuaXRpemVcbiAgICAgICAgICA/ICdwYXJhZ3JhcGgnXG4gICAgICAgICAgOiAnaHRtbCcsXG4gICAgICAgIHByZTogIXRoaXMub3B0aW9ucy5zYW5pdGl6ZXJcbiAgICAgICAgICAmJiAoY2FwWzFdID09PSAncHJlJyB8fCBjYXBbMV0gPT09ICdzY3JpcHQnIHx8IGNhcFsxXSA9PT0gJ3N0eWxlJyksXG4gICAgICAgIHRleHQ6IGNhcFswXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBkZWZcbiAgICBpZiAoKCFicSAmJiB0b3ApICYmIChjYXAgPSB0aGlzLnJ1bGVzLmRlZi5leGVjKHNyYykpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMubGlua3NbY2FwWzFdLnRvTG93ZXJDYXNlKCldID0ge1xuICAgICAgICBocmVmOiBjYXBbMl0sXG4gICAgICAgIHRpdGxlOiBjYXBbM11cbiAgICAgIH07XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB0YWJsZSAoZ2ZtKVxuICAgIGlmICh0b3AgJiYgKGNhcCA9IHRoaXMucnVsZXMudGFibGUuZXhlYyhzcmMpKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcblxuICAgICAgaXRlbSA9IHtcbiAgICAgICAgdHlwZTogJ3RhYmxlJyxcbiAgICAgICAgaGVhZGVyOiBjYXBbMV0ucmVwbGFjZSgvXiAqfCAqXFx8ICokL2csICcnKS5zcGxpdCgvICpcXHwgKi8pLFxuICAgICAgICBhbGlnbjogY2FwWzJdLnJlcGxhY2UoL14gKnxcXHwgKiQvZywgJycpLnNwbGl0KC8gKlxcfCAqLyksXG4gICAgICAgIGNlbGxzOiBjYXBbM10ucmVwbGFjZSgvKD86ICpcXHwgKik/XFxuJC8sICcnKS5zcGxpdCgnXFxuJylcbiAgICAgIH07XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtLmFsaWduLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICgvXiAqLSs6ICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdyaWdodCc7XG4gICAgICAgIH0gZWxzZSBpZiAoL14gKjotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ2NlbnRlcic7XG4gICAgICAgIH0gZWxzZSBpZiAoL14gKjotKyAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnbGVmdCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbS5hbGlnbltpXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW0uY2VsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlbS5jZWxsc1tpXSA9IGl0ZW0uY2VsbHNbaV1cbiAgICAgICAgICAucmVwbGFjZSgvXiAqXFx8ICp8ICpcXHwgKiQvZywgJycpXG4gICAgICAgICAgLnNwbGl0KC8gKlxcfCAqLyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2goaXRlbSk7XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRvcC1sZXZlbCBwYXJhZ3JhcGhcbiAgICBpZiAodG9wICYmIChjYXAgPSB0aGlzLnJ1bGVzLnBhcmFncmFwaC5leGVjKHNyYykpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdwYXJhZ3JhcGgnLFxuICAgICAgICB0ZXh0OiBjYXBbMV0uY2hhckF0KGNhcFsxXS5sZW5ndGggLSAxKSA9PT0gJ1xcbidcbiAgICAgICAgICA/IGNhcFsxXS5zbGljZSgwLCAtMSlcbiAgICAgICAgICA6IGNhcFsxXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB0ZXh0XG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMudGV4dC5leGVjKHNyYykpIHtcbiAgICAgIC8vIFRvcC1sZXZlbCBzaG91bGQgbmV2ZXIgcmVhY2ggaGVyZS5cbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICB0ZXh0OiBjYXBbMF1cbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHNyYykge1xuICAgICAgdGhyb3cgbmV3XG4gICAgICAgIEVycm9yKCdJbmZpbml0ZSBsb29wIG9uIGJ5dGU6ICcgKyBzcmMuY2hhckNvZGVBdCgwKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXMudG9rZW5zO1xufTtcblxuLyoqXG4gKiBJbmxpbmUtTGV2ZWwgR3JhbW1hclxuICovXG5cbnZhciBpbmxpbmUgPSB7XG4gIGVzY2FwZTogL15cXFxcKFtcXFxcYCp7fVxcW1xcXSgpIytcXC0uIV8+XSkvLFxuICBhdXRvbGluazogL148KFteID5dKyhAfDpcXC8pW14gPl0rKT4vLFxuICB1cmw6IG5vb3AsXG4gIHRhZzogL148IS0tW1xcc1xcU10qPy0tPnxePFxcLz9cXHcrKD86XCJbXlwiXSpcInwnW14nXSonfFteJ1wiPl0pKj8+LyxcbiAgbGluazogL14hP1xcWyhpbnNpZGUpXFxdXFwoaHJlZlxcKS8sXG4gIHJlZmxpbms6IC9eIT9cXFsoaW5zaWRlKVxcXVxccypcXFsoW15cXF1dKilcXF0vLFxuICBub2xpbms6IC9eIT9cXFsoKD86XFxbW15cXF1dKlxcXXxbXlxcW1xcXV0pKilcXF0vLFxuICBzdHJvbmc6IC9eX18oW1xcc1xcU10rPylfXyg/IV8pfF5cXCpcXCooW1xcc1xcU10rPylcXCpcXCooPyFcXCopLyxcbiAgZW06IC9eXFxiXygoPzpbXl9dfF9fKSs/KV9cXGJ8XlxcKigoPzpcXCpcXCp8W1xcc1xcU10pKz8pXFwqKD8hXFwqKS8sXG4gIGNvZGU6IC9eKGArKVxccyooW1xcc1xcU10qP1teYF0pXFxzKlxcMSg/IWApLyxcbiAgYnI6IC9eIHsyLH1cXG4oPyFcXHMqJCkvLFxuICBkZWw6IG5vb3AsXG4gIHRleHQ6IC9eW1xcc1xcU10rPyg/PVtcXFxcPCFcXFtfKmBdfCB7Mix9XFxufCQpL1xufTtcblxuaW5saW5lLl9pbnNpZGUgPSAvKD86XFxbW15cXF1dKlxcXXxbXlxcW1xcXV18XFxdKD89W15cXFtdKlxcXSkpKi87XG5pbmxpbmUuX2hyZWYgPSAvXFxzKjw/KFtcXHNcXFNdKj8pPj8oPzpcXHMrWydcIl0oW1xcc1xcU10qPylbJ1wiXSk/XFxzKi87XG5cbmlubGluZS5saW5rID0gcmVwbGFjZShpbmxpbmUubGluaylcbiAgKCdpbnNpZGUnLCBpbmxpbmUuX2luc2lkZSlcbiAgKCdocmVmJywgaW5saW5lLl9ocmVmKVxuICAoKTtcblxuaW5saW5lLnJlZmxpbmsgPSByZXBsYWNlKGlubGluZS5yZWZsaW5rKVxuICAoJ2luc2lkZScsIGlubGluZS5faW5zaWRlKVxuICAoKTtcblxuLyoqXG4gKiBOb3JtYWwgSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUubm9ybWFsID0gbWVyZ2Uoe30sIGlubGluZSk7XG5cbi8qKlxuICogUGVkYW50aWMgSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUucGVkYW50aWMgPSBtZXJnZSh7fSwgaW5saW5lLm5vcm1hbCwge1xuICBzdHJvbmc6IC9eX18oPz1cXFMpKFtcXHNcXFNdKj9cXFMpX18oPyFfKXxeXFwqXFwqKD89XFxTKShbXFxzXFxTXSo/XFxTKVxcKlxcKig/IVxcKikvLFxuICBlbTogL15fKD89XFxTKShbXFxzXFxTXSo/XFxTKV8oPyFfKXxeXFwqKD89XFxTKShbXFxzXFxTXSo/XFxTKVxcKig/IVxcKikvXG59KTtcblxuLyoqXG4gKiBHRk0gSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUuZ2ZtID0gbWVyZ2Uoe30sIGlubGluZS5ub3JtYWwsIHtcbiAgZXNjYXBlOiByZXBsYWNlKGlubGluZS5lc2NhcGUpKCddKScsICd+fF0pJykoKSxcbiAgdXJsOiAvXihodHRwcz86XFwvXFwvW15cXHM8XStbXjwuLDo7XCInKVxcXVxcc10pLyxcbiAgZGVsOiAvXn5+KD89XFxTKShbXFxzXFxTXSo/XFxTKX5+LyxcbiAgdGV4dDogcmVwbGFjZShpbmxpbmUudGV4dClcbiAgICAoJ118JywgJ35dfCcpXG4gICAgKCd8JywgJ3xodHRwcz86Ly98JylcbiAgICAoKVxufSk7XG5cbi8qKlxuICogR0ZNICsgTGluZSBCcmVha3MgSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUuYnJlYWtzID0gbWVyZ2Uoe30sIGlubGluZS5nZm0sIHtcbiAgYnI6IHJlcGxhY2UoaW5saW5lLmJyKSgnezIsfScsICcqJykoKSxcbiAgdGV4dDogcmVwbGFjZShpbmxpbmUuZ2ZtLnRleHQpKCd7Mix9JywgJyonKSgpXG59KTtcblxuLyoqXG4gKiBJbmxpbmUgTGV4ZXIgJiBDb21waWxlclxuICovXG5cbmZ1bmN0aW9uIElubGluZUxleGVyKGxpbmtzLCBvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgbWFya2VkLmRlZmF1bHRzO1xuICB0aGlzLmxpbmtzID0gbGlua3M7XG4gIHRoaXMucnVsZXMgPSBpbmxpbmUubm9ybWFsO1xuICB0aGlzLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyIHx8IG5ldyBSZW5kZXJlcjtcbiAgdGhpcy5yZW5kZXJlci5vcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gIGlmICghdGhpcy5saW5rcykge1xuICAgIHRocm93IG5ld1xuICAgICAgRXJyb3IoJ1Rva2VucyBhcnJheSByZXF1aXJlcyBhIGBsaW5rc2AgcHJvcGVydHkuJyk7XG4gIH1cblxuICBpZiAodGhpcy5vcHRpb25zLmdmbSkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYnJlYWtzKSB7XG4gICAgICB0aGlzLnJ1bGVzID0gaW5saW5lLmJyZWFrcztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ydWxlcyA9IGlubGluZS5nZm07XG4gICAgfVxuICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgIHRoaXMucnVsZXMgPSBpbmxpbmUucGVkYW50aWM7XG4gIH1cbn1cblxuLyoqXG4gKiBFeHBvc2UgSW5saW5lIFJ1bGVzXG4gKi9cblxuSW5saW5lTGV4ZXIucnVsZXMgPSBpbmxpbmU7XG5cbi8qKlxuICogU3RhdGljIExleGluZy9Db21waWxpbmcgTWV0aG9kXG4gKi9cblxuSW5saW5lTGV4ZXIub3V0cHV0ID0gZnVuY3Rpb24oc3JjLCBsaW5rcywgb3B0aW9ucykge1xuICB2YXIgaW5saW5lID0gbmV3IElubGluZUxleGVyKGxpbmtzLCBvcHRpb25zKTtcbiAgcmV0dXJuIGlubGluZS5vdXRwdXQoc3JjKTtcbn07XG5cbi8qKlxuICogTGV4aW5nL0NvbXBpbGluZ1xuICovXG5cbklubGluZUxleGVyLnByb3RvdHlwZS5vdXRwdXQgPSBmdW5jdGlvbihzcmMpIHtcbiAgdmFyIG91dCA9ICcnXG4gICAgLCBsaW5rXG4gICAgLCB0ZXh0XG4gICAgLCBocmVmXG4gICAgLCBjYXA7XG5cbiAgd2hpbGUgKHNyYykge1xuICAgIC8vIGVzY2FwZVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmVzY2FwZS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gY2FwWzFdO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gYXV0b2xpbmtcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5hdXRvbGluay5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBpZiAoY2FwWzJdID09PSAnQCcpIHtcbiAgICAgICAgdGV4dCA9IGNhcFsxXS5jaGFyQXQoNikgPT09ICc6J1xuICAgICAgICAgID8gdGhpcy5tYW5nbGUoY2FwWzFdLnN1YnN0cmluZyg3KSlcbiAgICAgICAgICA6IHRoaXMubWFuZ2xlKGNhcFsxXSk7XG4gICAgICAgIGhyZWYgPSB0aGlzLm1hbmdsZSgnbWFpbHRvOicpICsgdGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRleHQgPSBlc2NhcGUoY2FwWzFdKTtcbiAgICAgICAgaHJlZiA9IHRleHQ7XG4gICAgICB9XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5saW5rKGhyZWYsIG51bGwsIHRleHQpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdXJsIChnZm0pXG4gICAgaWYgKCF0aGlzLmluTGluayAmJiAoY2FwID0gdGhpcy5ydWxlcy51cmwuZXhlYyhzcmMpKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRleHQgPSBlc2NhcGUoY2FwWzFdKTtcbiAgICAgIGhyZWYgPSB0ZXh0O1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIubGluayhocmVmLCBudWxsLCB0ZXh0KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRhZ1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLnRhZy5leGVjKHNyYykpIHtcbiAgICAgIGlmICghdGhpcy5pbkxpbmsgJiYgL148YSAvaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5pbkxpbmsgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmluTGluayAmJiAvXjxcXC9hPi9pLnRlc3QoY2FwWzBdKSkge1xuICAgICAgICB0aGlzLmluTGluayA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLm9wdGlvbnMuc2FuaXRpemVcbiAgICAgICAgPyB0aGlzLm9wdGlvbnMuc2FuaXRpemVyXG4gICAgICAgICAgPyB0aGlzLm9wdGlvbnMuc2FuaXRpemVyKGNhcFswXSlcbiAgICAgICAgICA6IGVzY2FwZShjYXBbMF0pXG4gICAgICAgIDogY2FwWzBdXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBsaW5rXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMubGluay5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLmluTGluayA9IHRydWU7XG4gICAgICBvdXQgKz0gdGhpcy5vdXRwdXRMaW5rKGNhcCwge1xuICAgICAgICBocmVmOiBjYXBbMl0sXG4gICAgICAgIHRpdGxlOiBjYXBbM11cbiAgICAgIH0pO1xuICAgICAgdGhpcy5pbkxpbmsgPSBmYWxzZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHJlZmxpbmssIG5vbGlua1xuICAgIGlmICgoY2FwID0gdGhpcy5ydWxlcy5yZWZsaW5rLmV4ZWMoc3JjKSlcbiAgICAgICAgfHwgKGNhcCA9IHRoaXMucnVsZXMubm9saW5rLmV4ZWMoc3JjKSkpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBsaW5rID0gKGNhcFsyXSB8fCBjYXBbMV0pLnJlcGxhY2UoL1xccysvZywgJyAnKTtcbiAgICAgIGxpbmsgPSB0aGlzLmxpbmtzW2xpbmsudG9Mb3dlckNhc2UoKV07XG4gICAgICBpZiAoIWxpbmsgfHwgIWxpbmsuaHJlZikge1xuICAgICAgICBvdXQgKz0gY2FwWzBdLmNoYXJBdCgwKTtcbiAgICAgICAgc3JjID0gY2FwWzBdLnN1YnN0cmluZygxKSArIHNyYztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0aGlzLmluTGluayA9IHRydWU7XG4gICAgICBvdXQgKz0gdGhpcy5vdXRwdXRMaW5rKGNhcCwgbGluayk7XG4gICAgICB0aGlzLmluTGluayA9IGZhbHNlO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gc3Ryb25nXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuc3Ryb25nLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLnN0cm9uZyh0aGlzLm91dHB1dChjYXBbMl0gfHwgY2FwWzFdKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBlbVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmVtLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmVtKHRoaXMub3V0cHV0KGNhcFsyXSB8fCBjYXBbMV0pKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGNvZGVcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5jb2RlLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmNvZGVzcGFuKGVzY2FwZShjYXBbMl0sIHRydWUpKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGJyXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuYnIuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuYnIoKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGRlbCAoZ2ZtKVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmRlbC5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5kZWwodGhpcy5vdXRwdXQoY2FwWzFdKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB0ZXh0XG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMudGV4dC5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci50ZXh0KGVzY2FwZSh0aGlzLnNtYXJ0eXBhbnRzKGNhcFswXSkpKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChzcmMpIHtcbiAgICAgIHRocm93IG5ld1xuICAgICAgICBFcnJvcignSW5maW5pdGUgbG9vcCBvbiBieXRlOiAnICsgc3JjLmNoYXJDb2RlQXQoMCkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIENvbXBpbGUgTGlua1xuICovXG5cbklubGluZUxleGVyLnByb3RvdHlwZS5vdXRwdXRMaW5rID0gZnVuY3Rpb24oY2FwLCBsaW5rKSB7XG4gIHZhciBocmVmID0gZXNjYXBlKGxpbmsuaHJlZilcbiAgICAsIHRpdGxlID0gbGluay50aXRsZSA/IGVzY2FwZShsaW5rLnRpdGxlKSA6IG51bGw7XG5cbiAgcmV0dXJuIGNhcFswXS5jaGFyQXQoMCkgIT09ICchJ1xuICAgID8gdGhpcy5yZW5kZXJlci5saW5rKGhyZWYsIHRpdGxlLCB0aGlzLm91dHB1dChjYXBbMV0pKVxuICAgIDogdGhpcy5yZW5kZXJlci5pbWFnZShocmVmLCB0aXRsZSwgZXNjYXBlKGNhcFsxXSkpO1xufTtcblxuLyoqXG4gKiBTbWFydHlwYW50cyBUcmFuc2Zvcm1hdGlvbnNcbiAqL1xuXG5JbmxpbmVMZXhlci5wcm90b3R5cGUuc21hcnR5cGFudHMgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIGlmICghdGhpcy5vcHRpb25zLnNtYXJ0eXBhbnRzKSByZXR1cm4gdGV4dDtcbiAgcmV0dXJuIHRleHRcbiAgICAvLyBlbS1kYXNoZXNcbiAgICAucmVwbGFjZSgvLS0tL2csICdcXHUyMDE0JylcbiAgICAvLyBlbi1kYXNoZXNcbiAgICAucmVwbGFjZSgvLS0vZywgJ1xcdTIwMTMnKVxuICAgIC8vIG9wZW5pbmcgc2luZ2xlc1xuICAgIC5yZXBsYWNlKC8oXnxbLVxcdTIwMTQvKFxcW3tcIlxcc10pJy9nLCAnJDFcXHUyMDE4JylcbiAgICAvLyBjbG9zaW5nIHNpbmdsZXMgJiBhcG9zdHJvcGhlc1xuICAgIC5yZXBsYWNlKC8nL2csICdcXHUyMDE5JylcbiAgICAvLyBvcGVuaW5nIGRvdWJsZXNcbiAgICAucmVwbGFjZSgvKF58Wy1cXHUyMDE0LyhcXFt7XFx1MjAxOFxcc10pXCIvZywgJyQxXFx1MjAxYycpXG4gICAgLy8gY2xvc2luZyBkb3VibGVzXG4gICAgLnJlcGxhY2UoL1wiL2csICdcXHUyMDFkJylcbiAgICAvLyBlbGxpcHNlc1xuICAgIC5yZXBsYWNlKC9cXC57M30vZywgJ1xcdTIwMjYnKTtcbn07XG5cbi8qKlxuICogTWFuZ2xlIExpbmtzXG4gKi9cblxuSW5saW5lTGV4ZXIucHJvdG90eXBlLm1hbmdsZSA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgaWYgKCF0aGlzLm9wdGlvbnMubWFuZ2xlKSByZXR1cm4gdGV4dDtcbiAgdmFyIG91dCA9ICcnXG4gICAgLCBsID0gdGV4dC5sZW5ndGhcbiAgICAsIGkgPSAwXG4gICAgLCBjaDtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIGNoID0gdGV4dC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChNYXRoLnJhbmRvbSgpID4gMC41KSB7XG4gICAgICBjaCA9ICd4JyArIGNoLnRvU3RyaW5nKDE2KTtcbiAgICB9XG4gICAgb3V0ICs9ICcmIycgKyBjaCArICc7JztcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFJlbmRlcmVyXG4gKi9cblxuZnVuY3Rpb24gUmVuZGVyZXIob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xufVxuXG5SZW5kZXJlci5wcm90b3R5cGUuY29kZSA9IGZ1bmN0aW9uKGNvZGUsIGxhbmcsIGVzY2FwZWQpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5oaWdobGlnaHQpIHtcbiAgICB2YXIgb3V0ID0gdGhpcy5vcHRpb25zLmhpZ2hsaWdodChjb2RlLCBsYW5nKTtcbiAgICBpZiAob3V0ICE9IG51bGwgJiYgb3V0ICE9PSBjb2RlKSB7XG4gICAgICBlc2NhcGVkID0gdHJ1ZTtcbiAgICAgIGNvZGUgPSBvdXQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFsYW5nKSB7XG4gICAgcmV0dXJuICc8cHJlPjxjb2RlPidcbiAgICAgICsgKGVzY2FwZWQgPyBjb2RlIDogZXNjYXBlKGNvZGUsIHRydWUpKVxuICAgICAgKyAnXFxuPC9jb2RlPjwvcHJlPic7XG4gIH1cblxuICByZXR1cm4gJzxwcmU+PGNvZGUgY2xhc3M9XCInXG4gICAgKyB0aGlzLm9wdGlvbnMubGFuZ1ByZWZpeFxuICAgICsgZXNjYXBlKGxhbmcsIHRydWUpXG4gICAgKyAnXCI+J1xuICAgICsgKGVzY2FwZWQgPyBjb2RlIDogZXNjYXBlKGNvZGUsIHRydWUpKVxuICAgICsgJ1xcbjwvY29kZT48L3ByZT5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmJsb2NrcXVvdGUgPSBmdW5jdGlvbihxdW90ZSkge1xuICByZXR1cm4gJzxibG9ja3F1b3RlPlxcbicgKyBxdW90ZSArICc8L2Jsb2NrcXVvdGU+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5odG1sID0gZnVuY3Rpb24oaHRtbCkge1xuICByZXR1cm4gaHRtbDtcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5oZWFkaW5nID0gZnVuY3Rpb24odGV4dCwgbGV2ZWwsIHJhdykge1xuICByZXR1cm4gJzxoJ1xuICAgICsgbGV2ZWxcbiAgICArICcgaWQ9XCInXG4gICAgKyB0aGlzLm9wdGlvbnMuaGVhZGVyUHJlZml4XG4gICAgKyByYXcudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXlxcd10rL2csICctJylcbiAgICArICdcIj4nXG4gICAgKyB0ZXh0XG4gICAgKyAnPC9oJ1xuICAgICsgbGV2ZWxcbiAgICArICc+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5ociA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vcHRpb25zLnhodG1sID8gJzxoci8+XFxuJyA6ICc8aHI+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5saXN0ID0gZnVuY3Rpb24oYm9keSwgb3JkZXJlZCkge1xuICB2YXIgdHlwZSA9IG9yZGVyZWQgPyAnb2wnIDogJ3VsJztcbiAgcmV0dXJuICc8JyArIHR5cGUgKyAnPlxcbicgKyBib2R5ICsgJzwvJyArIHR5cGUgKyAnPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUubGlzdGl0ZW0gPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiAnPGxpPicgKyB0ZXh0ICsgJzwvbGk+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5wYXJhZ3JhcGggPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiAnPHA+JyArIHRleHQgKyAnPC9wPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUudGFibGUgPSBmdW5jdGlvbihoZWFkZXIsIGJvZHkpIHtcbiAgcmV0dXJuICc8dGFibGU+XFxuJ1xuICAgICsgJzx0aGVhZD5cXG4nXG4gICAgKyBoZWFkZXJcbiAgICArICc8L3RoZWFkPlxcbidcbiAgICArICc8dGJvZHk+XFxuJ1xuICAgICsgYm9keVxuICAgICsgJzwvdGJvZHk+XFxuJ1xuICAgICsgJzwvdGFibGU+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS50YWJsZXJvdyA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgcmV0dXJuICc8dHI+XFxuJyArIGNvbnRlbnQgKyAnPC90cj5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLnRhYmxlY2VsbCA9IGZ1bmN0aW9uKGNvbnRlbnQsIGZsYWdzKSB7XG4gIHZhciB0eXBlID0gZmxhZ3MuaGVhZGVyID8gJ3RoJyA6ICd0ZCc7XG4gIHZhciB0YWcgPSBmbGFncy5hbGlnblxuICAgID8gJzwnICsgdHlwZSArICcgc3R5bGU9XCJ0ZXh0LWFsaWduOicgKyBmbGFncy5hbGlnbiArICdcIj4nXG4gICAgOiAnPCcgKyB0eXBlICsgJz4nO1xuICByZXR1cm4gdGFnICsgY29udGVudCArICc8LycgKyB0eXBlICsgJz5cXG4nO1xufTtcblxuLy8gc3BhbiBsZXZlbCByZW5kZXJlclxuUmVuZGVyZXIucHJvdG90eXBlLnN0cm9uZyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8c3Ryb25nPicgKyB0ZXh0ICsgJzwvc3Ryb25nPic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuZW0gPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiAnPGVtPicgKyB0ZXh0ICsgJzwvZW0+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5jb2Rlc3BhbiA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8Y29kZT4nICsgdGV4dCArICc8L2NvZGU+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5iciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vcHRpb25zLnhodG1sID8gJzxici8+JyA6ICc8YnI+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5kZWwgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiAnPGRlbD4nICsgdGV4dCArICc8L2RlbD4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmxpbmsgPSBmdW5jdGlvbihocmVmLCB0aXRsZSwgdGV4dCkge1xuICBpZiAodGhpcy5vcHRpb25zLnNhbml0aXplKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBwcm90ID0gZGVjb2RlVVJJQ29tcG9uZW50KHVuZXNjYXBlKGhyZWYpKVxuICAgICAgICAucmVwbGFjZSgvW15cXHc6XS9nLCAnJylcbiAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBpZiAocHJvdC5pbmRleE9mKCdqYXZhc2NyaXB0OicpID09PSAwIHx8IHByb3QuaW5kZXhPZigndmJzY3JpcHQ6JykgPT09IDApIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbiAgdmFyIG91dCA9ICc8YSBocmVmPVwiJyArIGhyZWYgKyAnXCInO1xuICBpZiAodGl0bGUpIHtcbiAgICBvdXQgKz0gJyB0aXRsZT1cIicgKyB0aXRsZSArICdcIic7XG4gIH1cbiAgb3V0ICs9ICc+JyArIHRleHQgKyAnPC9hPic7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuaW1hZ2UgPSBmdW5jdGlvbihocmVmLCB0aXRsZSwgdGV4dCkge1xuICB2YXIgb3V0ID0gJzxpbWcgc3JjPVwiJyArIGhyZWYgKyAnXCIgYWx0PVwiJyArIHRleHQgKyAnXCInO1xuICBpZiAodGl0bGUpIHtcbiAgICBvdXQgKz0gJyB0aXRsZT1cIicgKyB0aXRsZSArICdcIic7XG4gIH1cbiAgb3V0ICs9IHRoaXMub3B0aW9ucy54aHRtbCA/ICcvPicgOiAnPic7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuIHRleHQ7XG59O1xuXG4vKipcbiAqIFBhcnNpbmcgJiBDb21waWxpbmdcbiAqL1xuXG5mdW5jdGlvbiBQYXJzZXIob3B0aW9ucykge1xuICB0aGlzLnRva2VucyA9IFtdO1xuICB0aGlzLnRva2VuID0gbnVsbDtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBtYXJrZWQuZGVmYXVsdHM7XG4gIHRoaXMub3B0aW9ucy5yZW5kZXJlciA9IHRoaXMub3B0aW9ucy5yZW5kZXJlciB8fCBuZXcgUmVuZGVyZXI7XG4gIHRoaXMucmVuZGVyZXIgPSB0aGlzLm9wdGlvbnMucmVuZGVyZXI7XG4gIHRoaXMucmVuZGVyZXIub3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbn1cblxuLyoqXG4gKiBTdGF0aWMgUGFyc2UgTWV0aG9kXG4gKi9cblxuUGFyc2VyLnBhcnNlID0gZnVuY3Rpb24oc3JjLCBvcHRpb25zLCByZW5kZXJlcikge1xuICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcihvcHRpb25zLCByZW5kZXJlcik7XG4gIHJldHVybiBwYXJzZXIucGFyc2Uoc3JjKTtcbn07XG5cbi8qKlxuICogUGFyc2UgTG9vcFxuICovXG5cblBhcnNlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbihzcmMpIHtcbiAgdGhpcy5pbmxpbmUgPSBuZXcgSW5saW5lTGV4ZXIoc3JjLmxpbmtzLCB0aGlzLm9wdGlvbnMsIHRoaXMucmVuZGVyZXIpO1xuICB0aGlzLnRva2VucyA9IHNyYy5yZXZlcnNlKCk7XG5cbiAgdmFyIG91dCA9ICcnO1xuICB3aGlsZSAodGhpcy5uZXh0KCkpIHtcbiAgICBvdXQgKz0gdGhpcy50b2soKTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIE5leHQgVG9rZW5cbiAqL1xuXG5QYXJzZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudG9rZW4gPSB0aGlzLnRva2Vucy5wb3AoKTtcbn07XG5cbi8qKlxuICogUHJldmlldyBOZXh0IFRva2VuXG4gKi9cblxuUGFyc2VyLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnRva2Vuc1t0aGlzLnRva2Vucy5sZW5ndGggLSAxXSB8fCAwO1xufTtcblxuLyoqXG4gKiBQYXJzZSBUZXh0IFRva2Vuc1xuICovXG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VUZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBib2R5ID0gdGhpcy50b2tlbi50ZXh0O1xuXG4gIHdoaWxlICh0aGlzLnBlZWsoKS50eXBlID09PSAndGV4dCcpIHtcbiAgICBib2R5ICs9ICdcXG4nICsgdGhpcy5uZXh0KCkudGV4dDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmlubGluZS5vdXRwdXQoYm9keSk7XG59O1xuXG4vKipcbiAqIFBhcnNlIEN1cnJlbnQgVG9rZW5cbiAqL1xuXG5QYXJzZXIucHJvdG90eXBlLnRvayA9IGZ1bmN0aW9uKCkge1xuICBzd2l0Y2ggKHRoaXMudG9rZW4udHlwZSkge1xuICAgIGNhc2UgJ3NwYWNlJzoge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBjYXNlICdocic6IHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmhyKCk7XG4gICAgfVxuICAgIGNhc2UgJ2hlYWRpbmcnOiB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5oZWFkaW5nKFxuICAgICAgICB0aGlzLmlubGluZS5vdXRwdXQodGhpcy50b2tlbi50ZXh0KSxcbiAgICAgICAgdGhpcy50b2tlbi5kZXB0aCxcbiAgICAgICAgdGhpcy50b2tlbi50ZXh0KTtcbiAgICB9XG4gICAgY2FzZSAnY29kZSc6IHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmNvZGUodGhpcy50b2tlbi50ZXh0LFxuICAgICAgICB0aGlzLnRva2VuLmxhbmcsXG4gICAgICAgIHRoaXMudG9rZW4uZXNjYXBlZCk7XG4gICAgfVxuICAgIGNhc2UgJ3RhYmxlJzoge1xuICAgICAgdmFyIGhlYWRlciA9ICcnXG4gICAgICAgICwgYm9keSA9ICcnXG4gICAgICAgICwgaVxuICAgICAgICAsIHJvd1xuICAgICAgICAsIGNlbGxcbiAgICAgICAgLCBmbGFnc1xuICAgICAgICAsIGo7XG5cbiAgICAgIC8vIGhlYWRlclxuICAgICAgY2VsbCA9ICcnO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMudG9rZW4uaGVhZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZsYWdzID0geyBoZWFkZXI6IHRydWUsIGFsaWduOiB0aGlzLnRva2VuLmFsaWduW2ldIH07XG4gICAgICAgIGNlbGwgKz0gdGhpcy5yZW5kZXJlci50YWJsZWNlbGwoXG4gICAgICAgICAgdGhpcy5pbmxpbmUub3V0cHV0KHRoaXMudG9rZW4uaGVhZGVyW2ldKSxcbiAgICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgYWxpZ246IHRoaXMudG9rZW4uYWxpZ25baV0gfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaGVhZGVyICs9IHRoaXMucmVuZGVyZXIudGFibGVyb3coY2VsbCk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnRva2VuLmNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJvdyA9IHRoaXMudG9rZW4uY2VsbHNbaV07XG5cbiAgICAgICAgY2VsbCA9ICcnO1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgcm93Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY2VsbCArPSB0aGlzLnJlbmRlcmVyLnRhYmxlY2VsbChcbiAgICAgICAgICAgIHRoaXMuaW5saW5lLm91dHB1dChyb3dbal0pLFxuICAgICAgICAgICAgeyBoZWFkZXI6IGZhbHNlLCBhbGlnbjogdGhpcy50b2tlbi5hbGlnbltqXSB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJvZHkgKz0gdGhpcy5yZW5kZXJlci50YWJsZXJvdyhjZWxsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLnRhYmxlKGhlYWRlciwgYm9keSk7XG4gICAgfVxuICAgIGNhc2UgJ2Jsb2NrcXVvdGVfc3RhcnQnOiB7XG4gICAgICB2YXIgYm9keSA9ICcnO1xuXG4gICAgICB3aGlsZSAodGhpcy5uZXh0KCkudHlwZSAhPT0gJ2Jsb2NrcXVvdGVfZW5kJykge1xuICAgICAgICBib2R5ICs9IHRoaXMudG9rKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmJsb2NrcXVvdGUoYm9keSk7XG4gICAgfVxuICAgIGNhc2UgJ2xpc3Rfc3RhcnQnOiB7XG4gICAgICB2YXIgYm9keSA9ICcnXG4gICAgICAgICwgb3JkZXJlZCA9IHRoaXMudG9rZW4ub3JkZXJlZDtcblxuICAgICAgd2hpbGUgKHRoaXMubmV4dCgpLnR5cGUgIT09ICdsaXN0X2VuZCcpIHtcbiAgICAgICAgYm9keSArPSB0aGlzLnRvaygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5saXN0KGJvZHksIG9yZGVyZWQpO1xuICAgIH1cbiAgICBjYXNlICdsaXN0X2l0ZW1fc3RhcnQnOiB7XG4gICAgICB2YXIgYm9keSA9ICcnO1xuXG4gICAgICB3aGlsZSAodGhpcy5uZXh0KCkudHlwZSAhPT0gJ2xpc3RfaXRlbV9lbmQnKSB7XG4gICAgICAgIGJvZHkgKz0gdGhpcy50b2tlbi50eXBlID09PSAndGV4dCdcbiAgICAgICAgICA/IHRoaXMucGFyc2VUZXh0KClcbiAgICAgICAgICA6IHRoaXMudG9rKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmxpc3RpdGVtKGJvZHkpO1xuICAgIH1cbiAgICBjYXNlICdsb29zZV9pdGVtX3N0YXJ0Jzoge1xuICAgICAgdmFyIGJvZHkgPSAnJztcblxuICAgICAgd2hpbGUgKHRoaXMubmV4dCgpLnR5cGUgIT09ICdsaXN0X2l0ZW1fZW5kJykge1xuICAgICAgICBib2R5ICs9IHRoaXMudG9rKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmxpc3RpdGVtKGJvZHkpO1xuICAgIH1cbiAgICBjYXNlICdodG1sJzoge1xuICAgICAgdmFyIGh0bWwgPSAhdGhpcy50b2tlbi5wcmUgJiYgIXRoaXMub3B0aW9ucy5wZWRhbnRpY1xuICAgICAgICA/IHRoaXMuaW5saW5lLm91dHB1dCh0aGlzLnRva2VuLnRleHQpXG4gICAgICAgIDogdGhpcy50b2tlbi50ZXh0O1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuaHRtbChodG1sKTtcbiAgICB9XG4gICAgY2FzZSAncGFyYWdyYXBoJzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIucGFyYWdyYXBoKHRoaXMuaW5saW5lLm91dHB1dCh0aGlzLnRva2VuLnRleHQpKTtcbiAgICB9XG4gICAgY2FzZSAndGV4dCc6IHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLnBhcmFncmFwaCh0aGlzLnBhcnNlVGV4dCgpKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogSGVscGVyc1xuICovXG5cbmZ1bmN0aW9uIGVzY2FwZShodG1sLCBlbmNvZGUpIHtcbiAgcmV0dXJuIGh0bWxcbiAgICAucmVwbGFjZSghZW5jb2RlID8gLyYoPyEjP1xcdys7KS9nIDogLyYvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JylcbiAgICAucmVwbGFjZSgvJy9nLCAnJiMzOTsnKTtcbn1cblxuZnVuY3Rpb24gdW5lc2NhcGUoaHRtbCkge1xuICByZXR1cm4gaHRtbC5yZXBsYWNlKC8mKFsjXFx3XSspOy9nLCBmdW5jdGlvbihfLCBuKSB7XG4gICAgbiA9IG4udG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobiA9PT0gJ2NvbG9uJykgcmV0dXJuICc6JztcbiAgICBpZiAobi5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgcmV0dXJuIG4uY2hhckF0KDEpID09PSAneCdcbiAgICAgICAgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KG4uc3Vic3RyaW5nKDIpLCAxNikpXG4gICAgICAgIDogU3RyaW5nLmZyb21DaGFyQ29kZSgrbi5zdWJzdHJpbmcoMSkpO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlKHJlZ2V4LCBvcHQpIHtcbiAgcmVnZXggPSByZWdleC5zb3VyY2U7XG4gIG9wdCA9IG9wdCB8fCAnJztcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlbGYobmFtZSwgdmFsKSB7XG4gICAgaWYgKCFuYW1lKSByZXR1cm4gbmV3IFJlZ0V4cChyZWdleCwgb3B0KTtcbiAgICB2YWwgPSB2YWwuc291cmNlIHx8IHZhbDtcbiAgICB2YWwgPSB2YWwucmVwbGFjZSgvKF58W15cXFtdKVxcXi9nLCAnJDEnKTtcbiAgICByZWdleCA9IHJlZ2V4LnJlcGxhY2UobmFtZSwgdmFsKTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5ub29wLmV4ZWMgPSBub29wO1xuXG5mdW5jdGlvbiBtZXJnZShvYmopIHtcbiAgdmFyIGkgPSAxXG4gICAgLCB0YXJnZXRcbiAgICAsIGtleTtcblxuICBmb3IgKDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHRhcmdldCA9IGFyZ3VtZW50c1tpXTtcbiAgICBmb3IgKGtleSBpbiB0YXJnZXQpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBrZXkpKSB7XG4gICAgICAgIG9ialtrZXldID0gdGFyZ2V0W2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuXG4vKipcbiAqIE1hcmtlZFxuICovXG5cbmZ1bmN0aW9uIG1hcmtlZChzcmMsIG9wdCwgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrIHx8IHR5cGVvZiBvcHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdDtcbiAgICAgIG9wdCA9IG51bGw7XG4gICAgfVxuXG4gICAgb3B0ID0gbWVyZ2Uoe30sIG1hcmtlZC5kZWZhdWx0cywgb3B0IHx8IHt9KTtcblxuICAgIHZhciBoaWdobGlnaHQgPSBvcHQuaGlnaGxpZ2h0XG4gICAgICAsIHRva2Vuc1xuICAgICAgLCBwZW5kaW5nXG4gICAgICAsIGkgPSAwO1xuXG4gICAgdHJ5IHtcbiAgICAgIHRva2VucyA9IExleGVyLmxleChzcmMsIG9wdClcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZSk7XG4gICAgfVxuXG4gICAgcGVuZGluZyA9IHRva2Vucy5sZW5ndGg7XG5cbiAgICB2YXIgZG9uZSA9IGZ1bmN0aW9uKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBvcHQuaGlnaGxpZ2h0ID0gaGlnaGxpZ2h0O1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG91dDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgb3V0ID0gUGFyc2VyLnBhcnNlKHRva2Vucywgb3B0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZXJyID0gZTtcbiAgICAgIH1cblxuICAgICAgb3B0LmhpZ2hsaWdodCA9IGhpZ2hsaWdodDtcblxuICAgICAgcmV0dXJuIGVyclxuICAgICAgICA/IGNhbGxiYWNrKGVycilcbiAgICAgICAgOiBjYWxsYmFjayhudWxsLCBvdXQpO1xuICAgIH07XG5cbiAgICBpZiAoIWhpZ2hsaWdodCB8fCBoaWdobGlnaHQubGVuZ3RoIDwgMykge1xuICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICB9XG5cbiAgICBkZWxldGUgb3B0LmhpZ2hsaWdodDtcblxuICAgIGlmICghcGVuZGluZykgcmV0dXJuIGRvbmUoKTtcblxuICAgIGZvciAoOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAoZnVuY3Rpb24odG9rZW4pIHtcbiAgICAgICAgaWYgKHRva2VuLnR5cGUgIT09ICdjb2RlJykge1xuICAgICAgICAgIHJldHVybiAtLXBlbmRpbmcgfHwgZG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoaWdobGlnaHQodG9rZW4udGV4dCwgdG9rZW4ubGFuZywgZnVuY3Rpb24oZXJyLCBjb2RlKSB7XG4gICAgICAgICAgaWYgKGVycikgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICBpZiAoY29kZSA9PSBudWxsIHx8IGNvZGUgPT09IHRva2VuLnRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiAtLXBlbmRpbmcgfHwgZG9uZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0b2tlbi50ZXh0ID0gY29kZTtcbiAgICAgICAgICB0b2tlbi5lc2NhcGVkID0gdHJ1ZTtcbiAgICAgICAgICAtLXBlbmRpbmcgfHwgZG9uZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pKHRva2Vuc1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG4gIHRyeSB7XG4gICAgaWYgKG9wdCkgb3B0ID0gbWVyZ2Uoe30sIG1hcmtlZC5kZWZhdWx0cywgb3B0KTtcbiAgICByZXR1cm4gUGFyc2VyLnBhcnNlKExleGVyLmxleChzcmMsIG9wdCksIG9wdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlLm1lc3NhZ2UgKz0gJ1xcblBsZWFzZSByZXBvcnQgdGhpcyB0byBodHRwczovL2dpdGh1Yi5jb20vY2hqai9tYXJrZWQuJztcbiAgICBpZiAoKG9wdCB8fCBtYXJrZWQuZGVmYXVsdHMpLnNpbGVudCkge1xuICAgICAgcmV0dXJuICc8cD5BbiBlcnJvciBvY2N1cmVkOjwvcD48cHJlPidcbiAgICAgICAgKyBlc2NhcGUoZS5tZXNzYWdlICsgJycsIHRydWUpXG4gICAgICAgICsgJzwvcHJlPic7XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH1cbn1cblxuLyoqXG4gKiBPcHRpb25zXG4gKi9cblxubWFya2VkLm9wdGlvbnMgPVxubWFya2VkLnNldE9wdGlvbnMgPSBmdW5jdGlvbihvcHQpIHtcbiAgbWVyZ2UobWFya2VkLmRlZmF1bHRzLCBvcHQpO1xuICByZXR1cm4gbWFya2VkO1xufTtcblxubWFya2VkLmRlZmF1bHRzID0ge1xuICBnZm06IHRydWUsXG4gIHRhYmxlczogdHJ1ZSxcbiAgYnJlYWtzOiBmYWxzZSxcbiAgcGVkYW50aWM6IGZhbHNlLFxuICBzYW5pdGl6ZTogZmFsc2UsXG4gIHNhbml0aXplcjogbnVsbCxcbiAgbWFuZ2xlOiB0cnVlLFxuICBzbWFydExpc3RzOiBmYWxzZSxcbiAgc2lsZW50OiBmYWxzZSxcbiAgaGlnaGxpZ2h0OiBudWxsLFxuICBsYW5nUHJlZml4OiAnbGFuZy0nLFxuICBzbWFydHlwYW50czogZmFsc2UsXG4gIGhlYWRlclByZWZpeDogJycsXG4gIHJlbmRlcmVyOiBuZXcgUmVuZGVyZXIsXG4gIHhodG1sOiBmYWxzZVxufTtcblxuLyoqXG4gKiBFeHBvc2VcbiAqL1xuXG5tYXJrZWQuUGFyc2VyID0gUGFyc2VyO1xubWFya2VkLnBhcnNlciA9IFBhcnNlci5wYXJzZTtcblxubWFya2VkLlJlbmRlcmVyID0gUmVuZGVyZXI7XG5cbm1hcmtlZC5MZXhlciA9IExleGVyO1xubWFya2VkLmxleGVyID0gTGV4ZXIubGV4O1xuXG5tYXJrZWQuSW5saW5lTGV4ZXIgPSBJbmxpbmVMZXhlcjtcbm1hcmtlZC5pbmxpbmVMZXhlciA9IElubGluZUxleGVyLm91dHB1dDtcblxubWFya2VkLnBhcnNlID0gbWFya2VkO1xuXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gbWFya2VkO1xufSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gbWFya2VkOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMubWFya2VkID0gbWFya2VkO1xufVxuXG59KS5jYWxsKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcyB8fCAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpO1xufSgpKTtcblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5dFlYSnJaV1F2YkdsaUwyMWhjbXRsWkM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCdFlYSnJaV1FnTFNCaElHMWhjbXRrYjNkdUlIQmhjbk5sY2x4dUlDb2dRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERXhMVEl3TVRRc0lFTm9jbWx6ZEc5d2FHVnlJRXBsWm1aeVpYa3VJQ2hOU1ZRZ1RHbGpaVzV6WldRcFhHNGdLaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2WTJocWFpOXRZWEpyWldSY2JpQXFMMXh1WEc0N0tHWjFibU4wYVc5dUtDa2dlMXh1WEc0dktpcGNiaUFxSUVKc2IyTnJMVXhsZG1Wc0lFZHlZVzF0WVhKY2JpQXFMMXh1WEc1MllYSWdZbXh2WTJzZ1BTQjdYRzRnSUc1bGQyeHBibVU2SUM5ZVhGeHVLeThzWEc0Z0lHTnZaR1U2SUM5ZUtDQjdOSDFiWGx4Y2JsMHJYRnh1S2lrckx5eGNiaUFnWm1WdVkyVnpPaUJ1YjI5d0xGeHVJQ0JvY2pvZ0wxNG9JQ3BiTFNwZlhTbDdNeXg5SUNvb1B6cGNYRzRyZkNRcEx5eGNiaUFnYUdWaFpHbHVaem9nTDE0Z0tpZ2plekVzTm4wcElDb29XMTVjWEc1ZEt6OHBJQ29qS2lBcUtEODZYRnh1SzN3a0tTOHNYRzRnSUc1d2RHRmliR1U2SUc1dmIzQXNYRzRnSUd4b1pXRmthVzVuT2lBdlhpaGJYbHhjYmwwcktWeGNiaUFxS0QxOExTbDdNaXg5SUNvb1B6cGNYRzRyZkNRcEx5eGNiaUFnWW14dlkydHhkVzkwWlRvZ0wxNG9JQ28rVzE1Y1hHNWRLeWhjWEc0b1B5RmtaV1lwVzE1Y1hHNWRLeWtxWEZ4dUtpa3JMeXhjYmlBZ2JHbHpkRG9nTDE0b0lDb3BLR0oxYkd3cElGdGNYSE5jWEZOZEt6OG9QenBvY254a1pXWjhYRnh1ZXpJc2ZTZy9JU0FwS0Q4aFhGd3hZblZzYkNBcFhGeHVLbnhjWEhNcUpDa3ZMRnh1SUNCb2RHMXNPaUF2WGlBcUtEODZZMjl0YldWdWRDQXFLRDg2WEZ4dWZGeGNjeW9rS1h4amJHOXpaV1FnS2lnL09seGNibnN5TEgxOFhGeHpLaVFwZkdOc2IzTnBibWNnS2lnL09seGNibnN5TEgxOFhGeHpLaVFwS1M4c1hHNGdJR1JsWmpvZ0wxNGdLbHhjV3loYlhseGNYVjByS1Z4Y1hUb2dLancvS0Z0ZVhGeHpQbDByS1Q0L0tEODZJQ3RiWENJb1hTaGJYbHhjYmwwcktWdGNJaWxkS1Q4Z0tpZy9PbHhjYml0OEpDa3ZMRnh1SUNCMFlXSnNaVG9nYm05dmNDeGNiaUFnY0dGeVlXZHlZWEJvT2lBdlhpZ29QenBiWGx4Y2JsMHJYRnh1UHlnL0lXaHlmR2hsWVdScGJtZDhiR2hsWVdScGJtZDhZbXh2WTJ0eGRXOTBaWHgwWVdkOFpHVm1LU2tyS1Z4Y2Jpb3ZMRnh1SUNCMFpYaDBPaUF2WGx0ZVhGeHVYU3N2WEc1OU8xeHVYRzVpYkc5amF5NWlkV3hzWlhRZ1BTQXZLRDg2V3lvckxWMThYRnhrSzF4Y0xpa3ZPMXh1WW14dlkyc3VhWFJsYlNBOUlDOWVLQ0FxS1NoaWRXeHNLU0JiWGx4Y2JsMHFLRDg2WEZ4dUtEOGhYRnd4WW5Wc2JDQXBXMTVjWEc1ZEtpa3FMenRjYm1Kc2IyTnJMbWwwWlcwZ1BTQnlaWEJzWVdObEtHSnNiMk5yTG1sMFpXMHNJQ2RuYlNjcFhHNGdJQ2d2WW5Wc2JDOW5MQ0JpYkc5amF5NWlkV3hzWlhRcFhHNGdJQ2dwTzF4dVhHNWliRzlqYXk1c2FYTjBJRDBnY21Wd2JHRmpaU2hpYkc5amF5NXNhWE4wS1Z4dUlDQW9MMkoxYkd3dlp5d2dZbXh2WTJzdVluVnNiR1YwS1Z4dUlDQW9KMmh5Snl3Z0oxeGNYRnh1S3lnL1BWeGNYRnd4UHlnL09sc3RLbDlkSUNvcGV6TXNmU2cvT2x4Y1hGeHVLM3drS1NrbktWeHVJQ0FvSjJSbFppY3NJQ2RjWEZ4Y2Jpc29QejBuSUNzZ1lteHZZMnN1WkdWbUxuTnZkWEpqWlNBcklDY3BKeWxjYmlBZ0tDazdYRzVjYm1Kc2IyTnJMbUpzYjJOcmNYVnZkR1VnUFNCeVpYQnNZV05sS0dKc2IyTnJMbUpzYjJOcmNYVnZkR1VwWEc0Z0lDZ25aR1ZtSnl3Z1lteHZZMnN1WkdWbUtWeHVJQ0FvS1R0Y2JseHVZbXh2WTJzdVgzUmhaeUE5SUNjb1B5RW9Qem9uWEc0Z0lDc2dKMkY4WlcxOGMzUnliMjVuZkhOdFlXeHNmSE44WTJsMFpYeHhmR1JtYm54aFltSnlmR1JoZEdGOGRHbHRaWHhqYjJSbEoxeHVJQ0FySUNkOGRtRnlmSE5oYlhCOGEySmtmSE4xWW54emRYQjhhWHhpZkhWOGJXRnlhM3h5ZFdKNWZISjBmSEp3ZkdKa2FYeGlaRzhuWEc0Z0lDc2dKM3h6Y0dGdWZHSnlmSGRpY254cGJuTjhaR1ZzZkdsdFp5bGNYRnhjWWlsY1hGeGNkeXNvUHlFNkwzeGJYbHhjWEZ4M1hGeGNYSE5BWFNwQUtWeGNYRnhpSnp0Y2JseHVZbXh2WTJzdWFIUnRiQ0E5SUhKbGNHeGhZMlVvWW14dlkyc3VhSFJ0YkNsY2JpQWdLQ2RqYjIxdFpXNTBKeXdnTHp3aExTMWJYRnh6WEZ4VFhTby9MUzArTHlsY2JpQWdLQ2RqYkc5elpXUW5MQ0F2UENoMFlXY3BXMXhjYzF4Y1UxMHJQenhjWEM5Y1hERStMeWxjYmlBZ0tDZGpiRzl6YVc1bkp5d2dMengwWVdjb1B6cGNJbHRlWENKZEtsd2lmQ2RiWGlkZEtpZDhXMTRuWENJK1hTa3FQejR2S1Z4dUlDQW9MM1JoWnk5bkxDQmliRzlqYXk1ZmRHRm5LVnh1SUNBb0tUdGNibHh1WW14dlkyc3VjR0Z5WVdkeVlYQm9JRDBnY21Wd2JHRmpaU2hpYkc5amF5NXdZWEpoWjNKaGNHZ3BYRzRnSUNnbmFISW5MQ0JpYkc5amF5NW9jaWxjYmlBZ0tDZG9aV0ZrYVc1bkp5d2dZbXh2WTJzdWFHVmhaR2x1WnlsY2JpQWdLQ2RzYUdWaFpHbHVaeWNzSUdKc2IyTnJMbXhvWldGa2FXNW5LVnh1SUNBb0oySnNiMk5yY1hWdmRHVW5MQ0JpYkc5amF5NWliRzlqYTNGMWIzUmxLVnh1SUNBb0ozUmhaeWNzSUNjOEp5QXJJR0pzYjJOckxsOTBZV2NwWEc0Z0lDZ25aR1ZtSnl3Z1lteHZZMnN1WkdWbUtWeHVJQ0FvS1R0Y2JseHVMeW9xWEc0Z0tpQk9iM0p0WVd3Z1FteHZZMnNnUjNKaGJXMWhjbHh1SUNvdlhHNWNibUpzYjJOckxtNXZjbTFoYkNBOUlHMWxjbWRsS0h0OUxDQmliRzlqYXlrN1hHNWNiaThxS2x4dUlDb2dSMFpOSUVKc2IyTnJJRWR5WVcxdFlYSmNiaUFxTDF4dVhHNWliRzlqYXk1blptMGdQU0J0WlhKblpTaDdmU3dnWW14dlkyc3VibTl5YldGc0xDQjdYRzRnSUdabGJtTmxjem9nTDE0Z0tpaGdlek1zZlh4K2V6TXNmU2xiSUZ4Y0xsMHFLRnhjVXlzcFB5QXFYRnh1S0Z0Y1hITmNYRk5kS2o4cFhGeHpLbHhjTVNBcUtEODZYRnh1SzN3a0tTOHNYRzRnSUhCaGNtRm5jbUZ3YURvZ0wxNHZMRnh1SUNCb1pXRmthVzVuT2lBdlhpQXFLQ043TVN3MmZTa2dLeWhiWGx4Y2JsMHJQeWtnS2lNcUlDb29QenBjWEc0cmZDUXBMMXh1ZlNrN1hHNWNibUpzYjJOckxtZG1iUzV3WVhKaFozSmhjR2dnUFNCeVpYQnNZV05sS0dKc2IyTnJMbkJoY21GbmNtRndhQ2xjYmlBZ0tDY29QeUVuTENBbktEOGhKMXh1SUNBZ0lDc2dZbXh2WTJzdVoyWnRMbVpsYm1ObGN5NXpiM1Z5WTJVdWNtVndiR0ZqWlNnblhGeGNYREVuTENBblhGeGNYREluS1NBcklDZDhKMXh1SUNBZ0lDc2dZbXh2WTJzdWJHbHpkQzV6YjNWeVkyVXVjbVZ3YkdGalpTZ25YRnhjWERFbkxDQW5YRnhjWERNbktTQXJJQ2Q4SnlsY2JpQWdLQ2s3WEc1Y2JpOHFLbHh1SUNvZ1IwWk5JQ3NnVkdGaWJHVnpJRUpzYjJOcklFZHlZVzF0WVhKY2JpQXFMMXh1WEc1aWJHOWpheTUwWVdKc1pYTWdQU0J0WlhKblpTaDdmU3dnWW14dlkyc3VaMlp0TENCN1hHNGdJRzV3ZEdGaWJHVTZJQzllSUNvb1hGeFRMaXBjWEh3dUtpbGNYRzRnS2loYkxUcGRLeUFxWEZ4OFd5MThJRHBkS2lsY1hHNG9LRDg2TGlwY1hId3VLaWcvT2x4Y2Jud2tLU2txS1Z4Y2Jpb3ZMRnh1SUNCMFlXSnNaVG9nTDE0Z0tseGNmQ2d1S3lsY1hHNGdLbHhjZkNnZ0tsc3RPbDByV3kxOElEcGRLaWxjWEc0b0tEODZJQ3BjWEh3dUtpZy9PbHhjYm53a0tTa3FLVnhjYmlvdlhHNTlLVHRjYmx4dUx5b3FYRzRnS2lCQ2JHOWpheUJNWlhobGNseHVJQ292WEc1Y2JtWjFibU4wYVc5dUlFeGxlR1Z5S0c5d2RHbHZibk1wSUh0Y2JpQWdkR2hwY3k1MGIydGxibk1nUFNCYlhUdGNiaUFnZEdocGN5NTBiMnRsYm5NdWJHbHVhM01nUFNCN2ZUdGNiaUFnZEdocGN5NXZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0J0WVhKclpXUXVaR1ZtWVhWc2RITTdYRzRnSUhSb2FYTXVjblZzWlhNZ1BTQmliRzlqYXk1dWIzSnRZV3c3WEc1Y2JpQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NW5abTBwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMblJoWW14bGN5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1eWRXeGxjeUE5SUdKc2IyTnJMblJoWW14bGN6dGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NXlkV3hsY3lBOUlHSnNiMk5yTG1kbWJUdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkZlSEJ2YzJVZ1FteHZZMnNnVW5Wc1pYTmNiaUFxTDF4dVhHNU1aWGhsY2k1eWRXeGxjeUE5SUdKc2IyTnJPMXh1WEc0dktpcGNiaUFxSUZOMFlYUnBZeUJNWlhnZ1RXVjBhRzlrWEc0Z0tpOWNibHh1VEdWNFpYSXViR1Y0SUQwZ1puVnVZM1JwYjI0b2MzSmpMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lIWmhjaUJzWlhobGNpQTlJRzVsZHlCTVpYaGxjaWh2Y0hScGIyNXpLVHRjYmlBZ2NtVjBkWEp1SUd4bGVHVnlMbXhsZUNoemNtTXBPMXh1ZlR0Y2JseHVMeW9xWEc0Z0tpQlFjbVZ3Y205alpYTnphVzVuWEc0Z0tpOWNibHh1VEdWNFpYSXVjSEp2ZEc5MGVYQmxMbXhsZUNBOUlHWjFibU4wYVc5dUtITnlZeWtnZTF4dUlDQnpjbU1nUFNCemNtTmNiaUFnSUNBdWNtVndiR0ZqWlNndlhGeHlYRnh1ZkZ4Y2NpOW5MQ0FuWEZ4dUp5bGNiaUFnSUNBdWNtVndiR0ZqWlNndlhGeDBMMmNzSUNjZ0lDQWdKeWxjYmlBZ0lDQXVjbVZ3YkdGalpTZ3ZYRngxTURCaE1DOW5MQ0FuSUNjcFhHNGdJQ0FnTG5KbGNHeGhZMlVvTDF4Y2RUSTBNalF2Wnl3Z0oxeGNiaWNwTzF4dVhHNGdJSEpsZEhWeWJpQjBhR2x6TG5SdmEyVnVLSE55WXl3Z2RISjFaU2s3WEc1OU8xeHVYRzR2S2lwY2JpQXFJRXhsZUdsdVoxeHVJQ292WEc1Y2JreGxlR1Z5TG5CeWIzUnZkSGx3WlM1MGIydGxiaUE5SUdaMWJtTjBhVzl1S0hOeVl5d2dkRzl3TENCaWNTa2dlMXh1SUNCMllYSWdjM0pqSUQwZ2MzSmpMbkpsY0d4aFkyVW9MMTRnS3lRdloyMHNJQ2NuS1Z4dUlDQWdJQ3dnYm1WNGRGeHVJQ0FnSUN3Z2JHOXZjMlZjYmlBZ0lDQXNJR05oY0Z4dUlDQWdJQ3dnWW5Wc2JGeHVJQ0FnSUN3Z1lseHVJQ0FnSUN3Z2FYUmxiVnh1SUNBZ0lDd2djM0JoWTJWY2JpQWdJQ0FzSUdsY2JpQWdJQ0FzSUd3N1hHNWNiaUFnZDJocGJHVWdLSE55WXlrZ2UxeHVJQ0FnSUM4dklHNWxkMnhwYm1WY2JpQWdJQ0JwWmlBb1kyRndJRDBnZEdocGN5NXlkV3hsY3k1dVpYZHNhVzVsTG1WNFpXTW9jM0pqS1NrZ2UxeHVJQ0FnSUNBZ2MzSmpJRDBnYzNKakxuTjFZbk4wY21sdVp5aGpZWEJiTUYwdWJHVnVaM1JvS1R0Y2JpQWdJQ0FnSUdsbUlDaGpZWEJiTUYwdWJHVnVaM1JvSUQ0Z01Ta2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZhMlZ1Y3k1d2RYTm9LSHRjYmlBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuYzNCaFkyVW5YRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUdOdlpHVmNiaUFnSUNCcFppQW9ZMkZ3SUQwZ2RHaHBjeTV5ZFd4bGN5NWpiMlJsTG1WNFpXTW9jM0pqS1NrZ2UxeHVJQ0FnSUNBZ2MzSmpJRDBnYzNKakxuTjFZbk4wY21sdVp5aGpZWEJiTUYwdWJHVnVaM1JvS1R0Y2JpQWdJQ0FnSUdOaGNDQTlJR05oY0Zzd1hTNXlaWEJzWVdObEtDOWVJSHMwZlM5bmJTd2dKeWNwTzF4dUlDQWdJQ0FnZEdocGN5NTBiMnRsYm5NdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJQ2RqYjJSbEp5eGNiaUFnSUNBZ0lDQWdkR1Y0ZERvZ0lYUm9hWE11YjNCMGFXOXVjeTV3WldSaGJuUnBZMXh1SUNBZ0lDQWdJQ0FnSUQ4Z1kyRndMbkpsY0d4aFkyVW9MMXhjYmlza0x5d2dKeWNwWEc0Z0lDQWdJQ0FnSUNBZ09pQmpZWEJjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnWm1WdVkyVnpJQ2huWm0wcFhHNGdJQ0FnYVdZZ0tHTmhjQ0E5SUhSb2FYTXVjblZzWlhNdVptVnVZMlZ6TG1WNFpXTW9jM0pqS1NrZ2UxeHVJQ0FnSUNBZ2MzSmpJRDBnYzNKakxuTjFZbk4wY21sdVp5aGpZWEJiTUYwdWJHVnVaM1JvS1R0Y2JpQWdJQ0FnSUhSb2FYTXVkRzlyWlc1ekxuQjFjMmdvZTF4dUlDQWdJQ0FnSUNCMGVYQmxPaUFuWTI5a1pTY3NYRzRnSUNBZ0lDQWdJR3hoYm1jNklHTmhjRnN5WFN4Y2JpQWdJQ0FnSUNBZ2RHVjRkRG9nWTJGd1d6TmRJSHg4SUNjblhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHaGxZV1JwYm1kY2JpQWdJQ0JwWmlBb1kyRndJRDBnZEdocGN5NXlkV3hsY3k1b1pXRmthVzVuTG1WNFpXTW9jM0pqS1NrZ2UxeHVJQ0FnSUNBZ2MzSmpJRDBnYzNKakxuTjFZbk4wY21sdVp5aGpZWEJiTUYwdWJHVnVaM1JvS1R0Y2JpQWdJQ0FnSUhSb2FYTXVkRzlyWlc1ekxuQjFjMmdvZTF4dUlDQWdJQ0FnSUNCMGVYQmxPaUFuYUdWaFpHbHVaeWNzWEc0Z0lDQWdJQ0FnSUdSbGNIUm9PaUJqWVhCYk1WMHViR1Z1WjNSb0xGeHVJQ0FnSUNBZ0lDQjBaWGgwT2lCallYQmJNbDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnZEdGaWJHVWdibThnYkdWaFpHbHVaeUJ3YVhCbElDaG5abTBwWEc0Z0lDQWdhV1lnS0hSdmNDQW1KaUFvWTJGd0lEMGdkR2hwY3k1eWRXeGxjeTV1Y0hSaFlteGxMbVY0WldNb2MzSmpLU2twSUh0Y2JpQWdJQ0FnSUhOeVl5QTlJSE55WXk1emRXSnpkSEpwYm1jb1kyRndXekJkTG14bGJtZDBhQ2s3WEc1Y2JpQWdJQ0FnSUdsMFpXMGdQU0I3WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJQ2QwWVdKc1pTY3NYRzRnSUNBZ0lDQWdJR2hsWVdSbGNqb2dZMkZ3V3pGZExuSmxjR3hoWTJVb0wxNGdLbndnS2x4Y2ZDQXFKQzluTENBbkp5a3VjM0JzYVhRb0x5QXFYRng4SUNvdktTeGNiaUFnSUNBZ0lDQWdZV3hwWjI0NklHTmhjRnN5WFM1eVpYQnNZV05sS0M5ZUlDcDhYRng4SUNva0wyY3NJQ2NuS1M1emNHeHBkQ2d2SUNwY1hId2dLaThwTEZ4dUlDQWdJQ0FnSUNCalpXeHNjem9nWTJGd1d6TmRMbkpsY0d4aFkyVW9MMXhjYmlRdkxDQW5KeWt1YzNCc2FYUW9KMXhjYmljcFhHNGdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2FYUmxiUzVoYkdsbmJpNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9MMTRnS2kwck9pQXFKQzh1ZEdWemRDaHBkR1Z0TG1Gc2FXZHVXMmxkS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2wwWlcwdVlXeHBaMjViYVYwZ1BTQW5jbWxuYUhRbk8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLQzllSUNvNkxTczZJQ29rTHk1MFpYTjBLR2wwWlcwdVlXeHBaMjViYVYwcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVhSbGJTNWhiR2xuYmx0cFhTQTlJQ2RqWlc1MFpYSW5PMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0M5ZUlDbzZMU3NnS2lRdkxuUmxjM1FvYVhSbGJTNWhiR2xuYmx0cFhTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCcGRHVnRMbUZzYVdkdVcybGRJRDBnSjJ4bFpuUW5PMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUdsMFpXMHVZV3hwWjI1YmFWMGdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQnBkR1Z0TG1ObGJHeHpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHbDBaVzB1WTJWc2JITmJhVjBnUFNCcGRHVnRMbU5sYkd4elcybGRMbk53YkdsMEtDOGdLbHhjZkNBcUx5azdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFJvYVhNdWRHOXJaVzV6TG5CMWMyZ29hWFJsYlNrN1hHNWNiaUFnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHeG9aV0ZrYVc1blhHNGdJQ0FnYVdZZ0tHTmhjQ0E5SUhSb2FYTXVjblZzWlhNdWJHaGxZV1JwYm1jdVpYaGxZeWh6Y21NcEtTQjdYRzRnSUNBZ0lDQnpjbU1nUFNCemNtTXVjM1ZpYzNSeWFXNW5LR05oY0Zzd1hTNXNaVzVuZEdncE8xeHVJQ0FnSUNBZ2RHaHBjeTUwYjJ0bGJuTXVjSFZ6YUNoN1hHNGdJQ0FnSUNBZ0lIUjVjR1U2SUNkb1pXRmthVzVuSnl4Y2JpQWdJQ0FnSUNBZ1pHVndkR2c2SUdOaGNGc3lYU0E5UFQwZ0p6MG5JRDhnTVNBNklESXNYRzRnSUNBZ0lDQWdJSFJsZUhRNklHTmhjRnN4WFZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCb2NseHVJQ0FnSUdsbUlDaGpZWEFnUFNCMGFHbHpMbkoxYkdWekxtaHlMbVY0WldNb2MzSmpLU2tnZTF4dUlDQWdJQ0FnYzNKaklEMGdjM0pqTG5OMVluTjBjbWx1WnloallYQmJNRjB1YkdWdVozUm9LVHRjYmlBZ0lDQWdJSFJvYVhNdWRHOXJaVzV6TG5CMWMyZ29lMXh1SUNBZ0lDQWdJQ0IwZVhCbE9pQW5hSEluWEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUdKc2IyTnJjWFZ2ZEdWY2JpQWdJQ0JwWmlBb1kyRndJRDBnZEdocGN5NXlkV3hsY3k1aWJHOWphM0YxYjNSbExtVjRaV01vYzNKaktTa2dlMXh1SUNBZ0lDQWdjM0pqSUQwZ2MzSmpMbk4xWW5OMGNtbHVaeWhqWVhCYk1GMHViR1Z1WjNSb0tUdGNibHh1SUNBZ0lDQWdkR2hwY3k1MGIydGxibk11Y0hWemFDaDdYRzRnSUNBZ0lDQWdJSFI1Y0dVNklDZGliRzlqYTNGMWIzUmxYM04wWVhKMEoxeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJR05oY0NBOUlHTmhjRnN3WFM1eVpYQnNZV05sS0M5ZUlDbytJRDh2WjIwc0lDY25LVHRjYmx4dUlDQWdJQ0FnTHk4Z1VHRnpjeUJnZEc5d1lDQjBieUJyWldWd0lIUm9aU0JqZFhKeVpXNTBYRzRnSUNBZ0lDQXZMeUJjSW5SdmNHeGxkbVZzWENJZ2MzUmhkR1V1SUZSb2FYTWdhWE1nWlhoaFkzUnNlVnh1SUNBZ0lDQWdMeThnYUc5M0lHMWhjbXRrYjNkdUxuQnNJSGR2Y210ekxseHVJQ0FnSUNBZ2RHaHBjeTUwYjJ0bGJpaGpZWEFzSUhSdmNDd2dkSEoxWlNrN1hHNWNiaUFnSUNBZ0lIUm9hWE11ZEc5clpXNXpMbkIxYzJnb2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lBbllteHZZMnR4ZFc5MFpWOWxibVFuWEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z2JHbHpkRnh1SUNBZ0lHbG1JQ2hqWVhBZ1BTQjBhR2x6TG5KMWJHVnpMbXhwYzNRdVpYaGxZeWh6Y21NcEtTQjdYRzRnSUNBZ0lDQnpjbU1nUFNCemNtTXVjM1ZpYzNSeWFXNW5LR05oY0Zzd1hTNXNaVzVuZEdncE8xeHVJQ0FnSUNBZ1luVnNiQ0E5SUdOaGNGc3lYVHRjYmx4dUlDQWdJQ0FnZEdocGN5NTBiMnRsYm5NdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJQ2RzYVhOMFgzTjBZWEowSnl4Y2JpQWdJQ0FnSUNBZ2IzSmtaWEpsWkRvZ1luVnNiQzVzWlc1bmRHZ2dQaUF4WEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0x5OGdSMlYwSUdWaFkyZ2dkRzl3TFd4bGRtVnNJR2wwWlcwdVhHNGdJQ0FnSUNCallYQWdQU0JqWVhCYk1GMHViV0YwWTJnb2RHaHBjeTV5ZFd4bGN5NXBkR1Z0S1R0Y2JseHVJQ0FnSUNBZ2JtVjRkQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdiQ0E5SUdOaGNDNXNaVzVuZEdnN1hHNGdJQ0FnSUNCcElEMGdNRHRjYmx4dUlDQWdJQ0FnWm05eUlDZzdJR2tnUENCc095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2FYUmxiU0E5SUdOaGNGdHBYVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlNaVzF2ZG1VZ2RHaGxJR3hwYzNRZ2FYUmxiU2R6SUdKMWJHeGxkRnh1SUNBZ0lDQWdJQ0F2THlCemJ5QnBkQ0JwY3lCelpXVnVJR0Z6SUhSb1pTQnVaWGgwSUhSdmEyVnVMbHh1SUNBZ0lDQWdJQ0J6Y0dGalpTQTlJR2wwWlcwdWJHVnVaM1JvTzF4dUlDQWdJQ0FnSUNCcGRHVnRJRDBnYVhSbGJTNXlaWEJzWVdObEtDOWVJQ29vV3lvckxWMThYRnhrSzF4Y0xpa2dLeThzSUNjbktUdGNibHh1SUNBZ0lDQWdJQ0F2THlCUGRYUmtaVzUwSUhkb1lYUmxkbVZ5SUhSb1pWeHVJQ0FnSUNBZ0lDQXZMeUJzYVhOMElHbDBaVzBnWTI5dWRHRnBibk11SUVoaFkydDVMbHh1SUNBZ0lDQWdJQ0JwWmlBb2ZtbDBaVzB1YVc1a1pYaFBaaWduWEZ4dUlDY3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MzQmhZMlVnTFQwZ2FYUmxiUzVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJQ0FnYVhSbGJTQTlJQ0YwYUdsekxtOXdkR2x2Ym5NdWNHVmtZVzUwYVdOY2JpQWdJQ0FnSUNBZ0lDQWdJRDhnYVhSbGJTNXlaWEJzWVdObEtHNWxkeUJTWldkRmVIQW9KMTRnZXpFc0p5QXJJSE53WVdObElDc2dKMzBuTENBbloyMG5LU3dnSnljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0E2SUdsMFpXMHVjbVZ3YkdGalpTZ3ZYaUI3TVN3MGZTOW5iU3dnSnljcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1JHVjBaWEp0YVc1bElIZG9aWFJvWlhJZ2RHaGxJRzVsZUhRZ2JHbHpkQ0JwZEdWdElHSmxiRzl1WjNNZ2FHVnlaUzVjYmlBZ0lDQWdJQ0FnTHk4Z1FtRmphM0JsWkdGc0lHbG1JR2wwSUdSdlpYTWdibTkwSUdKbGJHOXVaeUJwYmlCMGFHbHpJR3hwYzNRdVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdWMyMWhjblJNYVhOMGN5QW1KaUJwSUNFOVBTQnNJQzBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR0lnUFNCaWJHOWpheTVpZFd4c1pYUXVaWGhsWXloallYQmJhU0FySURGZEtWc3dYVHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9ZblZzYkNBaFBUMGdZaUFtSmlBaEtHSjFiR3d1YkdWdVozUm9JRDRnTVNBbUppQmlMbXhsYm1kMGFDQStJREVwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Y21NZ1BTQmpZWEF1YzJ4cFkyVW9hU0FySURFcExtcHZhVzRvSjF4Y2JpY3BJQ3NnYzNKak8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVNBOUlHd2dMU0F4TzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklFUmxkR1Z5YldsdVpTQjNhR1YwYUdWeUlHbDBaVzBnYVhNZ2JHOXZjMlVnYjNJZ2JtOTBMbHh1SUNBZ0lDQWdJQ0F2THlCVmMyVTZJQzhvWG54Y1hHNHBLRDhoSUNsYlhseGNibDByWEZ4dVhGeHVLRDhoWEZ4ektpUXBMMXh1SUNBZ0lDQWdJQ0F2THlCbWIzSWdaR2x6WTI5MWJuUWdZbVZvWVhacGIzSXVYRzRnSUNBZ0lDQWdJR3h2YjNObElEMGdibVY0ZENCOGZDQXZYRnh1WEZ4dUtEOGhYRnh6S2lRcEx5NTBaWE4wS0dsMFpXMHBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2FTQWhQVDBnYkNBdElERXBJSHRjYmlBZ0lDQWdJQ0FnSUNCdVpYaDBJRDBnYVhSbGJTNWphR0Z5UVhRb2FYUmxiUzVzWlc1bmRHZ2dMU0F4S1NBOVBUMGdKMXhjYmljN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NGc2IyOXpaU2tnYkc5dmMyVWdQU0J1WlhoME8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NTBiMnRsYm5NdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUNBZ2RIbHdaVG9nYkc5dmMyVmNiaUFnSUNBZ0lDQWdJQ0FnSUQ4Z0oyeHZiM05sWDJsMFpXMWZjM1JoY25RblhHNGdJQ0FnSUNBZ0lDQWdJQ0E2SUNkc2FYTjBYMmwwWlcxZmMzUmhjblFuWEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUZKbFkzVnljMlV1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkRzlyWlc0b2FYUmxiU3dnWm1Gc2MyVXNJR0p4S1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG5SdmEyVnVjeTV3ZFhOb0tIdGNiaUFnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5iR2x6ZEY5cGRHVnRYMlZ1WkNkY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFJvYVhNdWRHOXJaVzV6TG5CMWMyZ29lMXh1SUNBZ0lDQWdJQ0IwZVhCbE9pQW5iR2x6ZEY5bGJtUW5YRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnYUhSdGJGeHVJQ0FnSUdsbUlDaGpZWEFnUFNCMGFHbHpMbkoxYkdWekxtaDBiV3d1WlhobFl5aHpjbU1wS1NCN1hHNGdJQ0FnSUNCemNtTWdQU0J6Y21NdWMzVmljM1J5YVc1bktHTmhjRnN3WFM1c1pXNW5kR2dwTzF4dUlDQWdJQ0FnZEdocGN5NTBiMnRsYm5NdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJSFJvYVhNdWIzQjBhVzl1Y3k1ellXNXBkR2w2WlZ4dUlDQWdJQ0FnSUNBZ0lEOGdKM0JoY21GbmNtRndhQ2RjYmlBZ0lDQWdJQ0FnSUNBNklDZG9kRzFzSnl4Y2JpQWdJQ0FnSUNBZ2NISmxPaUFoZEdocGN5NXZjSFJwYjI1ekxuTmhibWwwYVhwbGNseHVJQ0FnSUNBZ0lDQWdJQ1ltSUNoallYQmJNVjBnUFQwOUlDZHdjbVVuSUh4OElHTmhjRnN4WFNBOVBUMGdKM05qY21sd2RDY2dmSHdnWTJGd1d6RmRJRDA5UFNBbmMzUjViR1VuS1N4Y2JpQWdJQ0FnSUNBZ2RHVjRkRG9nWTJGd1d6QmRYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJR1JsWmx4dUlDQWdJR2xtSUNnb0lXSnhJQ1ltSUhSdmNDa2dKaVlnS0dOaGNDQTlJSFJvYVhNdWNuVnNaWE11WkdWbUxtVjRaV01vYzNKaktTa3BJSHRjYmlBZ0lDQWdJSE55WXlBOUlITnlZeTV6ZFdKemRISnBibWNvWTJGd1d6QmRMbXhsYm1kMGFDazdYRzRnSUNBZ0lDQjBhR2x6TG5SdmEyVnVjeTVzYVc1cmMxdGpZWEJiTVYwdWRHOU1iM2RsY2tOaGMyVW9LVjBnUFNCN1hHNGdJQ0FnSUNBZ0lHaHlaV1k2SUdOaGNGc3lYU3hjYmlBZ0lDQWdJQ0FnZEdsMGJHVTZJR05oY0ZzelhWeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklIUmhZbXhsSUNoblptMHBYRzRnSUNBZ2FXWWdLSFJ2Y0NBbUppQW9ZMkZ3SUQwZ2RHaHBjeTV5ZFd4bGN5NTBZV0pzWlM1bGVHVmpLSE55WXlrcEtTQjdYRzRnSUNBZ0lDQnpjbU1nUFNCemNtTXVjM1ZpYzNSeWFXNW5LR05oY0Zzd1hTNXNaVzVuZEdncE8xeHVYRzRnSUNBZ0lDQnBkR1Z0SUQwZ2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lBbmRHRmliR1VuTEZ4dUlDQWdJQ0FnSUNCb1pXRmtaWEk2SUdOaGNGc3hYUzV5WlhCc1lXTmxLQzllSUNwOElDcGNYSHdnS2lRdlp5d2dKeWNwTG5Od2JHbDBLQzhnS2x4Y2ZDQXFMeWtzWEc0Z0lDQWdJQ0FnSUdGc2FXZHVPaUJqWVhCYk1sMHVjbVZ3YkdGalpTZ3ZYaUFxZkZ4Y2ZDQXFKQzluTENBbkp5a3VjM0JzYVhRb0x5QXFYRng4SUNvdktTeGNiaUFnSUNBZ0lDQWdZMlZzYkhNNklHTmhjRnN6WFM1eVpYQnNZV05sS0M4b1B6b2dLbHhjZkNBcUtUOWNYRzRrTHl3Z0p5Y3BMbk53YkdsMEtDZGNYRzRuS1Z4dUlDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0E4SUdsMFpXMHVZV3hwWjI0dWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDOWVJQ290S3pvZ0tpUXZMblJsYzNRb2FYUmxiUzVoYkdsbmJsdHBYU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBkR1Z0TG1Gc2FXZHVXMmxkSUQwZ0ozSnBaMmgwSnp0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDZ3ZYaUFxT2kwck9pQXFKQzh1ZEdWemRDaHBkR1Z0TG1Gc2FXZHVXMmxkS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2wwWlcwdVlXeHBaMjViYVYwZ1BTQW5ZMlZ1ZEdWeUp6dGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2d2WGlBcU9pMHJJQ29rTHk1MFpYTjBLR2wwWlcwdVlXeHBaMjViYVYwcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVhSbGJTNWhiR2xuYmx0cFhTQTlJQ2RzWldaMEp6dGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0JwZEdWdExtRnNhV2R1VzJsZElEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2FYUmxiUzVqWld4c2N5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCcGRHVnRMbU5sYkd4elcybGRJRDBnYVhSbGJTNWpaV3hzYzF0cFhWeHVJQ0FnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQzllSUNwY1hId2dLbndnS2x4Y2ZDQXFKQzluTENBbkp5bGNiaUFnSUNBZ0lDQWdJQ0F1YzNCc2FYUW9MeUFxWEZ4OElDb3ZLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnZEdocGN5NTBiMnRsYm5NdWNIVnphQ2hwZEdWdEtUdGNibHh1SUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdkRzl3TFd4bGRtVnNJSEJoY21GbmNtRndhRnh1SUNBZ0lHbG1JQ2gwYjNBZ0ppWWdLR05oY0NBOUlIUm9hWE11Y25Wc1pYTXVjR0Z5WVdkeVlYQm9MbVY0WldNb2MzSmpLU2twSUh0Y2JpQWdJQ0FnSUhOeVl5QTlJSE55WXk1emRXSnpkSEpwYm1jb1kyRndXekJkTG14bGJtZDBhQ2s3WEc0Z0lDQWdJQ0IwYUdsekxuUnZhMlZ1Y3k1d2RYTm9LSHRjYmlBZ0lDQWdJQ0FnZEhsd1pUb2dKM0JoY21GbmNtRndhQ2NzWEc0Z0lDQWdJQ0FnSUhSbGVIUTZJR05oY0ZzeFhTNWphR0Z5UVhRb1kyRndXekZkTG14bGJtZDBhQ0F0SURFcElEMDlQU0FuWEZ4dUoxeHVJQ0FnSUNBZ0lDQWdJRDhnWTJGd1d6RmRMbk5zYVdObEtEQXNJQzB4S1Z4dUlDQWdJQ0FnSUNBZ0lEb2dZMkZ3V3pGZFhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklIUmxlSFJjYmlBZ0lDQnBaaUFvWTJGd0lEMGdkR2hwY3k1eWRXeGxjeTUwWlhoMExtVjRaV01vYzNKaktTa2dlMXh1SUNBZ0lDQWdMeThnVkc5d0xXeGxkbVZzSUhOb2IzVnNaQ0J1WlhabGNpQnlaV0ZqYUNCb1pYSmxMbHh1SUNBZ0lDQWdjM0pqSUQwZ2MzSmpMbk4xWW5OMGNtbHVaeWhqWVhCYk1GMHViR1Z1WjNSb0tUdGNiaUFnSUNBZ0lIUm9hWE11ZEc5clpXNXpMbkIxYzJnb2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lBbmRHVjRkQ2NzWEc0Z0lDQWdJQ0FnSUhSbGVIUTZJR05oY0Zzd1hWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jM0pqS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhkY2JpQWdJQ0FnSUNBZ1JYSnliM0lvSjBsdVptbHVhWFJsSUd4dmIzQWdiMjRnWW5sMFpUb2dKeUFySUhOeVl5NWphR0Z5UTI5a1pVRjBLREFwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnZEdocGN5NTBiMnRsYm5NN1hHNTlPMXh1WEc0dktpcGNiaUFxSUVsdWJHbHVaUzFNWlhabGJDQkhjbUZ0YldGeVhHNGdLaTljYmx4dWRtRnlJR2x1YkdsdVpTQTlJSHRjYmlBZ1pYTmpZWEJsT2lBdlhseGNYRndvVzF4Y1hGeGdLbnQ5WEZ4YlhGeGRLQ2tqSzF4Y0xTNGhYejVkS1M4c1hHNGdJR0YxZEc5c2FXNXJPaUF2WGp3b1cxNGdQbDByS0VCOE9seGNMeWxiWGlBK1hTc3BQaThzWEc0Z0lIVnliRG9nYm05dmNDeGNiaUFnZEdGbk9pQXZYandoTFMxYlhGeHpYRnhUWFNvL0xTMCtmRjQ4WEZ3dlAxeGNkeXNvUHpwY0lsdGVYQ0pkS2x3aWZDZGJYaWRkS2lkOFcxNG5YQ0krWFNrcVB6NHZMRnh1SUNCc2FXNXJPaUF2WGlFL1hGeGJLR2x1YzJsa1pTbGNYRjFjWENob2NtVm1YRndwTHl4Y2JpQWdjbVZtYkdsdWF6b2dMMTRoUDF4Y1d5aHBibk5wWkdVcFhGeGRYRnh6S2x4Y1d5aGJYbHhjWFYwcUtWeGNYUzhzWEc0Z0lHNXZiR2x1YXpvZ0wxNGhQMXhjV3lnb1B6cGNYRnRiWGx4Y1hWMHFYRnhkZkZ0ZVhGeGJYRnhkWFNrcUtWeGNYUzhzWEc0Z0lITjBjbTl1WnpvZ0wxNWZYeWhiWEZ4elhGeFRYU3MvS1Y5ZktEOGhYeWw4WGx4Y0tseGNLaWhiWEZ4elhGeFRYU3MvS1Z4Y0tseGNLaWcvSVZ4Y0tpa3ZMRnh1SUNCbGJUb2dMMTVjWEdKZktDZy9PbHRlWDExOFgxOHBLejhwWDF4Y1lueGVYRndxS0NnL09seGNLbHhjS254YlhGeHpYRnhUWFNrclB5bGNYQ29vUHlGY1hDb3BMeXhjYmlBZ1kyOWtaVG9nTDE0b1lDc3BYRnh6S2loYlhGeHpYRnhUWFNvL1cxNWdYU2xjWEhNcVhGd3hLRDhoWUNrdkxGeHVJQ0JpY2pvZ0wxNGdleklzZlZ4Y2JpZy9JVnhjY3lva0tTOHNYRzRnSUdSbGJEb2dibTl2Y0N4Y2JpQWdkR1Y0ZERvZ0wxNWJYRnh6WEZ4VFhTcy9LRDg5VzF4Y1hGdzhJVnhjVzE4cVlGMThJSHN5TEgxY1hHNThKQ2t2WEc1OU8xeHVYRzVwYm14cGJtVXVYMmx1YzJsa1pTQTlJQzhvUHpwY1hGdGJYbHhjWFYwcVhGeGRmRnRlWEZ4YlhGeGRYWHhjWEYwb1B6MWJYbHhjVzEwcVhGeGRLU2txTHp0Y2JtbHViR2x1WlM1ZmFISmxaaUE5SUM5Y1hITXFQRDhvVzF4Y2MxeGNVMTBxUHlrK1B5Zy9PbHhjY3l0Ykoxd2lYU2hiWEZ4elhGeFRYU28vS1ZzblhDSmRLVDljWEhNcUx6dGNibHh1YVc1c2FXNWxMbXhwYm1zZ1BTQnlaWEJzWVdObEtHbHViR2x1WlM1c2FXNXJLVnh1SUNBb0oybHVjMmxrWlNjc0lHbHViR2x1WlM1ZmFXNXphV1JsS1Z4dUlDQW9KMmh5WldZbkxDQnBibXhwYm1VdVgyaHlaV1lwWEc0Z0lDZ3BPMXh1WEc1cGJteHBibVV1Y21WbWJHbHVheUE5SUhKbGNHeGhZMlVvYVc1c2FXNWxMbkpsWm14cGJtc3BYRzRnSUNnbmFXNXphV1JsSnl3Z2FXNXNhVzVsTGw5cGJuTnBaR1VwWEc0Z0lDZ3BPMXh1WEc0dktpcGNiaUFxSUU1dmNtMWhiQ0JKYm14cGJtVWdSM0poYlcxaGNseHVJQ292WEc1Y2JtbHViR2x1WlM1dWIzSnRZV3dnUFNCdFpYSm5aU2g3ZlN3Z2FXNXNhVzVsS1R0Y2JseHVMeW9xWEc0Z0tpQlFaV1JoYm5ScFl5QkpibXhwYm1VZ1IzSmhiVzFoY2x4dUlDb3ZYRzVjYm1sdWJHbHVaUzV3WldSaGJuUnBZeUE5SUcxbGNtZGxLSHQ5TENCcGJteHBibVV1Ym05eWJXRnNMQ0I3WEc0Z0lITjBjbTl1WnpvZ0wxNWZYeWcvUFZ4Y1V5a29XMXhjYzF4Y1UxMHFQMXhjVXlsZlh5Zy9JVjhwZkY1Y1hDcGNYQ29vUHoxY1hGTXBLRnRjWEhOY1hGTmRLajljWEZNcFhGd3FYRndxS0Q4aFhGd3FLUzhzWEc0Z0lHVnRPaUF2WGw4b1B6MWNYRk1wS0Z0Y1hITmNYRk5kS2o5Y1hGTXBYeWcvSVY4cGZGNWNYQ29vUHoxY1hGTXBLRnRjWEhOY1hGTmRLajljWEZNcFhGd3FLRDhoWEZ3cUtTOWNibjBwTzF4dVhHNHZLaXBjYmlBcUlFZEdUU0JKYm14cGJtVWdSM0poYlcxaGNseHVJQ292WEc1Y2JtbHViR2x1WlM1blptMGdQU0J0WlhKblpTaDdmU3dnYVc1c2FXNWxMbTV2Y20xaGJDd2dlMXh1SUNCbGMyTmhjR1U2SUhKbGNHeGhZMlVvYVc1c2FXNWxMbVZ6WTJGd1pTa29KMTBwSnl3Z0ozNThYU2tuS1NncExGeHVJQ0IxY213NklDOWVLR2gwZEhCelB6cGNYQzljWEM5YlhseGNjenhkSzF0ZVBDNHNPanRjSWljcFhGeGRYRnh6WFNrdkxGeHVJQ0JrWld3NklDOWVmbjRvUHoxY1hGTXBLRnRjWEhOY1hGTmRLajljWEZNcGZuNHZMRnh1SUNCMFpYaDBPaUJ5WlhCc1lXTmxLR2x1YkdsdVpTNTBaWGgwS1Z4dUlDQWdJQ2duWFh3bkxDQW5mbDE4SnlsY2JpQWdJQ0FvSjN3bkxDQW5mR2gwZEhCelB6b3ZMM3duS1Z4dUlDQWdJQ2dwWEc1OUtUdGNibHh1THlvcVhHNGdLaUJIUmswZ0t5Qk1hVzVsSUVKeVpXRnJjeUJKYm14cGJtVWdSM0poYlcxaGNseHVJQ292WEc1Y2JtbHViR2x1WlM1aWNtVmhhM01nUFNCdFpYSm5aU2g3ZlN3Z2FXNXNhVzVsTG1kbWJTd2dlMXh1SUNCaWNqb2djbVZ3YkdGalpTaHBibXhwYm1VdVluSXBLQ2Q3TWl4OUp5d2dKeW9uS1NncExGeHVJQ0IwWlhoME9pQnlaWEJzWVdObEtHbHViR2x1WlM1blptMHVkR1Y0ZENrb0ozc3lMSDBuTENBbktpY3BLQ2xjYm4wcE8xeHVYRzR2S2lwY2JpQXFJRWx1YkdsdVpTQk1aWGhsY2lBbUlFTnZiWEJwYkdWeVhHNGdLaTljYmx4dVpuVnVZM1JwYjI0Z1NXNXNhVzVsVEdWNFpYSW9iR2x1YTNNc0lHOXdkR2x2Ym5NcElIdGNiaUFnZEdocGN5NXZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0J0WVhKclpXUXVaR1ZtWVhWc2RITTdYRzRnSUhSb2FYTXViR2x1YTNNZ1BTQnNhVzVyY3p0Y2JpQWdkR2hwY3k1eWRXeGxjeUE5SUdsdWJHbHVaUzV1YjNKdFlXdzdYRzRnSUhSb2FYTXVjbVZ1WkdWeVpYSWdQU0IwYUdsekxtOXdkR2x2Ym5NdWNtVnVaR1Z5WlhJZ2ZId2dibVYzSUZKbGJtUmxjbVZ5TzF4dUlDQjBhR2x6TG5KbGJtUmxjbVZ5TG05d2RHbHZibk1nUFNCMGFHbHpMbTl3ZEdsdmJuTTdYRzVjYmlBZ2FXWWdLQ0YwYUdsekxteHBibXR6S1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzWEc0Z0lDQWdJQ0JGY25KdmNpZ25WRzlyWlc1eklHRnljbUY1SUhKbGNYVnBjbVZ6SUdFZ1lHeHBibXR6WUNCd2NtOXdaWEowZVM0bktUdGNiaUFnZlZ4dVhHNGdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVaMlp0S1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVpY21WaGEzTXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWNuVnNaWE1nUFNCcGJteHBibVV1WW5KbFlXdHpPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFHbHpMbkoxYkdWeklEMGdhVzVzYVc1bExtZG1iVHRjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbkJsWkdGdWRHbGpLU0I3WEc0Z0lDQWdkR2hwY3k1eWRXeGxjeUE5SUdsdWJHbHVaUzV3WldSaGJuUnBZenRjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVWNGNHOXpaU0JKYm14cGJtVWdVblZzWlhOY2JpQXFMMXh1WEc1SmJteHBibVZNWlhobGNpNXlkV3hsY3lBOUlHbHViR2x1WlR0Y2JseHVMeW9xWEc0Z0tpQlRkR0YwYVdNZ1RHVjRhVzVuTDBOdmJYQnBiR2x1WnlCTlpYUm9iMlJjYmlBcUwxeHVYRzVKYm14cGJtVk1aWGhsY2k1dmRYUndkWFFnUFNCbWRXNWpkR2x2YmloemNtTXNJR3hwYm10ekxDQnZjSFJwYjI1ektTQjdYRzRnSUhaaGNpQnBibXhwYm1VZ1BTQnVaWGNnU1c1c2FXNWxUR1Y0WlhJb2JHbHVhM01zSUc5d2RHbHZibk1wTzF4dUlDQnlaWFIxY200Z2FXNXNhVzVsTG05MWRIQjFkQ2h6Y21NcE8xeHVmVHRjYmx4dUx5b3FYRzRnS2lCTVpYaHBibWN2UTI5dGNHbHNhVzVuWEc0Z0tpOWNibHh1U1c1c2FXNWxUR1Y0WlhJdWNISnZkRzkwZVhCbExtOTFkSEIxZENBOUlHWjFibU4wYVc5dUtITnlZeWtnZTF4dUlDQjJZWElnYjNWMElEMGdKeWRjYmlBZ0lDQXNJR3hwYm10Y2JpQWdJQ0FzSUhSbGVIUmNiaUFnSUNBc0lHaHlaV1pjYmlBZ0lDQXNJR05oY0R0Y2JseHVJQ0IzYUdsc1pTQW9jM0pqS1NCN1hHNGdJQ0FnTHk4Z1pYTmpZWEJsWEc0Z0lDQWdhV1lnS0dOaGNDQTlJSFJvYVhNdWNuVnNaWE11WlhOallYQmxMbVY0WldNb2MzSmpLU2tnZTF4dUlDQWdJQ0FnYzNKaklEMGdjM0pqTG5OMVluTjBjbWx1WnloallYQmJNRjB1YkdWdVozUm9LVHRjYmlBZ0lDQWdJRzkxZENBclBTQmpZWEJiTVYwN1hHNGdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCaGRYUnZiR2x1YTF4dUlDQWdJR2xtSUNoallYQWdQU0IwYUdsekxuSjFiR1Z6TG1GMWRHOXNhVzVyTG1WNFpXTW9jM0pqS1NrZ2UxeHVJQ0FnSUNBZ2MzSmpJRDBnYzNKakxuTjFZbk4wY21sdVp5aGpZWEJiTUYwdWJHVnVaM1JvS1R0Y2JpQWdJQ0FnSUdsbUlDaGpZWEJiTWwwZ1BUMDlJQ2RBSnlrZ2UxeHVJQ0FnSUNBZ0lDQjBaWGgwSUQwZ1kyRndXekZkTG1Ob1lYSkJkQ2cyS1NBOVBUMGdKem9uWEc0Z0lDQWdJQ0FnSUNBZ1B5QjBhR2x6TG0xaGJtZHNaU2hqWVhCYk1WMHVjM1ZpYzNSeWFXNW5LRGNwS1Z4dUlDQWdJQ0FnSUNBZ0lEb2dkR2hwY3k1dFlXNW5iR1VvWTJGd1d6RmRLVHRjYmlBZ0lDQWdJQ0FnYUhKbFppQTlJSFJvYVhNdWJXRnVaMnhsS0NkdFlXbHNkRzg2SnlrZ0t5QjBaWGgwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZEdWNGRDQTlJR1Z6WTJGd1pTaGpZWEJiTVYwcE8xeHVJQ0FnSUNBZ0lDQm9jbVZtSUQwZ2RHVjRkRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJRzkxZENBclBTQjBhR2x6TG5KbGJtUmxjbVZ5TG14cGJtc29hSEpsWml3Z2JuVnNiQ3dnZEdWNGRDazdYRzRnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QjFjbXdnS0dkbWJTbGNiaUFnSUNCcFppQW9JWFJvYVhNdWFXNU1hVzVySUNZbUlDaGpZWEFnUFNCMGFHbHpMbkoxYkdWekxuVnliQzVsZUdWaktITnlZeWtwS1NCN1hHNGdJQ0FnSUNCemNtTWdQU0J6Y21NdWMzVmljM1J5YVc1bktHTmhjRnN3WFM1c1pXNW5kR2dwTzF4dUlDQWdJQ0FnZEdWNGRDQTlJR1Z6WTJGd1pTaGpZWEJiTVYwcE8xeHVJQ0FnSUNBZ2FISmxaaUE5SUhSbGVIUTdYRzRnSUNBZ0lDQnZkWFFnS3owZ2RHaHBjeTV5Wlc1a1pYSmxjaTVzYVc1cktHaHlaV1lzSUc1MWJHd3NJSFJsZUhRcE8xeHVJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z2RHRm5YRzRnSUNBZ2FXWWdLR05oY0NBOUlIUm9hWE11Y25Wc1pYTXVkR0ZuTG1WNFpXTW9jM0pqS1NrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtbHVUR2x1YXlBbUppQXZYanhoSUM5cExuUmxjM1FvWTJGd1d6QmRLU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbWx1VEdsdWF5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11YVc1TWFXNXJJQ1ltSUM5ZVBGeGNMMkUrTDJrdWRHVnpkQ2hqWVhCYk1GMHBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhVzVNYVc1cklEMGdabUZzYzJVN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCemNtTWdQU0J6Y21NdWMzVmljM1J5YVc1bktHTmhjRnN3WFM1c1pXNW5kR2dwTzF4dUlDQWdJQ0FnYjNWMElDczlJSFJvYVhNdWIzQjBhVzl1Y3k1ellXNXBkR2w2WlZ4dUlDQWdJQ0FnSUNBL0lIUm9hWE11YjNCMGFXOXVjeTV6WVc1cGRHbDZaWEpjYmlBZ0lDQWdJQ0FnSUNBL0lIUm9hWE11YjNCMGFXOXVjeTV6WVc1cGRHbDZaWElvWTJGd1d6QmRLVnh1SUNBZ0lDQWdJQ0FnSURvZ1pYTmpZWEJsS0dOaGNGc3dYU2xjYmlBZ0lDQWdJQ0FnT2lCallYQmJNRjFjYmlBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJR3hwYm10Y2JpQWdJQ0JwWmlBb1kyRndJRDBnZEdocGN5NXlkV3hsY3k1c2FXNXJMbVY0WldNb2MzSmpLU2tnZTF4dUlDQWdJQ0FnYzNKaklEMGdjM0pqTG5OMVluTjBjbWx1WnloallYQmJNRjB1YkdWdVozUm9LVHRjYmlBZ0lDQWdJSFJvYVhNdWFXNU1hVzVySUQwZ2RISjFaVHRjYmlBZ0lDQWdJRzkxZENBclBTQjBhR2x6TG05MWRIQjFkRXhwYm1zb1kyRndMQ0I3WEc0Z0lDQWdJQ0FnSUdoeVpXWTZJR05oY0ZzeVhTeGNiaUFnSUNBZ0lDQWdkR2wwYkdVNklHTmhjRnN6WFZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCMGFHbHpMbWx1VEdsdWF5QTlJR1poYkhObE8xeHVJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z2NtVm1iR2x1YXl3Z2JtOXNhVzVyWEc0Z0lDQWdhV1lnS0NoallYQWdQU0IwYUdsekxuSjFiR1Z6TG5KbFpteHBibXN1WlhobFl5aHpjbU1wS1Z4dUlDQWdJQ0FnSUNCOGZDQW9ZMkZ3SUQwZ2RHaHBjeTV5ZFd4bGN5NXViMnhwYm1zdVpYaGxZeWh6Y21NcEtTa2dlMXh1SUNBZ0lDQWdjM0pqSUQwZ2MzSmpMbk4xWW5OMGNtbHVaeWhqWVhCYk1GMHViR1Z1WjNSb0tUdGNiaUFnSUNBZ0lHeHBibXNnUFNBb1kyRndXekpkSUh4OElHTmhjRnN4WFNrdWNtVndiR0ZqWlNndlhGeHpLeTluTENBbklDY3BPMXh1SUNBZ0lDQWdiR2x1YXlBOUlIUm9hWE11YkdsdWEzTmJiR2x1YXk1MGIweHZkMlZ5UTJGelpTZ3BYVHRjYmlBZ0lDQWdJR2xtSUNnaGJHbHVheUI4ZkNBaGJHbHVheTVvY21WbUtTQjdYRzRnSUNBZ0lDQWdJRzkxZENBclBTQmpZWEJiTUYwdVkyaGhja0YwS0RBcE8xeHVJQ0FnSUNBZ0lDQnpjbU1nUFNCallYQmJNRjB1YzNWaWMzUnlhVzVuS0RFcElDc2djM0pqTzF4dUlDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhSb2FYTXVhVzVNYVc1cklEMGdkSEoxWlR0Y2JpQWdJQ0FnSUc5MWRDQXJQU0IwYUdsekxtOTFkSEIxZEV4cGJtc29ZMkZ3TENCc2FXNXJLVHRjYmlBZ0lDQWdJSFJvYVhNdWFXNU1hVzVySUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJ6ZEhKdmJtZGNiaUFnSUNCcFppQW9ZMkZ3SUQwZ2RHaHBjeTV5ZFd4bGN5NXpkSEp2Ym1jdVpYaGxZeWh6Y21NcEtTQjdYRzRnSUNBZ0lDQnpjbU1nUFNCemNtTXVjM1ZpYzNSeWFXNW5LR05oY0Zzd1hTNXNaVzVuZEdncE8xeHVJQ0FnSUNBZ2IzVjBJQ3M5SUhSb2FYTXVjbVZ1WkdWeVpYSXVjM1J5YjI1bktIUm9hWE11YjNWMGNIVjBLR05oY0ZzeVhTQjhmQ0JqWVhCYk1WMHBLVHRjYmlBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJR1Z0WEc0Z0lDQWdhV1lnS0dOaGNDQTlJSFJvYVhNdWNuVnNaWE11WlcwdVpYaGxZeWh6Y21NcEtTQjdYRzRnSUNBZ0lDQnpjbU1nUFNCemNtTXVjM1ZpYzNSeWFXNW5LR05oY0Zzd1hTNXNaVzVuZEdncE8xeHVJQ0FnSUNBZ2IzVjBJQ3M5SUhSb2FYTXVjbVZ1WkdWeVpYSXVaVzBvZEdocGN5NXZkWFJ3ZFhRb1kyRndXekpkSUh4OElHTmhjRnN4WFNrcE8xeHVJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1kyOWtaVnh1SUNBZ0lHbG1JQ2hqWVhBZ1BTQjBhR2x6TG5KMWJHVnpMbU52WkdVdVpYaGxZeWh6Y21NcEtTQjdYRzRnSUNBZ0lDQnpjbU1nUFNCemNtTXVjM1ZpYzNSeWFXNW5LR05oY0Zzd1hTNXNaVzVuZEdncE8xeHVJQ0FnSUNBZ2IzVjBJQ3M5SUhSb2FYTXVjbVZ1WkdWeVpYSXVZMjlrWlhOd1lXNG9aWE5qWVhCbEtHTmhjRnN5WFN3Z2RISjFaU2twTzF4dUlDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnWW5KY2JpQWdJQ0JwWmlBb1kyRndJRDBnZEdocGN5NXlkV3hsY3k1aWNpNWxlR1ZqS0hOeVl5a3BJSHRjYmlBZ0lDQWdJSE55WXlBOUlITnlZeTV6ZFdKemRISnBibWNvWTJGd1d6QmRMbXhsYm1kMGFDazdYRzRnSUNBZ0lDQnZkWFFnS3owZ2RHaHBjeTV5Wlc1a1pYSmxjaTVpY2lncE8xeHVJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1pHVnNJQ2huWm0wcFhHNGdJQ0FnYVdZZ0tHTmhjQ0E5SUhSb2FYTXVjblZzWlhNdVpHVnNMbVY0WldNb2MzSmpLU2tnZTF4dUlDQWdJQ0FnYzNKaklEMGdjM0pqTG5OMVluTjBjbWx1WnloallYQmJNRjB1YkdWdVozUm9LVHRjYmlBZ0lDQWdJRzkxZENBclBTQjBhR2x6TG5KbGJtUmxjbVZ5TG1SbGJDaDBhR2x6TG05MWRIQjFkQ2hqWVhCYk1WMHBLVHRjYmlBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJSFJsZUhSY2JpQWdJQ0JwWmlBb1kyRndJRDBnZEdocGN5NXlkV3hsY3k1MFpYaDBMbVY0WldNb2MzSmpLU2tnZTF4dUlDQWdJQ0FnYzNKaklEMGdjM0pqTG5OMVluTjBjbWx1WnloallYQmJNRjB1YkdWdVozUm9LVHRjYmlBZ0lDQWdJRzkxZENBclBTQjBhR2x6TG5KbGJtUmxjbVZ5TG5SbGVIUW9aWE5qWVhCbEtIUm9hWE11YzIxaGNuUjVjR0Z1ZEhNb1kyRndXekJkS1NrcE8xeHVJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tITnlZeWtnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzWEc0Z0lDQWdJQ0FnSUVWeWNtOXlLQ2RKYm1acGJtbDBaU0JzYjI5d0lHOXVJR0o1ZEdVNklDY2dLeUJ6Y21NdVkyaGhja052WkdWQmRDZ3dLU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJRzkxZER0Y2JuMDdYRzVjYmk4cUtseHVJQ29nUTI5dGNHbHNaU0JNYVc1clhHNGdLaTljYmx4dVNXNXNhVzVsVEdWNFpYSXVjSEp2ZEc5MGVYQmxMbTkxZEhCMWRFeHBibXNnUFNCbWRXNWpkR2x2YmloallYQXNJR3hwYm1zcElIdGNiaUFnZG1GeUlHaHlaV1lnUFNCbGMyTmhjR1VvYkdsdWF5NW9jbVZtS1Z4dUlDQWdJQ3dnZEdsMGJHVWdQU0JzYVc1ckxuUnBkR3hsSUQ4Z1pYTmpZWEJsS0d4cGJtc3VkR2wwYkdVcElEb2diblZzYkR0Y2JseHVJQ0J5WlhSMWNtNGdZMkZ3V3pCZExtTm9ZWEpCZENnd0tTQWhQVDBnSnlFblhHNGdJQ0FnUHlCMGFHbHpMbkpsYm1SbGNtVnlMbXhwYm1zb2FISmxaaXdnZEdsMGJHVXNJSFJvYVhNdWIzVjBjSFYwS0dOaGNGc3hYU2twWEc0Z0lDQWdPaUIwYUdsekxuSmxibVJsY21WeUxtbHRZV2RsS0doeVpXWXNJSFJwZEd4bExDQmxjMk5oY0dVb1kyRndXekZkS1NrN1hHNTlPMXh1WEc0dktpcGNiaUFxSUZOdFlYSjBlWEJoYm5SeklGUnlZVzV6Wm05eWJXRjBhVzl1YzF4dUlDb3ZYRzVjYmtsdWJHbHVaVXhsZUdWeUxuQnliM1J2ZEhsd1pTNXpiV0Z5ZEhsd1lXNTBjeUE5SUdaMWJtTjBhVzl1S0hSbGVIUXBJSHRjYmlBZ2FXWWdLQ0YwYUdsekxtOXdkR2x2Ym5NdWMyMWhjblI1Y0dGdWRITXBJSEpsZEhWeWJpQjBaWGgwTzF4dUlDQnlaWFIxY200Z2RHVjRkRnh1SUNBZ0lDOHZJR1Z0TFdSaGMyaGxjMXh1SUNBZ0lDNXlaWEJzWVdObEtDOHRMUzB2Wnl3Z0oxeGNkVEl3TVRRbktWeHVJQ0FnSUM4dklHVnVMV1JoYzJobGMxeHVJQ0FnSUM1eVpYQnNZV05sS0M4dExTOW5MQ0FuWEZ4MU1qQXhNeWNwWEc0Z0lDQWdMeThnYjNCbGJtbHVaeUJ6YVc1bmJHVnpYRzRnSUNBZ0xuSmxjR3hoWTJVb0x5aGVmRnN0WEZ4MU1qQXhOQzhvWEZ4YmUxd2lYRnh6WFNrbkwyY3NJQ2NrTVZ4Y2RUSXdNVGduS1Z4dUlDQWdJQzh2SUdOc2IzTnBibWNnYzJsdVoyeGxjeUFtSUdGd2IzTjBjbTl3YUdWelhHNGdJQ0FnTG5KbGNHeGhZMlVvTHljdlp5d2dKMXhjZFRJd01Ua25LVnh1SUNBZ0lDOHZJRzl3Wlc1cGJtY2daRzkxWW14bGMxeHVJQ0FnSUM1eVpYQnNZV05sS0M4b1hueGJMVnhjZFRJd01UUXZLRnhjVzN0Y1hIVXlNREU0WEZ4elhTbGNJaTluTENBbkpERmNYSFV5TURGakp5bGNiaUFnSUNBdkx5QmpiRzl6YVc1bklHUnZkV0pzWlhOY2JpQWdJQ0F1Y21Wd2JHRmpaU2d2WENJdlp5d2dKMXhjZFRJd01XUW5LVnh1SUNBZ0lDOHZJR1ZzYkdsd2MyVnpYRzRnSUNBZ0xuSmxjR3hoWTJVb0wxeGNMbnN6ZlM5bkxDQW5YRngxTWpBeU5pY3BPMXh1ZlR0Y2JseHVMeW9xWEc0Z0tpQk5ZVzVuYkdVZ1RHbHVhM05jYmlBcUwxeHVYRzVKYm14cGJtVk1aWGhsY2k1d2NtOTBiM1I1Y0dVdWJXRnVaMnhsSUQwZ1puVnVZM1JwYjI0b2RHVjRkQ2tnZTF4dUlDQnBaaUFvSVhSb2FYTXViM0IwYVc5dWN5NXRZVzVuYkdVcElISmxkSFZ5YmlCMFpYaDBPMXh1SUNCMllYSWdiM1YwSUQwZ0p5ZGNiaUFnSUNBc0lHd2dQU0IwWlhoMExteGxibWQwYUZ4dUlDQWdJQ3dnYVNBOUlEQmNiaUFnSUNBc0lHTm9PMXh1WEc0Z0lHWnZjaUFvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ1kyZ2dQU0IwWlhoMExtTm9ZWEpEYjJSbFFYUW9hU2s3WEc0Z0lDQWdhV1lnS0UxaGRHZ3VjbUZ1Wkc5dEtDa2dQaUF3TGpVcElIdGNiaUFnSUNBZ0lHTm9JRDBnSjNnbklDc2dZMmd1ZEc5VGRISnBibWNvTVRZcE8xeHVJQ0FnSUgxY2JpQWdJQ0J2ZFhRZ0t6MGdKeVlqSnlBcklHTm9JQ3NnSnpzbk8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHOTFkRHRjYm4wN1hHNWNiaThxS2x4dUlDb2dVbVZ1WkdWeVpYSmNiaUFxTDF4dVhHNW1kVzVqZEdsdmJpQlNaVzVrWlhKbGNpaHZjSFJwYjI1ektTQjdYRzRnSUhSb2FYTXViM0IwYVc5dWN5QTlJRzl3ZEdsdmJuTWdmSHdnZTMwN1hHNTlYRzVjYmxKbGJtUmxjbVZ5TG5CeWIzUnZkSGx3WlM1amIyUmxJRDBnWm5WdVkzUnBiMjRvWTI5a1pTd2diR0Z1Wnl3Z1pYTmpZWEJsWkNrZ2UxeHVJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbWhwWjJoc2FXZG9kQ2tnZTF4dUlDQWdJSFpoY2lCdmRYUWdQU0IwYUdsekxtOXdkR2x2Ym5NdWFHbG5hR3hwWjJoMEtHTnZaR1VzSUd4aGJtY3BPMXh1SUNBZ0lHbG1JQ2h2ZFhRZ0lUMGdiblZzYkNBbUppQnZkWFFnSVQwOUlHTnZaR1VwSUh0Y2JpQWdJQ0FnSUdWelkyRndaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdZMjlrWlNBOUlHOTFkRHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JwWmlBb0lXeGhibWNwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKenh3Y21VK1BHTnZaR1UrSjF4dUlDQWdJQ0FnS3lBb1pYTmpZWEJsWkNBL0lHTnZaR1VnT2lCbGMyTmhjR1VvWTI5a1pTd2dkSEoxWlNrcFhHNGdJQ0FnSUNBcklDZGNYRzQ4TDJOdlpHVStQQzl3Y21VK0p6dGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQW5QSEJ5WlQ0OFkyOWtaU0JqYkdGemN6MWNJaWRjYmlBZ0lDQXJJSFJvYVhNdWIzQjBhVzl1Y3k1c1lXNW5VSEpsWm1sNFhHNGdJQ0FnS3lCbGMyTmhjR1VvYkdGdVp5d2dkSEoxWlNsY2JpQWdJQ0FySUNkY0lqNG5YRzRnSUNBZ0t5QW9aWE5qWVhCbFpDQS9JR052WkdVZ09pQmxjMk5oY0dVb1kyOWtaU3dnZEhKMVpTa3BYRzRnSUNBZ0t5QW5YRnh1UEM5amIyUmxQand2Y0hKbFBseGNiaWM3WEc1OU8xeHVYRzVTWlc1a1pYSmxjaTV3Y205MGIzUjVjR1V1WW14dlkydHhkVzkwWlNBOUlHWjFibU4wYVc5dUtIRjFiM1JsS1NCN1hHNGdJSEpsZEhWeWJpQW5QR0pzYjJOcmNYVnZkR1UrWEZ4dUp5QXJJSEYxYjNSbElDc2dKend2WW14dlkydHhkVzkwWlQ1Y1hHNG5PMXh1ZlR0Y2JseHVVbVZ1WkdWeVpYSXVjSEp2ZEc5MGVYQmxMbWgwYld3Z1BTQm1kVzVqZEdsdmJpaG9kRzFzS1NCN1hHNGdJSEpsZEhWeWJpQm9kRzFzTzF4dWZUdGNibHh1VW1WdVpHVnlaWEl1Y0hKdmRHOTBlWEJsTG1obFlXUnBibWNnUFNCbWRXNWpkR2x2YmloMFpYaDBMQ0JzWlhabGJDd2djbUYzS1NCN1hHNGdJSEpsZEhWeWJpQW5QR2duWEc0Z0lDQWdLeUJzWlhabGJGeHVJQ0FnSUNzZ0p5QnBaRDFjSWlkY2JpQWdJQ0FySUhSb2FYTXViM0IwYVc5dWN5NW9aV0ZrWlhKUWNtVm1hWGhjYmlBZ0lDQXJJSEpoZHk1MGIweHZkMlZ5UTJGelpTZ3BMbkpsY0d4aFkyVW9MMXRlWEZ4M1hTc3ZaeXdnSnkwbktWeHVJQ0FnSUNzZ0oxd2lQaWRjYmlBZ0lDQXJJSFJsZUhSY2JpQWdJQ0FySUNjOEwyZ25YRzRnSUNBZ0t5QnNaWFpsYkZ4dUlDQWdJQ3NnSno1Y1hHNG5PMXh1ZlR0Y2JseHVVbVZ1WkdWeVpYSXVjSEp2ZEc5MGVYQmxMbWh5SUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUhKbGRIVnliaUIwYUdsekxtOXdkR2x2Ym5NdWVHaDBiV3dnUHlBblBHaHlMejVjWEc0bklEb2dKenhvY2o1Y1hHNG5PMXh1ZlR0Y2JseHVVbVZ1WkdWeVpYSXVjSEp2ZEc5MGVYQmxMbXhwYzNRZ1BTQm1kVzVqZEdsdmJpaGliMlI1TENCdmNtUmxjbVZrS1NCN1hHNGdJSFpoY2lCMGVYQmxJRDBnYjNKa1pYSmxaQ0EvSUNkdmJDY2dPaUFuZFd3bk8xeHVJQ0J5WlhSMWNtNGdKenduSUNzZ2RIbHdaU0FySUNjK1hGeHVKeUFySUdKdlpIa2dLeUFuUEM4bklDc2dkSGx3WlNBcklDYytYRnh1Snp0Y2JuMDdYRzVjYmxKbGJtUmxjbVZ5TG5CeWIzUnZkSGx3WlM1c2FYTjBhWFJsYlNBOUlHWjFibU4wYVc5dUtIUmxlSFFwSUh0Y2JpQWdjbVYwZFhKdUlDYzhiR2srSnlBcklIUmxlSFFnS3lBblBDOXNhVDVjWEc0bk8xeHVmVHRjYmx4dVVtVnVaR1Z5WlhJdWNISnZkRzkwZVhCbExuQmhjbUZuY21Gd2FDQTlJR1oxYm1OMGFXOXVLSFJsZUhRcElIdGNiaUFnY21WMGRYSnVJQ2M4Y0Q0bklDc2dkR1Y0ZENBcklDYzhMM0ErWEZ4dUp6dGNibjA3WEc1Y2JsSmxibVJsY21WeUxuQnliM1J2ZEhsd1pTNTBZV0pzWlNBOUlHWjFibU4wYVc5dUtHaGxZV1JsY2l3Z1ltOWtlU2tnZTF4dUlDQnlaWFIxY200Z0p6eDBZV0pzWlQ1Y1hHNG5YRzRnSUNBZ0t5QW5QSFJvWldGa1BseGNiaWRjYmlBZ0lDQXJJR2hsWVdSbGNseHVJQ0FnSUNzZ0p6d3ZkR2hsWVdRK1hGeHVKMXh1SUNBZ0lDc2dKengwWW05a2VUNWNYRzRuWEc0Z0lDQWdLeUJpYjJSNVhHNGdJQ0FnS3lBblBDOTBZbTlrZVQ1Y1hHNG5YRzRnSUNBZ0t5QW5QQzkwWVdKc1pUNWNYRzRuTzF4dWZUdGNibHh1VW1WdVpHVnlaWEl1Y0hKdmRHOTBlWEJsTG5SaFlteGxjbTkzSUQwZ1puVnVZM1JwYjI0b1kyOXVkR1Z1ZENrZ2UxeHVJQ0J5WlhSMWNtNGdKengwY2o1Y1hHNG5JQ3NnWTI5dWRHVnVkQ0FySUNjOEwzUnlQbHhjYmljN1hHNTlPMXh1WEc1U1pXNWtaWEpsY2k1d2NtOTBiM1I1Y0dVdWRHRmliR1ZqWld4c0lEMGdablZ1WTNScGIyNG9ZMjl1ZEdWdWRDd2dabXhoWjNNcElIdGNiaUFnZG1GeUlIUjVjR1VnUFNCbWJHRm5jeTVvWldGa1pYSWdQeUFuZEdnbklEb2dKM1JrSnp0Y2JpQWdkbUZ5SUhSaFp5QTlJR1pzWVdkekxtRnNhV2R1WEc0Z0lDQWdQeUFuUENjZ0t5QjBlWEJsSUNzZ0p5QnpkSGxzWlQxY0luUmxlSFF0WVd4cFoyNDZKeUFySUdac1lXZHpMbUZzYVdkdUlDc2dKMXdpUGlkY2JpQWdJQ0E2SUNjOEp5QXJJSFI1Y0dVZ0t5QW5QaWM3WEc0Z0lISmxkSFZ5YmlCMFlXY2dLeUJqYjI1MFpXNTBJQ3NnSnp3dkp5QXJJSFI1Y0dVZ0t5QW5QbHhjYmljN1hHNTlPMXh1WEc0dkx5QnpjR0Z1SUd4bGRtVnNJSEpsYm1SbGNtVnlYRzVTWlc1a1pYSmxjaTV3Y205MGIzUjVjR1V1YzNSeWIyNW5JRDBnWm5WdVkzUnBiMjRvZEdWNGRDa2dlMXh1SUNCeVpYUjFjbTRnSnp4emRISnZibWMrSnlBcklIUmxlSFFnS3lBblBDOXpkSEp2Ym1jK0p6dGNibjA3WEc1Y2JsSmxibVJsY21WeUxuQnliM1J2ZEhsd1pTNWxiU0E5SUdaMWJtTjBhVzl1S0hSbGVIUXBJSHRjYmlBZ2NtVjBkWEp1SUNjOFpXMCtKeUFySUhSbGVIUWdLeUFuUEM5bGJUNG5PMXh1ZlR0Y2JseHVVbVZ1WkdWeVpYSXVjSEp2ZEc5MGVYQmxMbU52WkdWemNHRnVJRDBnWm5WdVkzUnBiMjRvZEdWNGRDa2dlMXh1SUNCeVpYUjFjbTRnSnp4amIyUmxQaWNnS3lCMFpYaDBJQ3NnSnp3dlkyOWtaVDRuTzF4dWZUdGNibHh1VW1WdVpHVnlaWEl1Y0hKdmRHOTBlWEJsTG1KeUlEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lISmxkSFZ5YmlCMGFHbHpMbTl3ZEdsdmJuTXVlR2gwYld3Z1B5QW5QR0p5THo0bklEb2dKenhpY2o0bk8xeHVmVHRjYmx4dVVtVnVaR1Z5WlhJdWNISnZkRzkwZVhCbExtUmxiQ0E5SUdaMWJtTjBhVzl1S0hSbGVIUXBJSHRjYmlBZ2NtVjBkWEp1SUNjOFpHVnNQaWNnS3lCMFpYaDBJQ3NnSnp3dlpHVnNQaWM3WEc1OU8xeHVYRzVTWlc1a1pYSmxjaTV3Y205MGIzUjVjR1V1YkdsdWF5QTlJR1oxYm1OMGFXOXVLR2h5WldZc0lIUnBkR3hsTENCMFpYaDBLU0I3WEc0Z0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdWMyRnVhWFJwZW1VcElIdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdkbUZ5SUhCeWIzUWdQU0JrWldOdlpHVlZVa2xEYjIxd2IyNWxiblFvZFc1bGMyTmhjR1VvYUhKbFppa3BYRzRnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQzliWGx4Y2R6cGRMMmNzSUNjbktWeHVJQ0FnSUNBZ0lDQXVkRzlNYjNkbGNrTmhjMlVvS1R0Y2JpQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnSnljN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNod2NtOTBMbWx1WkdWNFQyWW9KMnBoZG1GelkzSnBjSFE2SnlrZ1BUMDlJREFnZkh3Z2NISnZkQzVwYm1SbGVFOW1LQ2QyWW5OamNtbHdkRG9uS1NBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJQ2NuTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0IyWVhJZ2IzVjBJRDBnSnp4aElHaHlaV1k5WENJbklDc2dhSEpsWmlBcklDZGNJaWM3WEc0Z0lHbG1JQ2gwYVhSc1pTa2dlMXh1SUNBZ0lHOTFkQ0FyUFNBbklIUnBkR3hsUFZ3aUp5QXJJSFJwZEd4bElDc2dKMXdpSnp0Y2JpQWdmVnh1SUNCdmRYUWdLejBnSno0bklDc2dkR1Y0ZENBcklDYzhMMkUrSnp0Y2JpQWdjbVYwZFhKdUlHOTFkRHRjYm4wN1hHNWNibEpsYm1SbGNtVnlMbkJ5YjNSdmRIbHdaUzVwYldGblpTQTlJR1oxYm1OMGFXOXVLR2h5WldZc0lIUnBkR3hsTENCMFpYaDBLU0I3WEc0Z0lIWmhjaUJ2ZFhRZ1BTQW5QR2x0WnlCemNtTTlYQ0luSUNzZ2FISmxaaUFySUNkY0lpQmhiSFE5WENJbklDc2dkR1Y0ZENBcklDZGNJaWM3WEc0Z0lHbG1JQ2gwYVhSc1pTa2dlMXh1SUNBZ0lHOTFkQ0FyUFNBbklIUnBkR3hsUFZ3aUp5QXJJSFJwZEd4bElDc2dKMXdpSnp0Y2JpQWdmVnh1SUNCdmRYUWdLejBnZEdocGN5NXZjSFJwYjI1ekxuaG9kRzFzSUQ4Z0p5OCtKeUE2SUNjK0p6dGNiaUFnY21WMGRYSnVJRzkxZER0Y2JuMDdYRzVjYmxKbGJtUmxjbVZ5TG5CeWIzUnZkSGx3WlM1MFpYaDBJRDBnWm5WdVkzUnBiMjRvZEdWNGRDa2dlMXh1SUNCeVpYUjFjbTRnZEdWNGREdGNibjA3WEc1Y2JpOHFLbHh1SUNvZ1VHRnljMmx1WnlBbUlFTnZiWEJwYkdsdVoxeHVJQ292WEc1Y2JtWjFibU4wYVc5dUlGQmhjbk5sY2lodmNIUnBiMjV6S1NCN1hHNGdJSFJvYVhNdWRHOXJaVzV6SUQwZ1cxMDdYRzRnSUhSb2FYTXVkRzlyWlc0Z1BTQnVkV3hzTzF4dUlDQjBhR2x6TG05d2RHbHZibk1nUFNCdmNIUnBiMjV6SUh4OElHMWhjbXRsWkM1a1pXWmhkV3gwY3p0Y2JpQWdkR2hwY3k1dmNIUnBiMjV6TG5KbGJtUmxjbVZ5SUQwZ2RHaHBjeTV2Y0hScGIyNXpMbkpsYm1SbGNtVnlJSHg4SUc1bGR5QlNaVzVrWlhKbGNqdGNiaUFnZEdocGN5NXlaVzVrWlhKbGNpQTlJSFJvYVhNdWIzQjBhVzl1Y3k1eVpXNWtaWEpsY2p0Y2JpQWdkR2hwY3k1eVpXNWtaWEpsY2k1dmNIUnBiMjV6SUQwZ2RHaHBjeTV2Y0hScGIyNXpPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGTjBZWFJwWXlCUVlYSnpaU0JOWlhSb2IyUmNiaUFxTDF4dVhHNVFZWEp6WlhJdWNHRnljMlVnUFNCbWRXNWpkR2x2YmloemNtTXNJRzl3ZEdsdmJuTXNJSEpsYm1SbGNtVnlLU0I3WEc0Z0lIWmhjaUJ3WVhKelpYSWdQU0J1WlhjZ1VHRnljMlZ5S0c5d2RHbHZibk1zSUhKbGJtUmxjbVZ5S1R0Y2JpQWdjbVYwZFhKdUlIQmhjbk5sY2k1d1lYSnpaU2h6Y21NcE8xeHVmVHRjYmx4dUx5b3FYRzRnS2lCUVlYSnpaU0JNYjI5d1hHNGdLaTljYmx4dVVHRnljMlZ5TG5CeWIzUnZkSGx3WlM1d1lYSnpaU0E5SUdaMWJtTjBhVzl1S0hOeVl5a2dlMXh1SUNCMGFHbHpMbWx1YkdsdVpTQTlJRzVsZHlCSmJteHBibVZNWlhobGNpaHpjbU11YkdsdWEzTXNJSFJvYVhNdWIzQjBhVzl1Y3l3Z2RHaHBjeTV5Wlc1a1pYSmxjaWs3WEc0Z0lIUm9hWE11ZEc5clpXNXpJRDBnYzNKakxuSmxkbVZ5YzJVb0tUdGNibHh1SUNCMllYSWdiM1YwSUQwZ0p5YzdYRzRnSUhkb2FXeGxJQ2gwYUdsekxtNWxlSFFvS1NrZ2UxeHVJQ0FnSUc5MWRDQXJQU0IwYUdsekxuUnZheWdwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUc5MWREdGNibjA3WEc1Y2JpOHFLbHh1SUNvZ1RtVjRkQ0JVYjJ0bGJseHVJQ292WEc1Y2JsQmhjbk5sY2k1d2NtOTBiM1I1Y0dVdWJtVjRkQ0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0J5WlhSMWNtNGdkR2hwY3k1MGIydGxiaUE5SUhSb2FYTXVkRzlyWlc1ekxuQnZjQ2dwTzF4dWZUdGNibHh1THlvcVhHNGdLaUJRY21WMmFXVjNJRTVsZUhRZ1ZHOXJaVzVjYmlBcUwxeHVYRzVRWVhKelpYSXVjSEp2ZEc5MGVYQmxMbkJsWldzZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ2NtVjBkWEp1SUhSb2FYTXVkRzlyWlc1elczUm9hWE11ZEc5clpXNXpMbXhsYm1kMGFDQXRJREZkSUh4OElEQTdYRzU5TzF4dVhHNHZLaXBjYmlBcUlGQmhjbk5sSUZSbGVIUWdWRzlyWlc1elhHNGdLaTljYmx4dVVHRnljMlZ5TG5CeWIzUnZkSGx3WlM1d1lYSnpaVlJsZUhRZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ2RtRnlJR0p2WkhrZ1BTQjBhR2x6TG5SdmEyVnVMblJsZUhRN1hHNWNiaUFnZDJocGJHVWdLSFJvYVhNdWNHVmxheWdwTG5SNWNHVWdQVDA5SUNkMFpYaDBKeWtnZTF4dUlDQWdJR0p2WkhrZ0t6MGdKMXhjYmljZ0t5QjBhR2x6TG01bGVIUW9LUzUwWlhoME8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlIUm9hWE11YVc1c2FXNWxMbTkxZEhCMWRDaGliMlI1S1R0Y2JuMDdYRzVjYmk4cUtseHVJQ29nVUdGeWMyVWdRM1Z5Y21WdWRDQlViMnRsYmx4dUlDb3ZYRzVjYmxCaGNuTmxjaTV3Y205MGIzUjVjR1V1ZEc5cklEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lITjNhWFJqYUNBb2RHaHBjeTUwYjJ0bGJpNTBlWEJsS1NCN1hHNGdJQ0FnWTJGelpTQW5jM0JoWTJVbk9pQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0p5YzdYRzRnSUNBZ2ZWeHVJQ0FnSUdOaGMyVWdKMmh5SnpvZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZ1WkdWeVpYSXVhSElvS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdZMkZ6WlNBbmFHVmhaR2x1WnljNklIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsYm1SbGNtVnlMbWhsWVdScGJtY29YRzRnSUNBZ0lDQWdJSFJvYVhNdWFXNXNhVzVsTG05MWRIQjFkQ2gwYUdsekxuUnZhMlZ1TG5SbGVIUXBMRnh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZhMlZ1TG1SbGNIUm9MRnh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZhMlZ1TG5SbGVIUXBPMXh1SUNBZ0lIMWNiaUFnSUNCallYTmxJQ2RqYjJSbEp6b2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y21WdVpHVnlaWEl1WTI5a1pTaDBhR2x6TG5SdmEyVnVMblJsZUhRc1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEc5clpXNHViR0Z1Wnl4Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjJ0bGJpNWxjMk5oY0dWa0tUdGNiaUFnSUNCOVhHNGdJQ0FnWTJGelpTQW5kR0ZpYkdVbk9pQjdYRzRnSUNBZ0lDQjJZWElnYUdWaFpHVnlJRDBnSnlkY2JpQWdJQ0FnSUNBZ0xDQmliMlI1SUQwZ0p5ZGNiaUFnSUNBZ0lDQWdMQ0JwWEc0Z0lDQWdJQ0FnSUN3Z2NtOTNYRzRnSUNBZ0lDQWdJQ3dnWTJWc2JGeHVJQ0FnSUNBZ0lDQXNJR1pzWVdkelhHNGdJQ0FnSUNBZ0lDd2dhanRjYmx4dUlDQWdJQ0FnTHk4Z2FHVmhaR1Z5WEc0Z0lDQWdJQ0JqWld4c0lEMGdKeWM3WEc0Z0lDQWdJQ0JtYjNJZ0tHa2dQU0F3T3lCcElEd2dkR2hwY3k1MGIydGxiaTVvWldGa1pYSXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ1pteGhaM01nUFNCN0lHaGxZV1JsY2pvZ2RISjFaU3dnWVd4cFoyNDZJSFJvYVhNdWRHOXJaVzR1WVd4cFoyNWJhVjBnZlR0Y2JpQWdJQ0FnSUNBZ1kyVnNiQ0FyUFNCMGFHbHpMbkpsYm1SbGNtVnlMblJoWW14bFkyVnNiQ2hjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbWx1YkdsdVpTNXZkWFJ3ZFhRb2RHaHBjeTUwYjJ0bGJpNW9aV0ZrWlhKYmFWMHBMRnh1SUNBZ0lDQWdJQ0FnSUhzZ2FHVmhaR1Z5T2lCMGNuVmxMQ0JoYkdsbmJqb2dkR2hwY3k1MGIydGxiaTVoYkdsbmJsdHBYU0I5WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCb1pXRmtaWElnS3owZ2RHaHBjeTV5Wlc1a1pYSmxjaTUwWVdKc1pYSnZkeWhqWld4c0tUdGNibHh1SUNBZ0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElIUm9hWE11ZEc5clpXNHVZMlZzYkhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnY205M0lEMGdkR2hwY3k1MGIydGxiaTVqWld4c2MxdHBYVHRjYmx4dUlDQWdJQ0FnSUNCalpXeHNJRDBnSnljN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvYWlBOUlEQTdJR29nUENCeWIzY3ViR1Z1WjNSb095QnFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpaV3hzSUNzOUlIUm9hWE11Y21WdVpHVnlaWEl1ZEdGaWJHVmpaV3hzS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1cGJteHBibVV1YjNWMGNIVjBLSEp2ZDF0cVhTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCN0lHaGxZV1JsY2pvZ1ptRnNjMlVzSUdGc2FXZHVPaUIwYUdsekxuUnZhMlZ1TG1Gc2FXZHVXMnBkSUgxY2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1ltOWtlU0FyUFNCMGFHbHpMbkpsYm1SbGNtVnlMblJoWW14bGNtOTNLR05sYkd3cE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZ1WkdWeVpYSXVkR0ZpYkdVb2FHVmhaR1Z5TENCaWIyUjVLVHRjYmlBZ0lDQjlYRzRnSUNBZ1kyRnpaU0FuWW14dlkydHhkVzkwWlY5emRHRnlkQ2M2SUh0Y2JpQWdJQ0FnSUhaaGNpQmliMlI1SUQwZ0p5YzdYRzVjYmlBZ0lDQWdJSGRvYVd4bElDaDBhR2x6TG01bGVIUW9LUzUwZVhCbElDRTlQU0FuWW14dlkydHhkVzkwWlY5bGJtUW5LU0I3WEc0Z0lDQWdJQ0FnSUdKdlpIa2dLejBnZEdocGN5NTBiMnNvS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZ1WkdWeVpYSXVZbXh2WTJ0eGRXOTBaU2hpYjJSNUtUdGNiaUFnSUNCOVhHNGdJQ0FnWTJGelpTQW5iR2x6ZEY5emRHRnlkQ2M2SUh0Y2JpQWdJQ0FnSUhaaGNpQmliMlI1SUQwZ0p5ZGNiaUFnSUNBZ0lDQWdMQ0J2Y21SbGNtVmtJRDBnZEdocGN5NTBiMnRsYmk1dmNtUmxjbVZrTzF4dVhHNGdJQ0FnSUNCM2FHbHNaU0FvZEdocGN5NXVaWGgwS0NrdWRIbHdaU0FoUFQwZ0oyeHBjM1JmWlc1a0p5a2dlMXh1SUNBZ0lDQWdJQ0JpYjJSNUlDczlJSFJvYVhNdWRHOXJLQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmxibVJsY21WeUxteHBjM1FvWW05a2VTd2diM0prWlhKbFpDazdYRzRnSUNBZ2ZWeHVJQ0FnSUdOaGMyVWdKMnhwYzNSZmFYUmxiVjl6ZEdGeWRDYzZJSHRjYmlBZ0lDQWdJSFpoY2lCaWIyUjVJRDBnSnljN1hHNWNiaUFnSUNBZ0lIZG9hV3hsSUNoMGFHbHpMbTVsZUhRb0tTNTBlWEJsSUNFOVBTQW5iR2x6ZEY5cGRHVnRYMlZ1WkNjcElIdGNiaUFnSUNBZ0lDQWdZbTlrZVNBclBTQjBhR2x6TG5SdmEyVnVMblI1Y0dVZ1BUMDlJQ2QwWlhoMEoxeHVJQ0FnSUNBZ0lDQWdJRDhnZEdocGN5NXdZWEp6WlZSbGVIUW9LVnh1SUNBZ0lDQWdJQ0FnSURvZ2RHaHBjeTUwYjJzb0tUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y21WdVpHVnlaWEl1YkdsemRHbDBaVzBvWW05a2VTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdOaGMyVWdKMnh2YjNObFgybDBaVzFmYzNSaGNuUW5PaUI3WEc0Z0lDQWdJQ0IyWVhJZ1ltOWtlU0E5SUNjbk8xeHVYRzRnSUNBZ0lDQjNhR2xzWlNBb2RHaHBjeTV1WlhoMEtDa3VkSGx3WlNBaFBUMGdKMnhwYzNSZmFYUmxiVjlsYm1RbktTQjdYRzRnSUNBZ0lDQWdJR0p2WkhrZ0t6MGdkR2hwY3k1MGIyc29LVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtVnVaR1Z5WlhJdWJHbHpkR2wwWlcwb1ltOWtlU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHTmhjMlVnSjJoMGJXd25PaUI3WEc0Z0lDQWdJQ0IyWVhJZ2FIUnRiQ0E5SUNGMGFHbHpMblJ2YTJWdUxuQnlaU0FtSmlBaGRHaHBjeTV2Y0hScGIyNXpMbkJsWkdGdWRHbGpYRzRnSUNBZ0lDQWdJRDhnZEdocGN5NXBibXhwYm1VdWIzVjBjSFYwS0hSb2FYTXVkRzlyWlc0dWRHVjRkQ2xjYmlBZ0lDQWdJQ0FnT2lCMGFHbHpMblJ2YTJWdUxuUmxlSFE3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpXNWtaWEpsY2k1b2RHMXNLR2gwYld3cE8xeHVJQ0FnSUgxY2JpQWdJQ0JqWVhObElDZHdZWEpoWjNKaGNHZ25PaUI3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpXNWtaWEpsY2k1d1lYSmhaM0poY0dnb2RHaHBjeTVwYm14cGJtVXViM1YwY0hWMEtIUm9hWE11ZEc5clpXNHVkR1Y0ZENrcE8xeHVJQ0FnSUgxY2JpQWdJQ0JqWVhObElDZDBaWGgwSnpvZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZ1WkdWeVpYSXVjR0Z5WVdkeVlYQm9LSFJvYVhNdWNHRnljMlZVWlhoMEtDa3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZUdGNibHh1THlvcVhHNGdLaUJJWld4d1pYSnpYRzRnS2k5Y2JseHVablZ1WTNScGIyNGdaWE5qWVhCbEtHaDBiV3dzSUdWdVkyOWtaU2tnZTF4dUlDQnlaWFIxY200Z2FIUnRiRnh1SUNBZ0lDNXlaWEJzWVdObEtDRmxibU52WkdVZ1B5QXZKaWcvSVNNL1hGeDNLenNwTDJjZ09pQXZKaTluTENBbkptRnRjRHNuS1Z4dUlDQWdJQzV5WlhCc1lXTmxLQzg4TDJjc0lDY21iSFE3SnlsY2JpQWdJQ0F1Y21Wd2JHRmpaU2d2UGk5bkxDQW5KbWQwT3ljcFhHNGdJQ0FnTG5KbGNHeGhZMlVvTDF3aUwyY3NJQ2NtY1hWdmREc25LVnh1SUNBZ0lDNXlaWEJzWVdObEtDOG5MMmNzSUNjbUl6TTVPeWNwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUIxYm1WelkyRndaU2hvZEcxc0tTQjdYRzRnSUhKbGRIVnliaUJvZEcxc0xuSmxjR3hoWTJVb0x5WW9XeU5jWEhkZEt5azdMMmNzSUdaMWJtTjBhVzl1S0Y4c0lHNHBJSHRjYmlBZ0lDQnVJRDBnYmk1MGIweHZkMlZ5UTJGelpTZ3BPMXh1SUNBZ0lHbG1JQ2h1SUQwOVBTQW5ZMjlzYjI0bktTQnlaWFIxY200Z0p6b25PMXh1SUNBZ0lHbG1JQ2h1TG1Ob1lYSkJkQ2d3S1NBOVBUMGdKeU1uS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYmk1amFHRnlRWFFvTVNrZ1BUMDlJQ2Q0SjF4dUlDQWdJQ0FnSUNBL0lGTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9jR0Z5YzJWSmJuUW9iaTV6ZFdKemRISnBibWNvTWlrc0lERTJLU2xjYmlBZ0lDQWdJQ0FnT2lCVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtDdHVMbk4xWW5OMGNtbHVaeWd4S1NrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQW5KenRjYmlBZ2ZTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlISmxjR3hoWTJVb2NtVm5aWGdzSUc5d2RDa2dlMXh1SUNCeVpXZGxlQ0E5SUhKbFoyVjRMbk52ZFhKalpUdGNiaUFnYjNCMElEMGdiM0IwSUh4OElDY25PMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYzJWc1ppaHVZVzFsTENCMllXd3BJSHRjYmlBZ0lDQnBaaUFvSVc1aGJXVXBJSEpsZEhWeWJpQnVaWGNnVW1WblJYaHdLSEpsWjJWNExDQnZjSFFwTzF4dUlDQWdJSFpoYkNBOUlIWmhiQzV6YjNWeVkyVWdmSHdnZG1Gc08xeHVJQ0FnSUhaaGJDQTlJSFpoYkM1eVpYQnNZV05sS0M4b1hueGJYbHhjVzEwcFhGeGVMMmNzSUNja01TY3BPMXh1SUNBZ0lISmxaMlY0SUQwZ2NtVm5aWGd1Y21Wd2JHRmpaU2h1WVcxbExDQjJZV3dwTzF4dUlDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQjlPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnViMjl3S0NrZ2UzMWNibTV2YjNBdVpYaGxZeUE5SUc1dmIzQTdYRzVjYm1aMWJtTjBhVzl1SUcxbGNtZGxLRzlpYWlrZ2UxeHVJQ0IyWVhJZ2FTQTlJREZjYmlBZ0lDQXNJSFJoY21kbGRGeHVJQ0FnSUN3Z2EyVjVPMXh1WEc0Z0lHWnZjaUFvT3lCcElEd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnZEdGeVoyVjBJRDBnWVhKbmRXMWxiblJ6VzJsZE8xeHVJQ0FnSUdadmNpQW9hMlY1SUdsdUlIUmhjbWRsZENrZ2UxeHVJQ0FnSUNBZ2FXWWdLRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2gwWVhKblpYUXNJR3RsZVNrcElIdGNiaUFnSUNBZ0lDQWdiMkpxVzJ0bGVWMGdQU0IwWVhKblpYUmJhMlY1WFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYjJKcU8xeHVmVnh1WEc1Y2JpOHFLbHh1SUNvZ1RXRnlhMlZrWEc0Z0tpOWNibHh1Wm5WdVkzUnBiMjRnYldGeWEyVmtLSE55WXl3Z2IzQjBMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQnBaaUFvWTJGc2JHSmhZMnNnZkh3Z2RIbHdaVzltSUc5d2RDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUdsbUlDZ2hZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQWdJR05oYkd4aVlXTnJJRDBnYjNCME8xeHVJQ0FnSUNBZ2IzQjBJRDBnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNCdmNIUWdQU0J0WlhKblpTaDdmU3dnYldGeWEyVmtMbVJsWm1GMWJIUnpMQ0J2Y0hRZ2ZId2dlMzBwTzF4dVhHNGdJQ0FnZG1GeUlHaHBaMmhzYVdkb2RDQTlJRzl3ZEM1b2FXZG9iR2xuYUhSY2JpQWdJQ0FnSUN3Z2RHOXJaVzV6WEc0Z0lDQWdJQ0FzSUhCbGJtUnBibWRjYmlBZ0lDQWdJQ3dnYVNBOUlEQTdYRzVjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnZEc5clpXNXpJRDBnVEdWNFpYSXViR1Y0S0hOeVl5d2diM0IwS1Z4dUlDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJqWVd4c1ltRmpheWhsS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J3Wlc1a2FXNW5JRDBnZEc5clpXNXpMbXhsYm1kMGFEdGNibHh1SUNBZ0lIWmhjaUJrYjI1bElEMGdablZ1WTNScGIyNG9aWEp5S1NCN1hHNGdJQ0FnSUNCcFppQW9aWEp5S1NCN1hHNGdJQ0FnSUNBZ0lHOXdkQzVvYVdkb2JHbG5hSFFnUFNCb2FXZG9iR2xuYUhRN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXeHNZbUZqYXlobGNuSXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IyWVhJZ2IzVjBPMXh1WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQnZkWFFnUFNCUVlYSnpaWEl1Y0dGeWMyVW9kRzlyWlc1ekxDQnZjSFFwTzF4dUlDQWdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQmxjbklnUFNCbE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnZjSFF1YUdsbmFHeHBaMmgwSUQwZ2FHbG5hR3hwWjJoME8xeHVYRzRnSUNBZ0lDQnlaWFIxY200Z1pYSnlYRzRnSUNBZ0lDQWdJRDhnWTJGc2JHSmhZMnNvWlhKeUtWeHVJQ0FnSUNBZ0lDQTZJR05oYkd4aVlXTnJLRzUxYkd3c0lHOTFkQ2s3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJR2xtSUNnaGFHbG5hR3hwWjJoMElIeDhJR2hwWjJoc2FXZG9kQzVzWlc1bmRHZ2dQQ0F6S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWkc5dVpTZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHUmxiR1YwWlNCdmNIUXVhR2xuYUd4cFoyaDBPMXh1WEc0Z0lDQWdhV1lnS0NGd1pXNWthVzVuS1NCeVpYUjFjbTRnWkc5dVpTZ3BPMXh1WEc0Z0lDQWdabTl5SUNnN0lHa2dQQ0IwYjJ0bGJuTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNobWRXNWpkR2x2YmloMGIydGxiaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9kRzlyWlc0dWRIbHdaU0FoUFQwZ0oyTnZaR1VuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDMHRjR1Z1WkdsdVp5QjhmQ0JrYjI1bEtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2hwWjJoc2FXZG9kQ2gwYjJ0bGJpNTBaWGgwTENCMGIydGxiaTVzWVc1bkxDQm1kVzVqZEdsdmJpaGxjbklzSUdOdlpHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9aWEp5S1NCeVpYUjFjbTRnWkc5dVpTaGxjbklwTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hqYjJSbElEMDlJRzUxYkd3Z2ZId2dZMjlrWlNBOVBUMGdkRzlyWlc0dWRHVjRkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDMHRjR1Z1WkdsdVp5QjhmQ0JrYjI1bEtDazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIUnZhMlZ1TG5SbGVIUWdQU0JqYjJSbE8xeHVJQ0FnSUNBZ0lDQWdJSFJ2YTJWdUxtVnpZMkZ3WldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDMHRjR1Z1WkdsdVp5QjhmQ0JrYjI1bEtDazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlNrb2RHOXJaVzV6VzJsZEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMWNiaUFnZEhKNUlIdGNiaUFnSUNCcFppQW9iM0IwS1NCdmNIUWdQU0J0WlhKblpTaDdmU3dnYldGeWEyVmtMbVJsWm1GMWJIUnpMQ0J2Y0hRcE8xeHVJQ0FnSUhKbGRIVnliaUJRWVhKelpYSXVjR0Z5YzJVb1RHVjRaWEl1YkdWNEtITnlZeXdnYjNCMEtTd2diM0IwS1R0Y2JpQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJR1V1YldWemMyRm5aU0FyUFNBblhGeHVVR3hsWVhObElISmxjRzl5ZENCMGFHbHpJSFJ2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5amFHcHFMMjFoY210bFpDNG5PMXh1SUNBZ0lHbG1JQ2dvYjNCMElIeDhJRzFoY210bFpDNWtaV1poZFd4MGN5a3VjMmxzWlc1MEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0p6eHdQa0Z1SUdWeWNtOXlJRzlqWTNWeVpXUTZQQzl3UGp4d2NtVStKMXh1SUNBZ0lDQWdJQ0FySUdWelkyRndaU2hsTG0xbGMzTmhaMlVnS3lBbkp5d2dkSEoxWlNsY2JpQWdJQ0FnSUNBZ0t5QW5QQzl3Y21VK0p6dGNiaUFnSUNCOVhHNGdJQ0FnZEdoeWIzY2daVHRjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUU5d2RHbHZibk5jYmlBcUwxeHVYRzV0WVhKclpXUXViM0IwYVc5dWN5QTlYRzV0WVhKclpXUXVjMlYwVDNCMGFXOXVjeUE5SUdaMWJtTjBhVzl1S0c5d2RDa2dlMXh1SUNCdFpYSm5aU2h0WVhKclpXUXVaR1ZtWVhWc2RITXNJRzl3ZENrN1hHNGdJSEpsZEhWeWJpQnRZWEpyWldRN1hHNTlPMXh1WEc1dFlYSnJaV1F1WkdWbVlYVnNkSE1nUFNCN1hHNGdJR2RtYlRvZ2RISjFaU3hjYmlBZ2RHRmliR1Z6T2lCMGNuVmxMRnh1SUNCaWNtVmhhM002SUdaaGJITmxMRnh1SUNCd1pXUmhiblJwWXpvZ1ptRnNjMlVzWEc0Z0lITmhibWwwYVhwbE9pQm1ZV3h6WlN4Y2JpQWdjMkZ1YVhScGVtVnlPaUJ1ZFd4c0xGeHVJQ0J0WVc1bmJHVTZJSFJ5ZFdVc1hHNGdJSE50WVhKMFRHbHpkSE02SUdaaGJITmxMRnh1SUNCemFXeGxiblE2SUdaaGJITmxMRnh1SUNCb2FXZG9iR2xuYUhRNklHNTFiR3dzWEc0Z0lHeGhibWRRY21WbWFYZzZJQ2RzWVc1bkxTY3NYRzRnSUhOdFlYSjBlWEJoYm5Sek9pQm1ZV3h6WlN4Y2JpQWdhR1ZoWkdWeVVISmxabWw0T2lBbkp5eGNiaUFnY21WdVpHVnlaWEk2SUc1bGR5QlNaVzVrWlhKbGNpeGNiaUFnZUdoMGJXdzZJR1poYkhObFhHNTlPMXh1WEc0dktpcGNiaUFxSUVWNGNHOXpaVnh1SUNvdlhHNWNibTFoY210bFpDNVFZWEp6WlhJZ1BTQlFZWEp6WlhJN1hHNXRZWEpyWldRdWNHRnljMlZ5SUQwZ1VHRnljMlZ5TG5CaGNuTmxPMXh1WEc1dFlYSnJaV1F1VW1WdVpHVnlaWElnUFNCU1pXNWtaWEpsY2p0Y2JseHViV0Z5YTJWa0xreGxlR1Z5SUQwZ1RHVjRaWEk3WEc1dFlYSnJaV1F1YkdWNFpYSWdQU0JNWlhobGNpNXNaWGc3WEc1Y2JtMWhjbXRsWkM1SmJteHBibVZNWlhobGNpQTlJRWx1YkdsdVpVeGxlR1Z5TzF4dWJXRnlhMlZrTG1sdWJHbHVaVXhsZUdWeUlEMGdTVzVzYVc1bFRHVjRaWEl1YjNWMGNIVjBPMXh1WEc1dFlYSnJaV1F1Y0dGeWMyVWdQU0J0WVhKclpXUTdYRzVjYm1sbUlDaDBlWEJsYjJZZ2JXOWtkV3hsSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCMGVYQmxiMllnWlhod2IzSjBjeUE5UFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0J0WVhKclpXUTdYRzU5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJrWldacGJtVWdQVDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdaR1ZtYVc1bExtRnRaQ2tnZTF4dUlDQmtaV1pwYm1Vb1puVnVZM1JwYjI0b0tTQjdJSEpsZEhWeWJpQnRZWEpyWldRN0lIMHBPMXh1ZlNCbGJITmxJSHRjYmlBZ2RHaHBjeTV0WVhKclpXUWdQU0J0WVhKclpXUTdYRzU5WEc1Y2JuMHBMbU5oYkd3b1puVnVZM1JwYjI0b0tTQjdYRzRnSUhKbGRIVnliaUIwYUdseklIeDhJQ2gwZVhCbGIyWWdkMmx1Wkc5M0lDRTlQU0FuZFc1a1pXWnBibVZrSnlBL0lIZHBibVJ2ZHlBNklHZHNiMkpoYkNrN1hHNTlLQ2twTzF4dUlsMTkiLCIvKipcbiAqIENvcHlyaWdodCAyMDEyIENyYWlnIENhbXBiZWxsXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogTW91c2V0cmFwIGlzIGEgc2ltcGxlIGtleWJvYXJkIHNob3J0Y3V0IGxpYnJhcnkgZm9yIEphdmFzY3JpcHQgd2l0aFxuICogbm8gZXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKlxuICogQHZlcnNpb24gMS4xLjJcbiAqIEB1cmwgY3JhaWcuaXMva2lsbGluZy9taWNlXG4gKi9cblxuICAvKipcbiAgICogbWFwcGluZyBvZiBzcGVjaWFsIGtleWNvZGVzIHRvIHRoZWlyIGNvcnJlc3BvbmRpbmcga2V5c1xuICAgKlxuICAgKiBldmVyeXRoaW5nIGluIHRoaXMgZGljdGlvbmFyeSBjYW5ub3QgdXNlIGtleXByZXNzIGV2ZW50c1xuICAgKiBzbyBpdCBoYXMgdG8gYmUgaGVyZSB0byBtYXAgdG8gdGhlIGNvcnJlY3Qga2V5Y29kZXMgZm9yXG4gICAqIGtleXVwL2tleWRvd24gZXZlbnRzXG4gICAqXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICB2YXIgX01BUCA9IHtcbiAgICAgICAgICA4OiAnYmFja3NwYWNlJyxcbiAgICAgICAgICA5OiAndGFiJyxcbiAgICAgICAgICAxMzogJ2VudGVyJyxcbiAgICAgICAgICAxNjogJ3NoaWZ0JyxcbiAgICAgICAgICAxNzogJ2N0cmwnLFxuICAgICAgICAgIDE4OiAnYWx0JyxcbiAgICAgICAgICAyMDogJ2NhcHNsb2NrJyxcbiAgICAgICAgICAyNzogJ2VzYycsXG4gICAgICAgICAgMzI6ICdzcGFjZScsXG4gICAgICAgICAgMzM6ICdwYWdldXAnLFxuICAgICAgICAgIDM0OiAncGFnZWRvd24nLFxuICAgICAgICAgIDM1OiAnZW5kJyxcbiAgICAgICAgICAzNjogJ2hvbWUnLFxuICAgICAgICAgIDM3OiAnbGVmdCcsXG4gICAgICAgICAgMzg6ICd1cCcsXG4gICAgICAgICAgMzk6ICdyaWdodCcsXG4gICAgICAgICAgNDA6ICdkb3duJyxcbiAgICAgICAgICA0NTogJ2lucycsXG4gICAgICAgICAgNDY6ICdkZWwnLFxuICAgICAgICAgIDkxOiAnbWV0YScsXG4gICAgICAgICAgOTM6ICdtZXRhJyxcbiAgICAgICAgICAyMjQ6ICdtZXRhJ1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBtYXBwaW5nIGZvciBzcGVjaWFsIGNoYXJhY3RlcnMgc28gdGhleSBjYW4gc3VwcG9ydFxuICAgICAgICpcbiAgICAgICAqIHRoaXMgZGljdGlvbmFyeSBpcyBvbmx5IHVzZWQgaW5jYXNlIHlvdSB3YW50IHRvIGJpbmQgYVxuICAgICAgICoga2V5dXAgb3Iga2V5ZG93biBldmVudCB0byBvbmUgb2YgdGhlc2Uga2V5c1xuICAgICAgICpcbiAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgIF9LRVlDT0RFX01BUCA9IHtcbiAgICAgICAgICAxMDY6ICcqJyxcbiAgICAgICAgICAxMDc6ICcrJyxcbiAgICAgICAgICAxMDk6ICctJyxcbiAgICAgICAgICAxMTA6ICcuJyxcbiAgICAgICAgICAxMTEgOiAnLycsXG4gICAgICAgICAgMTg2OiAnOycsXG4gICAgICAgICAgMTg3OiAnPScsXG4gICAgICAgICAgMTg4OiAnLCcsXG4gICAgICAgICAgMTg5OiAnLScsXG4gICAgICAgICAgMTkwOiAnLicsXG4gICAgICAgICAgMTkxOiAnLycsXG4gICAgICAgICAgMTkyOiAnYCcsXG4gICAgICAgICAgMjE5OiAnWycsXG4gICAgICAgICAgMjIwOiAnXFxcXCcsXG4gICAgICAgICAgMjIxOiAnXScsXG4gICAgICAgICAgMjIyOiAnXFwnJ1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiB0aGlzIGlzIGEgbWFwcGluZyBvZiBrZXlzIHRoYXQgcmVxdWlyZSBzaGlmdCBvbiBhIFVTIGtleXBhZFxuICAgICAgICogYmFjayB0byB0aGUgbm9uIHNoaWZ0IGVxdWl2ZWxlbnRzXG4gICAgICAgKlxuICAgICAgICogdGhpcyBpcyBzbyB5b3UgY2FuIHVzZSBrZXl1cCBldmVudHMgd2l0aCB0aGVzZSBrZXlzXG4gICAgICAgKlxuICAgICAgICogbm90ZSB0aGF0IHRoaXMgd2lsbCBvbmx5IHdvcmsgcmVsaWFibHkgb24gVVMga2V5Ym9hcmRzXG4gICAgICAgKlxuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgX1NISUZUX01BUCA9IHtcbiAgICAgICAgICAnfic6ICdgJyxcbiAgICAgICAgICAnISc6ICcxJyxcbiAgICAgICAgICAnQCc6ICcyJyxcbiAgICAgICAgICAnIyc6ICczJyxcbiAgICAgICAgICAnJCc6ICc0JyxcbiAgICAgICAgICAnJSc6ICc1JyxcbiAgICAgICAgICAnXic6ICc2JyxcbiAgICAgICAgICAnJic6ICc3JyxcbiAgICAgICAgICAnKic6ICc4JyxcbiAgICAgICAgICAnKCc6ICc5JyxcbiAgICAgICAgICAnKSc6ICcwJyxcbiAgICAgICAgICAnXyc6ICctJyxcbiAgICAgICAgICAnKyc6ICc9JyxcbiAgICAgICAgICAnOic6ICc7JyxcbiAgICAgICAgICAnXFxcIic6ICdcXCcnLFxuICAgICAgICAgICc8JzogJywnLFxuICAgICAgICAgICc+JzogJy4nLFxuICAgICAgICAgICc/JzogJy8nLFxuICAgICAgICAgICd8JzogJ1xcXFwnXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIHRoaXMgaXMgYSBsaXN0IG9mIHNwZWNpYWwgc3RyaW5ncyB5b3UgY2FuIHVzZSB0byBtYXBcbiAgICAgICAqIHRvIG1vZGlmaWVyIGtleXMgd2hlbiB5b3Ugc3BlY2lmeSB5b3VyIGtleWJvYXJkIHNob3J0Y3V0c1xuICAgICAgICpcbiAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgIF9TUEVDSUFMX0FMSUFTRVMgPSB7XG4gICAgICAgICAgJ29wdGlvbic6ICdhbHQnLFxuICAgICAgICAgICdjb21tYW5kJzogJ21ldGEnLFxuICAgICAgICAgICdyZXR1cm4nOiAnZW50ZXInLFxuICAgICAgICAgICdlc2NhcGUnOiAnZXNjJ1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiB2YXJpYWJsZSB0byBzdG9yZSB0aGUgZmxpcHBlZCB2ZXJzaW9uIG9mIF9NQVAgZnJvbSBhYm92ZVxuICAgICAgICogbmVlZGVkIHRvIGNoZWNrIGlmIHdlIHNob3VsZCB1c2Uga2V5cHJlc3Mgb3Igbm90IHdoZW4gbm8gYWN0aW9uXG4gICAgICAgKiBpcyBzcGVjaWZpZWRcbiAgICAgICAqXG4gICAgICAgKiBAdHlwZSB7T2JqZWN0fHVuZGVmaW5lZH1cbiAgICAgICAqL1xuICAgICAgX1JFVkVSU0VfTUFQLFxuXG4gICAgICAvKipcbiAgICAgICAqIGEgbGlzdCBvZiBhbGwgdGhlIGNhbGxiYWNrcyBzZXR1cCB2aWEgTW91c2V0cmFwLmJpbmQoKVxuICAgICAgICpcbiAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgIF9jYWxsYmFja3MgPSB7fSxcblxuICAgICAgLyoqXG4gICAgICAgKiBkaXJlY3QgbWFwIG9mIHN0cmluZyBjb21iaW5hdGlvbnMgdG8gY2FsbGJhY2tzIHVzZWQgZm9yIHRyaWdnZXIoKVxuICAgICAgICpcbiAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgIF9kaXJlY3RfbWFwID0ge30sXG5cbiAgICAgIC8qKlxuICAgICAgICoga2VlcHMgdHJhY2sgb2Ygd2hhdCBsZXZlbCBlYWNoIHNlcXVlbmNlIGlzIGF0IHNpbmNlIG11bHRpcGxlXG4gICAgICAgKiBzZXF1ZW5jZXMgY2FuIHN0YXJ0IG91dCB3aXRoIHRoZSBzYW1lIHNlcXVlbmNlXG4gICAgICAgKlxuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgX3NlcXVlbmNlX2xldmVscyA9IHt9LFxuXG4gICAgICAvKipcbiAgICAgICAqIHZhcmlhYmxlIHRvIHN0b3JlIHRoZSBzZXRUaW1lb3V0IGNhbGxcbiAgICAgICAqXG4gICAgICAgKiBAdHlwZSB7bnVsbHxudW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIF9yZXNldF90aW1lcixcblxuICAgICAgLyoqXG4gICAgICAgKiB0ZW1wb3Jhcnkgc3RhdGUgd2hlcmUgd2Ugd2lsbCBpZ25vcmUgdGhlIG5leHQga2V5dXBcbiAgICAgICAqXG4gICAgICAgKiBAdHlwZSB7Ym9vbGVhbnxzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgIF9pZ25vcmVfbmV4dF9rZXl1cCA9IGZhbHNlLFxuXG4gICAgICAvKipcbiAgICAgICAqIGFyZSB3ZSBjdXJyZW50bHkgaW5zaWRlIG9mIGEgc2VxdWVuY2U/XG4gICAgICAgKiB0eXBlIG9mIGFjdGlvbiAoXCJrZXl1cFwiIG9yIFwia2V5ZG93blwiIG9yIFwia2V5cHJlc3NcIikgb3IgZmFsc2VcbiAgICAgICAqXG4gICAgICAgKiBAdHlwZSB7Ym9vbGVhbnxzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgIF9pbnNpZGVfc2VxdWVuY2UgPSBmYWxzZTtcblxuICAvKipcbiAgICogbG9vcCB0aHJvdWdoIHRoZSBmIGtleXMsIGYxIHRvIGYxOSBhbmQgYWRkIHRoZW0gdG8gdGhlIG1hcFxuICAgKiBwcm9ncmFtYXRpY2FsbHlcbiAgICovXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgMjA7ICsraSkge1xuICAgICAgX01BUFsxMTEgKyBpXSA9ICdmJyArIGk7XG4gIH1cblxuICAvKipcbiAgICogbG9vcCB0aHJvdWdoIHRvIG1hcCBudW1iZXJzIG9uIHRoZSBudW1lcmljIGtleXBhZFxuICAgKi9cbiAgZm9yIChpID0gMDsgaSA8PSA5OyArK2kpIHtcbiAgICAgIF9NQVBbaSArIDk2XSA9IGk7XG4gIH1cblxuICAvKipcbiAgICogY3Jvc3MgYnJvd3NlciBhZGQgZXZlbnQgbWV0aG9kXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudHxIVE1MRG9jdW1lbnR9IG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqL1xuICBmdW5jdGlvbiBfYWRkRXZlbnQob2JqZWN0LCB0eXBlLCBjYWxsYmFjaykge1xuICAgICAgaWYgKG9iamVjdC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIG9iamVjdC5hdHRhY2hFdmVudCgnb24nICsgdHlwZSwgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIHRha2VzIHRoZSBldmVudCBhbmQgcmV0dXJucyB0aGUga2V5IGNoYXJhY3RlclxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIF9jaGFyYWN0ZXJGcm9tRXZlbnQoZSkge1xuXG4gICAgICAvLyBmb3Iga2V5cHJlc3MgZXZlbnRzIHdlIHNob3VsZCByZXR1cm4gdGhlIGNoYXJhY3RlciBhcyBpc1xuICAgICAgaWYgKGUudHlwZSA9PSAna2V5cHJlc3MnKSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoZS53aGljaCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGZvciBub24ga2V5cHJlc3MgZXZlbnRzIHRoZSBzcGVjaWFsIG1hcHMgYXJlIG5lZWRlZFxuICAgICAgaWYgKF9NQVBbZS53aGljaF0pIHtcbiAgICAgICAgICByZXR1cm4gX01BUFtlLndoaWNoXTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9LRVlDT0RFX01BUFtlLndoaWNoXSkge1xuICAgICAgICAgIHJldHVybiBfS0VZQ09ERV9NQVBbZS53aGljaF07XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGl0IGlzIG5vdCBpbiB0aGUgc3BlY2lhbCBtYXBcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGUud2hpY2gpLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICAvKipcbiAgICogc2hvdWxkIHdlIHN0b3AgdGhpcyBldmVudCBiZWZvcmUgZmlyaW5nIG9mZiBjYWxsYmFja3NcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gX3N0b3AoZSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQsXG4gICAgICAgICAgdGFnX25hbWUgPSBlbGVtZW50LnRhZ05hbWU7XG5cbiAgICAgIC8vIGlmIHRoZSBlbGVtZW50IGhhcyB0aGUgY2xhc3MgXCJtb3VzZXRyYXBcIiB0aGVuIG5vIG5lZWQgdG8gc3RvcFxuICAgICAgaWYgKCgnICcgKyBlbGVtZW50LmNsYXNzTmFtZSArICcgJykuaW5kZXhPZignIG1vdXNldHJhcCAnKSA+IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBzdG9wIGZvciBpbnB1dCwgc2VsZWN0LCBhbmQgdGV4dGFyZWFcbiAgICAgIHJldHVybiB0YWdfbmFtZSA9PSAnSU5QVVQnIHx8IHRhZ19uYW1lID09ICdTRUxFQ1QnIHx8IHRhZ19uYW1lID09ICdURVhUQVJFQScgfHwgKGVsZW1lbnQuY29udGVudEVkaXRhYmxlICYmIGVsZW1lbnQuY29udGVudEVkaXRhYmxlID09ICd0cnVlJyk7XG4gIH1cblxuICAvKipcbiAgICogY2hlY2tzIGlmIHR3byBhcnJheXMgYXJlIGVxdWFsXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVyczFcbiAgICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzMlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIF9tb2RpZmllcnNNYXRjaChtb2RpZmllcnMxLCBtb2RpZmllcnMyKSB7XG4gICAgICByZXR1cm4gbW9kaWZpZXJzMS5zb3J0KCkuam9pbignLCcpID09PSBtb2RpZmllcnMyLnNvcnQoKS5qb2luKCcsJyk7XG4gIH1cblxuICAvKipcbiAgICogcmVzZXRzIGFsbCBzZXF1ZW5jZSBjb3VudGVycyBleGNlcHQgZm9yIHRoZSBvbmVzIHBhc3NlZCBpblxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZG9fbm90X3Jlc2V0XG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICovXG4gIGZ1bmN0aW9uIF9yZXNldFNlcXVlbmNlcyhkb19ub3RfcmVzZXQpIHtcbiAgICAgIGRvX25vdF9yZXNldCA9IGRvX25vdF9yZXNldCB8fCB7fTtcblxuICAgICAgdmFyIGFjdGl2ZV9zZXF1ZW5jZXMgPSBmYWxzZSxcbiAgICAgICAgICBrZXk7XG5cbiAgICAgIGZvciAoa2V5IGluIF9zZXF1ZW5jZV9sZXZlbHMpIHtcbiAgICAgICAgICBpZiAoZG9fbm90X3Jlc2V0W2tleV0pIHtcbiAgICAgICAgICAgICAgYWN0aXZlX3NlcXVlbmNlcyA9IHRydWU7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfc2VxdWVuY2VfbGV2ZWxzW2tleV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWFjdGl2ZV9zZXF1ZW5jZXMpIHtcbiAgICAgICAgICBfaW5zaWRlX3NlcXVlbmNlID0gZmFsc2U7XG4gICAgICB9XG4gIH1cblxuICAvKipcbiAgICogZmluZHMgYWxsIGNhbGxiYWNrcyB0aGF0IG1hdGNoIGJhc2VkIG9uIHRoZSBrZXljb2RlLCBtb2RpZmllcnMsXG4gICAqIGFuZCBhY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNoYXJhY3RlclxuICAgKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFjdGlvblxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSByZW1vdmUgLSBzaG91bGQgd2UgcmVtb3ZlIGFueSBtYXRjaGVzXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gY29tYmluYXRpb25cbiAgICogQHJldHVybnMge0FycmF5fVxuICAgKi9cbiAgZnVuY3Rpb24gX2dldE1hdGNoZXMoY2hhcmFjdGVyLCBtb2RpZmllcnMsIGFjdGlvbiwgcmVtb3ZlLCBjb21iaW5hdGlvbikge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgbWF0Y2hlcyA9IFtdO1xuXG4gICAgICAvLyBpZiB0aGVyZSBhcmUgbm8gZXZlbnRzIHJlbGF0ZWQgdG8gdGhpcyBrZXljb2RlXG4gICAgICBpZiAoIV9jYWxsYmFja3NbY2hhcmFjdGVyXSkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgYSBtb2RpZmllciBrZXkgaXMgY29taW5nIHVwIG9uIGl0cyBvd24gd2Ugc2hvdWxkIGFsbG93IGl0XG4gICAgICBpZiAoYWN0aW9uID09ICdrZXl1cCcgJiYgX2lzTW9kaWZpZXIoY2hhcmFjdGVyKSkge1xuICAgICAgICAgIG1vZGlmaWVycyA9IFtjaGFyYWN0ZXJdO1xuICAgICAgfVxuXG4gICAgICAvLyBsb29wIHRocm91Z2ggYWxsIGNhbGxiYWNrcyBmb3IgdGhlIGtleSB0aGF0IHdhcyBwcmVzc2VkXG4gICAgICAvLyBhbmQgc2VlIGlmIGFueSBvZiB0aGVtIG1hdGNoXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgX2NhbGxiYWNrc1tjaGFyYWN0ZXJdLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2FsbGJhY2sgPSBfY2FsbGJhY2tzW2NoYXJhY3Rlcl1baV07XG5cbiAgICAgICAgICAvLyBpZiB0aGlzIGlzIGEgc2VxdWVuY2UgYnV0IGl0IGlzIG5vdCBhdCB0aGUgcmlnaHQgbGV2ZWxcbiAgICAgICAgICAvLyB0aGVuIG1vdmUgb250byB0aGUgbmV4dCBtYXRjaFxuICAgICAgICAgIGlmIChjYWxsYmFjay5zZXEgJiYgX3NlcXVlbmNlX2xldmVsc1tjYWxsYmFjay5zZXFdICE9IGNhbGxiYWNrLmxldmVsKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGlmIHRoZSBhY3Rpb24gd2UgYXJlIGxvb2tpbmcgZm9yIGRvZXNuJ3QgbWF0Y2ggdGhlIGFjdGlvbiB3ZSBnb3RcbiAgICAgICAgICAvLyB0aGVuIHdlIHNob3VsZCBrZWVwIGdvaW5nXG4gICAgICAgICAgaWYgKGFjdGlvbiAhPSBjYWxsYmFjay5hY3Rpb24pIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gaWYgdGhpcyBpcyBhIGtleXByZXNzIGV2ZW50IHRoYXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIG9ubHlcbiAgICAgICAgICAvLyBsb29rIGF0IHRoZSBjaGFyYWN0ZXIsIG90aGVyd2lzZSBjaGVjayB0aGUgbW9kaWZpZXJzIGFzXG4gICAgICAgICAgLy8gd2VsbFxuICAgICAgICAgIGlmIChhY3Rpb24gPT0gJ2tleXByZXNzJyB8fCBfbW9kaWZpZXJzTWF0Y2gobW9kaWZpZXJzLCBjYWxsYmFjay5tb2RpZmllcnMpKSB7XG5cbiAgICAgICAgICAgICAgLy8gcmVtb3ZlIGlzIHVzZWQgc28gaWYgeW91IGNoYW5nZSB5b3VyIG1pbmQgYW5kIGNhbGwgYmluZCBhXG4gICAgICAgICAgICAgIC8vIHNlY29uZCB0aW1lIHdpdGggYSBuZXcgZnVuY3Rpb24gdGhlIGZpcnN0IG9uZSBpcyBvdmVyd3JpdHRlblxuICAgICAgICAgICAgICBpZiAocmVtb3ZlICYmIGNhbGxiYWNrLmNvbWJvID09IGNvbWJpbmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICBfY2FsbGJhY2tzW2NoYXJhY3Rlcl0uc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRjaGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIHRha2VzIGEga2V5IGV2ZW50IGFuZCBmaWd1cmVzIG91dCB3aGF0IHRoZSBtb2RpZmllcnMgYXJlXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICogQHJldHVybnMge0FycmF5fVxuICAgKi9cbiAgZnVuY3Rpb24gX2V2ZW50TW9kaWZpZXJzKGUpIHtcbiAgICAgIHZhciBtb2RpZmllcnMgPSBbXTtcblxuICAgICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICBtb2RpZmllcnMucHVzaCgnc2hpZnQnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGUuYWx0S2V5KSB7XG4gICAgICAgICAgbW9kaWZpZXJzLnB1c2goJ2FsdCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZS5jdHJsS2V5KSB7XG4gICAgICAgICAgbW9kaWZpZXJzLnB1c2goJ2N0cmwnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGUubWV0YUtleSkge1xuICAgICAgICAgIG1vZGlmaWVycy5wdXNoKCdtZXRhJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtb2RpZmllcnM7XG4gIH1cblxuICAvKipcbiAgICogYWN0dWFsbHkgY2FsbHMgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAqXG4gICAqIGlmIHlvdXIgY2FsbGJhY2sgZnVuY3Rpb24gcmV0dXJucyBmYWxzZSB0aGlzIHdpbGwgdXNlIHRoZSBqcXVlcnlcbiAgICogY29udmVudGlvbiAtIHByZXZlbnQgZGVmYXVsdCBhbmQgc3RvcCBwcm9wb2dhdGlvbiBvbiB0aGUgZXZlbnRcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqL1xuICBmdW5jdGlvbiBfZmlyZUNhbGxiYWNrKGNhbGxiYWNrLCBlKSB7XG4gICAgICBpZiAoY2FsbGJhY2soZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChlLnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICB9XG4gIH1cblxuICAvKipcbiAgICogaGFuZGxlcyBhIGNoYXJhY3RlciBrZXkgZXZlbnRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNoYXJhY3RlclxuICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICovXG4gIGZ1bmN0aW9uIF9oYW5kbGVDaGFyYWN0ZXIoY2hhcmFjdGVyLCBlKSB7XG5cbiAgICAgIC8vIGlmIHRoaXMgZXZlbnQgc2hvdWxkIG5vdCBoYXBwZW4gc3RvcCBoZXJlXG4gICAgICBpZiAoX3N0b3AoZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjYWxsYmFja3MgPSBfZ2V0TWF0Y2hlcyhjaGFyYWN0ZXIsIF9ldmVudE1vZGlmaWVycyhlKSwgZS50eXBlKSxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGRvX25vdF9yZXNldCA9IHt9LFxuICAgICAgICAgIHByb2Nlc3NlZF9zZXF1ZW5jZV9jYWxsYmFjayA9IGZhbHNlO1xuXG4gICAgICAvLyBsb29wIHRocm91Z2ggbWF0Y2hpbmcgY2FsbGJhY2tzIGZvciB0aGlzIGtleSBldmVudFxuICAgICAgZm9yIChpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7ICsraSkge1xuXG4gICAgICAgICAgLy8gZmlyZSBmb3IgYWxsIHNlcXVlbmNlIGNhbGxiYWNrc1xuICAgICAgICAgIC8vIHRoaXMgaXMgYmVjYXVzZSBpZiBmb3IgZXhhbXBsZSB5b3UgaGF2ZSBtdWx0aXBsZSBzZXF1ZW5jZXNcbiAgICAgICAgICAvLyBib3VuZCBzdWNoIGFzIFwiZyBpXCIgYW5kIFwiZyB0XCIgdGhleSBib3RoIG5lZWQgdG8gZmlyZSB0aGVcbiAgICAgICAgICAvLyBjYWxsYmFjayBmb3IgbWF0Y2hpbmcgZyBjYXVzZSBvdGhlcndpc2UgeW91IGNhbiBvbmx5IGV2ZXJcbiAgICAgICAgICAvLyBtYXRjaCB0aGUgZmlyc3Qgb25lXG4gICAgICAgICAgaWYgKGNhbGxiYWNrc1tpXS5zZXEpIHtcbiAgICAgICAgICAgICAgcHJvY2Vzc2VkX3NlcXVlbmNlX2NhbGxiYWNrID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAvLyBrZWVwIGEgbGlzdCBvZiB3aGljaCBzZXF1ZW5jZXMgd2VyZSBtYXRjaGVzIGZvciBsYXRlclxuICAgICAgICAgICAgICBkb19ub3RfcmVzZXRbY2FsbGJhY2tzW2ldLnNlcV0gPSAxO1xuICAgICAgICAgICAgICBfZmlyZUNhbGxiYWNrKGNhbGxiYWNrc1tpXS5jYWxsYmFjaywgZSk7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGlmIHRoZXJlIHdlcmUgbm8gc2VxdWVuY2UgbWF0Y2hlcyBidXQgd2UgYXJlIHN0aWxsIGhlcmVcbiAgICAgICAgICAvLyB0aGF0IG1lYW5zIHRoaXMgaXMgYSByZWd1bGFyIG1hdGNoIHNvIHdlIHNob3VsZCBmaXJlIHRoYXRcbiAgICAgICAgICBpZiAoIXByb2Nlc3NlZF9zZXF1ZW5jZV9jYWxsYmFjayAmJiAhX2luc2lkZV9zZXF1ZW5jZSkge1xuICAgICAgICAgICAgICBfZmlyZUNhbGxiYWNrKGNhbGxiYWNrc1tpXS5jYWxsYmFjaywgZSk7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBpZiB5b3UgYXJlIGluc2lkZSBvZiBhIHNlcXVlbmNlIGFuZCB0aGUga2V5IHlvdSBhcmUgcHJlc3NpbmdcbiAgICAgIC8vIGlzIG5vdCBhIG1vZGlmaWVyIGtleSB0aGVuIHdlIHNob3VsZCByZXNldCBhbGwgc2VxdWVuY2VzXG4gICAgICAvLyB0aGF0IHdlcmUgbm90IG1hdGNoZWQgYnkgdGhpcyBrZXkgZXZlbnRcbiAgICAgIGlmIChlLnR5cGUgPT0gX2luc2lkZV9zZXF1ZW5jZSAmJiAhX2lzTW9kaWZpZXIoY2hhcmFjdGVyKSkge1xuICAgICAgICAgIF9yZXNldFNlcXVlbmNlcyhkb19ub3RfcmVzZXQpO1xuICAgICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIGhhbmRsZXMgYSBrZXlkb3duIGV2ZW50XG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICogQHJldHVybnMgdm9pZFxuICAgKi9cbiAgZnVuY3Rpb24gX2hhbmRsZUtleShlKSB7XG5cbiAgICAgIC8vIG5vcm1hbGl6ZSBlLndoaWNoIGZvciBrZXkgZXZlbnRzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDI4NTYyNy9qYXZhc2NyaXB0LWtleWNvZGUtdnMtY2hhcmNvZGUtdXR0ZXItY29uZnVzaW9uXG4gICAgICBlLndoaWNoID0gdHlwZW9mIGUud2hpY2ggPT0gXCJudW1iZXJcIiA/IGUud2hpY2ggOiBlLmtleUNvZGU7XG5cbiAgICAgIHZhciBjaGFyYWN0ZXIgPSBfY2hhcmFjdGVyRnJvbUV2ZW50KGUpO1xuXG4gICAgICAvLyBubyBjaGFyYWN0ZXIgZm91bmQgdGhlbiBzdG9wXG4gICAgICBpZiAoIWNoYXJhY3Rlcikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGUudHlwZSA9PSAna2V5dXAnICYmIF9pZ25vcmVfbmV4dF9rZXl1cCA9PSBjaGFyYWN0ZXIpIHtcbiAgICAgICAgICBfaWdub3JlX25leHRfa2V5dXAgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF9oYW5kbGVDaGFyYWN0ZXIoY2hhcmFjdGVyLCBlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBkZXRlcm1pbmVzIGlmIHRoZSBrZXljb2RlIHNwZWNpZmllZCBpcyBhIG1vZGlmaWVyIGtleSBvciBub3RcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIF9pc01vZGlmaWVyKGtleSkge1xuICAgICAgcmV0dXJuIGtleSA9PSAnc2hpZnQnIHx8IGtleSA9PSAnY3RybCcgfHwga2V5ID09ICdhbHQnIHx8IGtleSA9PSAnbWV0YSc7XG4gIH1cblxuICAvKipcbiAgICogY2FsbGVkIHRvIHNldCBhIDEgc2Vjb25kIHRpbWVvdXQgb24gdGhlIHNwZWNpZmllZCBzZXF1ZW5jZVxuICAgKlxuICAgKiB0aGlzIGlzIHNvIGFmdGVyIGVhY2gga2V5IHByZXNzIGluIHRoZSBzZXF1ZW5jZSB5b3UgaGF2ZSAxIHNlY29uZFxuICAgKiB0byBwcmVzcyB0aGUgbmV4dCBrZXkgYmVmb3JlIHlvdSBoYXZlIHRvIHN0YXJ0IG92ZXJcbiAgICpcbiAgICogQHJldHVybnMgdm9pZFxuICAgKi9cbiAgZnVuY3Rpb24gX3Jlc2V0U2VxdWVuY2VUaW1lcigpIHtcbiAgICAgIGNsZWFyVGltZW91dChfcmVzZXRfdGltZXIpO1xuICAgICAgX3Jlc2V0X3RpbWVyID0gc2V0VGltZW91dChfcmVzZXRTZXF1ZW5jZXMsIDEwMDApO1xuICB9XG5cbiAgLyoqXG4gICAqIHJldmVyc2VzIHRoZSBtYXAgbG9va3VwIHNvIHRoYXQgd2UgY2FuIGxvb2sgZm9yIHNwZWNpZmljIGtleXNcbiAgICogdG8gc2VlIHdoYXQgY2FuIGFuZCBjYW4ndCB1c2Uga2V5cHJlc3NcbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgZnVuY3Rpb24gX2dldFJldmVyc2VNYXAoKSB7XG4gICAgICBpZiAoIV9SRVZFUlNFX01BUCkge1xuICAgICAgICAgIF9SRVZFUlNFX01BUCA9IHt9O1xuICAgICAgICAgIGZvciAodmFyIGtleSBpbiBfTUFQKSB7XG5cbiAgICAgICAgICAgICAgLy8gcHVsbCBvdXQgdGhlIG51bWVyaWMga2V5cGFkIGZyb20gaGVyZSBjYXVzZSBrZXlwcmVzcyBzaG91bGRcbiAgICAgICAgICAgICAgLy8gYmUgYWJsZSB0byBkZXRlY3QgdGhlIGtleXMgZnJvbSB0aGUgY2hhcmFjdGVyXG4gICAgICAgICAgICAgIGlmIChrZXkgPiA5NSAmJiBrZXkgPCAxMTIpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKF9NQVAuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgX1JFVkVSU0VfTUFQW19NQVBba2V5XV0gPSBrZXk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gX1JFVkVSU0VfTUFQO1xuICB9XG5cbiAgLyoqXG4gICAqIHBpY2tzIHRoZSBiZXN0IGFjdGlvbiBiYXNlZCBvbiB0aGUga2V5IGNvbWJpbmF0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBjaGFyYWN0ZXIgZm9yIGtleVxuICAgKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnNcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBhY3Rpb24gcGFzc2VkIGluXG4gICAqL1xuICBmdW5jdGlvbiBfcGlja0Jlc3RBY3Rpb24oa2V5LCBtb2RpZmllcnMsIGFjdGlvbikge1xuXG4gICAgICAvLyBpZiBubyBhY3Rpb24gd2FzIHBpY2tlZCBpbiB3ZSBzaG91bGQgdHJ5IHRvIHBpY2sgdGhlIG9uZVxuICAgICAgLy8gdGhhdCB3ZSB0aGluayB3b3VsZCB3b3JrIGJlc3QgZm9yIHRoaXMga2V5XG4gICAgICBpZiAoIWFjdGlvbikge1xuICAgICAgICAgIGFjdGlvbiA9IF9nZXRSZXZlcnNlTWFwKClba2V5XSA/ICdrZXlkb3duJyA6ICdrZXlwcmVzcyc7XG4gICAgICB9XG5cbiAgICAgIC8vIG1vZGlmaWVyIGtleXMgZG9uJ3Qgd29yayBhcyBleHBlY3RlZCB3aXRoIGtleXByZXNzLFxuICAgICAgLy8gc3dpdGNoIHRvIGtleWRvd25cbiAgICAgIGlmIChhY3Rpb24gPT0gJ2tleXByZXNzJyAmJiBtb2RpZmllcnMubGVuZ3RoKSB7XG4gICAgICAgICAgYWN0aW9uID0gJ2tleWRvd24nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWN0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIGJpbmRzIGEga2V5IHNlcXVlbmNlIHRvIGFuIGV2ZW50XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb21ibyAtIGNvbWJvIHNwZWNpZmllZCBpbiBiaW5kIGNhbGxcbiAgICogQHBhcmFtIHtBcnJheX0ga2V5c1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge3N0cmluZz19IGFjdGlvblxuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqL1xuICBmdW5jdGlvbiBfYmluZFNlcXVlbmNlKGNvbWJvLCBrZXlzLCBjYWxsYmFjaywgYWN0aW9uKSB7XG5cbiAgICAgIC8vIHN0YXJ0IG9mZiBieSBhZGRpbmcgYSBzZXF1ZW5jZSBsZXZlbCByZWNvcmQgZm9yIHRoaXMgY29tYmluYXRpb25cbiAgICAgIC8vIGFuZCBzZXR0aW5nIHRoZSBsZXZlbCB0byAwXG4gICAgICBfc2VxdWVuY2VfbGV2ZWxzW2NvbWJvXSA9IDA7XG5cbiAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIGFjdGlvbiBwaWNrIHRoZSBiZXN0IG9uZSBmb3IgdGhlIGZpcnN0IGtleVxuICAgICAgLy8gaW4gdGhlIHNlcXVlbmNlXG4gICAgICBpZiAoIWFjdGlvbikge1xuICAgICAgICAgIGFjdGlvbiA9IF9waWNrQmVzdEFjdGlvbihrZXlzWzBdLCBbXSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogY2FsbGJhY2sgdG8gaW5jcmVhc2UgdGhlIHNlcXVlbmNlIGxldmVsIGZvciB0aGlzIHNlcXVlbmNlIGFuZCByZXNldFxuICAgICAgICogYWxsIG90aGVyIHNlcXVlbmNlcyB0aGF0IHdlcmUgYWN0aXZlXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAgICogQHJldHVybnMgdm9pZFxuICAgICAgICovXG4gICAgICB2YXIgX2luY3JlYXNlU2VxdWVuY2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgIF9pbnNpZGVfc2VxdWVuY2UgPSBhY3Rpb247XG4gICAgICAgICAgICAgICsrX3NlcXVlbmNlX2xldmVsc1tjb21ib107XG4gICAgICAgICAgICAgIF9yZXNldFNlcXVlbmNlVGltZXIoKTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogd3JhcHMgdGhlIHNwZWNpZmllZCBjYWxsYmFjayBpbnNpZGUgb2YgYW5vdGhlciBmdW5jdGlvbiBpbiBvcmRlclxuICAgICAgICAgICAqIHRvIHJlc2V0IGFsbCBzZXF1ZW5jZSBjb3VudGVycyBhcyBzb29uIGFzIHRoaXMgc2VxdWVuY2UgaXMgZG9uZVxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAgICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBfY2FsbGJhY2tBbmRSZXNldCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgX2ZpcmVDYWxsYmFjayhjYWxsYmFjaywgZSk7XG5cbiAgICAgICAgICAgICAgLy8gd2Ugc2hvdWxkIGlnbm9yZSB0aGUgbmV4dCBrZXkgdXAgaWYgdGhlIGFjdGlvbiBpcyBrZXkgZG93blxuICAgICAgICAgICAgICAvLyBvciBrZXlwcmVzcy4gIHRoaXMgaXMgc28gaWYgeW91IGZpbmlzaCBhIHNlcXVlbmNlIGFuZFxuICAgICAgICAgICAgICAvLyByZWxlYXNlIHRoZSBrZXkgdGhlIGZpbmFsIGtleSB3aWxsIG5vdCB0cmlnZ2VyIGEga2V5dXBcbiAgICAgICAgICAgICAgaWYgKGFjdGlvbiAhPT0gJ2tleXVwJykge1xuICAgICAgICAgICAgICAgICAgX2lnbm9yZV9uZXh0X2tleXVwID0gX2NoYXJhY3RlckZyb21FdmVudChlKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIHdlaXJkIHJhY2UgY29uZGl0aW9uIGlmIGEgc2VxdWVuY2UgZW5kcyB3aXRoIHRoZSBrZXlcbiAgICAgICAgICAgICAgLy8gYW5vdGhlciBzZXF1ZW5jZSBiZWdpbnMgd2l0aFxuICAgICAgICAgICAgICBzZXRUaW1lb3V0KF9yZXNldFNlcXVlbmNlcywgMTApO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaTtcblxuICAgICAgLy8gbG9vcCB0aHJvdWdoIGtleXMgb25lIGF0IGEgdGltZSBhbmQgYmluZCB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tcbiAgICAgIC8vIGZ1bmN0aW9uLiAgZm9yIGFueSBrZXkgbGVhZGluZyB1cCB0byB0aGUgZmluYWwgb25lIGl0IHNob3VsZFxuICAgICAgLy8gaW5jcmVhc2UgdGhlIHNlcXVlbmNlLiBhZnRlciB0aGUgZmluYWwsIGl0IHNob3VsZCByZXNldCBhbGwgc2VxdWVuY2VzXG4gICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIF9iaW5kU2luZ2xlKGtleXNbaV0sIGkgPCBrZXlzLmxlbmd0aCAtIDEgPyBfaW5jcmVhc2VTZXF1ZW5jZSA6IF9jYWxsYmFja0FuZFJlc2V0LCBhY3Rpb24sIGNvbWJvLCBpKTtcbiAgICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBiaW5kcyBhIHNpbmdsZSBrZXlib2FyZCBjb21iaW5hdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29tYmluYXRpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBhY3Rpb25cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBzZXF1ZW5jZV9uYW1lIC0gbmFtZSBvZiBzZXF1ZW5jZSBpZiBwYXJ0IG9mIHNlcXVlbmNlXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbGV2ZWwgLSB3aGF0IHBhcnQgb2YgdGhlIHNlcXVlbmNlIHRoZSBjb21tYW5kIGlzXG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICovXG4gIGZ1bmN0aW9uIF9iaW5kU2luZ2xlKGNvbWJpbmF0aW9uLCBjYWxsYmFjaywgYWN0aW9uLCBzZXF1ZW5jZV9uYW1lLCBsZXZlbCkge1xuXG4gICAgICAvLyBtYWtlIHN1cmUgbXVsdGlwbGUgc3BhY2VzIGluIGEgcm93IGJlY29tZSBhIHNpbmdsZSBzcGFjZVxuICAgICAgY29tYmluYXRpb24gPSBjb21iaW5hdGlvbi5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG5cbiAgICAgIHZhciBzZXF1ZW5jZSA9IGNvbWJpbmF0aW9uLnNwbGl0KCcgJyksXG4gICAgICAgICAgaSxcbiAgICAgICAgICBrZXksXG4gICAgICAgICAga2V5cyxcbiAgICAgICAgICBtb2RpZmllcnMgPSBbXTtcblxuICAgICAgLy8gaWYgdGhpcyBwYXR0ZXJuIGlzIGEgc2VxdWVuY2Ugb2Yga2V5cyB0aGVuIHJ1biB0aHJvdWdoIHRoaXMgbWV0aG9kXG4gICAgICAvLyB0byByZXByb2Nlc3MgZWFjaCBwYXR0ZXJuIG9uZSBrZXkgYXQgYSB0aW1lXG4gICAgICBpZiAoc2VxdWVuY2UubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHJldHVybiBfYmluZFNlcXVlbmNlKGNvbWJpbmF0aW9uLCBzZXF1ZW5jZSwgY2FsbGJhY2ssIGFjdGlvbik7XG4gICAgICB9XG5cbiAgICAgIC8vIHRha2UgdGhlIGtleXMgZnJvbSB0aGlzIHBhdHRlcm4gYW5kIGZpZ3VyZSBvdXQgd2hhdCB0aGUgYWN0dWFsXG4gICAgICAvLyBwYXR0ZXJuIGlzIGFsbCBhYm91dFxuICAgICAga2V5cyA9IGNvbWJpbmF0aW9uID09PSAnKycgPyBbJysnXSA6IGNvbWJpbmF0aW9uLnNwbGl0KCcrJyk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcblxuICAgICAgICAgIC8vIG5vcm1hbGl6ZSBrZXkgbmFtZXNcbiAgICAgICAgICBpZiAoX1NQRUNJQUxfQUxJQVNFU1trZXldKSB7XG4gICAgICAgICAgICAgIGtleSA9IF9TUEVDSUFMX0FMSUFTRVNba2V5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBpZiB0aGlzIGlzIG5vdCBhIGtleXByZXNzIGV2ZW50IHRoZW4gd2Ugc2hvdWxkXG4gICAgICAgICAgLy8gYmUgc21hcnQgYWJvdXQgdXNpbmcgc2hpZnQga2V5c1xuICAgICAgICAgIC8vIHRoaXMgd2lsbCBvbmx5IHdvcmsgZm9yIFVTIGtleWJvYXJkcyBob3dldmVyXG4gICAgICAgICAgaWYgKGFjdGlvbiAmJiBhY3Rpb24gIT0gJ2tleXByZXNzJyAmJiBfU0hJRlRfTUFQW2tleV0pIHtcbiAgICAgICAgICAgICAga2V5ID0gX1NISUZUX01BUFtrZXldO1xuICAgICAgICAgICAgICBtb2RpZmllcnMucHVzaCgnc2hpZnQnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBpZiB0aGlzIGtleSBpcyBhIG1vZGlmaWVyIHRoZW4gYWRkIGl0IHRvIHRoZSBsaXN0IG9mIG1vZGlmaWVyc1xuICAgICAgICAgIGlmIChfaXNNb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgICAgIG1vZGlmaWVycy5wdXNoKGtleSk7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBkZXBlbmRpbmcgb24gd2hhdCB0aGUga2V5IGNvbWJpbmF0aW9uIGlzXG4gICAgICAvLyB3ZSB3aWxsIHRyeSB0byBwaWNrIHRoZSBiZXN0IGV2ZW50IGZvciBpdFxuICAgICAgYWN0aW9uID0gX3BpY2tCZXN0QWN0aW9uKGtleSwgbW9kaWZpZXJzLCBhY3Rpb24pO1xuXG4gICAgICAvLyBtYWtlIHN1cmUgdG8gaW5pdGlhbGl6ZSBhcnJheSBpZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lXG4gICAgICAvLyBhIGNhbGxiYWNrIGlzIGFkZGVkIGZvciB0aGlzIGtleVxuICAgICAgaWYgKCFfY2FsbGJhY2tzW2tleV0pIHtcbiAgICAgICAgICBfY2FsbGJhY2tzW2tleV0gPSBbXTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVtb3ZlIGFuIGV4aXN0aW5nIG1hdGNoIGlmIHRoZXJlIGlzIG9uZVxuICAgICAgX2dldE1hdGNoZXMoa2V5LCBtb2RpZmllcnMsIGFjdGlvbiwgIXNlcXVlbmNlX25hbWUsIGNvbWJpbmF0aW9uKTtcblxuICAgICAgLy8gYWRkIHRoaXMgY2FsbCBiYWNrIHRvIHRoZSBhcnJheVxuICAgICAgLy8gaWYgaXQgaXMgYSBzZXF1ZW5jZSBwdXQgaXQgYXQgdGhlIGJlZ2lubmluZ1xuICAgICAgLy8gaWYgbm90IHB1dCBpdCBhdCB0aGUgZW5kXG4gICAgICAvL1xuICAgICAgLy8gdGhpcyBpcyBpbXBvcnRhbnQgYmVjYXVzZSB0aGUgd2F5IHRoZXNlIGFyZSBwcm9jZXNzZWQgZXhwZWN0c1xuICAgICAgLy8gdGhlIHNlcXVlbmNlIG9uZXMgdG8gY29tZSBmaXJzdFxuICAgICAgX2NhbGxiYWNrc1trZXldW3NlcXVlbmNlX25hbWUgPyAndW5zaGlmdCcgOiAncHVzaCddKHtcbiAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgICAgbW9kaWZpZXJzOiBtb2RpZmllcnMsXG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgc2VxOiBzZXF1ZW5jZV9uYW1lLFxuICAgICAgICAgIGxldmVsOiBsZXZlbCxcbiAgICAgICAgICBjb21ibzogY29tYmluYXRpb25cbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIGJpbmRzIG11bHRpcGxlIGNvbWJpbmF0aW9ucyB0byB0aGUgc2FtZSBjYWxsYmFja1xuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBjb21iaW5hdGlvbnNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogQHBhcmFtIHtzdHJpbmd8dW5kZWZpbmVkfSBhY3Rpb25cbiAgICogQHJldHVybnMgdm9pZFxuICAgKi9cbiAgZnVuY3Rpb24gX2JpbmRNdWx0aXBsZShjb21iaW5hdGlvbnMsIGNhbGxiYWNrLCBhY3Rpb24pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tYmluYXRpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgX2JpbmRTaW5nbGUoY29tYmluYXRpb25zW2ldLCBjYWxsYmFjaywgYWN0aW9uKTtcbiAgICAgIH1cbiAgfVxuXG4gIC8vIHN0YXJ0IVxuICBfYWRkRXZlbnQoZG9jdW1lbnQsICdrZXlwcmVzcycsIF9oYW5kbGVLZXkpO1xuICBfYWRkRXZlbnQoZG9jdW1lbnQsICdrZXlkb3duJywgX2hhbmRsZUtleSk7XG4gIF9hZGRFdmVudChkb2N1bWVudCwgJ2tleXVwJywgX2hhbmRsZUtleSk7XG5cbiAgdmFyIG1vdXNldHJhcCA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBiaW5kcyBhbiBldmVudCB0byBtb3VzZXRyYXBcbiAgICAgICAqXG4gICAgICAgKiBjYW4gYmUgYSBzaW5nbGUga2V5LCBhIGNvbWJpbmF0aW9uIG9mIGtleXMgc2VwYXJhdGVkIHdpdGggKyxcbiAgICAgICAqIGEgY29tbWEgc2VwYXJhdGVkIGxpc3Qgb2Yga2V5cywgYW4gYXJyYXkgb2Yga2V5cywgb3JcbiAgICAgICAqIGEgc2VxdWVuY2Ugb2Yga2V5cyBzZXBhcmF0ZWQgYnkgc3BhY2VzXG4gICAgICAgKlxuICAgICAgICogYmUgc3VyZSB0byBsaXN0IHRoZSBtb2RpZmllciBrZXlzIGZpcnN0IHRvIG1ha2Ugc3VyZSB0aGF0IHRoZVxuICAgICAgICogY29ycmVjdCBrZXkgZW5kcyB1cCBnZXR0aW5nIGJvdW5kICh0aGUgbGFzdCBrZXkgaW4gdGhlIHBhdHRlcm4pXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8QXJyYXl9IGtleXNcbiAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IGFjdGlvbiAtICdrZXlwcmVzcycsICdrZXlkb3duJywgb3IgJ2tleXVwJ1xuICAgICAgICogQHJldHVybnMgdm9pZFxuICAgICAgICovXG4gICAgICBiaW5kOiBmdW5jdGlvbihrZXlzLCBjYWxsYmFjaywgYWN0aW9uKSB7XG4gICAgICAgICAgX2JpbmRNdWx0aXBsZShrZXlzIGluc3RhbmNlb2YgQXJyYXkgPyBrZXlzIDogW2tleXNdLCBjYWxsYmFjaywgYWN0aW9uKTtcbiAgICAgICAgICBfZGlyZWN0X21hcFtrZXlzICsgJzonICsgYWN0aW9uXSA9IGNhbGxiYWNrO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiB1bmJpbmRzIGFuIGV2ZW50IHRvIG1vdXNldHJhcFxuICAgICAgICpcbiAgICAgICAqIHRoZSB1bmJpbmRpbmcgc2V0cyB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gb2YgdGhlIHNwZWNpZmllZCBrZXkgY29tYm9cbiAgICAgICAqIHRvIGFuIGVtcHR5IGZ1bmN0aW9uIGFuZCBkZWxldGVzIHRoZSBjb3JyZXNwb25kaW5nIGtleSBpbiB0aGVcbiAgICAgICAqIF9kaXJlY3RfbWFwIGRpY3QuXG4gICAgICAgKlxuICAgICAgICogdGhlIGtleWNvbWJvK2FjdGlvbiBoYXMgdG8gYmUgZXhhY3RseSB0aGUgc2FtZSBhc1xuICAgICAgICogaXQgd2FzIGRlZmluZWQgaW4gdGhlIGJpbmQgbWV0aG9kXG4gICAgICAgKlxuICAgICAgICogVE9ETzogYWN0dWFsbHkgcmVtb3ZlIHRoaXMgZnJvbSB0aGUgX2NhbGxiYWNrcyBkaWN0aW9uYXJ5IGluc3RlYWRcbiAgICAgICAqIG9mIGJpbmRpbmcgYW4gZW1wdHkgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xBcnJheX0ga2V5c1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGFjdGlvblxuICAgICAgICogQHJldHVybnMgdm9pZFxuICAgICAgICovXG4gICAgICB1bmJpbmQ6IGZ1bmN0aW9uKGtleXMsIGFjdGlvbikge1xuICAgICAgICAgIGlmIChfZGlyZWN0X21hcFtrZXlzICsgJzonICsgYWN0aW9uXSkge1xuICAgICAgICAgICAgICBkZWxldGUgX2RpcmVjdF9tYXBba2V5cyArICc6JyArIGFjdGlvbl07XG4gICAgICAgICAgICAgIHRoaXMuYmluZChrZXlzLCBmdW5jdGlvbigpIHt9LCBhY3Rpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogdHJpZ2dlcnMgYW4gZXZlbnQgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIGJvdW5kXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleXNcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gYWN0aW9uXG4gICAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICAgKi9cbiAgICAgIHRyaWdnZXI6IGZ1bmN0aW9uKGtleXMsIGFjdGlvbikge1xuICAgICAgICAgIF9kaXJlY3RfbWFwW2tleXMgKyAnOicgKyBhY3Rpb25dKCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIHJlc2V0cyB0aGUgbGlicmFyeSBiYWNrIHRvIGl0cyBpbml0aWFsIHN0YXRlLiAgdGhpcyBpcyB1c2VmdWxcbiAgICAgICAqIGlmIHlvdSB3YW50IHRvIGNsZWFyIG91dCB0aGUgY3VycmVudCBrZXlib2FyZCBzaG9ydGN1dHMgYW5kIGJpbmRcbiAgICAgICAqIG5ldyBvbmVzIC0gZm9yIGV4YW1wbGUgaWYgeW91IHN3aXRjaCB0byBhbm90aGVyIHBhZ2VcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICAgKi9cbiAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfY2FsbGJhY2tzID0ge307XG4gICAgICAgICAgX2RpcmVjdF9tYXAgPSB7fTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBtb3VzZXRyYXA7XG5cbiIsImhpc3QgICAgICAgICA9IHdpbmRvdy5oaXN0b3J5XG5zbGlkZV9wcmVmaXggPSAnI3NsaWRlLSdcbkV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxudXRpbCA9IHJlcXVpcmUgJ3V0aWwnXG5cbmFwaSA9IGRvIC0+XG5cbiAgZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXJcblxuICAjIG9fT1xuICBvbkV2ZW50ID0gKGFyZ3MuLi4pIC0+IGVtaXR0ZXIub24uYXBwbHkgZW1pdHRlciwgYXJnc1xuXG4gIGN1cnJlbnQgID0gMVxuICBtYXggICAgICA9IDFcbiAgJHNsaWRlUGFjayA9IHt9XG5cbiAgaW5pdCA9IChvcHRpb25zKSAtPlxuXG4gICAgJHNsaWRlUGFjayA9IG9wdGlvbnMuc2xpZGVQYWNrXG5cbiAgICBtYXggPSAkc2xpZGVQYWNrLmZpbmQoJ3NlY3Rpb24nKS5sZW5ndGhcblxuICAgIHNldHVwUGFnZXIoKVxuICAgIGluc3RhbGxOYXZpZ2F0aW9uSGFuZGxlcigpXG5cbiAgICBzaG93IGN1cnJlbnRcblxuICBzZXR1cFBhZ2VyID0gLT5cbiAgICBpZiBzdGF0ZSA9IGhpc3Quc3RhdGVcbiAgICAgIGN1cnJlbnQgPSBzdGF0ZS5jdXJyZW50XG5cbiAgcHJldiA9IC0+XG4gICAgY3VycmVudCAtPSAxXG4gICAgY3VycmVudCA9IG1heCBpZiBjdXJyZW50IDwgMVxuICAgIG5hdmlnYXRlKClcblxuICBuZXh0ID0gLT5cbiAgICBjdXJyZW50ICs9IDFcbiAgICBjdXJyZW50ID0gMSBpZiBjdXJyZW50ID4gbWF4XG4gICAgbmF2aWdhdGUoKVxuXG4gIHNob3cgPSAodG8pIC0+XG4gICAgJHNsaWRlUGFjay5maW5kKCdzZWN0aW9uLmFjdGl2ZScpLnJlbW92ZUNsYXNzICdhY3RpdmUnXG4gICAgJHNsaWRlUGFjay5maW5kKCdzZWN0aW9uJykuZXEodG8gLSAxKS5hZGRDbGFzcyAnYWN0aXZlJ1xuXG4gIG5hdmlnYXRlID0gLT5cbiAgICBzaG93IGN1cnJlbnRcbiAgICBlbWl0dGVyLmVtaXQoJ25hdmlnYXRlJylcbiAgICBoaXN0LnB1c2hTdGF0ZSBjdXJyZW50IDogY3VycmVudCwgXCJTbGlkZSAje2N1cnJlbnR9IC8gI3ttYXh9XCIsIFwiI3tzbGlkZV9wcmVmaXh9I3tjdXJyZW50fVwiXG5cbiAgaGFuZGxlTmF2aWdhdGlvbiA9IChldmVudCkgLT5cbiAgICBpZiBldmVudC5zdGF0ZVxuICAgICAgIyBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlXG4gICAgICBzaG93IGV2ZW50LnN0YXRlLmN1cnJlbnRcbiAgICBlbHNlXG4gICAgICAjIHBhZ2UgbG9hZFxuICAgICAgY3VycmVudCA9IChOdW1iZXIpIHdpbmRvdy5sb2NhdGlvbi5oYXNoLnJlcGxhY2Uoc2xpZGVfcHJlZml4LCcnKVxuICAgICAgc2hvdyhjdXJyZW50KSBpZiBjdXJyZW50XG5cbiAgaW5zdGFsbE5hdmlnYXRpb25IYW5kbGVyID0gLT5cbiAgICB3aW5kb3cub25wb3BzdGF0ZSA9IGhhbmRsZU5hdmlnYXRpb25cblxuICBzdGF0dXMgPSAtPlxuICAgIHRvdGFsIDogbWF4XG4gICAgY3VycmVudCA6IGN1cnJlbnRcblxuICBzdGF0dXMgOiBzdGF0dXNcbiAgaW5pdCA6IGluaXRcbiAgcHJldiA6IHByZXZcbiAgbmV4dCA6IG5leHRcbiAgb24gOiBvbkV2ZW50XG5cbm1vZHVsZS5leHBvcnRzID0gYXBpXG4iLCJhcGkgPSByZXF1aXJlICcuL3NsaWRlLXBhY2stYXBpJ1xubW91c2V0cmFwID0gcmVxdWlyZSAnbW91c2V0cmFwJ1xuJCA9IHJlcXVpcmUgJ3plcHRvanMnXG5cblxuIyBrZXlib2FyZCBuYXZpZ2F0aW9uXG5tb3VzZXRyYXAuYmluZCBbJ2xlZnQnLCAndXAnLCAnaycsICdoJywgJ3BhZ2V1cCddLCBhcGkucHJldlxubW91c2V0cmFwLmJpbmQgWydyaWdodCcsICdkb3duJywgJ2onLCAnbCcsICdwYWdlZG93biddLCBhcGkubmV4dFxuXG4jIG1vdXNlL3RvdWNoIG5hdmlnYXRpb25cbm5hdiA9ICQoJzxuYXY+PGE+4oaQPC9hPjxhPuKGkjwvYT48L25hdj4nKVxuJCgnYm9keScpLmFwcGVuZCBuYXZcblxuJChkb2N1bWVudCkub24gJ2NsaWNrJywgJ25hdiBhOmZpcnN0LWNoaWxkJywgKGUpIC0+XG4gIGFwaS5wcmV2KClcblxuJChkb2N1bWVudCkub24gJ2NsaWNrJywgJ25hdiBhOmxhc3QtY2hpbGQnLCAoZSkgLT5cbiAgYXBpLm5leHQoKVxuXG4kKGRvY3VtZW50KS5vbiAnc3dpcGVMZWZ0JywgLT5cbiAgYXBpLm5leHQoKVxuXG4kKGRvY3VtZW50KS5vbiAnc3dpcGVSaWdodCcsIC0+XG4gIGFwaS5wcmV2KClcbiIsIm1hcmtkb3duID0gcmVxdWlyZSgnbWFya2VkJylcblxuaXNOZXdTbGlkZU1hcmsgPSAobm9kZSkgLT5cbiAgbm9kZSAmJiBub2RlLnR5cGUgPT0gXCJwYXJhZ3JhcGhcIiAmJiBub2RlLnRleHQuaW5kZXhPZignLS0nKSA9PSAwXG5cbmdldFNsaWRlQ2xhc3MgPSAobm9kZSkgLT5cbiAgbm9kZS50ZXh0LnN1YnN0ciAzXG5cbmRvQ2hvcCA9IChzbGlkZXMsIHRva2VucykgLT5cbiAgcmV0dXJuIHNsaWRlcyBpZiB0b2tlbnMubGVuZ3RoID09IDBcblxuICBzbGlkZSA9IFtdXG4gIHNsaWRlLmxpbmtzID0ge30gIyBUT0RPIFdURiE/XG5cbiAgbm9kZSA9IHRva2Vucy5zaGlmdCgpXG4gIGlmIGlzTmV3U2xpZGVNYXJrKG5vZGUpXG4gICAgc2xpZGUuc2xpZGVDbGFzcyA9IGdldFNsaWRlQ2xhc3Mobm9kZSlcblxuICB3aGlsZSBub2RlID0gdG9rZW5zLnNoaWZ0KClcbiAgICBpZiBpc05ld1NsaWRlTWFyayhub2RlKVxuICAgICAgdG9rZW5zLnVuc2hpZnQobm9kZSlcbiAgICAgIGJyZWFrXG4gICAgZWxzZVxuICAgICAgc2xpZGUucHVzaCBub2RlXG5cbiAgc2xpZGVzLnB1c2ggc2xpZGVcbiAgZG9DaG9wIHNsaWRlcywgdG9rZW5zXG5cbmNob3AgPSAodG9rZW5zKSAtPlxuICBkb0Nob3AgW10sIHRva2Vuc1xuXG5zbGlkZXIgPSAobWQpIC0+XG4gIHRva2VucyA9IG1hcmtkb3duLmxleGVyKG1kKVxuICBjaG9wIHRva2Vuc1xuXG5nZW5lcmF0ZVNsaWRlID0gKHNsaWRlKSAtPlxuICBjc3NDbGFzcyA6IHNsaWRlLnNsaWRlQ2xhc3NcbiAgaHRtbCA6IG1hcmtkb3duLnBhcnNlciBzbGlkZVxuXG5zbGlkZVBhY2tQcm9jZXNzb3IgPSBkbyAtPlxuXG4gIHByb2Nlc3MgPSAobWQpIC0+XG4gICAgc2xpZGVzID0gc2xpZGVyIG1kXG5cbiAgICAoZ2VuZXJhdGVTbGlkZShzbGlkZSkgZm9yIHNsaWRlIGluIHNsaWRlcylcblxuXG4gIHByb2Nlc3MgOiBwcm9jZXNzXG5cbm1vZHVsZS5leHBvcnRzID0gc2xpZGVQYWNrUHJvY2Vzc29yXG4iLCJhcGkgPSByZXF1aXJlICcuL3NsaWRlLXBhY2stYXBpJ1xuJCA9IHJlcXVpcmUgJ3plcHRvanMnXG5cbiQgLT5cblxuICBwcm9ncmVzcyA9ICQoJzxwcm9ncmVzcz48L3Byb2dyZXNzPicpXG5cbiAgdXBkYXRlUHJvZ3Jlc3MgPSAtPlxuICAgIHN0YXR1cyA9IGFwaS5zdGF0dXMoKVxuICAgIHByb2dyZXNzLmF0dHJcbiAgICAgIG1heCA6IHN0YXR1cy50b3RhbFxuICAgICAgdmFsdWUgOiBzdGF0dXMuY3VycmVudFxuXG4gIHVwZGF0ZVByb2dyZXNzKClcblxuICBhcGkub24gJ25hdmlnYXRlJywgdXBkYXRlUHJvZ3Jlc3NcblxuICAkKCdib2R5JykuYXBwZW5kIHByb2dyZXNzXG4iXX0=
